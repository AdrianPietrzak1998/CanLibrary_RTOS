
767_RTOS_CAN.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000001f8  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00008778  08000200  08000200  00010200  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000120  08008978  08008978  00018978  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08008a98  08008a98  00020074  2**0
                  CONTENTS
  4 .ARM          00000008  08008a98  08008a98  00018a98  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  08008aa0  08008aa0  00020074  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08008aa0  08008aa0  00018aa0  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  08008aa4  08008aa4  00018aa4  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000074  20000000  08008aa8  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          0000b5a0  20000074  08008b1c  00020074  2**2
                  ALLOC
 10 ._user_heap_stack 00000c04  2000b614  08008b1c  0002b614  2**0
                  ALLOC
 11 .ARM.attributes 0000002e  00000000  00000000  00020074  2**0
                  CONTENTS, READONLY
 12 .comment      00000043  00000000  00000000  000200a2  2**0
                  CONTENTS, READONLY
 13 .debug_info   0001f772  00000000  00000000  000200e5  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_abbrev 0000491d  00000000  00000000  0003f857  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_aranges 00001868  00000000  00000000  00044178  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_rnglists 000012da  00000000  00000000  000459e0  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_macro  0002b916  00000000  00000000  00046cba  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_line   0001f61a  00000000  00000000  000725d0  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .debug_str    00109142  00000000  00000000  00091bea  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 20 .debug_frame  00006754  00000000  00000000  0019ad2c  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_line_str 00000062  00000000  00000000  001a1480  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

08000200 <__do_global_dtors_aux>:
 8000200:	b510      	push	{r4, lr}
 8000202:	4c05      	ldr	r4, [pc, #20]	; (8000218 <__do_global_dtors_aux+0x18>)
 8000204:	7823      	ldrb	r3, [r4, #0]
 8000206:	b933      	cbnz	r3, 8000216 <__do_global_dtors_aux+0x16>
 8000208:	4b04      	ldr	r3, [pc, #16]	; (800021c <__do_global_dtors_aux+0x1c>)
 800020a:	b113      	cbz	r3, 8000212 <__do_global_dtors_aux+0x12>
 800020c:	4804      	ldr	r0, [pc, #16]	; (8000220 <__do_global_dtors_aux+0x20>)
 800020e:	f3af 8000 	nop.w
 8000212:	2301      	movs	r3, #1
 8000214:	7023      	strb	r3, [r4, #0]
 8000216:	bd10      	pop	{r4, pc}
 8000218:	20000074 	.word	0x20000074
 800021c:	00000000 	.word	0x00000000
 8000220:	08008960 	.word	0x08008960

08000224 <frame_dummy>:
 8000224:	b508      	push	{r3, lr}
 8000226:	4b03      	ldr	r3, [pc, #12]	; (8000234 <frame_dummy+0x10>)
 8000228:	b11b      	cbz	r3, 8000232 <frame_dummy+0xe>
 800022a:	4903      	ldr	r1, [pc, #12]	; (8000238 <frame_dummy+0x14>)
 800022c:	4803      	ldr	r0, [pc, #12]	; (800023c <frame_dummy+0x18>)
 800022e:	f3af 8000 	nop.w
 8000232:	bd08      	pop	{r3, pc}
 8000234:	00000000 	.word	0x00000000
 8000238:	20000078 	.word	0x20000078
 800023c:	08008960 	.word	0x08008960

08000240 <__aeabi_uldivmod>:
 8000240:	b953      	cbnz	r3, 8000258 <__aeabi_uldivmod+0x18>
 8000242:	b94a      	cbnz	r2, 8000258 <__aeabi_uldivmod+0x18>
 8000244:	2900      	cmp	r1, #0
 8000246:	bf08      	it	eq
 8000248:	2800      	cmpeq	r0, #0
 800024a:	bf1c      	itt	ne
 800024c:	f04f 31ff 	movne.w	r1, #4294967295
 8000250:	f04f 30ff 	movne.w	r0, #4294967295
 8000254:	f000 b970 	b.w	8000538 <__aeabi_idiv0>
 8000258:	f1ad 0c08 	sub.w	ip, sp, #8
 800025c:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8000260:	f000 f806 	bl	8000270 <__udivmoddi4>
 8000264:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000268:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 800026c:	b004      	add	sp, #16
 800026e:	4770      	bx	lr

08000270 <__udivmoddi4>:
 8000270:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8000274:	9e08      	ldr	r6, [sp, #32]
 8000276:	460d      	mov	r5, r1
 8000278:	4604      	mov	r4, r0
 800027a:	460f      	mov	r7, r1
 800027c:	2b00      	cmp	r3, #0
 800027e:	d14a      	bne.n	8000316 <__udivmoddi4+0xa6>
 8000280:	428a      	cmp	r2, r1
 8000282:	4694      	mov	ip, r2
 8000284:	d965      	bls.n	8000352 <__udivmoddi4+0xe2>
 8000286:	fab2 f382 	clz	r3, r2
 800028a:	b143      	cbz	r3, 800029e <__udivmoddi4+0x2e>
 800028c:	fa02 fc03 	lsl.w	ip, r2, r3
 8000290:	f1c3 0220 	rsb	r2, r3, #32
 8000294:	409f      	lsls	r7, r3
 8000296:	fa20 f202 	lsr.w	r2, r0, r2
 800029a:	4317      	orrs	r7, r2
 800029c:	409c      	lsls	r4, r3
 800029e:	ea4f 4e1c 	mov.w	lr, ip, lsr #16
 80002a2:	fa1f f58c 	uxth.w	r5, ip
 80002a6:	fbb7 f1fe 	udiv	r1, r7, lr
 80002aa:	0c22      	lsrs	r2, r4, #16
 80002ac:	fb0e 7711 	mls	r7, lr, r1, r7
 80002b0:	ea42 4207 	orr.w	r2, r2, r7, lsl #16
 80002b4:	fb01 f005 	mul.w	r0, r1, r5
 80002b8:	4290      	cmp	r0, r2
 80002ba:	d90a      	bls.n	80002d2 <__udivmoddi4+0x62>
 80002bc:	eb1c 0202 	adds.w	r2, ip, r2
 80002c0:	f101 37ff 	add.w	r7, r1, #4294967295
 80002c4:	f080 811c 	bcs.w	8000500 <__udivmoddi4+0x290>
 80002c8:	4290      	cmp	r0, r2
 80002ca:	f240 8119 	bls.w	8000500 <__udivmoddi4+0x290>
 80002ce:	3902      	subs	r1, #2
 80002d0:	4462      	add	r2, ip
 80002d2:	1a12      	subs	r2, r2, r0
 80002d4:	b2a4      	uxth	r4, r4
 80002d6:	fbb2 f0fe 	udiv	r0, r2, lr
 80002da:	fb0e 2210 	mls	r2, lr, r0, r2
 80002de:	ea44 4402 	orr.w	r4, r4, r2, lsl #16
 80002e2:	fb00 f505 	mul.w	r5, r0, r5
 80002e6:	42a5      	cmp	r5, r4
 80002e8:	d90a      	bls.n	8000300 <__udivmoddi4+0x90>
 80002ea:	eb1c 0404 	adds.w	r4, ip, r4
 80002ee:	f100 32ff 	add.w	r2, r0, #4294967295
 80002f2:	f080 8107 	bcs.w	8000504 <__udivmoddi4+0x294>
 80002f6:	42a5      	cmp	r5, r4
 80002f8:	f240 8104 	bls.w	8000504 <__udivmoddi4+0x294>
 80002fc:	4464      	add	r4, ip
 80002fe:	3802      	subs	r0, #2
 8000300:	ea40 4001 	orr.w	r0, r0, r1, lsl #16
 8000304:	1b64      	subs	r4, r4, r5
 8000306:	2100      	movs	r1, #0
 8000308:	b11e      	cbz	r6, 8000312 <__udivmoddi4+0xa2>
 800030a:	40dc      	lsrs	r4, r3
 800030c:	2300      	movs	r3, #0
 800030e:	e9c6 4300 	strd	r4, r3, [r6]
 8000312:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000316:	428b      	cmp	r3, r1
 8000318:	d908      	bls.n	800032c <__udivmoddi4+0xbc>
 800031a:	2e00      	cmp	r6, #0
 800031c:	f000 80ed 	beq.w	80004fa <__udivmoddi4+0x28a>
 8000320:	2100      	movs	r1, #0
 8000322:	e9c6 0500 	strd	r0, r5, [r6]
 8000326:	4608      	mov	r0, r1
 8000328:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800032c:	fab3 f183 	clz	r1, r3
 8000330:	2900      	cmp	r1, #0
 8000332:	d149      	bne.n	80003c8 <__udivmoddi4+0x158>
 8000334:	42ab      	cmp	r3, r5
 8000336:	d302      	bcc.n	800033e <__udivmoddi4+0xce>
 8000338:	4282      	cmp	r2, r0
 800033a:	f200 80f8 	bhi.w	800052e <__udivmoddi4+0x2be>
 800033e:	1a84      	subs	r4, r0, r2
 8000340:	eb65 0203 	sbc.w	r2, r5, r3
 8000344:	2001      	movs	r0, #1
 8000346:	4617      	mov	r7, r2
 8000348:	2e00      	cmp	r6, #0
 800034a:	d0e2      	beq.n	8000312 <__udivmoddi4+0xa2>
 800034c:	e9c6 4700 	strd	r4, r7, [r6]
 8000350:	e7df      	b.n	8000312 <__udivmoddi4+0xa2>
 8000352:	b902      	cbnz	r2, 8000356 <__udivmoddi4+0xe6>
 8000354:	deff      	udf	#255	; 0xff
 8000356:	fab2 f382 	clz	r3, r2
 800035a:	2b00      	cmp	r3, #0
 800035c:	f040 8090 	bne.w	8000480 <__udivmoddi4+0x210>
 8000360:	1a8a      	subs	r2, r1, r2
 8000362:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8000366:	fa1f fe8c 	uxth.w	lr, ip
 800036a:	2101      	movs	r1, #1
 800036c:	fbb2 f5f7 	udiv	r5, r2, r7
 8000370:	fb07 2015 	mls	r0, r7, r5, r2
 8000374:	0c22      	lsrs	r2, r4, #16
 8000376:	ea42 4200 	orr.w	r2, r2, r0, lsl #16
 800037a:	fb0e f005 	mul.w	r0, lr, r5
 800037e:	4290      	cmp	r0, r2
 8000380:	d908      	bls.n	8000394 <__udivmoddi4+0x124>
 8000382:	eb1c 0202 	adds.w	r2, ip, r2
 8000386:	f105 38ff 	add.w	r8, r5, #4294967295
 800038a:	d202      	bcs.n	8000392 <__udivmoddi4+0x122>
 800038c:	4290      	cmp	r0, r2
 800038e:	f200 80cb 	bhi.w	8000528 <__udivmoddi4+0x2b8>
 8000392:	4645      	mov	r5, r8
 8000394:	1a12      	subs	r2, r2, r0
 8000396:	b2a4      	uxth	r4, r4
 8000398:	fbb2 f0f7 	udiv	r0, r2, r7
 800039c:	fb07 2210 	mls	r2, r7, r0, r2
 80003a0:	ea44 4402 	orr.w	r4, r4, r2, lsl #16
 80003a4:	fb0e fe00 	mul.w	lr, lr, r0
 80003a8:	45a6      	cmp	lr, r4
 80003aa:	d908      	bls.n	80003be <__udivmoddi4+0x14e>
 80003ac:	eb1c 0404 	adds.w	r4, ip, r4
 80003b0:	f100 32ff 	add.w	r2, r0, #4294967295
 80003b4:	d202      	bcs.n	80003bc <__udivmoddi4+0x14c>
 80003b6:	45a6      	cmp	lr, r4
 80003b8:	f200 80bb 	bhi.w	8000532 <__udivmoddi4+0x2c2>
 80003bc:	4610      	mov	r0, r2
 80003be:	eba4 040e 	sub.w	r4, r4, lr
 80003c2:	ea40 4005 	orr.w	r0, r0, r5, lsl #16
 80003c6:	e79f      	b.n	8000308 <__udivmoddi4+0x98>
 80003c8:	f1c1 0720 	rsb	r7, r1, #32
 80003cc:	408b      	lsls	r3, r1
 80003ce:	fa22 fc07 	lsr.w	ip, r2, r7
 80003d2:	ea4c 0c03 	orr.w	ip, ip, r3
 80003d6:	fa05 f401 	lsl.w	r4, r5, r1
 80003da:	fa20 f307 	lsr.w	r3, r0, r7
 80003de:	40fd      	lsrs	r5, r7
 80003e0:	ea4f 491c 	mov.w	r9, ip, lsr #16
 80003e4:	4323      	orrs	r3, r4
 80003e6:	fbb5 f8f9 	udiv	r8, r5, r9
 80003ea:	fa1f fe8c 	uxth.w	lr, ip
 80003ee:	fb09 5518 	mls	r5, r9, r8, r5
 80003f2:	0c1c      	lsrs	r4, r3, #16
 80003f4:	ea44 4405 	orr.w	r4, r4, r5, lsl #16
 80003f8:	fb08 f50e 	mul.w	r5, r8, lr
 80003fc:	42a5      	cmp	r5, r4
 80003fe:	fa02 f201 	lsl.w	r2, r2, r1
 8000402:	fa00 f001 	lsl.w	r0, r0, r1
 8000406:	d90b      	bls.n	8000420 <__udivmoddi4+0x1b0>
 8000408:	eb1c 0404 	adds.w	r4, ip, r4
 800040c:	f108 3aff 	add.w	sl, r8, #4294967295
 8000410:	f080 8088 	bcs.w	8000524 <__udivmoddi4+0x2b4>
 8000414:	42a5      	cmp	r5, r4
 8000416:	f240 8085 	bls.w	8000524 <__udivmoddi4+0x2b4>
 800041a:	f1a8 0802 	sub.w	r8, r8, #2
 800041e:	4464      	add	r4, ip
 8000420:	1b64      	subs	r4, r4, r5
 8000422:	b29d      	uxth	r5, r3
 8000424:	fbb4 f3f9 	udiv	r3, r4, r9
 8000428:	fb09 4413 	mls	r4, r9, r3, r4
 800042c:	ea45 4404 	orr.w	r4, r5, r4, lsl #16
 8000430:	fb03 fe0e 	mul.w	lr, r3, lr
 8000434:	45a6      	cmp	lr, r4
 8000436:	d908      	bls.n	800044a <__udivmoddi4+0x1da>
 8000438:	eb1c 0404 	adds.w	r4, ip, r4
 800043c:	f103 35ff 	add.w	r5, r3, #4294967295
 8000440:	d26c      	bcs.n	800051c <__udivmoddi4+0x2ac>
 8000442:	45a6      	cmp	lr, r4
 8000444:	d96a      	bls.n	800051c <__udivmoddi4+0x2ac>
 8000446:	3b02      	subs	r3, #2
 8000448:	4464      	add	r4, ip
 800044a:	ea43 4308 	orr.w	r3, r3, r8, lsl #16
 800044e:	fba3 9502 	umull	r9, r5, r3, r2
 8000452:	eba4 040e 	sub.w	r4, r4, lr
 8000456:	42ac      	cmp	r4, r5
 8000458:	46c8      	mov	r8, r9
 800045a:	46ae      	mov	lr, r5
 800045c:	d356      	bcc.n	800050c <__udivmoddi4+0x29c>
 800045e:	d053      	beq.n	8000508 <__udivmoddi4+0x298>
 8000460:	b156      	cbz	r6, 8000478 <__udivmoddi4+0x208>
 8000462:	ebb0 0208 	subs.w	r2, r0, r8
 8000466:	eb64 040e 	sbc.w	r4, r4, lr
 800046a:	fa04 f707 	lsl.w	r7, r4, r7
 800046e:	40ca      	lsrs	r2, r1
 8000470:	40cc      	lsrs	r4, r1
 8000472:	4317      	orrs	r7, r2
 8000474:	e9c6 7400 	strd	r7, r4, [r6]
 8000478:	4618      	mov	r0, r3
 800047a:	2100      	movs	r1, #0
 800047c:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000480:	f1c3 0120 	rsb	r1, r3, #32
 8000484:	fa02 fc03 	lsl.w	ip, r2, r3
 8000488:	fa20 f201 	lsr.w	r2, r0, r1
 800048c:	fa25 f101 	lsr.w	r1, r5, r1
 8000490:	409d      	lsls	r5, r3
 8000492:	432a      	orrs	r2, r5
 8000494:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8000498:	fa1f fe8c 	uxth.w	lr, ip
 800049c:	fbb1 f0f7 	udiv	r0, r1, r7
 80004a0:	fb07 1510 	mls	r5, r7, r0, r1
 80004a4:	0c11      	lsrs	r1, r2, #16
 80004a6:	ea41 4105 	orr.w	r1, r1, r5, lsl #16
 80004aa:	fb00 f50e 	mul.w	r5, r0, lr
 80004ae:	428d      	cmp	r5, r1
 80004b0:	fa04 f403 	lsl.w	r4, r4, r3
 80004b4:	d908      	bls.n	80004c8 <__udivmoddi4+0x258>
 80004b6:	eb1c 0101 	adds.w	r1, ip, r1
 80004ba:	f100 38ff 	add.w	r8, r0, #4294967295
 80004be:	d22f      	bcs.n	8000520 <__udivmoddi4+0x2b0>
 80004c0:	428d      	cmp	r5, r1
 80004c2:	d92d      	bls.n	8000520 <__udivmoddi4+0x2b0>
 80004c4:	3802      	subs	r0, #2
 80004c6:	4461      	add	r1, ip
 80004c8:	1b49      	subs	r1, r1, r5
 80004ca:	b292      	uxth	r2, r2
 80004cc:	fbb1 f5f7 	udiv	r5, r1, r7
 80004d0:	fb07 1115 	mls	r1, r7, r5, r1
 80004d4:	ea42 4201 	orr.w	r2, r2, r1, lsl #16
 80004d8:	fb05 f10e 	mul.w	r1, r5, lr
 80004dc:	4291      	cmp	r1, r2
 80004de:	d908      	bls.n	80004f2 <__udivmoddi4+0x282>
 80004e0:	eb1c 0202 	adds.w	r2, ip, r2
 80004e4:	f105 38ff 	add.w	r8, r5, #4294967295
 80004e8:	d216      	bcs.n	8000518 <__udivmoddi4+0x2a8>
 80004ea:	4291      	cmp	r1, r2
 80004ec:	d914      	bls.n	8000518 <__udivmoddi4+0x2a8>
 80004ee:	3d02      	subs	r5, #2
 80004f0:	4462      	add	r2, ip
 80004f2:	1a52      	subs	r2, r2, r1
 80004f4:	ea45 4100 	orr.w	r1, r5, r0, lsl #16
 80004f8:	e738      	b.n	800036c <__udivmoddi4+0xfc>
 80004fa:	4631      	mov	r1, r6
 80004fc:	4630      	mov	r0, r6
 80004fe:	e708      	b.n	8000312 <__udivmoddi4+0xa2>
 8000500:	4639      	mov	r1, r7
 8000502:	e6e6      	b.n	80002d2 <__udivmoddi4+0x62>
 8000504:	4610      	mov	r0, r2
 8000506:	e6fb      	b.n	8000300 <__udivmoddi4+0x90>
 8000508:	4548      	cmp	r0, r9
 800050a:	d2a9      	bcs.n	8000460 <__udivmoddi4+0x1f0>
 800050c:	ebb9 0802 	subs.w	r8, r9, r2
 8000510:	eb65 0e0c 	sbc.w	lr, r5, ip
 8000514:	3b01      	subs	r3, #1
 8000516:	e7a3      	b.n	8000460 <__udivmoddi4+0x1f0>
 8000518:	4645      	mov	r5, r8
 800051a:	e7ea      	b.n	80004f2 <__udivmoddi4+0x282>
 800051c:	462b      	mov	r3, r5
 800051e:	e794      	b.n	800044a <__udivmoddi4+0x1da>
 8000520:	4640      	mov	r0, r8
 8000522:	e7d1      	b.n	80004c8 <__udivmoddi4+0x258>
 8000524:	46d0      	mov	r8, sl
 8000526:	e77b      	b.n	8000420 <__udivmoddi4+0x1b0>
 8000528:	3d02      	subs	r5, #2
 800052a:	4462      	add	r2, ip
 800052c:	e732      	b.n	8000394 <__udivmoddi4+0x124>
 800052e:	4608      	mov	r0, r1
 8000530:	e70a      	b.n	8000348 <__udivmoddi4+0xd8>
 8000532:	4464      	add	r4, ip
 8000534:	3802      	subs	r0, #2
 8000536:	e742      	b.n	80003be <__udivmoddi4+0x14e>

08000538 <__aeabi_idiv0>:
 8000538:	4770      	bx	lr
 800053a:	bf00      	nop

0800053c <MX_CAN1_Init>:
CAN_HandleTypeDef hcan2;
CAN_HandleTypeDef hcan3;

/* CAN1 init function */
void MX_CAN1_Init(void)
{
 800053c:	b580      	push	{r7, lr}
 800053e:	af00      	add	r7, sp, #0
  /* USER CODE END CAN1_Init 0 */

  /* USER CODE BEGIN CAN1_Init 1 */

  /* USER CODE END CAN1_Init 1 */
  hcan1.Instance = CAN1;
 8000540:	4b18      	ldr	r3, [pc, #96]	; (80005a4 <MX_CAN1_Init+0x68>)
 8000542:	4a19      	ldr	r2, [pc, #100]	; (80005a8 <MX_CAN1_Init+0x6c>)
 8000544:	601a      	str	r2, [r3, #0]
  hcan1.Init.Prescaler = 108;
 8000546:	4b17      	ldr	r3, [pc, #92]	; (80005a4 <MX_CAN1_Init+0x68>)
 8000548:	226c      	movs	r2, #108	; 0x6c
 800054a:	605a      	str	r2, [r3, #4]
  hcan1.Init.Mode = CAN_MODE_LOOPBACK;
 800054c:	4b15      	ldr	r3, [pc, #84]	; (80005a4 <MX_CAN1_Init+0x68>)
 800054e:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
 8000552:	609a      	str	r2, [r3, #8]
  hcan1.Init.SyncJumpWidth = CAN_SJW_1TQ;
 8000554:	4b13      	ldr	r3, [pc, #76]	; (80005a4 <MX_CAN1_Init+0x68>)
 8000556:	2200      	movs	r2, #0
 8000558:	60da      	str	r2, [r3, #12]
  hcan1.Init.TimeSeg1 = CAN_BS1_2TQ;
 800055a:	4b12      	ldr	r3, [pc, #72]	; (80005a4 <MX_CAN1_Init+0x68>)
 800055c:	f44f 3280 	mov.w	r2, #65536	; 0x10000
 8000560:	611a      	str	r2, [r3, #16]
  hcan1.Init.TimeSeg2 = CAN_BS2_2TQ;
 8000562:	4b10      	ldr	r3, [pc, #64]	; (80005a4 <MX_CAN1_Init+0x68>)
 8000564:	f44f 1280 	mov.w	r2, #1048576	; 0x100000
 8000568:	615a      	str	r2, [r3, #20]
  hcan1.Init.TimeTriggeredMode = DISABLE;
 800056a:	4b0e      	ldr	r3, [pc, #56]	; (80005a4 <MX_CAN1_Init+0x68>)
 800056c:	2200      	movs	r2, #0
 800056e:	761a      	strb	r2, [r3, #24]
  hcan1.Init.AutoBusOff = DISABLE;
 8000570:	4b0c      	ldr	r3, [pc, #48]	; (80005a4 <MX_CAN1_Init+0x68>)
 8000572:	2200      	movs	r2, #0
 8000574:	765a      	strb	r2, [r3, #25]
  hcan1.Init.AutoWakeUp = DISABLE;
 8000576:	4b0b      	ldr	r3, [pc, #44]	; (80005a4 <MX_CAN1_Init+0x68>)
 8000578:	2200      	movs	r2, #0
 800057a:	769a      	strb	r2, [r3, #26]
  hcan1.Init.AutoRetransmission = ENABLE;
 800057c:	4b09      	ldr	r3, [pc, #36]	; (80005a4 <MX_CAN1_Init+0x68>)
 800057e:	2201      	movs	r2, #1
 8000580:	76da      	strb	r2, [r3, #27]
  hcan1.Init.ReceiveFifoLocked = DISABLE;
 8000582:	4b08      	ldr	r3, [pc, #32]	; (80005a4 <MX_CAN1_Init+0x68>)
 8000584:	2200      	movs	r2, #0
 8000586:	771a      	strb	r2, [r3, #28]
  hcan1.Init.TransmitFifoPriority = DISABLE;
 8000588:	4b06      	ldr	r3, [pc, #24]	; (80005a4 <MX_CAN1_Init+0x68>)
 800058a:	2200      	movs	r2, #0
 800058c:	775a      	strb	r2, [r3, #29]
  if (HAL_CAN_Init(&hcan1) != HAL_OK)
 800058e:	4805      	ldr	r0, [pc, #20]	; (80005a4 <MX_CAN1_Init+0x68>)
 8000590:	f001 fb1a 	bl	8001bc8 <HAL_CAN_Init>
 8000594:	4603      	mov	r3, r0
 8000596:	2b00      	cmp	r3, #0
 8000598:	d001      	beq.n	800059e <MX_CAN1_Init+0x62>
  {
    Error_Handler();
 800059a:	f001 f8eb 	bl	8001774 <Error_Handler>
  }
  /* USER CODE BEGIN CAN1_Init 2 */

  /* USER CODE END CAN1_Init 2 */

}
 800059e:	bf00      	nop
 80005a0:	bd80      	pop	{r7, pc}
 80005a2:	bf00      	nop
 80005a4:	20000090 	.word	0x20000090
 80005a8:	40006400 	.word	0x40006400

080005ac <MX_CAN2_Init>:
/* CAN2 init function */
void MX_CAN2_Init(void)
{
 80005ac:	b580      	push	{r7, lr}
 80005ae:	af00      	add	r7, sp, #0
  /* USER CODE END CAN2_Init 0 */

  /* USER CODE BEGIN CAN2_Init 1 */

  /* USER CODE END CAN2_Init 1 */
  hcan2.Instance = CAN2;
 80005b0:	4b18      	ldr	r3, [pc, #96]	; (8000614 <MX_CAN2_Init+0x68>)
 80005b2:	4a19      	ldr	r2, [pc, #100]	; (8000618 <MX_CAN2_Init+0x6c>)
 80005b4:	601a      	str	r2, [r3, #0]
  hcan2.Init.Prescaler = 108;
 80005b6:	4b17      	ldr	r3, [pc, #92]	; (8000614 <MX_CAN2_Init+0x68>)
 80005b8:	226c      	movs	r2, #108	; 0x6c
 80005ba:	605a      	str	r2, [r3, #4]
  hcan2.Init.Mode = CAN_MODE_LOOPBACK;
 80005bc:	4b15      	ldr	r3, [pc, #84]	; (8000614 <MX_CAN2_Init+0x68>)
 80005be:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
 80005c2:	609a      	str	r2, [r3, #8]
  hcan2.Init.SyncJumpWidth = CAN_SJW_1TQ;
 80005c4:	4b13      	ldr	r3, [pc, #76]	; (8000614 <MX_CAN2_Init+0x68>)
 80005c6:	2200      	movs	r2, #0
 80005c8:	60da      	str	r2, [r3, #12]
  hcan2.Init.TimeSeg1 = CAN_BS1_2TQ;
 80005ca:	4b12      	ldr	r3, [pc, #72]	; (8000614 <MX_CAN2_Init+0x68>)
 80005cc:	f44f 3280 	mov.w	r2, #65536	; 0x10000
 80005d0:	611a      	str	r2, [r3, #16]
  hcan2.Init.TimeSeg2 = CAN_BS2_2TQ;
 80005d2:	4b10      	ldr	r3, [pc, #64]	; (8000614 <MX_CAN2_Init+0x68>)
 80005d4:	f44f 1280 	mov.w	r2, #1048576	; 0x100000
 80005d8:	615a      	str	r2, [r3, #20]
  hcan2.Init.TimeTriggeredMode = DISABLE;
 80005da:	4b0e      	ldr	r3, [pc, #56]	; (8000614 <MX_CAN2_Init+0x68>)
 80005dc:	2200      	movs	r2, #0
 80005de:	761a      	strb	r2, [r3, #24]
  hcan2.Init.AutoBusOff = DISABLE;
 80005e0:	4b0c      	ldr	r3, [pc, #48]	; (8000614 <MX_CAN2_Init+0x68>)
 80005e2:	2200      	movs	r2, #0
 80005e4:	765a      	strb	r2, [r3, #25]
  hcan2.Init.AutoWakeUp = DISABLE;
 80005e6:	4b0b      	ldr	r3, [pc, #44]	; (8000614 <MX_CAN2_Init+0x68>)
 80005e8:	2200      	movs	r2, #0
 80005ea:	769a      	strb	r2, [r3, #26]
  hcan2.Init.AutoRetransmission = ENABLE;
 80005ec:	4b09      	ldr	r3, [pc, #36]	; (8000614 <MX_CAN2_Init+0x68>)
 80005ee:	2201      	movs	r2, #1
 80005f0:	76da      	strb	r2, [r3, #27]
  hcan2.Init.ReceiveFifoLocked = DISABLE;
 80005f2:	4b08      	ldr	r3, [pc, #32]	; (8000614 <MX_CAN2_Init+0x68>)
 80005f4:	2200      	movs	r2, #0
 80005f6:	771a      	strb	r2, [r3, #28]
  hcan2.Init.TransmitFifoPriority = DISABLE;
 80005f8:	4b06      	ldr	r3, [pc, #24]	; (8000614 <MX_CAN2_Init+0x68>)
 80005fa:	2200      	movs	r2, #0
 80005fc:	775a      	strb	r2, [r3, #29]
  if (HAL_CAN_Init(&hcan2) != HAL_OK)
 80005fe:	4805      	ldr	r0, [pc, #20]	; (8000614 <MX_CAN2_Init+0x68>)
 8000600:	f001 fae2 	bl	8001bc8 <HAL_CAN_Init>
 8000604:	4603      	mov	r3, r0
 8000606:	2b00      	cmp	r3, #0
 8000608:	d001      	beq.n	800060e <MX_CAN2_Init+0x62>
  {
    Error_Handler();
 800060a:	f001 f8b3 	bl	8001774 <Error_Handler>
  }
  /* USER CODE BEGIN CAN2_Init 2 */

  /* USER CODE END CAN2_Init 2 */

}
 800060e:	bf00      	nop
 8000610:	bd80      	pop	{r7, pc}
 8000612:	bf00      	nop
 8000614:	200000b8 	.word	0x200000b8
 8000618:	40006800 	.word	0x40006800

0800061c <MX_CAN3_Init>:
/* CAN3 init function */
void MX_CAN3_Init(void)
{
 800061c:	b580      	push	{r7, lr}
 800061e:	af00      	add	r7, sp, #0
  /* USER CODE END CAN3_Init 0 */

  /* USER CODE BEGIN CAN3_Init 1 */

  /* USER CODE END CAN3_Init 1 */
  hcan3.Instance = CAN3;
 8000620:	4b18      	ldr	r3, [pc, #96]	; (8000684 <MX_CAN3_Init+0x68>)
 8000622:	4a19      	ldr	r2, [pc, #100]	; (8000688 <MX_CAN3_Init+0x6c>)
 8000624:	601a      	str	r2, [r3, #0]
  hcan3.Init.Prescaler = 108;
 8000626:	4b17      	ldr	r3, [pc, #92]	; (8000684 <MX_CAN3_Init+0x68>)
 8000628:	226c      	movs	r2, #108	; 0x6c
 800062a:	605a      	str	r2, [r3, #4]
  hcan3.Init.Mode = CAN_MODE_LOOPBACK;
 800062c:	4b15      	ldr	r3, [pc, #84]	; (8000684 <MX_CAN3_Init+0x68>)
 800062e:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
 8000632:	609a      	str	r2, [r3, #8]
  hcan3.Init.SyncJumpWidth = CAN_SJW_1TQ;
 8000634:	4b13      	ldr	r3, [pc, #76]	; (8000684 <MX_CAN3_Init+0x68>)
 8000636:	2200      	movs	r2, #0
 8000638:	60da      	str	r2, [r3, #12]
  hcan3.Init.TimeSeg1 = CAN_BS1_2TQ;
 800063a:	4b12      	ldr	r3, [pc, #72]	; (8000684 <MX_CAN3_Init+0x68>)
 800063c:	f44f 3280 	mov.w	r2, #65536	; 0x10000
 8000640:	611a      	str	r2, [r3, #16]
  hcan3.Init.TimeSeg2 = CAN_BS2_2TQ;
 8000642:	4b10      	ldr	r3, [pc, #64]	; (8000684 <MX_CAN3_Init+0x68>)
 8000644:	f44f 1280 	mov.w	r2, #1048576	; 0x100000
 8000648:	615a      	str	r2, [r3, #20]
  hcan3.Init.TimeTriggeredMode = DISABLE;
 800064a:	4b0e      	ldr	r3, [pc, #56]	; (8000684 <MX_CAN3_Init+0x68>)
 800064c:	2200      	movs	r2, #0
 800064e:	761a      	strb	r2, [r3, #24]
  hcan3.Init.AutoBusOff = DISABLE;
 8000650:	4b0c      	ldr	r3, [pc, #48]	; (8000684 <MX_CAN3_Init+0x68>)
 8000652:	2200      	movs	r2, #0
 8000654:	765a      	strb	r2, [r3, #25]
  hcan3.Init.AutoWakeUp = DISABLE;
 8000656:	4b0b      	ldr	r3, [pc, #44]	; (8000684 <MX_CAN3_Init+0x68>)
 8000658:	2200      	movs	r2, #0
 800065a:	769a      	strb	r2, [r3, #26]
  hcan3.Init.AutoRetransmission = ENABLE;
 800065c:	4b09      	ldr	r3, [pc, #36]	; (8000684 <MX_CAN3_Init+0x68>)
 800065e:	2201      	movs	r2, #1
 8000660:	76da      	strb	r2, [r3, #27]
  hcan3.Init.ReceiveFifoLocked = DISABLE;
 8000662:	4b08      	ldr	r3, [pc, #32]	; (8000684 <MX_CAN3_Init+0x68>)
 8000664:	2200      	movs	r2, #0
 8000666:	771a      	strb	r2, [r3, #28]
  hcan3.Init.TransmitFifoPriority = DISABLE;
 8000668:	4b06      	ldr	r3, [pc, #24]	; (8000684 <MX_CAN3_Init+0x68>)
 800066a:	2200      	movs	r2, #0
 800066c:	775a      	strb	r2, [r3, #29]
  if (HAL_CAN_Init(&hcan3) != HAL_OK)
 800066e:	4805      	ldr	r0, [pc, #20]	; (8000684 <MX_CAN3_Init+0x68>)
 8000670:	f001 faaa 	bl	8001bc8 <HAL_CAN_Init>
 8000674:	4603      	mov	r3, r0
 8000676:	2b00      	cmp	r3, #0
 8000678:	d001      	beq.n	800067e <MX_CAN3_Init+0x62>
  {
    Error_Handler();
 800067a:	f001 f87b 	bl	8001774 <Error_Handler>
  }
  /* USER CODE BEGIN CAN3_Init 2 */

  /* USER CODE END CAN3_Init 2 */

}
 800067e:	bf00      	nop
 8000680:	bd80      	pop	{r7, pc}
 8000682:	bf00      	nop
 8000684:	200000e0 	.word	0x200000e0
 8000688:	40003400 	.word	0x40003400

0800068c <HAL_CAN_MspInit>:

static uint32_t HAL_RCC_CAN1_CLK_ENABLED=0;

void HAL_CAN_MspInit(CAN_HandleTypeDef* canHandle)
{
 800068c:	b580      	push	{r7, lr}
 800068e:	b08e      	sub	sp, #56	; 0x38
 8000690:	af00      	add	r7, sp, #0
 8000692:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000694:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8000698:	2200      	movs	r2, #0
 800069a:	601a      	str	r2, [r3, #0]
 800069c:	605a      	str	r2, [r3, #4]
 800069e:	609a      	str	r2, [r3, #8]
 80006a0:	60da      	str	r2, [r3, #12]
 80006a2:	611a      	str	r2, [r3, #16]
  if(canHandle->Instance==CAN1)
 80006a4:	687b      	ldr	r3, [r7, #4]
 80006a6:	681b      	ldr	r3, [r3, #0]
 80006a8:	4a78      	ldr	r2, [pc, #480]	; (800088c <HAL_CAN_MspInit+0x200>)
 80006aa:	4293      	cmp	r3, r2
 80006ac:	d149      	bne.n	8000742 <HAL_CAN_MspInit+0xb6>
  {
  /* USER CODE BEGIN CAN1_MspInit 0 */

  /* USER CODE END CAN1_MspInit 0 */
    /* CAN1 clock enable */
    HAL_RCC_CAN1_CLK_ENABLED++;
 80006ae:	4b78      	ldr	r3, [pc, #480]	; (8000890 <HAL_CAN_MspInit+0x204>)
 80006b0:	681b      	ldr	r3, [r3, #0]
 80006b2:	3301      	adds	r3, #1
 80006b4:	4a76      	ldr	r2, [pc, #472]	; (8000890 <HAL_CAN_MspInit+0x204>)
 80006b6:	6013      	str	r3, [r2, #0]
    if(HAL_RCC_CAN1_CLK_ENABLED==1){
 80006b8:	4b75      	ldr	r3, [pc, #468]	; (8000890 <HAL_CAN_MspInit+0x204>)
 80006ba:	681b      	ldr	r3, [r3, #0]
 80006bc:	2b01      	cmp	r3, #1
 80006be:	d10b      	bne.n	80006d8 <HAL_CAN_MspInit+0x4c>
      __HAL_RCC_CAN1_CLK_ENABLE();
 80006c0:	4b74      	ldr	r3, [pc, #464]	; (8000894 <HAL_CAN_MspInit+0x208>)
 80006c2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80006c4:	4a73      	ldr	r2, [pc, #460]	; (8000894 <HAL_CAN_MspInit+0x208>)
 80006c6:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
 80006ca:	6413      	str	r3, [r2, #64]	; 0x40
 80006cc:	4b71      	ldr	r3, [pc, #452]	; (8000894 <HAL_CAN_MspInit+0x208>)
 80006ce:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80006d0:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80006d4:	623b      	str	r3, [r7, #32]
 80006d6:	6a3b      	ldr	r3, [r7, #32]
    }

    __HAL_RCC_GPIOD_CLK_ENABLE();
 80006d8:	4b6e      	ldr	r3, [pc, #440]	; (8000894 <HAL_CAN_MspInit+0x208>)
 80006da:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80006dc:	4a6d      	ldr	r2, [pc, #436]	; (8000894 <HAL_CAN_MspInit+0x208>)
 80006de:	f043 0308 	orr.w	r3, r3, #8
 80006e2:	6313      	str	r3, [r2, #48]	; 0x30
 80006e4:	4b6b      	ldr	r3, [pc, #428]	; (8000894 <HAL_CAN_MspInit+0x208>)
 80006e6:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80006e8:	f003 0308 	and.w	r3, r3, #8
 80006ec:	61fb      	str	r3, [r7, #28]
 80006ee:	69fb      	ldr	r3, [r7, #28]
    /**CAN1 GPIO Configuration
    PD0     ------> CAN1_RX
    PD1     ------> CAN1_TX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_0|GPIO_PIN_1;
 80006f0:	2303      	movs	r3, #3
 80006f2:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80006f4:	2302      	movs	r3, #2
 80006f6:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80006f8:	2300      	movs	r3, #0
 80006fa:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80006fc:	2303      	movs	r3, #3
 80006fe:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Alternate = GPIO_AF9_CAN1;
 8000700:	2309      	movs	r3, #9
 8000702:	637b      	str	r3, [r7, #52]	; 0x34
    HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 8000704:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8000708:	4619      	mov	r1, r3
 800070a:	4863      	ldr	r0, [pc, #396]	; (8000898 <HAL_CAN_MspInit+0x20c>)
 800070c:	f002 fb96 	bl	8002e3c <HAL_GPIO_Init>

    /* CAN1 interrupt Init */
    HAL_NVIC_SetPriority(CAN1_TX_IRQn, 5, 0);
 8000710:	2200      	movs	r2, #0
 8000712:	2105      	movs	r1, #5
 8000714:	2013      	movs	r0, #19
 8000716:	f002 f969 	bl	80029ec <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(CAN1_TX_IRQn);
 800071a:	2013      	movs	r0, #19
 800071c:	f002 f982 	bl	8002a24 <HAL_NVIC_EnableIRQ>
    HAL_NVIC_SetPriority(CAN1_RX0_IRQn, 5, 0);
 8000720:	2200      	movs	r2, #0
 8000722:	2105      	movs	r1, #5
 8000724:	2014      	movs	r0, #20
 8000726:	f002 f961 	bl	80029ec <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(CAN1_RX0_IRQn);
 800072a:	2014      	movs	r0, #20
 800072c:	f002 f97a 	bl	8002a24 <HAL_NVIC_EnableIRQ>
    HAL_NVIC_SetPriority(CAN1_RX1_IRQn, 5, 0);
 8000730:	2200      	movs	r2, #0
 8000732:	2105      	movs	r1, #5
 8000734:	2015      	movs	r0, #21
 8000736:	f002 f959 	bl	80029ec <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(CAN1_RX1_IRQn);
 800073a:	2015      	movs	r0, #21
 800073c:	f002 f972 	bl	8002a24 <HAL_NVIC_EnableIRQ>
    HAL_NVIC_EnableIRQ(CAN3_RX1_IRQn);
  /* USER CODE BEGIN CAN3_MspInit 1 */

  /* USER CODE END CAN3_MspInit 1 */
  }
}
 8000740:	e0a0      	b.n	8000884 <HAL_CAN_MspInit+0x1f8>
  else if(canHandle->Instance==CAN2)
 8000742:	687b      	ldr	r3, [r7, #4]
 8000744:	681b      	ldr	r3, [r3, #0]
 8000746:	4a55      	ldr	r2, [pc, #340]	; (800089c <HAL_CAN_MspInit+0x210>)
 8000748:	4293      	cmp	r3, r2
 800074a:	d156      	bne.n	80007fa <HAL_CAN_MspInit+0x16e>
    __HAL_RCC_CAN2_CLK_ENABLE();
 800074c:	4b51      	ldr	r3, [pc, #324]	; (8000894 <HAL_CAN_MspInit+0x208>)
 800074e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000750:	4a50      	ldr	r2, [pc, #320]	; (8000894 <HAL_CAN_MspInit+0x208>)
 8000752:	f043 6380 	orr.w	r3, r3, #67108864	; 0x4000000
 8000756:	6413      	str	r3, [r2, #64]	; 0x40
 8000758:	4b4e      	ldr	r3, [pc, #312]	; (8000894 <HAL_CAN_MspInit+0x208>)
 800075a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800075c:	f003 6380 	and.w	r3, r3, #67108864	; 0x4000000
 8000760:	61bb      	str	r3, [r7, #24]
 8000762:	69bb      	ldr	r3, [r7, #24]
    HAL_RCC_CAN1_CLK_ENABLED++;
 8000764:	4b4a      	ldr	r3, [pc, #296]	; (8000890 <HAL_CAN_MspInit+0x204>)
 8000766:	681b      	ldr	r3, [r3, #0]
 8000768:	3301      	adds	r3, #1
 800076a:	4a49      	ldr	r2, [pc, #292]	; (8000890 <HAL_CAN_MspInit+0x204>)
 800076c:	6013      	str	r3, [r2, #0]
    if(HAL_RCC_CAN1_CLK_ENABLED==1){
 800076e:	4b48      	ldr	r3, [pc, #288]	; (8000890 <HAL_CAN_MspInit+0x204>)
 8000770:	681b      	ldr	r3, [r3, #0]
 8000772:	2b01      	cmp	r3, #1
 8000774:	d10b      	bne.n	800078e <HAL_CAN_MspInit+0x102>
      __HAL_RCC_CAN1_CLK_ENABLE();
 8000776:	4b47      	ldr	r3, [pc, #284]	; (8000894 <HAL_CAN_MspInit+0x208>)
 8000778:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800077a:	4a46      	ldr	r2, [pc, #280]	; (8000894 <HAL_CAN_MspInit+0x208>)
 800077c:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
 8000780:	6413      	str	r3, [r2, #64]	; 0x40
 8000782:	4b44      	ldr	r3, [pc, #272]	; (8000894 <HAL_CAN_MspInit+0x208>)
 8000784:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000786:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800078a:	617b      	str	r3, [r7, #20]
 800078c:	697b      	ldr	r3, [r7, #20]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 800078e:	4b41      	ldr	r3, [pc, #260]	; (8000894 <HAL_CAN_MspInit+0x208>)
 8000790:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000792:	4a40      	ldr	r2, [pc, #256]	; (8000894 <HAL_CAN_MspInit+0x208>)
 8000794:	f043 0302 	orr.w	r3, r3, #2
 8000798:	6313      	str	r3, [r2, #48]	; 0x30
 800079a:	4b3e      	ldr	r3, [pc, #248]	; (8000894 <HAL_CAN_MspInit+0x208>)
 800079c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800079e:	f003 0302 	and.w	r3, r3, #2
 80007a2:	613b      	str	r3, [r7, #16]
 80007a4:	693b      	ldr	r3, [r7, #16]
    GPIO_InitStruct.Pin = GPIO_PIN_12|GPIO_PIN_13;
 80007a6:	f44f 5340 	mov.w	r3, #12288	; 0x3000
 80007aa:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80007ac:	2302      	movs	r3, #2
 80007ae:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80007b0:	2300      	movs	r3, #0
 80007b2:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80007b4:	2303      	movs	r3, #3
 80007b6:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Alternate = GPIO_AF9_CAN2;
 80007b8:	2309      	movs	r3, #9
 80007ba:	637b      	str	r3, [r7, #52]	; 0x34
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80007bc:	f107 0324 	add.w	r3, r7, #36	; 0x24
 80007c0:	4619      	mov	r1, r3
 80007c2:	4837      	ldr	r0, [pc, #220]	; (80008a0 <HAL_CAN_MspInit+0x214>)
 80007c4:	f002 fb3a 	bl	8002e3c <HAL_GPIO_Init>
    HAL_NVIC_SetPriority(CAN2_TX_IRQn, 5, 0);
 80007c8:	2200      	movs	r2, #0
 80007ca:	2105      	movs	r1, #5
 80007cc:	203f      	movs	r0, #63	; 0x3f
 80007ce:	f002 f90d 	bl	80029ec <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(CAN2_TX_IRQn);
 80007d2:	203f      	movs	r0, #63	; 0x3f
 80007d4:	f002 f926 	bl	8002a24 <HAL_NVIC_EnableIRQ>
    HAL_NVIC_SetPriority(CAN2_RX0_IRQn, 5, 0);
 80007d8:	2200      	movs	r2, #0
 80007da:	2105      	movs	r1, #5
 80007dc:	2040      	movs	r0, #64	; 0x40
 80007de:	f002 f905 	bl	80029ec <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(CAN2_RX0_IRQn);
 80007e2:	2040      	movs	r0, #64	; 0x40
 80007e4:	f002 f91e 	bl	8002a24 <HAL_NVIC_EnableIRQ>
    HAL_NVIC_SetPriority(CAN2_RX1_IRQn, 5, 0);
 80007e8:	2200      	movs	r2, #0
 80007ea:	2105      	movs	r1, #5
 80007ec:	2041      	movs	r0, #65	; 0x41
 80007ee:	f002 f8fd 	bl	80029ec <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(CAN2_RX1_IRQn);
 80007f2:	2041      	movs	r0, #65	; 0x41
 80007f4:	f002 f916 	bl	8002a24 <HAL_NVIC_EnableIRQ>
}
 80007f8:	e044      	b.n	8000884 <HAL_CAN_MspInit+0x1f8>
  else if(canHandle->Instance==CAN3)
 80007fa:	687b      	ldr	r3, [r7, #4]
 80007fc:	681b      	ldr	r3, [r3, #0]
 80007fe:	4a29      	ldr	r2, [pc, #164]	; (80008a4 <HAL_CAN_MspInit+0x218>)
 8000800:	4293      	cmp	r3, r2
 8000802:	d13f      	bne.n	8000884 <HAL_CAN_MspInit+0x1f8>
    __HAL_RCC_CAN3_CLK_ENABLE();
 8000804:	4b23      	ldr	r3, [pc, #140]	; (8000894 <HAL_CAN_MspInit+0x208>)
 8000806:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000808:	4a22      	ldr	r2, [pc, #136]	; (8000894 <HAL_CAN_MspInit+0x208>)
 800080a:	f443 5300 	orr.w	r3, r3, #8192	; 0x2000
 800080e:	6413      	str	r3, [r2, #64]	; 0x40
 8000810:	4b20      	ldr	r3, [pc, #128]	; (8000894 <HAL_CAN_MspInit+0x208>)
 8000812:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000814:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8000818:	60fb      	str	r3, [r7, #12]
 800081a:	68fb      	ldr	r3, [r7, #12]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 800081c:	4b1d      	ldr	r3, [pc, #116]	; (8000894 <HAL_CAN_MspInit+0x208>)
 800081e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000820:	4a1c      	ldr	r2, [pc, #112]	; (8000894 <HAL_CAN_MspInit+0x208>)
 8000822:	f043 0302 	orr.w	r3, r3, #2
 8000826:	6313      	str	r3, [r2, #48]	; 0x30
 8000828:	4b1a      	ldr	r3, [pc, #104]	; (8000894 <HAL_CAN_MspInit+0x208>)
 800082a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800082c:	f003 0302 	and.w	r3, r3, #2
 8000830:	60bb      	str	r3, [r7, #8]
 8000832:	68bb      	ldr	r3, [r7, #8]
    GPIO_InitStruct.Pin = GPIO_PIN_3|GPIO_PIN_4;
 8000834:	2318      	movs	r3, #24
 8000836:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000838:	2302      	movs	r3, #2
 800083a:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800083c:	2300      	movs	r3, #0
 800083e:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000840:	2303      	movs	r3, #3
 8000842:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Alternate = GPIO_AF11_CAN3;
 8000844:	230b      	movs	r3, #11
 8000846:	637b      	str	r3, [r7, #52]	; 0x34
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8000848:	f107 0324 	add.w	r3, r7, #36	; 0x24
 800084c:	4619      	mov	r1, r3
 800084e:	4814      	ldr	r0, [pc, #80]	; (80008a0 <HAL_CAN_MspInit+0x214>)
 8000850:	f002 faf4 	bl	8002e3c <HAL_GPIO_Init>
    HAL_NVIC_SetPriority(CAN3_TX_IRQn, 5, 0);
 8000854:	2200      	movs	r2, #0
 8000856:	2105      	movs	r1, #5
 8000858:	2068      	movs	r0, #104	; 0x68
 800085a:	f002 f8c7 	bl	80029ec <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(CAN3_TX_IRQn);
 800085e:	2068      	movs	r0, #104	; 0x68
 8000860:	f002 f8e0 	bl	8002a24 <HAL_NVIC_EnableIRQ>
    HAL_NVIC_SetPriority(CAN3_RX0_IRQn, 5, 0);
 8000864:	2200      	movs	r2, #0
 8000866:	2105      	movs	r1, #5
 8000868:	2069      	movs	r0, #105	; 0x69
 800086a:	f002 f8bf 	bl	80029ec <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(CAN3_RX0_IRQn);
 800086e:	2069      	movs	r0, #105	; 0x69
 8000870:	f002 f8d8 	bl	8002a24 <HAL_NVIC_EnableIRQ>
    HAL_NVIC_SetPriority(CAN3_RX1_IRQn, 5, 0);
 8000874:	2200      	movs	r2, #0
 8000876:	2105      	movs	r1, #5
 8000878:	206a      	movs	r0, #106	; 0x6a
 800087a:	f002 f8b7 	bl	80029ec <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(CAN3_RX1_IRQn);
 800087e:	206a      	movs	r0, #106	; 0x6a
 8000880:	f002 f8d0 	bl	8002a24 <HAL_NVIC_EnableIRQ>
}
 8000884:	bf00      	nop
 8000886:	3738      	adds	r7, #56	; 0x38
 8000888:	46bd      	mov	sp, r7
 800088a:	bd80      	pop	{r7, pc}
 800088c:	40006400 	.word	0x40006400
 8000890:	20000108 	.word	0x20000108
 8000894:	40023800 	.word	0x40023800
 8000898:	40020c00 	.word	0x40020c00
 800089c:	40006800 	.word	0x40006800
 80008a0:	40020400 	.word	0x40020400
 80008a4:	40003400 	.word	0x40003400

080008a8 <Can20SendSimple>:

CanReceiver_t *CanReceiverMapper[MAX_MSG_CAN];
uint16_t CanReceiverCounter;

HAL_StatusTypeDef Can20SendSimple(CAN_HandleTypeDef *hcan, uint32_t addr, uint8_t *PtrData, uint8_t LengthData)
{
 80008a8:	b580      	push	{r7, lr}
 80008aa:	b08e      	sub	sp, #56	; 0x38
 80008ac:	af00      	add	r7, sp, #0
 80008ae:	60f8      	str	r0, [r7, #12]
 80008b0:	60b9      	str	r1, [r7, #8]
 80008b2:	607a      	str	r2, [r7, #4]
 80008b4:	70fb      	strb	r3, [r7, #3]
	HAL_StatusTypeDef status;
	uint32_t TxMailbox;
	CAN_TxHeaderTypeDef TxHeader;
	uint32_t SendFault = 0;
 80008b6:	2300      	movs	r3, #0
 80008b8:	637b      	str	r3, [r7, #52]	; 0x34

	if(LengthData > 8) return HAL_ERROR;
 80008ba:	78fb      	ldrb	r3, [r7, #3]
 80008bc:	2b08      	cmp	r3, #8
 80008be:	d901      	bls.n	80008c4 <Can20SendSimple+0x1c>
 80008c0:	2301      	movs	r3, #1
 80008c2:	e02b      	b.n	800091c <Can20SendSimple+0x74>

	  TxHeader.DLC = LengthData;
 80008c4:	78fb      	ldrb	r3, [r7, #3]
 80008c6:	627b      	str	r3, [r7, #36]	; 0x24
	  TxHeader.RTR = CAN_RTR_DATA;
 80008c8:	2300      	movs	r3, #0
 80008ca:	623b      	str	r3, [r7, #32]
	  TxHeader.TransmitGlobalTime = DISABLE;
 80008cc:	2300      	movs	r3, #0
 80008ce:	f887 3028 	strb.w	r3, [r7, #40]	; 0x28
	  if(addr <= 0x7ff)
 80008d2:	68bb      	ldr	r3, [r7, #8]
 80008d4:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 80008d8:	d204      	bcs.n	80008e4 <Can20SendSimple+0x3c>
	  {
		  TxHeader.StdId = addr;
 80008da:	68bb      	ldr	r3, [r7, #8]
 80008dc:	617b      	str	r3, [r7, #20]
		  TxHeader.IDE = CAN_ID_STD;
 80008de:	2300      	movs	r3, #0
 80008e0:	61fb      	str	r3, [r7, #28]
 80008e2:	e003      	b.n	80008ec <Can20SendSimple+0x44>
	  }
	  else
	  {
		  TxHeader.ExtId = addr;
 80008e4:	68bb      	ldr	r3, [r7, #8]
 80008e6:	61bb      	str	r3, [r7, #24]
		  TxHeader.IDE = CAN_ID_EXT;
 80008e8:	2304      	movs	r3, #4
 80008ea:	61fb      	str	r3, [r7, #28]



	  do
	  {
		  status = HAL_CAN_AddTxMessage(hcan, &TxHeader, PtrData, &TxMailbox);
 80008ec:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 80008f0:	f107 0114 	add.w	r1, r7, #20
 80008f4:	687a      	ldr	r2, [r7, #4]
 80008f6:	68f8      	ldr	r0, [r7, #12]
 80008f8:	f001 fb92 	bl	8002020 <HAL_CAN_AddTxMessage>
 80008fc:	4603      	mov	r3, r0
 80008fe:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
		  SendFault++;
 8000902:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8000904:	3301      	adds	r3, #1
 8000906:	637b      	str	r3, [r7, #52]	; 0x34
	  }while(status != HAL_OK && SendFault < TRY_SEND_MAX_FAIL);
 8000908:	f897 3033 	ldrb.w	r3, [r7, #51]	; 0x33
 800090c:	2b00      	cmp	r3, #0
 800090e:	d003      	beq.n	8000918 <Can20SendSimple+0x70>
 8000910:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8000912:	4a04      	ldr	r2, [pc, #16]	; (8000924 <Can20SendSimple+0x7c>)
 8000914:	4293      	cmp	r3, r2
 8000916:	d9e9      	bls.n	80008ec <Can20SendSimple+0x44>


	  return status;
 8000918:	f897 3033 	ldrb.w	r3, [r7, #51]	; 0x33
}
 800091c:	4618      	mov	r0, r3
 800091e:	3738      	adds	r7, #56	; 0x38
 8000920:	46bd      	mov	sp, r7
 8000922:	bd80      	pop	{r7, pc}
 8000924:	0001116f 	.word	0x0001116f

08000928 <Can20SendLongMsgCrc>:

HAL_StatusTypeDef Can20SendLongMsgCrc(CAN_HandleTypeDef *hcan, uint32_t firstAddr, uint8_t *PtrData, uint32_t LengthData)
{
 8000928:	b580      	push	{r7, lr}
 800092a:	b086      	sub	sp, #24
 800092c:	af00      	add	r7, sp, #0
 800092e:	60f8      	str	r0, [r7, #12]
 8000930:	60b9      	str	r1, [r7, #8]
 8000932:	607a      	str	r2, [r7, #4]
 8000934:	603b      	str	r3, [r7, #0]
	HAL_StatusTypeDef status;
	uint32_t Crc = 0;
 8000936:	2300      	movs	r3, #0
 8000938:	613b      	str	r3, [r7, #16]
	uint8_t FrameAmount, LastDataLength;

	//dodaj kontrole rozmiaru, czy podzielne przez 4

	FrameAmount = LengthData/8;
 800093a:	683b      	ldr	r3, [r7, #0]
 800093c:	08db      	lsrs	r3, r3, #3
 800093e:	75fb      	strb	r3, [r7, #23]
	LastDataLength = LengthData % 8;
 8000940:	683b      	ldr	r3, [r7, #0]
 8000942:	b2db      	uxtb	r3, r3
 8000944:	f003 0307 	and.w	r3, r3, #7
 8000948:	757b      	strb	r3, [r7, #21]
	if(LastDataLength) FrameAmount++;
 800094a:	7d7b      	ldrb	r3, [r7, #21]
 800094c:	2b00      	cmp	r3, #0
 800094e:	d002      	beq.n	8000956 <Can20SendLongMsgCrc+0x2e>
 8000950:	7dfb      	ldrb	r3, [r7, #23]
 8000952:	3301      	adds	r3, #1
 8000954:	75fb      	strb	r3, [r7, #23]

	Crc = HAL_CRC_Calculate(&hcrc, (uint32_t*)PtrData, LengthData/4);
 8000956:	683b      	ldr	r3, [r7, #0]
 8000958:	089b      	lsrs	r3, r3, #2
 800095a:	461a      	mov	r2, r3
 800095c:	6879      	ldr	r1, [r7, #4]
 800095e:	482b      	ldr	r0, [pc, #172]	; (8000a0c <Can20SendLongMsgCrc+0xe4>)
 8000960:	f002 f8d2 	bl	8002b08 <HAL_CRC_Calculate>
 8000964:	4603      	mov	r3, r0
 8000966:	613b      	str	r3, [r7, #16]



	if(LengthData > 8)
 8000968:	683b      	ldr	r3, [r7, #0]
 800096a:	2b08      	cmp	r3, #8
 800096c:	d931      	bls.n	80009d2 <Can20SendLongMsgCrc+0xaa>
	{
		for(uint8_t i=0; i<FrameAmount; i++)
 800096e:	2300      	movs	r3, #0
 8000970:	75bb      	strb	r3, [r7, #22]
 8000972:	e01d      	b.n	80009b0 <Can20SendLongMsgCrc+0x88>
		{
			status = Can20SendSimple(hcan, firstAddr+i, PtrData+(8*i), (FrameAmount-1==i)?LastDataLength:8);
 8000974:	7dba      	ldrb	r2, [r7, #22]
 8000976:	68bb      	ldr	r3, [r7, #8]
 8000978:	18d1      	adds	r1, r2, r3
 800097a:	7dbb      	ldrb	r3, [r7, #22]
 800097c:	00db      	lsls	r3, r3, #3
 800097e:	461a      	mov	r2, r3
 8000980:	687b      	ldr	r3, [r7, #4]
 8000982:	1898      	adds	r0, r3, r2
 8000984:	7dfb      	ldrb	r3, [r7, #23]
 8000986:	1e5a      	subs	r2, r3, #1
 8000988:	7dbb      	ldrb	r3, [r7, #22]
 800098a:	429a      	cmp	r2, r3
 800098c:	d101      	bne.n	8000992 <Can20SendLongMsgCrc+0x6a>
 800098e:	7d7b      	ldrb	r3, [r7, #21]
 8000990:	e000      	b.n	8000994 <Can20SendLongMsgCrc+0x6c>
 8000992:	2308      	movs	r3, #8
 8000994:	4602      	mov	r2, r0
 8000996:	68f8      	ldr	r0, [r7, #12]
 8000998:	f7ff ff86 	bl	80008a8 <Can20SendSimple>
 800099c:	4603      	mov	r3, r0
 800099e:	753b      	strb	r3, [r7, #20]
			if(status != 0) return status;
 80009a0:	7d3b      	ldrb	r3, [r7, #20]
 80009a2:	2b00      	cmp	r3, #0
 80009a4:	d001      	beq.n	80009aa <Can20SendLongMsgCrc+0x82>
 80009a6:	7d3b      	ldrb	r3, [r7, #20]
 80009a8:	e02c      	b.n	8000a04 <Can20SendLongMsgCrc+0xdc>
		for(uint8_t i=0; i<FrameAmount; i++)
 80009aa:	7dbb      	ldrb	r3, [r7, #22]
 80009ac:	3301      	adds	r3, #1
 80009ae:	75bb      	strb	r3, [r7, #22]
 80009b0:	7dba      	ldrb	r2, [r7, #22]
 80009b2:	7dfb      	ldrb	r3, [r7, #23]
 80009b4:	429a      	cmp	r2, r3
 80009b6:	d3dd      	bcc.n	8000974 <Can20SendLongMsgCrc+0x4c>
		}
		status = Can20SendSimple(hcan, firstAddr+FrameAmount, (uint8_t*)&Crc, 4);
 80009b8:	7dfa      	ldrb	r2, [r7, #23]
 80009ba:	68bb      	ldr	r3, [r7, #8]
 80009bc:	18d1      	adds	r1, r2, r3
 80009be:	f107 0210 	add.w	r2, r7, #16
 80009c2:	2304      	movs	r3, #4
 80009c4:	68f8      	ldr	r0, [r7, #12]
 80009c6:	f7ff ff6f 	bl	80008a8 <Can20SendSimple>
 80009ca:	4603      	mov	r3, r0
 80009cc:	753b      	strb	r3, [r7, #20]
		return status;
 80009ce:	7d3b      	ldrb	r3, [r7, #20]
 80009d0:	e018      	b.n	8000a04 <Can20SendLongMsgCrc+0xdc>
	}
	else
	{
		status = Can20SendSimple(hcan, firstAddr, PtrData, LengthData);
 80009d2:	683b      	ldr	r3, [r7, #0]
 80009d4:	b2db      	uxtb	r3, r3
 80009d6:	687a      	ldr	r2, [r7, #4]
 80009d8:	68b9      	ldr	r1, [r7, #8]
 80009da:	68f8      	ldr	r0, [r7, #12]
 80009dc:	f7ff ff64 	bl	80008a8 <Can20SendSimple>
 80009e0:	4603      	mov	r3, r0
 80009e2:	753b      	strb	r3, [r7, #20]
		if(status != 0) return status;
 80009e4:	7d3b      	ldrb	r3, [r7, #20]
 80009e6:	2b00      	cmp	r3, #0
 80009e8:	d001      	beq.n	80009ee <Can20SendLongMsgCrc+0xc6>
 80009ea:	7d3b      	ldrb	r3, [r7, #20]
 80009ec:	e00a      	b.n	8000a04 <Can20SendLongMsgCrc+0xdc>
		status = Can20SendSimple(hcan, firstAddr+1, (uint8_t*)&Crc, 4);
 80009ee:	68bb      	ldr	r3, [r7, #8]
 80009f0:	1c59      	adds	r1, r3, #1
 80009f2:	f107 0210 	add.w	r2, r7, #16
 80009f6:	2304      	movs	r3, #4
 80009f8:	68f8      	ldr	r0, [r7, #12]
 80009fa:	f7ff ff55 	bl	80008a8 <Can20SendSimple>
 80009fe:	4603      	mov	r3, r0
 8000a00:	753b      	strb	r3, [r7, #20]

		return status;
 8000a02:	7d3b      	ldrb	r3, [r7, #20]
	}
}
 8000a04:	4618      	mov	r0, r3
 8000a06:	3718      	adds	r7, #24
 8000a08:	46bd      	mov	sp, r7
 8000a0a:	bd80      	pop	{r7, pc}
 8000a0c:	200005cc 	.word	0x200005cc

08000a10 <Can20SendCheck>:

HAL_StatusTypeDef Can20SendCheck(CAN_HandleTypeDef *hcan, uint32_t addr)
{
 8000a10:	b580      	push	{r7, lr}
 8000a12:	b08a      	sub	sp, #40	; 0x28
 8000a14:	af00      	add	r7, sp, #0
 8000a16:	6078      	str	r0, [r7, #4]
 8000a18:	6039      	str	r1, [r7, #0]
	HAL_StatusTypeDef status;
	uint32_t TxMailbox;
	CAN_TxHeaderTypeDef TxHeader;
	uint16_t SendFault = 0;
 8000a1a:	2300      	movs	r3, #0
 8000a1c:	84fb      	strh	r3, [r7, #38]	; 0x26


	  TxHeader.DLC = 0;
 8000a1e:	2300      	movs	r3, #0
 8000a20:	61bb      	str	r3, [r7, #24]
	  TxHeader.RTR = CAN_RTR_DATA;
 8000a22:	2300      	movs	r3, #0
 8000a24:	617b      	str	r3, [r7, #20]
	  TxHeader.TransmitGlobalTime = DISABLE;
 8000a26:	2300      	movs	r3, #0
 8000a28:	773b      	strb	r3, [r7, #28]

	  if(addr <= 0x7ff)
 8000a2a:	683b      	ldr	r3, [r7, #0]
 8000a2c:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8000a30:	d204      	bcs.n	8000a3c <Can20SendCheck+0x2c>
	  {
		  TxHeader.StdId = addr;
 8000a32:	683b      	ldr	r3, [r7, #0]
 8000a34:	60bb      	str	r3, [r7, #8]
		  TxHeader.IDE = CAN_ID_STD;
 8000a36:	2300      	movs	r3, #0
 8000a38:	613b      	str	r3, [r7, #16]
 8000a3a:	e003      	b.n	8000a44 <Can20SendCheck+0x34>
	  }
	  else
	  {
		  TxHeader.ExtId = addr;
 8000a3c:	683b      	ldr	r3, [r7, #0]
 8000a3e:	60fb      	str	r3, [r7, #12]
		  TxHeader.IDE = CAN_ID_EXT;
 8000a40:	2304      	movs	r3, #4
 8000a42:	613b      	str	r3, [r7, #16]
	  }

	  do
	  {
		  status = HAL_CAN_AddTxMessage(hcan, &TxHeader, NULL, &TxMailbox);
 8000a44:	f107 0320 	add.w	r3, r7, #32
 8000a48:	f107 0108 	add.w	r1, r7, #8
 8000a4c:	2200      	movs	r2, #0
 8000a4e:	6878      	ldr	r0, [r7, #4]
 8000a50:	f001 fae6 	bl	8002020 <HAL_CAN_AddTxMessage>
 8000a54:	4603      	mov	r3, r0
 8000a56:	f887 3025 	strb.w	r3, [r7, #37]	; 0x25
		  SendFault++;
 8000a5a:	8cfb      	ldrh	r3, [r7, #38]	; 0x26
 8000a5c:	3301      	adds	r3, #1
 8000a5e:	84fb      	strh	r3, [r7, #38]	; 0x26
	  }while(status != HAL_OK && SendFault < TRY_SEND_MAX_FAIL);
 8000a60:	f897 3025 	ldrb.w	r3, [r7, #37]	; 0x25
 8000a64:	2b00      	cmp	r3, #0
 8000a66:	d1ed      	bne.n	8000a44 <Can20SendCheck+0x34>

	  return status;
 8000a68:	f897 3025 	ldrb.w	r3, [r7, #37]	; 0x25
}
 8000a6c:	4618      	mov	r0, r3
 8000a6e:	3728      	adds	r7, #40	; 0x28
 8000a70:	46bd      	mov	sp, r7
 8000a72:	bd80      	pop	{r7, pc}

08000a74 <Can20ReceiverCheckFrameInit>:

HAL_StatusTypeDef Can20ReceiverCheckFrameInit(CanReceiver_t *CanReceiver, CAN_HandleTypeDef *hcan,
		uint32_t Addr, void(*ActionFunPtr)(CanReceiver_t *))
{
 8000a74:	b580      	push	{r7, lr}
 8000a76:	b084      	sub	sp, #16
 8000a78:	af00      	add	r7, sp, #0
 8000a7a:	60f8      	str	r0, [r7, #12]
 8000a7c:	60b9      	str	r1, [r7, #8]
 8000a7e:	607a      	str	r2, [r7, #4]
 8000a80:	603b      	str	r3, [r7, #0]
	CanReceiver -> IsCheckFrame  = 1;
 8000a82:	68fa      	ldr	r2, [r7, #12]
 8000a84:	f892 3218 	ldrb.w	r3, [r2, #536]	; 0x218
 8000a88:	f043 0304 	orr.w	r3, r3, #4
 8000a8c:	f882 3218 	strb.w	r3, [r2, #536]	; 0x218
	CanReceiver -> MsgSize       = 0;
 8000a90:	68fb      	ldr	r3, [r7, #12]
 8000a92:	2200      	movs	r2, #0
 8000a94:	f8c3 2208 	str.w	r2, [r3, #520]	; 0x208
	CanReceiver -> firstAddr     = Addr;
 8000a98:	68fb      	ldr	r3, [r7, #12]
 8000a9a:	687a      	ldr	r2, [r7, #4]
 8000a9c:	f8c3 2204 	str.w	r2, [r3, #516]	; 0x204
	CanReceiver -> hcan          = hcan;
 8000aa0:	68fb      	ldr	r3, [r7, #12]
 8000aa2:	68ba      	ldr	r2, [r7, #8]
 8000aa4:	f8c3 2210 	str.w	r2, [r3, #528]	; 0x210

	if(ActionFunPtr == NULL)
 8000aa8:	683b      	ldr	r3, [r7, #0]
 8000aaa:	2b00      	cmp	r3, #0
 8000aac:	d101      	bne.n	8000ab2 <Can20ReceiverCheckFrameInit+0x3e>
	{
		return HAL_ERROR;
 8000aae:	2301      	movs	r3, #1
 8000ab0:	e029      	b.n	8000b06 <Can20ReceiverCheckFrameInit+0x92>
	}

	CanReceiver -> ActionFunctionPtr = ActionFunPtr;
 8000ab2:	68fb      	ldr	r3, [r7, #12]
 8000ab4:	683a      	ldr	r2, [r7, #0]
 8000ab6:	f8c3 2224 	str.w	r2, [r3, #548]	; 0x224

#if USE_FREERTOS
	if(xTaskGetSchedulerState() == taskSCHEDULER_RUNNING)
 8000aba:	f006 fd07 	bl	80074cc <xTaskGetSchedulerState>
 8000abe:	4603      	mov	r3, r0
 8000ac0:	2b02      	cmp	r3, #2
 8000ac2:	d106      	bne.n	8000ad2 <Can20ReceiverCheckFrameInit+0x5e>
	xSemaphoreTake(xMapperModSemaphore, portMAX_DELAY);
 8000ac4:	4b12      	ldr	r3, [pc, #72]	; (8000b10 <Can20ReceiverCheckFrameInit+0x9c>)
 8000ac6:	681b      	ldr	r3, [r3, #0]
 8000ac8:	f04f 31ff 	mov.w	r1, #4294967295
 8000acc:	4618      	mov	r0, r3
 8000ace:	f005 fb83 	bl	80061d8 <xQueueSemaphoreTake>
#endif
	CanReceiverMapper[CanReceiverCounter] = CanReceiver;
 8000ad2:	4b10      	ldr	r3, [pc, #64]	; (8000b14 <Can20ReceiverCheckFrameInit+0xa0>)
 8000ad4:	881b      	ldrh	r3, [r3, #0]
 8000ad6:	4619      	mov	r1, r3
 8000ad8:	4a0f      	ldr	r2, [pc, #60]	; (8000b18 <Can20ReceiverCheckFrameInit+0xa4>)
 8000ada:	68fb      	ldr	r3, [r7, #12]
 8000adc:	f842 3021 	str.w	r3, [r2, r1, lsl #2]
	CanReceiverCounter++;
 8000ae0:	4b0c      	ldr	r3, [pc, #48]	; (8000b14 <Can20ReceiverCheckFrameInit+0xa0>)
 8000ae2:	881b      	ldrh	r3, [r3, #0]
 8000ae4:	3301      	adds	r3, #1
 8000ae6:	b29a      	uxth	r2, r3
 8000ae8:	4b0a      	ldr	r3, [pc, #40]	; (8000b14 <Can20ReceiverCheckFrameInit+0xa0>)
 8000aea:	801a      	strh	r2, [r3, #0]
#if USE_FREERTOS
	if(xTaskGetSchedulerState() == taskSCHEDULER_RUNNING)
 8000aec:	f006 fcee 	bl	80074cc <xTaskGetSchedulerState>
 8000af0:	4603      	mov	r3, r0
 8000af2:	2b02      	cmp	r3, #2
 8000af4:	d106      	bne.n	8000b04 <Can20ReceiverCheckFrameInit+0x90>
	xSemaphoreGive(xMapperModSemaphore);
 8000af6:	4b06      	ldr	r3, [pc, #24]	; (8000b10 <Can20ReceiverCheckFrameInit+0x9c>)
 8000af8:	6818      	ldr	r0, [r3, #0]
 8000afa:	2300      	movs	r3, #0
 8000afc:	2200      	movs	r2, #0
 8000afe:	2100      	movs	r1, #0
 8000b00:	f005 f8de 	bl	8005cc0 <xQueueGenericSend>
#endif


	return HAL_OK;
 8000b04:	2300      	movs	r3, #0

}
 8000b06:	4618      	mov	r0, r3
 8000b08:	3710      	adds	r7, #16
 8000b0a:	46bd      	mov	sp, r7
 8000b0c:	bd80      	pop	{r7, pc}
 8000b0e:	bf00      	nop
 8000b10:	20000110 	.word	0x20000110
 8000b14:	200005c8 	.word	0x200005c8
 8000b18:	20000118 	.word	0x20000118

08000b1c <Can20ReceiverInit>:

HAL_StatusTypeDef Can20ReceiverInit(CanReceiver_t *CanReceiver, size_t MsgDataLength, CAN_HandleTypeDef *hcan,
		uint32_t FirstAddr, uint8_t CrcEnable, void(*ActionFunPtr)(CanReceiver_t *) )
{
 8000b1c:	b580      	push	{r7, lr}
 8000b1e:	b084      	sub	sp, #16
 8000b20:	af00      	add	r7, sp, #0
 8000b22:	60f8      	str	r0, [r7, #12]
 8000b24:	60b9      	str	r1, [r7, #8]
 8000b26:	607a      	str	r2, [r7, #4]
 8000b28:	603b      	str	r3, [r7, #0]

#if DYNAMIC_ALLOCATION_BUF
	CanReceiver -> buf_8_ptr = malloc(MsgDataLength);
#else
	CanReceiver -> buf_8_ptr = CanReceiver -> buf_8;
 8000b2a:	68fb      	ldr	r3, [r7, #12]
 8000b2c:	1d1a      	adds	r2, r3, #4
 8000b2e:	68fb      	ldr	r3, [r7, #12]
 8000b30:	601a      	str	r2, [r3, #0]
#endif
	CanReceiver -> IsCheckFrame  = 0;
 8000b32:	68fa      	ldr	r2, [r7, #12]
 8000b34:	f892 3218 	ldrb.w	r3, [r2, #536]	; 0x218
 8000b38:	f36f 0382 	bfc	r3, #2, #1
 8000b3c:	f882 3218 	strb.w	r3, [r2, #536]	; 0x218
	CanReceiver -> DataIsCorrect = 0;
 8000b40:	68fa      	ldr	r2, [r7, #12]
 8000b42:	f892 3218 	ldrb.w	r3, [r2, #536]	; 0x218
 8000b46:	f36f 0341 	bfc	r3, #1, #1
 8000b4a:	f882 3218 	strb.w	r3, [r2, #536]	; 0x218
	CanReceiver -> MsgSize       = MsgDataLength;
 8000b4e:	68fb      	ldr	r3, [r7, #12]
 8000b50:	68ba      	ldr	r2, [r7, #8]
 8000b52:	f8c3 2208 	str.w	r2, [r3, #520]	; 0x208
	CanReceiver -> hcan          = hcan;
 8000b56:	68fb      	ldr	r3, [r7, #12]
 8000b58:	687a      	ldr	r2, [r7, #4]
 8000b5a:	f8c3 2210 	str.w	r2, [r3, #528]	; 0x210
	CanReceiver -> firstAddr     = FirstAddr;
 8000b5e:	68fb      	ldr	r3, [r7, #12]
 8000b60:	683a      	ldr	r2, [r7, #0]
 8000b62:	f8c3 2204 	str.w	r2, [r3, #516]	; 0x204
	CanReceiver -> CrcEnabled    = CrcEnable;
 8000b66:	7e3b      	ldrb	r3, [r7, #24]
 8000b68:	f003 0301 	and.w	r3, r3, #1
 8000b6c:	b2d9      	uxtb	r1, r3
 8000b6e:	68fa      	ldr	r2, [r7, #12]
 8000b70:	f892 3218 	ldrb.w	r3, [r2, #536]	; 0x218
 8000b74:	f361 0300 	bfi	r3, r1, #0, #1
 8000b78:	f882 3218 	strb.w	r3, [r2, #536]	; 0x218
	CanReceiver -> ActionFunctionPtr   = ActionFunPtr;
 8000b7c:	68fb      	ldr	r3, [r7, #12]
 8000b7e:	69fa      	ldr	r2, [r7, #28]
 8000b80:	f8c3 2224 	str.w	r2, [r3, #548]	; 0x224

	//dodaj kontrole czy juz jest na liscie
	if(CanReceiver ->buf_8_ptr != NULL)
 8000b84:	68fb      	ldr	r3, [r7, #12]
 8000b86:	681b      	ldr	r3, [r3, #0]
 8000b88:	2b00      	cmp	r3, #0
 8000b8a:	d026      	beq.n	8000bda <Can20ReceiverInit+0xbe>
	{
#if USE_FREERTOS
		if(xTaskGetSchedulerState() == taskSCHEDULER_RUNNING)
 8000b8c:	f006 fc9e 	bl	80074cc <xTaskGetSchedulerState>
 8000b90:	4603      	mov	r3, r0
 8000b92:	2b02      	cmp	r3, #2
 8000b94:	d106      	bne.n	8000ba4 <Can20ReceiverInit+0x88>
		xSemaphoreTake(xMapperModSemaphore, portMAX_DELAY);
 8000b96:	4b13      	ldr	r3, [pc, #76]	; (8000be4 <Can20ReceiverInit+0xc8>)
 8000b98:	681b      	ldr	r3, [r3, #0]
 8000b9a:	f04f 31ff 	mov.w	r1, #4294967295
 8000b9e:	4618      	mov	r0, r3
 8000ba0:	f005 fb1a 	bl	80061d8 <xQueueSemaphoreTake>
#endif
		CanReceiverMapper[CanReceiverCounter] = CanReceiver;
 8000ba4:	4b10      	ldr	r3, [pc, #64]	; (8000be8 <Can20ReceiverInit+0xcc>)
 8000ba6:	881b      	ldrh	r3, [r3, #0]
 8000ba8:	4619      	mov	r1, r3
 8000baa:	4a10      	ldr	r2, [pc, #64]	; (8000bec <Can20ReceiverInit+0xd0>)
 8000bac:	68fb      	ldr	r3, [r7, #12]
 8000bae:	f842 3021 	str.w	r3, [r2, r1, lsl #2]
		CanReceiverCounter++;
 8000bb2:	4b0d      	ldr	r3, [pc, #52]	; (8000be8 <Can20ReceiverInit+0xcc>)
 8000bb4:	881b      	ldrh	r3, [r3, #0]
 8000bb6:	3301      	adds	r3, #1
 8000bb8:	b29a      	uxth	r2, r3
 8000bba:	4b0b      	ldr	r3, [pc, #44]	; (8000be8 <Can20ReceiverInit+0xcc>)
 8000bbc:	801a      	strh	r2, [r3, #0]
#if USE_FREERTOS
		if(xTaskGetSchedulerState() == taskSCHEDULER_RUNNING)
 8000bbe:	f006 fc85 	bl	80074cc <xTaskGetSchedulerState>
 8000bc2:	4603      	mov	r3, r0
 8000bc4:	2b02      	cmp	r3, #2
 8000bc6:	d106      	bne.n	8000bd6 <Can20ReceiverInit+0xba>
		xSemaphoreGive(xMapperModSemaphore);
 8000bc8:	4b06      	ldr	r3, [pc, #24]	; (8000be4 <Can20ReceiverInit+0xc8>)
 8000bca:	6818      	ldr	r0, [r3, #0]
 8000bcc:	2300      	movs	r3, #0
 8000bce:	2200      	movs	r2, #0
 8000bd0:	2100      	movs	r1, #0
 8000bd2:	f005 f875 	bl	8005cc0 <xQueueGenericSend>
#endif
		return HAL_OK;
 8000bd6:	2300      	movs	r3, #0
 8000bd8:	e000      	b.n	8000bdc <Can20ReceiverInit+0xc0>
	}
	else
	{
		return HAL_ERROR;
 8000bda:	2301      	movs	r3, #1
	}


}
 8000bdc:	4618      	mov	r0, r3
 8000bde:	3710      	adds	r7, #16
 8000be0:	46bd      	mov	sp, r7
 8000be2:	bd80      	pop	{r7, pc}
 8000be4:	20000110 	.word	0x20000110
 8000be8:	200005c8 	.word	0x200005c8
 8000bec:	20000118 	.word	0x20000118

08000bf0 <CalculateTargetFrameSize>:

static size_t CalculateTargetFrameSize(CanReceiver_t *CanReceiver, uint8_t ActualFrame)
{
 8000bf0:	b480      	push	{r7}
 8000bf2:	b085      	sub	sp, #20
 8000bf4:	af00      	add	r7, sp, #0
 8000bf6:	6078      	str	r0, [r7, #4]
 8000bf8:	460b      	mov	r3, r1
 8000bfa:	70fb      	strb	r3, [r7, #3]
	size_t MsgSize = CanReceiver -> MsgSize;
 8000bfc:	687b      	ldr	r3, [r7, #4]
 8000bfe:	f8d3 3208 	ldr.w	r3, [r3, #520]	; 0x208
 8000c02:	60bb      	str	r3, [r7, #8]
	uint8_t FrameAmount;
	if(MsgSize <= 8)
 8000c04:	68bb      	ldr	r3, [r7, #8]
 8000c06:	2b08      	cmp	r3, #8
 8000c08:	d801      	bhi.n	8000c0e <CalculateTargetFrameSize+0x1e>
	{
		return MsgSize;
 8000c0a:	68bb      	ldr	r3, [r7, #8]
 8000c0c:	e01d      	b.n	8000c4a <CalculateTargetFrameSize+0x5a>
	}
	else
	{
		if(MsgSize%8 == 0)
 8000c0e:	68bb      	ldr	r3, [r7, #8]
 8000c10:	f003 0307 	and.w	r3, r3, #7
 8000c14:	2b00      	cmp	r3, #0
 8000c16:	d101      	bne.n	8000c1c <CalculateTargetFrameSize+0x2c>
		{
			return 8U;
 8000c18:	2308      	movs	r3, #8
 8000c1a:	e016      	b.n	8000c4a <CalculateTargetFrameSize+0x5a>
		}
		else
		{
			FrameAmount = MsgSize /8;
 8000c1c:	68bb      	ldr	r3, [r7, #8]
 8000c1e:	08db      	lsrs	r3, r3, #3
 8000c20:	73fb      	strb	r3, [r7, #15]
			if(MsgSize % 8) FrameAmount++;
 8000c22:	68bb      	ldr	r3, [r7, #8]
 8000c24:	f003 0307 	and.w	r3, r3, #7
 8000c28:	2b00      	cmp	r3, #0
 8000c2a:	d002      	beq.n	8000c32 <CalculateTargetFrameSize+0x42>
 8000c2c:	7bfb      	ldrb	r3, [r7, #15]
 8000c2e:	3301      	adds	r3, #1
 8000c30:	73fb      	strb	r3, [r7, #15]

			if(FrameAmount == ActualFrame+1)
 8000c32:	7bfa      	ldrb	r2, [r7, #15]
 8000c34:	78fb      	ldrb	r3, [r7, #3]
 8000c36:	3301      	adds	r3, #1
 8000c38:	429a      	cmp	r2, r3
 8000c3a:	d105      	bne.n	8000c48 <CalculateTargetFrameSize+0x58>
			{
				return MsgSize - (ActualFrame * 8);
 8000c3c:	78fb      	ldrb	r3, [r7, #3]
 8000c3e:	00db      	lsls	r3, r3, #3
 8000c40:	461a      	mov	r2, r3
 8000c42:	68bb      	ldr	r3, [r7, #8]
 8000c44:	1a9b      	subs	r3, r3, r2
 8000c46:	e000      	b.n	8000c4a <CalculateTargetFrameSize+0x5a>
			}
			else
			{
				return 8U;
 8000c48:	2308      	movs	r3, #8
			}
		}
	}
}
 8000c4a:	4618      	mov	r0, r3
 8000c4c:	3714      	adds	r7, #20
 8000c4e:	46bd      	mov	sp, r7
 8000c50:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000c54:	4770      	bx	lr
	...

08000c58 <Can20ReceiverRoutine>:

CANlib_StatusTypedef Can20ReceiverRoutine(CAN_HandleTypeDef *hcan, uint32_t rxfifo)
{
 8000c58:	b590      	push	{r4, r7, lr}
 8000c5a:	b091      	sub	sp, #68	; 0x44
 8000c5c:	af00      	add	r7, sp, #0
 8000c5e:	6078      	str	r0, [r7, #4]
 8000c60:	6039      	str	r1, [r7, #0]
	uint8_t RxData[8];
	uint8_t FrameAmount, ActualFrame;
	size_t TargetFrameSize;
	uint32_t CalculatedCRC;

	if(HAL_CAN_GetRxMessage(hcan, rxfifo, &RxHeader, RxData) != HAL_OK) return CANLIB_ERR;
 8000c62:	f107 0308 	add.w	r3, r7, #8
 8000c66:	f107 0210 	add.w	r2, r7, #16
 8000c6a:	6839      	ldr	r1, [r7, #0]
 8000c6c:	6878      	ldr	r0, [r7, #4]
 8000c6e:	f001 faa7 	bl	80021c0 <HAL_CAN_GetRxMessage>
 8000c72:	4603      	mov	r3, r0
 8000c74:	2b00      	cmp	r3, #0
 8000c76:	d001      	beq.n	8000c7c <Can20ReceiverRoutine+0x24>
 8000c78:	2305      	movs	r3, #5
 8000c7a:	e14c      	b.n	8000f16 <Can20ReceiverRoutine+0x2be>
	if(RxHeader.IDE)
 8000c7c:	69bb      	ldr	r3, [r7, #24]
 8000c7e:	2b00      	cmp	r3, #0
 8000c80:	d002      	beq.n	8000c88 <Can20ReceiverRoutine+0x30>
	{
		Addr = RxHeader.ExtId;
 8000c82:	697b      	ldr	r3, [r7, #20]
 8000c84:	63fb      	str	r3, [r7, #60]	; 0x3c
 8000c86:	e001      	b.n	8000c8c <Can20ReceiverRoutine+0x34>
	}
	else
	{
		Addr = RxHeader.StdId;
 8000c88:	693b      	ldr	r3, [r7, #16]
 8000c8a:	63fb      	str	r3, [r7, #60]	; 0x3c
	}

	if(CanReceiverCounter)
 8000c8c:	4ba4      	ldr	r3, [pc, #656]	; (8000f20 <Can20ReceiverRoutine+0x2c8>)
 8000c8e:	881b      	ldrh	r3, [r3, #0]
 8000c90:	2b00      	cmp	r3, #0
 8000c92:	f000 813f 	beq.w	8000f14 <Can20ReceiverRoutine+0x2bc>
	{
		for(uint16_t i=0; i<CanReceiverCounter; i++)
 8000c96:	2300      	movs	r3, #0
 8000c98:	873b      	strh	r3, [r7, #56]	; 0x38
 8000c9a:	e135      	b.n	8000f08 <Can20ReceiverRoutine+0x2b0>
		{
			if(CanReceiverMapper[i] -> hcan == hcan) //Check canbus number
 8000c9c:	8f3b      	ldrh	r3, [r7, #56]	; 0x38
 8000c9e:	4aa1      	ldr	r2, [pc, #644]	; (8000f24 <Can20ReceiverRoutine+0x2cc>)
 8000ca0:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8000ca4:	f8d3 3210 	ldr.w	r3, [r3, #528]	; 0x210
 8000ca8:	687a      	ldr	r2, [r7, #4]
 8000caa:	429a      	cmp	r2, r3
 8000cac:	f040 8129 	bne.w	8000f02 <Can20ReceiverRoutine+0x2aa>
			{
				FrameAmount = CanReceiverMapper[i] -> MsgSize /8;
 8000cb0:	8f3b      	ldrh	r3, [r7, #56]	; 0x38
 8000cb2:	4a9c      	ldr	r2, [pc, #624]	; (8000f24 <Can20ReceiverRoutine+0x2cc>)
 8000cb4:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8000cb8:	f8d3 3208 	ldr.w	r3, [r3, #520]	; 0x208
 8000cbc:	08db      	lsrs	r3, r3, #3
 8000cbe:	f887 303b 	strb.w	r3, [r7, #59]	; 0x3b
				if(CanReceiverMapper[i] -> MsgSize % 8) FrameAmount++;
 8000cc2:	8f3b      	ldrh	r3, [r7, #56]	; 0x38
 8000cc4:	4a97      	ldr	r2, [pc, #604]	; (8000f24 <Can20ReceiverRoutine+0x2cc>)
 8000cc6:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8000cca:	f8d3 3208 	ldr.w	r3, [r3, #520]	; 0x208
 8000cce:	f003 0307 	and.w	r3, r3, #7
 8000cd2:	2b00      	cmp	r3, #0
 8000cd4:	d004      	beq.n	8000ce0 <Can20ReceiverRoutine+0x88>
 8000cd6:	f897 303b 	ldrb.w	r3, [r7, #59]	; 0x3b
 8000cda:	3301      	adds	r3, #1
 8000cdc:	f887 303b 	strb.w	r3, [r7, #59]	; 0x3b
				//
				//ControlMsg routine
				//
				if(CanReceiverMapper[i] -> IsCheckFrame && CanReceiverMapper[i] -> firstAddr == Addr)
 8000ce0:	8f3b      	ldrh	r3, [r7, #56]	; 0x38
 8000ce2:	4a90      	ldr	r2, [pc, #576]	; (8000f24 <Can20ReceiverRoutine+0x2cc>)
 8000ce4:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8000ce8:	f893 3218 	ldrb.w	r3, [r3, #536]	; 0x218
 8000cec:	f003 0304 	and.w	r3, r3, #4
 8000cf0:	b2db      	uxtb	r3, r3
 8000cf2:	2b00      	cmp	r3, #0
 8000cf4:	d029      	beq.n	8000d4a <Can20ReceiverRoutine+0xf2>
 8000cf6:	8f3b      	ldrh	r3, [r7, #56]	; 0x38
 8000cf8:	4a8a      	ldr	r2, [pc, #552]	; (8000f24 <Can20ReceiverRoutine+0x2cc>)
 8000cfa:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8000cfe:	f8d3 3204 	ldr.w	r3, [r3, #516]	; 0x204
 8000d02:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 8000d04:	429a      	cmp	r2, r3
 8000d06:	d120      	bne.n	8000d4a <Can20ReceiverRoutine+0xf2>
				{
					CanReceiverMapper[i] -> CpltReceiveTimeStamp = __GET_MS;
 8000d08:	8f3b      	ldrh	r3, [r7, #56]	; 0x38
 8000d0a:	4a86      	ldr	r2, [pc, #536]	; (8000f24 <Can20ReceiverRoutine+0x2cc>)
 8000d0c:	f852 4023 	ldr.w	r4, [r2, r3, lsl #2]
 8000d10:	f000 ff4e 	bl	8001bb0 <HAL_GetTick>
 8000d14:	4603      	mov	r3, r0
 8000d16:	f8c4 3214 	str.w	r3, [r4, #532]	; 0x214
					if(CanReceiverMapper[i] -> ActionFunctionPtr != NULL)
 8000d1a:	8f3b      	ldrh	r3, [r7, #56]	; 0x38
 8000d1c:	4a81      	ldr	r2, [pc, #516]	; (8000f24 <Can20ReceiverRoutine+0x2cc>)
 8000d1e:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8000d22:	f8d3 3224 	ldr.w	r3, [r3, #548]	; 0x224
 8000d26:	2b00      	cmp	r3, #0
 8000d28:	d00d      	beq.n	8000d46 <Can20ReceiverRoutine+0xee>
					{
						CanReceiverMapper[i] -> ActionFunctionPtr(CanReceiverMapper[i]);
 8000d2a:	8f3b      	ldrh	r3, [r7, #56]	; 0x38
 8000d2c:	4a7d      	ldr	r2, [pc, #500]	; (8000f24 <Can20ReceiverRoutine+0x2cc>)
 8000d2e:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8000d32:	f8d3 3224 	ldr.w	r3, [r3, #548]	; 0x224
 8000d36:	8f3a      	ldrh	r2, [r7, #56]	; 0x38
 8000d38:	497a      	ldr	r1, [pc, #488]	; (8000f24 <Can20ReceiverRoutine+0x2cc>)
 8000d3a:	f851 2022 	ldr.w	r2, [r1, r2, lsl #2]
 8000d3e:	4610      	mov	r0, r2
 8000d40:	4798      	blx	r3
						return CANLIB_OK;
 8000d42:	2300      	movs	r3, #0
 8000d44:	e0e7      	b.n	8000f16 <Can20ReceiverRoutine+0x2be>
					}
					else return CANLIB_MEMORY_ERR;
 8000d46:	2304      	movs	r3, #4
 8000d48:	e0e5      	b.n	8000f16 <Can20ReceiverRoutine+0x2be>
				}
				//
				//
				//
				if(Addr >= CanReceiverMapper[i]->firstAddr && Addr < CanReceiverMapper[i]->firstAddr + FrameAmount + (CanReceiverMapper[i]->CrcEnabled)?1:0) //Address pool for msg
 8000d4a:	8f3b      	ldrh	r3, [r7, #56]	; 0x38
 8000d4c:	4a75      	ldr	r2, [pc, #468]	; (8000f24 <Can20ReceiverRoutine+0x2cc>)
 8000d4e:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8000d52:	f8d3 3204 	ldr.w	r3, [r3, #516]	; 0x204
 8000d56:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 8000d58:	429a      	cmp	r2, r3
 8000d5a:	f0c0 80d2 	bcc.w	8000f02 <Can20ReceiverRoutine+0x2aa>
 8000d5e:	8f3b      	ldrh	r3, [r7, #56]	; 0x38
 8000d60:	4a70      	ldr	r2, [pc, #448]	; (8000f24 <Can20ReceiverRoutine+0x2cc>)
 8000d62:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8000d66:	f8d3 2204 	ldr.w	r2, [r3, #516]	; 0x204
 8000d6a:	f897 303b 	ldrb.w	r3, [r7, #59]	; 0x3b
 8000d6e:	4413      	add	r3, r2
 8000d70:	8f3a      	ldrh	r2, [r7, #56]	; 0x38
 8000d72:	496c      	ldr	r1, [pc, #432]	; (8000f24 <Can20ReceiverRoutine+0x2cc>)
 8000d74:	f851 2022 	ldr.w	r2, [r1, r2, lsl #2]
 8000d78:	f892 2218 	ldrb.w	r2, [r2, #536]	; 0x218
 8000d7c:	f3c2 0200 	ubfx	r2, r2, #0, #1
 8000d80:	b2d2      	uxtb	r2, r2
 8000d82:	4413      	add	r3, r2
 8000d84:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 8000d86:	429a      	cmp	r2, r3
 8000d88:	f080 80bb 	bcs.w	8000f02 <Can20ReceiverRoutine+0x2aa>
				{
					//
					//CRC - calculation and check
					//
					if(Addr == CanReceiverMapper[i]->firstAddr + FrameAmount)
 8000d8c:	8f3b      	ldrh	r3, [r7, #56]	; 0x38
 8000d8e:	4a65      	ldr	r2, [pc, #404]	; (8000f24 <Can20ReceiverRoutine+0x2cc>)
 8000d90:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8000d94:	f8d3 2204 	ldr.w	r2, [r3, #516]	; 0x204
 8000d98:	f897 303b 	ldrb.w	r3, [r7, #59]	; 0x3b
 8000d9c:	4413      	add	r3, r2
 8000d9e:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 8000da0:	429a      	cmp	r2, r3
 8000da2:	d152      	bne.n	8000e4a <Can20ReceiverRoutine+0x1f2>
					{
						if(RxHeader.DLC == 4)
 8000da4:	6a3b      	ldr	r3, [r7, #32]
 8000da6:	2b04      	cmp	r3, #4
 8000da8:	d12b      	bne.n	8000e02 <Can20ReceiverRoutine+0x1aa>
						{
							memcpy(&CanReceiverMapper[i]->crc, RxData, 4);
 8000daa:	8f3b      	ldrh	r3, [r7, #56]	; 0x38
 8000dac:	4a5d      	ldr	r2, [pc, #372]	; (8000f24 <Can20ReceiverRoutine+0x2cc>)
 8000dae:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8000db2:	f503 7303 	add.w	r3, r3, #524	; 0x20c
 8000db6:	68ba      	ldr	r2, [r7, #8]
 8000db8:	601a      	str	r2, [r3, #0]
							CalculatedCRC = HAL_CRC_Calculate(&hcrc, CanReceiverMapper[i]->buf_32_ptr, CanReceiverMapper[i]->MsgSize / 4);
 8000dba:	8f3b      	ldrh	r3, [r7, #56]	; 0x38
 8000dbc:	4a59      	ldr	r2, [pc, #356]	; (8000f24 <Can20ReceiverRoutine+0x2cc>)
 8000dbe:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8000dc2:	6819      	ldr	r1, [r3, #0]
 8000dc4:	8f3b      	ldrh	r3, [r7, #56]	; 0x38
 8000dc6:	4a57      	ldr	r2, [pc, #348]	; (8000f24 <Can20ReceiverRoutine+0x2cc>)
 8000dc8:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8000dcc:	f8d3 3208 	ldr.w	r3, [r3, #520]	; 0x208
 8000dd0:	089b      	lsrs	r3, r3, #2
 8000dd2:	461a      	mov	r2, r3
 8000dd4:	4854      	ldr	r0, [pc, #336]	; (8000f28 <Can20ReceiverRoutine+0x2d0>)
 8000dd6:	f001 fe97 	bl	8002b08 <HAL_CRC_Calculate>
 8000dda:	62f8      	str	r0, [r7, #44]	; 0x2c
						}
						else return CANLIB_SIZE_ERR;

						CanReceiverMapper[i] -> CpltReceiveTimeStamp = __GET_MS;
 8000ddc:	8f3b      	ldrh	r3, [r7, #56]	; 0x38
 8000dde:	4a51      	ldr	r2, [pc, #324]	; (8000f24 <Can20ReceiverRoutine+0x2cc>)
 8000de0:	f852 4023 	ldr.w	r4, [r2, r3, lsl #2]
 8000de4:	f000 fee4 	bl	8001bb0 <HAL_GetTick>
 8000de8:	4603      	mov	r3, r0
 8000dea:	f8c4 3214 	str.w	r3, [r4, #532]	; 0x214

						if(CalculatedCRC == CanReceiverMapper[i]->crc)
 8000dee:	8f3b      	ldrh	r3, [r7, #56]	; 0x38
 8000df0:	4a4c      	ldr	r2, [pc, #304]	; (8000f24 <Can20ReceiverRoutine+0x2cc>)
 8000df2:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8000df6:	f8d3 320c 	ldr.w	r3, [r3, #524]	; 0x20c
 8000dfa:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8000dfc:	429a      	cmp	r2, r3
 8000dfe:	d122      	bne.n	8000e46 <Can20ReceiverRoutine+0x1ee>
 8000e00:	e001      	b.n	8000e06 <Can20ReceiverRoutine+0x1ae>
						else return CANLIB_SIZE_ERR;
 8000e02:	2303      	movs	r3, #3
 8000e04:	e087      	b.n	8000f16 <Can20ReceiverRoutine+0x2be>
						{
							CanReceiverMapper[i] -> DataIsCorrect = 1;
 8000e06:	8f3b      	ldrh	r3, [r7, #56]	; 0x38
 8000e08:	4a46      	ldr	r2, [pc, #280]	; (8000f24 <Can20ReceiverRoutine+0x2cc>)
 8000e0a:	f852 2023 	ldr.w	r2, [r2, r3, lsl #2]
 8000e0e:	f892 3218 	ldrb.w	r3, [r2, #536]	; 0x218
 8000e12:	f043 0302 	orr.w	r3, r3, #2
 8000e16:	f882 3218 	strb.w	r3, [r2, #536]	; 0x218
							if(CanReceiverMapper[i] -> ActionFunctionPtr != NULL)
 8000e1a:	8f3b      	ldrh	r3, [r7, #56]	; 0x38
 8000e1c:	4a41      	ldr	r2, [pc, #260]	; (8000f24 <Can20ReceiverRoutine+0x2cc>)
 8000e1e:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8000e22:	f8d3 3224 	ldr.w	r3, [r3, #548]	; 0x224
 8000e26:	2b00      	cmp	r3, #0
 8000e28:	d00b      	beq.n	8000e42 <Can20ReceiverRoutine+0x1ea>
							{
								CanReceiverMapper[i] -> ActionFunctionPtr(CanReceiverMapper[i]);
 8000e2a:	8f3b      	ldrh	r3, [r7, #56]	; 0x38
 8000e2c:	4a3d      	ldr	r2, [pc, #244]	; (8000f24 <Can20ReceiverRoutine+0x2cc>)
 8000e2e:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8000e32:	f8d3 3224 	ldr.w	r3, [r3, #548]	; 0x224
 8000e36:	8f3a      	ldrh	r2, [r7, #56]	; 0x38
 8000e38:	493a      	ldr	r1, [pc, #232]	; (8000f24 <Can20ReceiverRoutine+0x2cc>)
 8000e3a:	f851 2022 	ldr.w	r2, [r1, r2, lsl #2]
 8000e3e:	4610      	mov	r0, r2
 8000e40:	4798      	blx	r3
							}

							return CANLIB_OK;
 8000e42:	2300      	movs	r3, #0
 8000e44:	e067      	b.n	8000f16 <Can20ReceiverRoutine+0x2be>
						}
						else
						{
							return CANLIB_CRC_ERR;
 8000e46:	2302      	movs	r3, #2
 8000e48:	e065      	b.n	8000f16 <Can20ReceiverRoutine+0x2be>
					//
					//
					else
					{
						//cpy msg frame to buf
						ActualFrame = Addr - (CanReceiverMapper[i] -> firstAddr);
 8000e4a:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8000e4c:	b2da      	uxtb	r2, r3
 8000e4e:	8f3b      	ldrh	r3, [r7, #56]	; 0x38
 8000e50:	4934      	ldr	r1, [pc, #208]	; (8000f24 <Can20ReceiverRoutine+0x2cc>)
 8000e52:	f851 3023 	ldr.w	r3, [r1, r3, lsl #2]
 8000e56:	f8d3 3204 	ldr.w	r3, [r3, #516]	; 0x204
 8000e5a:	b2db      	uxtb	r3, r3
 8000e5c:	1ad3      	subs	r3, r2, r3
 8000e5e:	f887 3037 	strb.w	r3, [r7, #55]	; 0x37
						TargetFrameSize = CalculateTargetFrameSize(CanReceiverMapper[i], ActualFrame);
 8000e62:	8f3b      	ldrh	r3, [r7, #56]	; 0x38
 8000e64:	4a2f      	ldr	r2, [pc, #188]	; (8000f24 <Can20ReceiverRoutine+0x2cc>)
 8000e66:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8000e6a:	f897 2037 	ldrb.w	r2, [r7, #55]	; 0x37
 8000e6e:	4611      	mov	r1, r2
 8000e70:	4618      	mov	r0, r3
 8000e72:	f7ff febd 	bl	8000bf0 <CalculateTargetFrameSize>
 8000e76:	6338      	str	r0, [r7, #48]	; 0x30
						if(TargetFrameSize == RxHeader.DLC)
 8000e78:	6a3b      	ldr	r3, [r7, #32]
 8000e7a:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8000e7c:	429a      	cmp	r2, r3
 8000e7e:	d13e      	bne.n	8000efe <Can20ReceiverRoutine+0x2a6>
						{
							CanReceiverMapper[i] -> DataIsCorrect = 0;
 8000e80:	8f3b      	ldrh	r3, [r7, #56]	; 0x38
 8000e82:	4a28      	ldr	r2, [pc, #160]	; (8000f24 <Can20ReceiverRoutine+0x2cc>)
 8000e84:	f852 2023 	ldr.w	r2, [r2, r3, lsl #2]
 8000e88:	f892 3218 	ldrb.w	r3, [r2, #536]	; 0x218
 8000e8c:	f36f 0341 	bfc	r3, #1, #1
 8000e90:	f882 3218 	strb.w	r3, [r2, #536]	; 0x218
							memcpy(CanReceiverMapper[i]->buf_8_ptr + (ActualFrame*8), RxData, RxHeader.DLC);
 8000e94:	8f3b      	ldrh	r3, [r7, #56]	; 0x38
 8000e96:	4a23      	ldr	r2, [pc, #140]	; (8000f24 <Can20ReceiverRoutine+0x2cc>)
 8000e98:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8000e9c:	681b      	ldr	r3, [r3, #0]
 8000e9e:	f897 2037 	ldrb.w	r2, [r7, #55]	; 0x37
 8000ea2:	00d2      	lsls	r2, r2, #3
 8000ea4:	4413      	add	r3, r2
 8000ea6:	6a3a      	ldr	r2, [r7, #32]
 8000ea8:	f107 0108 	add.w	r1, r7, #8
 8000eac:	4618      	mov	r0, r3
 8000eae:	f007 fcf1 	bl	8008894 <memcpy>
							//
							// If CRC is disable
							//
							if(Addr == CanReceiverMapper[i]->firstAddr + FrameAmount -1 && CanReceiverMapper[i]->CrcEnabled == DISABLE)
 8000eb2:	8f3b      	ldrh	r3, [r7, #56]	; 0x38
 8000eb4:	4a1b      	ldr	r2, [pc, #108]	; (8000f24 <Can20ReceiverRoutine+0x2cc>)
 8000eb6:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8000eba:	f8d3 2204 	ldr.w	r2, [r3, #516]	; 0x204
 8000ebe:	f897 303b 	ldrb.w	r3, [r7, #59]	; 0x3b
 8000ec2:	4413      	add	r3, r2
 8000ec4:	3b01      	subs	r3, #1
 8000ec6:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 8000ec8:	429a      	cmp	r2, r3
 8000eca:	d116      	bne.n	8000efa <Can20ReceiverRoutine+0x2a2>
 8000ecc:	8f3b      	ldrh	r3, [r7, #56]	; 0x38
 8000ece:	4a15      	ldr	r2, [pc, #84]	; (8000f24 <Can20ReceiverRoutine+0x2cc>)
 8000ed0:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8000ed4:	f893 3218 	ldrb.w	r3, [r3, #536]	; 0x218
 8000ed8:	f003 0301 	and.w	r3, r3, #1
 8000edc:	b2db      	uxtb	r3, r3
 8000ede:	2b00      	cmp	r3, #0
 8000ee0:	d10b      	bne.n	8000efa <Can20ReceiverRoutine+0x2a2>
							{
								CanReceiverMapper[i] -> ActionFunctionPtr(CanReceiverMapper[i]);
 8000ee2:	8f3b      	ldrh	r3, [r7, #56]	; 0x38
 8000ee4:	4a0f      	ldr	r2, [pc, #60]	; (8000f24 <Can20ReceiverRoutine+0x2cc>)
 8000ee6:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8000eea:	f8d3 3224 	ldr.w	r3, [r3, #548]	; 0x224
 8000eee:	8f3a      	ldrh	r2, [r7, #56]	; 0x38
 8000ef0:	490c      	ldr	r1, [pc, #48]	; (8000f24 <Can20ReceiverRoutine+0x2cc>)
 8000ef2:	f851 2022 	ldr.w	r2, [r1, r2, lsl #2]
 8000ef6:	4610      	mov	r0, r2
 8000ef8:	4798      	blx	r3
							}
							//
							//
							//
							return CANLIB_OK;
 8000efa:	2300      	movs	r3, #0
 8000efc:	e00b      	b.n	8000f16 <Can20ReceiverRoutine+0x2be>
						}
						else
						{
							return CANLIB_SIZE_ERR;
 8000efe:	2303      	movs	r3, #3
 8000f00:	e009      	b.n	8000f16 <Can20ReceiverRoutine+0x2be>
		for(uint16_t i=0; i<CanReceiverCounter; i++)
 8000f02:	8f3b      	ldrh	r3, [r7, #56]	; 0x38
 8000f04:	3301      	adds	r3, #1
 8000f06:	873b      	strh	r3, [r7, #56]	; 0x38
 8000f08:	4b05      	ldr	r3, [pc, #20]	; (8000f20 <Can20ReceiverRoutine+0x2c8>)
 8000f0a:	881b      	ldrh	r3, [r3, #0]
 8000f0c:	8f3a      	ldrh	r2, [r7, #56]	; 0x38
 8000f0e:	429a      	cmp	r2, r3
 8000f10:	f4ff aec4 	bcc.w	8000c9c <Can20ReceiverRoutine+0x44>
					}
				}
			}
		}
	}
	return CANLIB_NMATCH;
 8000f14:	2301      	movs	r3, #1
}
 8000f16:	4618      	mov	r0, r3
 8000f18:	3744      	adds	r7, #68	; 0x44
 8000f1a:	46bd      	mov	sp, r7
 8000f1c:	bd90      	pop	{r4, r7, pc}
 8000f1e:	bf00      	nop
 8000f20:	200005c8 	.word	0x200005c8
 8000f24:	20000118 	.word	0x20000118
 8000f28:	200005cc 	.word	0x200005cc

08000f2c <Can20ReceiverOvrTimSet>:

#if DIAG_TIME_ROUTINE
CANlib_StatusTypedef Can20ReceiverOvrTimSet(CanReceiver_t *CanReceiver, uint32_t MaxLastReceiveTime, void (*OverTimeFunPtr)())
{
 8000f2c:	b480      	push	{r7}
 8000f2e:	b085      	sub	sp, #20
 8000f30:	af00      	add	r7, sp, #0
 8000f32:	60f8      	str	r0, [r7, #12]
 8000f34:	60b9      	str	r1, [r7, #8]
 8000f36:	607a      	str	r2, [r7, #4]
	CanReceiver -> MaxLastReceiveTime = MaxLastReceiveTime;
 8000f38:	68fb      	ldr	r3, [r7, #12]
 8000f3a:	68ba      	ldr	r2, [r7, #8]
 8000f3c:	f8c3 221c 	str.w	r2, [r3, #540]	; 0x21c
	if(OverTimeFunPtr != NULL)
 8000f40:	687b      	ldr	r3, [r7, #4]
 8000f42:	2b00      	cmp	r3, #0
 8000f44:	d005      	beq.n	8000f52 <Can20ReceiverOvrTimSet+0x26>
	{
	CanReceiver -> OverTimeFunPtr = OverTimeFunPtr;
 8000f46:	68fb      	ldr	r3, [r7, #12]
 8000f48:	687a      	ldr	r2, [r7, #4]
 8000f4a:	f8c3 2220 	str.w	r2, [r3, #544]	; 0x220
	return CANLIB_OK;
 8000f4e:	2300      	movs	r3, #0
 8000f50:	e000      	b.n	8000f54 <Can20ReceiverOvrTimSet+0x28>
	}
	return CANLIB_MEMORY_ERR;
 8000f52:	2304      	movs	r3, #4
}
 8000f54:	4618      	mov	r0, r3
 8000f56:	3714      	adds	r7, #20
 8000f58:	46bd      	mov	sp, r7
 8000f5a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000f5e:	4770      	bx	lr

08000f60 <Can20ReceiverOvrTimRoutine>:

void Can20ReceiverOvrTimRoutine(void)
{
 8000f60:	b590      	push	{r4, r7, lr}
 8000f62:	b083      	sub	sp, #12
 8000f64:	af00      	add	r7, sp, #0
	if(CanReceiverCounter)
 8000f66:	4b28      	ldr	r3, [pc, #160]	; (8001008 <Can20ReceiverOvrTimRoutine+0xa8>)
 8000f68:	881b      	ldrh	r3, [r3, #0]
 8000f6a:	2b00      	cmp	r3, #0
 8000f6c:	d048      	beq.n	8001000 <Can20ReceiverOvrTimRoutine+0xa0>
	{
#if USE_FREERTOS
		xSemaphoreTake(xMapperModSemaphore, portMAX_DELAY);
 8000f6e:	4b27      	ldr	r3, [pc, #156]	; (800100c <Can20ReceiverOvrTimRoutine+0xac>)
 8000f70:	681b      	ldr	r3, [r3, #0]
 8000f72:	f04f 31ff 	mov.w	r1, #4294967295
 8000f76:	4618      	mov	r0, r3
 8000f78:	f005 f92e 	bl	80061d8 <xQueueSemaphoreTake>
#endif
		for(uint32_t i=0; i < CanReceiverCounter; i++)
 8000f7c:	2300      	movs	r3, #0
 8000f7e:	607b      	str	r3, [r7, #4]
 8000f80:	e031      	b.n	8000fe6 <Can20ReceiverOvrTimRoutine+0x86>
		{
			if(CanReceiverMapper[i] -> OverTimeFunPtr != NULL &&
 8000f82:	4a23      	ldr	r2, [pc, #140]	; (8001010 <Can20ReceiverOvrTimRoutine+0xb0>)
 8000f84:	687b      	ldr	r3, [r7, #4]
 8000f86:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8000f8a:	f8d3 3220 	ldr.w	r3, [r3, #544]	; 0x220
 8000f8e:	2b00      	cmp	r3, #0
 8000f90:	d026      	beq.n	8000fe0 <Can20ReceiverOvrTimRoutine+0x80>
					__GET_MS - CanReceiverMapper[i] -> CpltReceiveTimeStamp > CanReceiverMapper[i]->MaxLastReceiveTime)
 8000f92:	f000 fe0d 	bl	8001bb0 <HAL_GetTick>
 8000f96:	4602      	mov	r2, r0
 8000f98:	491d      	ldr	r1, [pc, #116]	; (8001010 <Can20ReceiverOvrTimRoutine+0xb0>)
 8000f9a:	687b      	ldr	r3, [r7, #4]
 8000f9c:	f851 3023 	ldr.w	r3, [r1, r3, lsl #2]
 8000fa0:	f8d3 3214 	ldr.w	r3, [r3, #532]	; 0x214
 8000fa4:	1ad2      	subs	r2, r2, r3
 8000fa6:	491a      	ldr	r1, [pc, #104]	; (8001010 <Can20ReceiverOvrTimRoutine+0xb0>)
 8000fa8:	687b      	ldr	r3, [r7, #4]
 8000faa:	f851 3023 	ldr.w	r3, [r1, r3, lsl #2]
 8000fae:	f8d3 321c 	ldr.w	r3, [r3, #540]	; 0x21c
			if(CanReceiverMapper[i] -> OverTimeFunPtr != NULL &&
 8000fb2:	429a      	cmp	r2, r3
 8000fb4:	d914      	bls.n	8000fe0 <Can20ReceiverOvrTimRoutine+0x80>
			{
#if !DIAG_TIME_FUN_CONT
				CanReceiverMapper[i] -> CpltReceiveTimeStamp = __GET_MS;
 8000fb6:	4a16      	ldr	r2, [pc, #88]	; (8001010 <Can20ReceiverOvrTimRoutine+0xb0>)
 8000fb8:	687b      	ldr	r3, [r7, #4]
 8000fba:	f852 4023 	ldr.w	r4, [r2, r3, lsl #2]
 8000fbe:	f000 fdf7 	bl	8001bb0 <HAL_GetTick>
 8000fc2:	4603      	mov	r3, r0
 8000fc4:	f8c4 3214 	str.w	r3, [r4, #532]	; 0x214
#endif
				CanReceiverMapper[i] -> OverTimeFunPtr(CanReceiverMapper[i]);
 8000fc8:	4a11      	ldr	r2, [pc, #68]	; (8001010 <Can20ReceiverOvrTimRoutine+0xb0>)
 8000fca:	687b      	ldr	r3, [r7, #4]
 8000fcc:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8000fd0:	f8d3 3220 	ldr.w	r3, [r3, #544]	; 0x220
 8000fd4:	490e      	ldr	r1, [pc, #56]	; (8001010 <Can20ReceiverOvrTimRoutine+0xb0>)
 8000fd6:	687a      	ldr	r2, [r7, #4]
 8000fd8:	f851 2022 	ldr.w	r2, [r1, r2, lsl #2]
 8000fdc:	4610      	mov	r0, r2
 8000fde:	4798      	blx	r3
		for(uint32_t i=0; i < CanReceiverCounter; i++)
 8000fe0:	687b      	ldr	r3, [r7, #4]
 8000fe2:	3301      	adds	r3, #1
 8000fe4:	607b      	str	r3, [r7, #4]
 8000fe6:	4b08      	ldr	r3, [pc, #32]	; (8001008 <Can20ReceiverOvrTimRoutine+0xa8>)
 8000fe8:	881b      	ldrh	r3, [r3, #0]
 8000fea:	461a      	mov	r2, r3
 8000fec:	687b      	ldr	r3, [r7, #4]
 8000fee:	4293      	cmp	r3, r2
 8000ff0:	d3c7      	bcc.n	8000f82 <Can20ReceiverOvrTimRoutine+0x22>
			}
		}
#if USE_FREERTOS
		xSemaphoreGive(xMapperModSemaphore);
 8000ff2:	4b06      	ldr	r3, [pc, #24]	; (800100c <Can20ReceiverOvrTimRoutine+0xac>)
 8000ff4:	6818      	ldr	r0, [r3, #0]
 8000ff6:	2300      	movs	r3, #0
 8000ff8:	2200      	movs	r2, #0
 8000ffa:	2100      	movs	r1, #0
 8000ffc:	f004 fe60 	bl	8005cc0 <xQueueGenericSend>
#endif

	}
}
 8001000:	bf00      	nop
 8001002:	370c      	adds	r7, #12
 8001004:	46bd      	mov	sp, r7
 8001006:	bd90      	pop	{r4, r7, pc}
 8001008:	200005c8 	.word	0x200005c8
 800100c:	20000110 	.word	0x20000110
 8001010:	20000118 	.word	0x20000118

08001014 <Can20ReceiverOvrTimTask>:

#if USE_FREERTOS
void Can20ReceiverOvrTimTask(void *argument)
{
 8001014:	b580      	push	{r7, lr}
 8001016:	b082      	sub	sp, #8
 8001018:	af00      	add	r7, sp, #0
 800101a:	6078      	str	r0, [r7, #4]
	for(;;)
	{
		Can20ReceiverOvrTimRoutine();
 800101c:	f7ff ffa0 	bl	8000f60 <Can20ReceiverOvrTimRoutine>
		vTaskDelay(10);
 8001020:	200a      	movs	r0, #10
 8001022:	f005 fd83 	bl	8006b2c <vTaskDelay>
		Can20ReceiverOvrTimRoutine();
 8001026:	e7f9      	b.n	800101c <Can20ReceiverOvrTimTask+0x8>

08001028 <Can20aInit>:
#endif



HAL_StatusTypeDef Can20aInit(void)
{
 8001028:	b580      	push	{r7, lr}
 800102a:	b084      	sub	sp, #16
 800102c:	af02      	add	r7, sp, #8
#if STM32_CAN1_ENABLE
	__RETURN_STATUS_NOK(HAL_CAN_Start(&hcan1));
 800102e:	484a      	ldr	r0, [pc, #296]	; (8001158 <Can20aInit+0x130>)
 8001030:	f000 ffb2 	bl	8001f98 <HAL_CAN_Start>
 8001034:	4603      	mov	r3, r0
 8001036:	2b00      	cmp	r3, #0
 8001038:	d004      	beq.n	8001044 <Can20aInit+0x1c>
 800103a:	4847      	ldr	r0, [pc, #284]	; (8001158 <Can20aInit+0x130>)
 800103c:	f000 ffac 	bl	8001f98 <HAL_CAN_Start>
 8001040:	4603      	mov	r3, r0
 8001042:	e085      	b.n	8001150 <Can20aInit+0x128>
#if STM32_HAL_CAN_RX_INT_FIFO0
	__RETURN_STATUS_NOK(HAL_CAN_ActivateNotification(&hcan1, CAN_IT_RX_FIFO0_MSG_PENDING));
 8001044:	2102      	movs	r1, #2
 8001046:	4844      	ldr	r0, [pc, #272]	; (8001158 <Can20aInit+0x130>)
 8001048:	f001 f9cc 	bl	80023e4 <HAL_CAN_ActivateNotification>
 800104c:	4603      	mov	r3, r0
 800104e:	2b00      	cmp	r3, #0
 8001050:	d005      	beq.n	800105e <Can20aInit+0x36>
 8001052:	2102      	movs	r1, #2
 8001054:	4840      	ldr	r0, [pc, #256]	; (8001158 <Can20aInit+0x130>)
 8001056:	f001 f9c5 	bl	80023e4 <HAL_CAN_ActivateNotification>
 800105a:	4603      	mov	r3, r0
 800105c:	e078      	b.n	8001150 <Can20aInit+0x128>
#endif
#if STM32_HAL_CAN_RX_INT_FIFO1
	__RETURN_STATUS_NOK(HAL_CAN_ActivateNotification(&hcan1, CAN_IT_RX_FIFO1_MSG_PENDING));
 800105e:	2110      	movs	r1, #16
 8001060:	483d      	ldr	r0, [pc, #244]	; (8001158 <Can20aInit+0x130>)
 8001062:	f001 f9bf 	bl	80023e4 <HAL_CAN_ActivateNotification>
 8001066:	4603      	mov	r3, r0
 8001068:	2b00      	cmp	r3, #0
 800106a:	d005      	beq.n	8001078 <Can20aInit+0x50>
 800106c:	2110      	movs	r1, #16
 800106e:	483a      	ldr	r0, [pc, #232]	; (8001158 <Can20aInit+0x130>)
 8001070:	f001 f9b8 	bl	80023e4 <HAL_CAN_ActivateNotification>
 8001074:	4603      	mov	r3, r0
 8001076:	e06b      	b.n	8001150 <Can20aInit+0x128>
#endif
#endif

#if STM32_CAN2_ENABLE
	__RETURN_STATUS_NOK(HAL_CAN_Start(&hcan2));
 8001078:	4838      	ldr	r0, [pc, #224]	; (800115c <Can20aInit+0x134>)
 800107a:	f000 ff8d 	bl	8001f98 <HAL_CAN_Start>
 800107e:	4603      	mov	r3, r0
 8001080:	2b00      	cmp	r3, #0
 8001082:	d004      	beq.n	800108e <Can20aInit+0x66>
 8001084:	4835      	ldr	r0, [pc, #212]	; (800115c <Can20aInit+0x134>)
 8001086:	f000 ff87 	bl	8001f98 <HAL_CAN_Start>
 800108a:	4603      	mov	r3, r0
 800108c:	e060      	b.n	8001150 <Can20aInit+0x128>
#if STM32_HAL_CAN_RX_INT_FIFO0
	__RETURN_STATUS_NOK(HAL_CAN_ActivateNotification(&hcan2, CAN_IT_RX_FIFO0_MSG_PENDING));
 800108e:	2102      	movs	r1, #2
 8001090:	4832      	ldr	r0, [pc, #200]	; (800115c <Can20aInit+0x134>)
 8001092:	f001 f9a7 	bl	80023e4 <HAL_CAN_ActivateNotification>
 8001096:	4603      	mov	r3, r0
 8001098:	2b00      	cmp	r3, #0
 800109a:	d005      	beq.n	80010a8 <Can20aInit+0x80>
 800109c:	2102      	movs	r1, #2
 800109e:	482f      	ldr	r0, [pc, #188]	; (800115c <Can20aInit+0x134>)
 80010a0:	f001 f9a0 	bl	80023e4 <HAL_CAN_ActivateNotification>
 80010a4:	4603      	mov	r3, r0
 80010a6:	e053      	b.n	8001150 <Can20aInit+0x128>
#endif
#if STM32_HAL_CAN_RX_INT_FIFO1
	__RETURN_STATUS_NOK(HAL_CAN_ActivateNotification(&hcan2, CAN_IT_RX_FIFO1_MSG_PENDING));
 80010a8:	2110      	movs	r1, #16
 80010aa:	482c      	ldr	r0, [pc, #176]	; (800115c <Can20aInit+0x134>)
 80010ac:	f001 f99a 	bl	80023e4 <HAL_CAN_ActivateNotification>
 80010b0:	4603      	mov	r3, r0
 80010b2:	2b00      	cmp	r3, #0
 80010b4:	d005      	beq.n	80010c2 <Can20aInit+0x9a>
 80010b6:	2110      	movs	r1, #16
 80010b8:	4828      	ldr	r0, [pc, #160]	; (800115c <Can20aInit+0x134>)
 80010ba:	f001 f993 	bl	80023e4 <HAL_CAN_ActivateNotification>
 80010be:	4603      	mov	r3, r0
 80010c0:	e046      	b.n	8001150 <Can20aInit+0x128>
#endif
#endif

#if STM32_CAN3_ENABLE
	__RETURN_STATUS_NOK(HAL_CAN_Start(&hcan3));
 80010c2:	4827      	ldr	r0, [pc, #156]	; (8001160 <Can20aInit+0x138>)
 80010c4:	f000 ff68 	bl	8001f98 <HAL_CAN_Start>
 80010c8:	4603      	mov	r3, r0
 80010ca:	2b00      	cmp	r3, #0
 80010cc:	d004      	beq.n	80010d8 <Can20aInit+0xb0>
 80010ce:	4824      	ldr	r0, [pc, #144]	; (8001160 <Can20aInit+0x138>)
 80010d0:	f000 ff62 	bl	8001f98 <HAL_CAN_Start>
 80010d4:	4603      	mov	r3, r0
 80010d6:	e03b      	b.n	8001150 <Can20aInit+0x128>
#if STM32_HAL_CAN_RX_INT_FIFO0
	__RETURN_STATUS_NOK(HAL_CAN_ActivateNotification(&hcan3, CAN_IT_RX_FIFO0_MSG_PENDING));
 80010d8:	2102      	movs	r1, #2
 80010da:	4821      	ldr	r0, [pc, #132]	; (8001160 <Can20aInit+0x138>)
 80010dc:	f001 f982 	bl	80023e4 <HAL_CAN_ActivateNotification>
 80010e0:	4603      	mov	r3, r0
 80010e2:	2b00      	cmp	r3, #0
 80010e4:	d005      	beq.n	80010f2 <Can20aInit+0xca>
 80010e6:	2102      	movs	r1, #2
 80010e8:	481d      	ldr	r0, [pc, #116]	; (8001160 <Can20aInit+0x138>)
 80010ea:	f001 f97b 	bl	80023e4 <HAL_CAN_ActivateNotification>
 80010ee:	4603      	mov	r3, r0
 80010f0:	e02e      	b.n	8001150 <Can20aInit+0x128>
#endif
#if STM32_HAL_CAN_RX_INT_FIFO1
	__RETURN_STATUS_NOK(HAL_CAN_ActivateNotification(&hcan3, CAN_IT_RX_FIFO1_MSG_PENDING));
 80010f2:	2110      	movs	r1, #16
 80010f4:	481a      	ldr	r0, [pc, #104]	; (8001160 <Can20aInit+0x138>)
 80010f6:	f001 f975 	bl	80023e4 <HAL_CAN_ActivateNotification>
 80010fa:	4603      	mov	r3, r0
 80010fc:	2b00      	cmp	r3, #0
 80010fe:	d005      	beq.n	800110c <Can20aInit+0xe4>
 8001100:	2110      	movs	r1, #16
 8001102:	4817      	ldr	r0, [pc, #92]	; (8001160 <Can20aInit+0x138>)
 8001104:	f001 f96e 	bl	80023e4 <HAL_CAN_ActivateNotification>
 8001108:	4603      	mov	r3, r0
 800110a:	e021      	b.n	8001150 <Can20aInit+0x128>
#endif
#endif

#if USE_FREERTOS

	BaseType_t xCan20CheckCreated = xTaskCreate(Can20ReceiverOvrTimTask, "Can20CheckTask", configMINIMAL_STACK_SIZE, NULL, tskIDLE_PRIORITY+1, &xCan20CheckHandle);
 800110c:	4b15      	ldr	r3, [pc, #84]	; (8001164 <Can20aInit+0x13c>)
 800110e:	9301      	str	r3, [sp, #4]
 8001110:	2301      	movs	r3, #1
 8001112:	9300      	str	r3, [sp, #0]
 8001114:	2300      	movs	r3, #0
 8001116:	f44f 7200 	mov.w	r2, #512	; 0x200
 800111a:	4913      	ldr	r1, [pc, #76]	; (8001168 <Can20aInit+0x140>)
 800111c:	4813      	ldr	r0, [pc, #76]	; (800116c <Can20aInit+0x144>)
 800111e:	f005 fba8 	bl	8006872 <xTaskCreate>
 8001122:	6078      	str	r0, [r7, #4]

	if(xCan20CheckCreated != pdPASS) return HAL_ERROR;
 8001124:	687b      	ldr	r3, [r7, #4]
 8001126:	2b01      	cmp	r3, #1
 8001128:	d001      	beq.n	800112e <Can20aInit+0x106>
 800112a:	2301      	movs	r3, #1
 800112c:	e010      	b.n	8001150 <Can20aInit+0x128>


	xMapperModSemaphore = xSemaphoreCreateBinary();
 800112e:	2203      	movs	r2, #3
 8001130:	2100      	movs	r1, #0
 8001132:	2001      	movs	r0, #1
 8001134:	f004 fcec 	bl	8005b10 <xQueueGenericCreate>
 8001138:	4603      	mov	r3, r0
 800113a:	4a0d      	ldr	r2, [pc, #52]	; (8001170 <Can20aInit+0x148>)
 800113c:	6013      	str	r3, [r2, #0]
	xSendSemaphore = xSemaphoreCreateBinary();
 800113e:	2203      	movs	r2, #3
 8001140:	2100      	movs	r1, #0
 8001142:	2001      	movs	r0, #1
 8001144:	f004 fce4 	bl	8005b10 <xQueueGenericCreate>
 8001148:	4603      	mov	r3, r0
 800114a:	4a0a      	ldr	r2, [pc, #40]	; (8001174 <Can20aInit+0x14c>)
 800114c:	6013      	str	r3, [r2, #0]

	//xSemaphoreGive(xMapperModSemaphore);
	//xSemaphoreGive(xSendSemaphore);
#endif

	return HAL_OK;
 800114e:	2300      	movs	r3, #0
}
 8001150:	4618      	mov	r0, r3
 8001152:	3708      	adds	r7, #8
 8001154:	46bd      	mov	sp, r7
 8001156:	bd80      	pop	{r7, pc}
 8001158:	20000090 	.word	0x20000090
 800115c:	200000b8 	.word	0x200000b8
 8001160:	200000e0 	.word	0x200000e0
 8001164:	2000010c 	.word	0x2000010c
 8001168:	08008978 	.word	0x08008978
 800116c:	08001015 	.word	0x08001015
 8001170:	20000110 	.word	0x20000110
 8001174:	20000114 	.word	0x20000114

08001178 <HAL_CAN_RxFifo0MsgPendingCallback>:


#if STM32_HAL_CAN_RX_INT_FIFO0
void HAL_CAN_RxFifo0MsgPendingCallback(CAN_HandleTypeDef *hcan)
{
 8001178:	b580      	push	{r7, lr}
 800117a:	b082      	sub	sp, #8
 800117c:	af00      	add	r7, sp, #0
 800117e:	6078      	str	r0, [r7, #4]
	Can20ReceiverRoutine(hcan, CAN_RX_FIFO0);
 8001180:	2100      	movs	r1, #0
 8001182:	6878      	ldr	r0, [r7, #4]
 8001184:	f7ff fd68 	bl	8000c58 <Can20ReceiverRoutine>
}
 8001188:	bf00      	nop
 800118a:	3708      	adds	r7, #8
 800118c:	46bd      	mov	sp, r7
 800118e:	bd80      	pop	{r7, pc}

08001190 <HAL_CAN_RxFifo1MsgPendingCallback>:
#endif
#if STM32_HAL_CAN_RX_INT_FIFO1
void HAL_CAN_RxFifo1MsgPendingCallback(CAN_HandleTypeDef *hcan)
{
 8001190:	b580      	push	{r7, lr}
 8001192:	b082      	sub	sp, #8
 8001194:	af00      	add	r7, sp, #0
 8001196:	6078      	str	r0, [r7, #4]
	Can20ReceiverRoutine(hcan, CAN_RX_FIFO1);
 8001198:	2101      	movs	r1, #1
 800119a:	6878      	ldr	r0, [r7, #4]
 800119c:	f7ff fd5c 	bl	8000c58 <Can20ReceiverRoutine>
}
 80011a0:	bf00      	nop
 80011a2:	3708      	adds	r7, #8
 80011a4:	46bd      	mov	sp, r7
 80011a6:	bd80      	pop	{r7, pc}

080011a8 <MX_CRC_Init>:

CRC_HandleTypeDef hcrc;

/* CRC init function */
void MX_CRC_Init(void)
{
 80011a8:	b580      	push	{r7, lr}
 80011aa:	af00      	add	r7, sp, #0
  /* USER CODE END CRC_Init 0 */

  /* USER CODE BEGIN CRC_Init 1 */

  /* USER CODE END CRC_Init 1 */
  hcrc.Instance = CRC;
 80011ac:	4b0d      	ldr	r3, [pc, #52]	; (80011e4 <MX_CRC_Init+0x3c>)
 80011ae:	4a0e      	ldr	r2, [pc, #56]	; (80011e8 <MX_CRC_Init+0x40>)
 80011b0:	601a      	str	r2, [r3, #0]
  hcrc.Init.DefaultPolynomialUse = DEFAULT_POLYNOMIAL_ENABLE;
 80011b2:	4b0c      	ldr	r3, [pc, #48]	; (80011e4 <MX_CRC_Init+0x3c>)
 80011b4:	2200      	movs	r2, #0
 80011b6:	711a      	strb	r2, [r3, #4]
  hcrc.Init.DefaultInitValueUse = DEFAULT_INIT_VALUE_ENABLE;
 80011b8:	4b0a      	ldr	r3, [pc, #40]	; (80011e4 <MX_CRC_Init+0x3c>)
 80011ba:	2200      	movs	r2, #0
 80011bc:	715a      	strb	r2, [r3, #5]
  hcrc.Init.InputDataInversionMode = CRC_INPUTDATA_INVERSION_NONE;
 80011be:	4b09      	ldr	r3, [pc, #36]	; (80011e4 <MX_CRC_Init+0x3c>)
 80011c0:	2200      	movs	r2, #0
 80011c2:	615a      	str	r2, [r3, #20]
  hcrc.Init.OutputDataInversionMode = CRC_OUTPUTDATA_INVERSION_DISABLE;
 80011c4:	4b07      	ldr	r3, [pc, #28]	; (80011e4 <MX_CRC_Init+0x3c>)
 80011c6:	2200      	movs	r2, #0
 80011c8:	619a      	str	r2, [r3, #24]
  hcrc.InputDataFormat = CRC_INPUTDATA_FORMAT_BYTES;
 80011ca:	4b06      	ldr	r3, [pc, #24]	; (80011e4 <MX_CRC_Init+0x3c>)
 80011cc:	2201      	movs	r2, #1
 80011ce:	621a      	str	r2, [r3, #32]
  if (HAL_CRC_Init(&hcrc) != HAL_OK)
 80011d0:	4804      	ldr	r0, [pc, #16]	; (80011e4 <MX_CRC_Init+0x3c>)
 80011d2:	f001 fc35 	bl	8002a40 <HAL_CRC_Init>
 80011d6:	4603      	mov	r3, r0
 80011d8:	2b00      	cmp	r3, #0
 80011da:	d001      	beq.n	80011e0 <MX_CRC_Init+0x38>
  {
    Error_Handler();
 80011dc:	f000 faca 	bl	8001774 <Error_Handler>
  }
  /* USER CODE BEGIN CRC_Init 2 */

  /* USER CODE END CRC_Init 2 */

}
 80011e0:	bf00      	nop
 80011e2:	bd80      	pop	{r7, pc}
 80011e4:	200005cc 	.word	0x200005cc
 80011e8:	40023000 	.word	0x40023000

080011ec <HAL_CRC_MspInit>:

void HAL_CRC_MspInit(CRC_HandleTypeDef* crcHandle)
{
 80011ec:	b480      	push	{r7}
 80011ee:	b085      	sub	sp, #20
 80011f0:	af00      	add	r7, sp, #0
 80011f2:	6078      	str	r0, [r7, #4]

  if(crcHandle->Instance==CRC)
 80011f4:	687b      	ldr	r3, [r7, #4]
 80011f6:	681b      	ldr	r3, [r3, #0]
 80011f8:	4a0a      	ldr	r2, [pc, #40]	; (8001224 <HAL_CRC_MspInit+0x38>)
 80011fa:	4293      	cmp	r3, r2
 80011fc:	d10b      	bne.n	8001216 <HAL_CRC_MspInit+0x2a>
  {
  /* USER CODE BEGIN CRC_MspInit 0 */

  /* USER CODE END CRC_MspInit 0 */
    /* CRC clock enable */
    __HAL_RCC_CRC_CLK_ENABLE();
 80011fe:	4b0a      	ldr	r3, [pc, #40]	; (8001228 <HAL_CRC_MspInit+0x3c>)
 8001200:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001202:	4a09      	ldr	r2, [pc, #36]	; (8001228 <HAL_CRC_MspInit+0x3c>)
 8001204:	f443 5380 	orr.w	r3, r3, #4096	; 0x1000
 8001208:	6313      	str	r3, [r2, #48]	; 0x30
 800120a:	4b07      	ldr	r3, [pc, #28]	; (8001228 <HAL_CRC_MspInit+0x3c>)
 800120c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800120e:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8001212:	60fb      	str	r3, [r7, #12]
 8001214:	68fb      	ldr	r3, [r7, #12]
  /* USER CODE BEGIN CRC_MspInit 1 */

  /* USER CODE END CRC_MspInit 1 */
  }
}
 8001216:	bf00      	nop
 8001218:	3714      	adds	r7, #20
 800121a:	46bd      	mov	sp, r7
 800121c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001220:	4770      	bx	lr
 8001222:	bf00      	nop
 8001224:	40023000 	.word	0x40023000
 8001228:	40023800 	.word	0x40023800

0800122c <vApplicationIdleHook>:
void vApplicationIdleHook(void);
void vApplicationStackOverflowHook(xTaskHandle xTask, signed char *pcTaskName);

/* USER CODE BEGIN 2 */
void vApplicationIdleHook( void )
{
 800122c:	b480      	push	{r7}
 800122e:	af00      	add	r7, sp, #0
   specified, or call vTaskDelay()). If the application makes use of the
   vTaskDelete() API function (as this demo application does) then it is also
   important that vApplicationIdleHook() is permitted to return to its calling
   function, because it is the responsibility of the idle task to clean up
   memory allocated by the kernel to any task that has since been deleted. */
}
 8001230:	bf00      	nop
 8001232:	46bd      	mov	sp, r7
 8001234:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001238:	4770      	bx	lr

0800123a <vApplicationStackOverflowHook>:
/* USER CODE END 2 */

/* USER CODE BEGIN 4 */
void vApplicationStackOverflowHook(xTaskHandle xTask, signed char *pcTaskName)
{
 800123a:	b480      	push	{r7}
 800123c:	b083      	sub	sp, #12
 800123e:	af00      	add	r7, sp, #0
 8001240:	6078      	str	r0, [r7, #4]
 8001242:	6039      	str	r1, [r7, #0]
   /* Run time stack overflow checking is performed if
   configCHECK_FOR_STACK_OVERFLOW is defined to 1 or 2. This hook function is
   called if a stack overflow is detected. */
}
 8001244:	bf00      	nop
 8001246:	370c      	adds	r7, #12
 8001248:	46bd      	mov	sp, r7
 800124a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800124e:	4770      	bx	lr

08001250 <MX_FREERTOS_Init>:
/**
  * @brief  FreeRTOS initialization
  * @param  None
  * @retval None
  */
void MX_FREERTOS_Init(void) {
 8001250:	b580      	push	{r7, lr}
 8001252:	af00      	add	r7, sp, #0
  /* add mutexes, ... */
  /* USER CODE END RTOS_MUTEX */

  /* Create the semaphores(s) */
  /* creation of GPIOsemaphore */
  GPIOsemaphoreHandle = osSemaphoreNew(1, 0, &GPIOsemaphore_attributes);
 8001254:	4a14      	ldr	r2, [pc, #80]	; (80012a8 <MX_FREERTOS_Init+0x58>)
 8001256:	2100      	movs	r1, #0
 8001258:	2001      	movs	r0, #1
 800125a:	f004 f9e9 	bl	8005630 <osSemaphoreNew>
 800125e:	4603      	mov	r3, r0
 8001260:	4a12      	ldr	r2, [pc, #72]	; (80012ac <MX_FREERTOS_Init+0x5c>)
 8001262:	6013      	str	r3, [r2, #0]
  /* add queues, ... */
  /* USER CODE END RTOS_QUEUES */

  /* Create the thread(s) */
  /* creation of defaultTask */
  defaultTaskHandle = osThreadNew(StartDefaultTask, NULL, &defaultTask_attributes);
 8001264:	4a12      	ldr	r2, [pc, #72]	; (80012b0 <MX_FREERTOS_Init+0x60>)
 8001266:	2100      	movs	r1, #0
 8001268:	4812      	ldr	r0, [pc, #72]	; (80012b4 <MX_FREERTOS_Init+0x64>)
 800126a:	f004 f90d 	bl	8005488 <osThreadNew>
 800126e:	4603      	mov	r3, r0
 8001270:	4a11      	ldr	r2, [pc, #68]	; (80012b8 <MX_FREERTOS_Init+0x68>)
 8001272:	6013      	str	r3, [r2, #0]

  /* creation of Led1Task */
  Led1TaskHandle = osThreadNew(Led1Toogle, NULL, &Led1Task_attributes);
 8001274:	4a11      	ldr	r2, [pc, #68]	; (80012bc <MX_FREERTOS_Init+0x6c>)
 8001276:	2100      	movs	r1, #0
 8001278:	4811      	ldr	r0, [pc, #68]	; (80012c0 <MX_FREERTOS_Init+0x70>)
 800127a:	f004 f905 	bl	8005488 <osThreadNew>
 800127e:	4603      	mov	r3, r0
 8001280:	4a10      	ldr	r2, [pc, #64]	; (80012c4 <MX_FREERTOS_Init+0x74>)
 8001282:	6013      	str	r3, [r2, #0]

  /* creation of Led2Task */
  Led2TaskHandle = osThreadNew(Led2Toogle, NULL, &Led2Task_attributes);
 8001284:	4a10      	ldr	r2, [pc, #64]	; (80012c8 <MX_FREERTOS_Init+0x78>)
 8001286:	2100      	movs	r1, #0
 8001288:	4810      	ldr	r0, [pc, #64]	; (80012cc <MX_FREERTOS_Init+0x7c>)
 800128a:	f004 f8fd 	bl	8005488 <osThreadNew>
 800128e:	4603      	mov	r3, r0
 8001290:	4a0f      	ldr	r2, [pc, #60]	; (80012d0 <MX_FREERTOS_Init+0x80>)
 8001292:	6013      	str	r3, [r2, #0]

  /* creation of Led3Task */
  Led3TaskHandle = osThreadNew(Led3Toggle, NULL, &Led3Task_attributes);
 8001294:	4a0f      	ldr	r2, [pc, #60]	; (80012d4 <MX_FREERTOS_Init+0x84>)
 8001296:	2100      	movs	r1, #0
 8001298:	480f      	ldr	r0, [pc, #60]	; (80012d8 <MX_FREERTOS_Init+0x88>)
 800129a:	f004 f8f5 	bl	8005488 <osThreadNew>
 800129e:	4603      	mov	r3, r0
 80012a0:	4a0e      	ldr	r2, [pc, #56]	; (80012dc <MX_FREERTOS_Init+0x8c>)
 80012a2:	6013      	str	r3, [r2, #0]

  /* USER CODE BEGIN RTOS_EVENTS */
  /* add events, ... */
  /* USER CODE END RTOS_EVENTS */

}
 80012a4:	bf00      	nop
 80012a6:	bd80      	pop	{r7, pc}
 80012a8:	08008a70 	.word	0x08008a70
 80012ac:	20000600 	.word	0x20000600
 80012b0:	080089e0 	.word	0x080089e0
 80012b4:	080012e1 	.word	0x080012e1
 80012b8:	200005f0 	.word	0x200005f0
 80012bc:	08008a04 	.word	0x08008a04
 80012c0:	080012f1 	.word	0x080012f1
 80012c4:	200005f4 	.word	0x200005f4
 80012c8:	08008a28 	.word	0x08008a28
 80012cc:	08001331 	.word	0x08001331
 80012d0:	200005f8 	.word	0x200005f8
 80012d4:	08008a4c 	.word	0x08008a4c
 80012d8:	08001359 	.word	0x08001359
 80012dc:	200005fc 	.word	0x200005fc

080012e0 <StartDefaultTask>:
  * @param  argument: Not used
  * @retval None
  */
/* USER CODE END Header_StartDefaultTask */
void StartDefaultTask(void *argument)
{
 80012e0:	b580      	push	{r7, lr}
 80012e2:	b082      	sub	sp, #8
 80012e4:	af00      	add	r7, sp, #0
 80012e6:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN StartDefaultTask */
  /* Infinite loop */
  for(;;)
  {
	  //HAL_GPIO_TogglePin(LD2_GPIO_Port, LD2_Pin);
    osDelay(70);
 80012e8:	2046      	movs	r0, #70	; 0x46
 80012ea:	f004 f973 	bl	80055d4 <osDelay>
 80012ee:	e7fb      	b.n	80012e8 <StartDefaultTask+0x8>

080012f0 <Led1Toogle>:
* @param argument: Not used
* @retval None
*/
/* USER CODE END Header_Led1Toogle */
void Led1Toogle(void *argument)
{
 80012f0:	b580      	push	{r7, lr}
 80012f2:	b082      	sub	sp, #8
 80012f4:	af00      	add	r7, sp, #0
 80012f6:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN Led1Toogle */
  /* Infinite loop */
  for(;;)
  {
	  Can20SendLongMsgCrc(&hcan1, 0x100, testData, 16);
 80012f8:	2310      	movs	r3, #16
 80012fa:	4a09      	ldr	r2, [pc, #36]	; (8001320 <Led1Toogle+0x30>)
 80012fc:	f44f 7180 	mov.w	r1, #256	; 0x100
 8001300:	4808      	ldr	r0, [pc, #32]	; (8001324 <Led1Toogle+0x34>)
 8001302:	f7ff fb11 	bl	8000928 <Can20SendLongMsgCrc>
	  Can20SendLongMsgCrc(&hcan2, 0xffff, testData2, 256);
 8001306:	f44f 7380 	mov.w	r3, #256	; 0x100
 800130a:	4a07      	ldr	r2, [pc, #28]	; (8001328 <Led1Toogle+0x38>)
 800130c:	f64f 71ff 	movw	r1, #65535	; 0xffff
 8001310:	4806      	ldr	r0, [pc, #24]	; (800132c <Led1Toogle+0x3c>)
 8001312:	f7ff fb09 	bl	8000928 <Can20SendLongMsgCrc>
    osDelay(200);
 8001316:	20c8      	movs	r0, #200	; 0xc8
 8001318:	f004 f95c 	bl	80055d4 <osDelay>
	  Can20SendLongMsgCrc(&hcan1, 0x100, testData, 16);
 800131c:	e7ec      	b.n	80012f8 <Led1Toogle+0x8>
 800131e:	bf00      	nop
 8001320:	20000000 	.word	0x20000000
 8001324:	20000090 	.word	0x20000090
 8001328:	2000062c 	.word	0x2000062c
 800132c:	200000b8 	.word	0x200000b8

08001330 <Led2Toogle>:
* @param argument: Not used
* @retval None
*/
/* USER CODE END Header_Led2Toogle */
void Led2Toogle(void *argument)
{
 8001330:	b580      	push	{r7, lr}
 8001332:	b082      	sub	sp, #8
 8001334:	af00      	add	r7, sp, #0
 8001336:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN Led2Toogle */
  /* Infinite loop */
  for(;;)
  {
	  Can20SendCheck(&hcan1, 0x015);
 8001338:	2115      	movs	r1, #21
 800133a:	4806      	ldr	r0, [pc, #24]	; (8001354 <Led2Toogle+0x24>)
 800133c:	f7ff fb68 	bl	8000a10 <Can20SendCheck>
	  Can20SendCheck(&hcan1, 0x010);
 8001340:	2110      	movs	r1, #16
 8001342:	4804      	ldr	r0, [pc, #16]	; (8001354 <Led2Toogle+0x24>)
 8001344:	f7ff fb64 	bl	8000a10 <Can20SendCheck>
    osDelay(500);
 8001348:	f44f 70fa 	mov.w	r0, #500	; 0x1f4
 800134c:	f004 f942 	bl	80055d4 <osDelay>
	  Can20SendCheck(&hcan1, 0x015);
 8001350:	e7f2      	b.n	8001338 <Led2Toogle+0x8>
 8001352:	bf00      	nop
 8001354:	20000090 	.word	0x20000090

08001358 <Led3Toggle>:
* @param argument: Not used
* @retval None
*/
/* USER CODE END Header_Led3Toggle */
void Led3Toggle(void *argument)
{
 8001358:	b580      	push	{r7, lr}
 800135a:	b082      	sub	sp, #8
 800135c:	af00      	add	r7, sp, #0
 800135e:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN Led3Toggle */
  /* Infinite loop */
  for(;;)
  {
	  Can20SendSimple(&hcan1, 0x200, testData, 8);
 8001360:	2308      	movs	r3, #8
 8001362:	4a08      	ldr	r2, [pc, #32]	; (8001384 <Led3Toggle+0x2c>)
 8001364:	f44f 7100 	mov.w	r1, #512	; 0x200
 8001368:	4807      	ldr	r0, [pc, #28]	; (8001388 <Led3Toggle+0x30>)
 800136a:	f7ff fa9d 	bl	80008a8 <Can20SendSimple>
	  Can20SendCheck(&hcan3, 0xfffa);
 800136e:	f64f 71fa 	movw	r1, #65530	; 0xfffa
 8001372:	4806      	ldr	r0, [pc, #24]	; (800138c <Led3Toggle+0x34>)
 8001374:	f7ff fb4c 	bl	8000a10 <Can20SendCheck>
    osDelay(1100);
 8001378:	f240 404c 	movw	r0, #1100	; 0x44c
 800137c:	f004 f92a 	bl	80055d4 <osDelay>
	  Can20SendSimple(&hcan1, 0x200, testData, 8);
 8001380:	e7ee      	b.n	8001360 <Led3Toggle+0x8>
 8001382:	bf00      	nop
 8001384:	20000000 	.word	0x20000000
 8001388:	20000090 	.word	0x20000090
 800138c:	200000e0 	.word	0x200000e0

08001390 <MX_GPIO_Init>:
        * Output
        * EVENT_OUT
        * EXTI
*/
void MX_GPIO_Init(void)
{
 8001390:	b580      	push	{r7, lr}
 8001392:	b08c      	sub	sp, #48	; 0x30
 8001394:	af00      	add	r7, sp, #0

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001396:	f107 031c 	add.w	r3, r7, #28
 800139a:	2200      	movs	r2, #0
 800139c:	601a      	str	r2, [r3, #0]
 800139e:	605a      	str	r2, [r3, #4]
 80013a0:	609a      	str	r2, [r3, #8]
 80013a2:	60da      	str	r2, [r3, #12]
 80013a4:	611a      	str	r2, [r3, #16]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 80013a6:	4b47      	ldr	r3, [pc, #284]	; (80014c4 <MX_GPIO_Init+0x134>)
 80013a8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80013aa:	4a46      	ldr	r2, [pc, #280]	; (80014c4 <MX_GPIO_Init+0x134>)
 80013ac:	f043 0304 	orr.w	r3, r3, #4
 80013b0:	6313      	str	r3, [r2, #48]	; 0x30
 80013b2:	4b44      	ldr	r3, [pc, #272]	; (80014c4 <MX_GPIO_Init+0x134>)
 80013b4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80013b6:	f003 0304 	and.w	r3, r3, #4
 80013ba:	61bb      	str	r3, [r7, #24]
 80013bc:	69bb      	ldr	r3, [r7, #24]
  __HAL_RCC_GPIOH_CLK_ENABLE();
 80013be:	4b41      	ldr	r3, [pc, #260]	; (80014c4 <MX_GPIO_Init+0x134>)
 80013c0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80013c2:	4a40      	ldr	r2, [pc, #256]	; (80014c4 <MX_GPIO_Init+0x134>)
 80013c4:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80013c8:	6313      	str	r3, [r2, #48]	; 0x30
 80013ca:	4b3e      	ldr	r3, [pc, #248]	; (80014c4 <MX_GPIO_Init+0x134>)
 80013cc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80013ce:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80013d2:	617b      	str	r3, [r7, #20]
 80013d4:	697b      	ldr	r3, [r7, #20]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 80013d6:	4b3b      	ldr	r3, [pc, #236]	; (80014c4 <MX_GPIO_Init+0x134>)
 80013d8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80013da:	4a3a      	ldr	r2, [pc, #232]	; (80014c4 <MX_GPIO_Init+0x134>)
 80013dc:	f043 0302 	orr.w	r3, r3, #2
 80013e0:	6313      	str	r3, [r2, #48]	; 0x30
 80013e2:	4b38      	ldr	r3, [pc, #224]	; (80014c4 <MX_GPIO_Init+0x134>)
 80013e4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80013e6:	f003 0302 	and.w	r3, r3, #2
 80013ea:	613b      	str	r3, [r7, #16]
 80013ec:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 80013ee:	4b35      	ldr	r3, [pc, #212]	; (80014c4 <MX_GPIO_Init+0x134>)
 80013f0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80013f2:	4a34      	ldr	r2, [pc, #208]	; (80014c4 <MX_GPIO_Init+0x134>)
 80013f4:	f043 0308 	orr.w	r3, r3, #8
 80013f8:	6313      	str	r3, [r2, #48]	; 0x30
 80013fa:	4b32      	ldr	r3, [pc, #200]	; (80014c4 <MX_GPIO_Init+0x134>)
 80013fc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80013fe:	f003 0308 	and.w	r3, r3, #8
 8001402:	60fb      	str	r3, [r7, #12]
 8001404:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOG_CLK_ENABLE();
 8001406:	4b2f      	ldr	r3, [pc, #188]	; (80014c4 <MX_GPIO_Init+0x134>)
 8001408:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800140a:	4a2e      	ldr	r2, [pc, #184]	; (80014c4 <MX_GPIO_Init+0x134>)
 800140c:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8001410:	6313      	str	r3, [r2, #48]	; 0x30
 8001412:	4b2c      	ldr	r3, [pc, #176]	; (80014c4 <MX_GPIO_Init+0x134>)
 8001414:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001416:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800141a:	60bb      	str	r3, [r7, #8]
 800141c:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 800141e:	4b29      	ldr	r3, [pc, #164]	; (80014c4 <MX_GPIO_Init+0x134>)
 8001420:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001422:	4a28      	ldr	r2, [pc, #160]	; (80014c4 <MX_GPIO_Init+0x134>)
 8001424:	f043 0301 	orr.w	r3, r3, #1
 8001428:	6313      	str	r3, [r2, #48]	; 0x30
 800142a:	4b26      	ldr	r3, [pc, #152]	; (80014c4 <MX_GPIO_Init+0x134>)
 800142c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800142e:	f003 0301 	and.w	r3, r3, #1
 8001432:	607b      	str	r3, [r7, #4]
 8001434:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOB, LD1_Pin|LD3_Pin|LD2_Pin, GPIO_PIN_RESET);
 8001436:	2200      	movs	r2, #0
 8001438:	f244 0181 	movw	r1, #16513	; 0x4081
 800143c:	4822      	ldr	r0, [pc, #136]	; (80014c8 <MX_GPIO_Init+0x138>)
 800143e:	f001 fea9 	bl	8003194 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(USB_PowerSwitchOn_GPIO_Port, USB_PowerSwitchOn_Pin, GPIO_PIN_RESET);
 8001442:	2200      	movs	r2, #0
 8001444:	2140      	movs	r1, #64	; 0x40
 8001446:	4821      	ldr	r0, [pc, #132]	; (80014cc <MX_GPIO_Init+0x13c>)
 8001448:	f001 fea4 	bl	8003194 <HAL_GPIO_WritePin>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = USER_Btn_Pin;
 800144c:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8001450:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING;
 8001452:	f44f 1388 	mov.w	r3, #1114112	; 0x110000
 8001456:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001458:	2300      	movs	r3, #0
 800145a:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_GPIO_Init(USER_Btn_GPIO_Port, &GPIO_InitStruct);
 800145c:	f107 031c 	add.w	r3, r7, #28
 8001460:	4619      	mov	r1, r3
 8001462:	481b      	ldr	r0, [pc, #108]	; (80014d0 <MX_GPIO_Init+0x140>)
 8001464:	f001 fcea 	bl	8002e3c <HAL_GPIO_Init>

  /*Configure GPIO pins : PBPin PBPin PBPin */
  GPIO_InitStruct.Pin = LD1_Pin|LD3_Pin|LD2_Pin;
 8001468:	f244 0381 	movw	r3, #16513	; 0x4081
 800146c:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 800146e:	2301      	movs	r3, #1
 8001470:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001472:	2300      	movs	r3, #0
 8001474:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001476:	2300      	movs	r3, #0
 8001478:	62bb      	str	r3, [r7, #40]	; 0x28
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 800147a:	f107 031c 	add.w	r3, r7, #28
 800147e:	4619      	mov	r1, r3
 8001480:	4811      	ldr	r0, [pc, #68]	; (80014c8 <MX_GPIO_Init+0x138>)
 8001482:	f001 fcdb 	bl	8002e3c <HAL_GPIO_Init>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = USB_PowerSwitchOn_Pin;
 8001486:	2340      	movs	r3, #64	; 0x40
 8001488:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 800148a:	2301      	movs	r3, #1
 800148c:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800148e:	2300      	movs	r3, #0
 8001490:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001492:	2300      	movs	r3, #0
 8001494:	62bb      	str	r3, [r7, #40]	; 0x28
  HAL_GPIO_Init(USB_PowerSwitchOn_GPIO_Port, &GPIO_InitStruct);
 8001496:	f107 031c 	add.w	r3, r7, #28
 800149a:	4619      	mov	r1, r3
 800149c:	480b      	ldr	r0, [pc, #44]	; (80014cc <MX_GPIO_Init+0x13c>)
 800149e:	f001 fccd 	bl	8002e3c <HAL_GPIO_Init>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = USB_OverCurrent_Pin;
 80014a2:	2380      	movs	r3, #128	; 0x80
 80014a4:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 80014a6:	2300      	movs	r3, #0
 80014a8:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80014aa:	2300      	movs	r3, #0
 80014ac:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_GPIO_Init(USB_OverCurrent_GPIO_Port, &GPIO_InitStruct);
 80014ae:	f107 031c 	add.w	r3, r7, #28
 80014b2:	4619      	mov	r1, r3
 80014b4:	4805      	ldr	r0, [pc, #20]	; (80014cc <MX_GPIO_Init+0x13c>)
 80014b6:	f001 fcc1 	bl	8002e3c <HAL_GPIO_Init>

}
 80014ba:	bf00      	nop
 80014bc:	3730      	adds	r7, #48	; 0x30
 80014be:	46bd      	mov	sp, r7
 80014c0:	bd80      	pop	{r7, pc}
 80014c2:	bf00      	nop
 80014c4:	40023800 	.word	0x40023800
 80014c8:	40020400 	.word	0x40020400
 80014cc:	40021800 	.word	0x40021800
 80014d0:	40020800 	.word	0x40020800

080014d4 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 80014d4:	b580      	push	{r7, lr}
 80014d6:	b082      	sub	sp, #8
 80014d8:	af02      	add	r7, sp, #8
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 80014da:	f000 fb48 	bl	8001b6e <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 80014de:	f000 f893 	bl	8001608 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 80014e2:	f7ff ff55 	bl	8001390 <MX_GPIO_Init>
  MX_USART3_UART_Init();
 80014e6:	f000 fa89 	bl	80019fc <MX_USART3_UART_Init>
  MX_CAN1_Init();
 80014ea:	f7ff f827 	bl	800053c <MX_CAN1_Init>
  MX_CAN2_Init();
 80014ee:	f7ff f85d 	bl	80005ac <MX_CAN2_Init>
  MX_CAN3_Init();
 80014f2:	f7ff f893 	bl	800061c <MX_CAN3_Init>
  MX_CRC_Init();
 80014f6:	f7ff fe57 	bl	80011a8 <MX_CRC_Init>
  /* USER CODE BEGIN 2 */
  CanFilterConfig.FilterActivation = CAN_FILTER_ENABLE;
 80014fa:	4b37      	ldr	r3, [pc, #220]	; (80015d8 <main+0x104>)
 80014fc:	2201      	movs	r2, #1
 80014fe:	621a      	str	r2, [r3, #32]
  CanFilterConfig.FilterBank = 10;
 8001500:	4b35      	ldr	r3, [pc, #212]	; (80015d8 <main+0x104>)
 8001502:	220a      	movs	r2, #10
 8001504:	615a      	str	r2, [r3, #20]
  CanFilterConfig.FilterFIFOAssignment = CAN_RX_FIFO0;
 8001506:	4b34      	ldr	r3, [pc, #208]	; (80015d8 <main+0x104>)
 8001508:	2200      	movs	r2, #0
 800150a:	611a      	str	r2, [r3, #16]
  CanFilterConfig.FilterIdHigh = 0;
 800150c:	4b32      	ldr	r3, [pc, #200]	; (80015d8 <main+0x104>)
 800150e:	2200      	movs	r2, #0
 8001510:	601a      	str	r2, [r3, #0]
  CanFilterConfig.FilterIdLow = 0x0000;
 8001512:	4b31      	ldr	r3, [pc, #196]	; (80015d8 <main+0x104>)
 8001514:	2200      	movs	r2, #0
 8001516:	605a      	str	r2, [r3, #4]
  CanFilterConfig.FilterMaskIdHigh = 0;
 8001518:	4b2f      	ldr	r3, [pc, #188]	; (80015d8 <main+0x104>)
 800151a:	2200      	movs	r2, #0
 800151c:	609a      	str	r2, [r3, #8]
  CanFilterConfig.FilterMaskIdLow = 0x0000;
 800151e:	4b2e      	ldr	r3, [pc, #184]	; (80015d8 <main+0x104>)
 8001520:	2200      	movs	r2, #0
 8001522:	60da      	str	r2, [r3, #12]
  CanFilterConfig.FilterMode = CAN_FILTERMODE_IDMASK;
 8001524:	4b2c      	ldr	r3, [pc, #176]	; (80015d8 <main+0x104>)
 8001526:	2200      	movs	r2, #0
 8001528:	619a      	str	r2, [r3, #24]
  CanFilterConfig.FilterScale = CAN_FILTERSCALE_32BIT;
 800152a:	4b2b      	ldr	r3, [pc, #172]	; (80015d8 <main+0x104>)
 800152c:	2201      	movs	r2, #1
 800152e:	61da      	str	r2, [r3, #28]
  CanFilterConfig.SlaveStartFilterBank = 0;
 8001530:	4b29      	ldr	r3, [pc, #164]	; (80015d8 <main+0x104>)
 8001532:	2200      	movs	r2, #0
 8001534:	625a      	str	r2, [r3, #36]	; 0x24

  HAL_CAN_ConfigFilter(&hcan1, &CanFilterConfig);
 8001536:	4928      	ldr	r1, [pc, #160]	; (80015d8 <main+0x104>)
 8001538:	4828      	ldr	r0, [pc, #160]	; (80015dc <main+0x108>)
 800153a:	f000 fc41 	bl	8001dc0 <HAL_CAN_ConfigFilter>
  HAL_CAN_ConfigFilter(&hcan2, &CanFilterConfig);
 800153e:	4926      	ldr	r1, [pc, #152]	; (80015d8 <main+0x104>)
 8001540:	4827      	ldr	r0, [pc, #156]	; (80015e0 <main+0x10c>)
 8001542:	f000 fc3d 	bl	8001dc0 <HAL_CAN_ConfigFilter>
  HAL_CAN_ConfigFilter(&hcan3, &CanFilterConfig);
 8001546:	4924      	ldr	r1, [pc, #144]	; (80015d8 <main+0x104>)
 8001548:	4826      	ldr	r0, [pc, #152]	; (80015e4 <main+0x110>)
 800154a:	f000 fc39 	bl	8001dc0 <HAL_CAN_ConfigFilter>

  Can20aInit();
 800154e:	f7ff fd6b 	bl	8001028 <Can20aInit>

  Can20ReceiverInit(&CanMsg1, 16, &hcan1, 0x100, ENABLE, LedToogle);
 8001552:	4b25      	ldr	r3, [pc, #148]	; (80015e8 <main+0x114>)
 8001554:	9301      	str	r3, [sp, #4]
 8001556:	2301      	movs	r3, #1
 8001558:	9300      	str	r3, [sp, #0]
 800155a:	f44f 7380 	mov.w	r3, #256	; 0x100
 800155e:	4a1f      	ldr	r2, [pc, #124]	; (80015dc <main+0x108>)
 8001560:	2110      	movs	r1, #16
 8001562:	4822      	ldr	r0, [pc, #136]	; (80015ec <main+0x118>)
 8001564:	f7ff fada 	bl	8000b1c <Can20ReceiverInit>
  Can20ReceiverCheckFrameInit(&CheckFrame, &hcan1, 0x010, LedToogle);
 8001568:	4b1f      	ldr	r3, [pc, #124]	; (80015e8 <main+0x114>)
 800156a:	2210      	movs	r2, #16
 800156c:	491b      	ldr	r1, [pc, #108]	; (80015dc <main+0x108>)
 800156e:	4820      	ldr	r0, [pc, #128]	; (80015f0 <main+0x11c>)
 8001570:	f7ff fa80 	bl	8000a74 <Can20ReceiverCheckFrameInit>
  Can20ReceiverInit(&CanMsg2, 256, &hcan2, 0xffff, ENABLE, LedToogle);
 8001574:	4b1c      	ldr	r3, [pc, #112]	; (80015e8 <main+0x114>)
 8001576:	9301      	str	r3, [sp, #4]
 8001578:	2301      	movs	r3, #1
 800157a:	9300      	str	r3, [sp, #0]
 800157c:	f64f 73ff 	movw	r3, #65535	; 0xffff
 8001580:	4a17      	ldr	r2, [pc, #92]	; (80015e0 <main+0x10c>)
 8001582:	f44f 7180 	mov.w	r1, #256	; 0x100
 8001586:	481b      	ldr	r0, [pc, #108]	; (80015f4 <main+0x120>)
 8001588:	f7ff fac8 	bl	8000b1c <Can20ReceiverInit>
  Can20ReceiverCheckFrameInit(&CheckFrame2, &hcan1, 0x015, LedToogle);
 800158c:	4b16      	ldr	r3, [pc, #88]	; (80015e8 <main+0x114>)
 800158e:	2215      	movs	r2, #21
 8001590:	4912      	ldr	r1, [pc, #72]	; (80015dc <main+0x108>)
 8001592:	4819      	ldr	r0, [pc, #100]	; (80015f8 <main+0x124>)
 8001594:	f7ff fa6e 	bl	8000a74 <Can20ReceiverCheckFrameInit>
  Can20ReceiverInit(&CanMsg3, 8, &hcan1, 0x200, DISABLE, LedToogle);
 8001598:	4b13      	ldr	r3, [pc, #76]	; (80015e8 <main+0x114>)
 800159a:	9301      	str	r3, [sp, #4]
 800159c:	2300      	movs	r3, #0
 800159e:	9300      	str	r3, [sp, #0]
 80015a0:	f44f 7300 	mov.w	r3, #512	; 0x200
 80015a4:	4a0d      	ldr	r2, [pc, #52]	; (80015dc <main+0x108>)
 80015a6:	2108      	movs	r1, #8
 80015a8:	4814      	ldr	r0, [pc, #80]	; (80015fc <main+0x128>)
 80015aa:	f7ff fab7 	bl	8000b1c <Can20ReceiverInit>
  Can20ReceiverCheckFrameInit(&ExtCheck, &hcan3, 0xfffa, LedToogle);
 80015ae:	4b0e      	ldr	r3, [pc, #56]	; (80015e8 <main+0x114>)
 80015b0:	f64f 72fa 	movw	r2, #65530	; 0xfffa
 80015b4:	490b      	ldr	r1, [pc, #44]	; (80015e4 <main+0x110>)
 80015b6:	4812      	ldr	r0, [pc, #72]	; (8001600 <main+0x12c>)
 80015b8:	f7ff fa5c 	bl	8000a74 <Can20ReceiverCheckFrameInit>


  Can20ReceiverOvrTimSet(&CheckFrame, 600, LedToogle2);
 80015bc:	4a11      	ldr	r2, [pc, #68]	; (8001604 <main+0x130>)
 80015be:	f44f 7116 	mov.w	r1, #600	; 0x258
 80015c2:	480b      	ldr	r0, [pc, #44]	; (80015f0 <main+0x11c>)
 80015c4:	f7ff fcb2 	bl	8000f2c <Can20ReceiverOvrTimSet>

  //Can20Receiverdeinit(&CanMsg2);
  /* USER CODE END 2 */

  /* Init scheduler */
  osKernelInitialize();
 80015c8:	f003 fef4 	bl	80053b4 <osKernelInitialize>

  /* Call init function for freertos objects (in freertos.c) */
  MX_FREERTOS_Init();
 80015cc:	f7ff fe40 	bl	8001250 <MX_FREERTOS_Init>

  /* Start scheduler */
  osKernelStart();
 80015d0:	f003 ff24 	bl	800541c <osKernelStart>

  /* We should never get here as control is now taken by the scheduler */
  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
 80015d4:	e7fe      	b.n	80015d4 <main+0x100>
 80015d6:	bf00      	nop
 80015d8:	20000604 	.word	0x20000604
 80015dc:	20000090 	.word	0x20000090
 80015e0:	200000b8 	.word	0x200000b8
 80015e4:	200000e0 	.word	0x200000e0
 80015e8:	080016e9 	.word	0x080016e9
 80015ec:	2000072c 	.word	0x2000072c
 80015f0:	20000da4 	.word	0x20000da4
 80015f4:	20000954 	.word	0x20000954
 80015f8:	20000fcc 	.word	0x20000fcc
 80015fc:	20000b7c 	.word	0x20000b7c
 8001600:	200011f4 	.word	0x200011f4
 8001604:	0800173d 	.word	0x0800173d

08001608 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8001608:	b580      	push	{r7, lr}
 800160a:	b094      	sub	sp, #80	; 0x50
 800160c:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 800160e:	f107 031c 	add.w	r3, r7, #28
 8001612:	2234      	movs	r2, #52	; 0x34
 8001614:	2100      	movs	r1, #0
 8001616:	4618      	mov	r0, r3
 8001618:	f007 f8b8 	bl	800878c <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 800161c:	f107 0308 	add.w	r3, r7, #8
 8001620:	2200      	movs	r2, #0
 8001622:	601a      	str	r2, [r3, #0]
 8001624:	605a      	str	r2, [r3, #4]
 8001626:	609a      	str	r2, [r3, #8]
 8001628:	60da      	str	r2, [r3, #12]
 800162a:	611a      	str	r2, [r3, #16]

  /** Configure LSE Drive Capability
  */
  HAL_PWR_EnableBkUpAccess();
 800162c:	f001 fde6 	bl	80031fc <HAL_PWR_EnableBkUpAccess>

  /** Configure the main internal regulator output voltage
  */
  __HAL_RCC_PWR_CLK_ENABLE();
 8001630:	4b2b      	ldr	r3, [pc, #172]	; (80016e0 <SystemClock_Config+0xd8>)
 8001632:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001634:	4a2a      	ldr	r2, [pc, #168]	; (80016e0 <SystemClock_Config+0xd8>)
 8001636:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800163a:	6413      	str	r3, [r2, #64]	; 0x40
 800163c:	4b28      	ldr	r3, [pc, #160]	; (80016e0 <SystemClock_Config+0xd8>)
 800163e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001640:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001644:	607b      	str	r3, [r7, #4]
 8001646:	687b      	ldr	r3, [r7, #4]
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1);
 8001648:	4b26      	ldr	r3, [pc, #152]	; (80016e4 <SystemClock_Config+0xdc>)
 800164a:	681b      	ldr	r3, [r3, #0]
 800164c:	4a25      	ldr	r2, [pc, #148]	; (80016e4 <SystemClock_Config+0xdc>)
 800164e:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 8001652:	6013      	str	r3, [r2, #0]
 8001654:	4b23      	ldr	r3, [pc, #140]	; (80016e4 <SystemClock_Config+0xdc>)
 8001656:	681b      	ldr	r3, [r3, #0]
 8001658:	f403 4340 	and.w	r3, r3, #49152	; 0xc000
 800165c:	603b      	str	r3, [r7, #0]
 800165e:	683b      	ldr	r3, [r7, #0]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE;
 8001660:	2301      	movs	r3, #1
 8001662:	61fb      	str	r3, [r7, #28]
  RCC_OscInitStruct.HSEState = RCC_HSE_BYPASS;
 8001664:	f44f 23a0 	mov.w	r3, #327680	; 0x50000
 8001668:	623b      	str	r3, [r7, #32]
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 800166a:	2302      	movs	r3, #2
 800166c:	637b      	str	r3, [r7, #52]	; 0x34
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 800166e:	f44f 0380 	mov.w	r3, #4194304	; 0x400000
 8001672:	63bb      	str	r3, [r7, #56]	; 0x38
  RCC_OscInitStruct.PLL.PLLM = 4;
 8001674:	2304      	movs	r3, #4
 8001676:	63fb      	str	r3, [r7, #60]	; 0x3c
  RCC_OscInitStruct.PLL.PLLN = 216;
 8001678:	23d8      	movs	r3, #216	; 0xd8
 800167a:	643b      	str	r3, [r7, #64]	; 0x40
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV2;
 800167c:	2302      	movs	r3, #2
 800167e:	647b      	str	r3, [r7, #68]	; 0x44
  RCC_OscInitStruct.PLL.PLLQ = 4;
 8001680:	2304      	movs	r3, #4
 8001682:	64bb      	str	r3, [r7, #72]	; 0x48
  RCC_OscInitStruct.PLL.PLLR = 2;
 8001684:	2302      	movs	r3, #2
 8001686:	64fb      	str	r3, [r7, #76]	; 0x4c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8001688:	f107 031c 	add.w	r3, r7, #28
 800168c:	4618      	mov	r0, r3
 800168e:	f001 fe15 	bl	80032bc <HAL_RCC_OscConfig>
 8001692:	4603      	mov	r3, r0
 8001694:	2b00      	cmp	r3, #0
 8001696:	d001      	beq.n	800169c <SystemClock_Config+0x94>
  {
    Error_Handler();
 8001698:	f000 f86c 	bl	8001774 <Error_Handler>
  }

  /** Activate the Over-Drive mode
  */
  if (HAL_PWREx_EnableOverDrive() != HAL_OK)
 800169c:	f001 fdbe 	bl	800321c <HAL_PWREx_EnableOverDrive>
 80016a0:	4603      	mov	r3, r0
 80016a2:	2b00      	cmp	r3, #0
 80016a4:	d001      	beq.n	80016aa <SystemClock_Config+0xa2>
  {
    Error_Handler();
 80016a6:	f000 f865 	bl	8001774 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 80016aa:	230f      	movs	r3, #15
 80016ac:	60bb      	str	r3, [r7, #8]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 80016ae:	2302      	movs	r3, #2
 80016b0:	60fb      	str	r3, [r7, #12]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 80016b2:	2300      	movs	r3, #0
 80016b4:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV4;
 80016b6:	f44f 53a0 	mov.w	r3, #5120	; 0x1400
 80016ba:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV2;
 80016bc:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 80016c0:	61bb      	str	r3, [r7, #24]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_7) != HAL_OK)
 80016c2:	f107 0308 	add.w	r3, r7, #8
 80016c6:	2107      	movs	r1, #7
 80016c8:	4618      	mov	r0, r3
 80016ca:	f002 f8a5 	bl	8003818 <HAL_RCC_ClockConfig>
 80016ce:	4603      	mov	r3, r0
 80016d0:	2b00      	cmp	r3, #0
 80016d2:	d001      	beq.n	80016d8 <SystemClock_Config+0xd0>
  {
    Error_Handler();
 80016d4:	f000 f84e 	bl	8001774 <Error_Handler>
  }
}
 80016d8:	bf00      	nop
 80016da:	3750      	adds	r7, #80	; 0x50
 80016dc:	46bd      	mov	sp, r7
 80016de:	bd80      	pop	{r7, pc}
 80016e0:	40023800 	.word	0x40023800
 80016e4:	40007000 	.word	0x40007000

080016e8 <LedToogle>:

/* USER CODE BEGIN 4 */
void LedToogle(CanReceiver_t *rec)
{
 80016e8:	b580      	push	{r7, lr}
 80016ea:	b082      	sub	sp, #8
 80016ec:	af00      	add	r7, sp, #0
 80016ee:	6078      	str	r0, [r7, #4]

	if(rec == &CheckFrame) HAL_GPIO_TogglePin(LD3_GPIO_Port, LD3_Pin);
 80016f0:	687b      	ldr	r3, [r7, #4]
 80016f2:	4a0e      	ldr	r2, [pc, #56]	; (800172c <LedToogle+0x44>)
 80016f4:	4293      	cmp	r3, r2
 80016f6:	d104      	bne.n	8001702 <LedToogle+0x1a>
 80016f8:	f44f 4180 	mov.w	r1, #16384	; 0x4000
 80016fc:	480c      	ldr	r0, [pc, #48]	; (8001730 <LedToogle+0x48>)
 80016fe:	f001 fd62 	bl	80031c6 <HAL_GPIO_TogglePin>
	if(rec == &CanMsg2) HAL_GPIO_TogglePin(LD2_GPIO_Port, LD2_Pin);
 8001702:	687b      	ldr	r3, [r7, #4]
 8001704:	4a0b      	ldr	r2, [pc, #44]	; (8001734 <LedToogle+0x4c>)
 8001706:	4293      	cmp	r3, r2
 8001708:	d103      	bne.n	8001712 <LedToogle+0x2a>
 800170a:	2180      	movs	r1, #128	; 0x80
 800170c:	4808      	ldr	r0, [pc, #32]	; (8001730 <LedToogle+0x48>)
 800170e:	f001 fd5a 	bl	80031c6 <HAL_GPIO_TogglePin>
	if(rec == &CanMsg3) HAL_GPIO_TogglePin(LD1_GPIO_Port, LD1_Pin);
 8001712:	687b      	ldr	r3, [r7, #4]
 8001714:	4a08      	ldr	r2, [pc, #32]	; (8001738 <LedToogle+0x50>)
 8001716:	4293      	cmp	r3, r2
 8001718:	d103      	bne.n	8001722 <LedToogle+0x3a>
 800171a:	2101      	movs	r1, #1
 800171c:	4804      	ldr	r0, [pc, #16]	; (8001730 <LedToogle+0x48>)
 800171e:	f001 fd52 	bl	80031c6 <HAL_GPIO_TogglePin>
}
 8001722:	bf00      	nop
 8001724:	3708      	adds	r7, #8
 8001726:	46bd      	mov	sp, r7
 8001728:	bd80      	pop	{r7, pc}
 800172a:	bf00      	nop
 800172c:	20000da4 	.word	0x20000da4
 8001730:	40020400 	.word	0x40020400
 8001734:	20000954 	.word	0x20000954
 8001738:	20000b7c 	.word	0x20000b7c

0800173c <LedToogle2>:
void LedToogle2(CanReceiver_t *rec)
{
 800173c:	b480      	push	{r7}
 800173e:	b083      	sub	sp, #12
 8001740:	af00      	add	r7, sp, #0
 8001742:	6078      	str	r0, [r7, #4]
//	if(rec == &CheckFrame) HAL_GPIO_TogglePin(LD1_GPIO_Port, LD1_Pin);
}
 8001744:	bf00      	nop
 8001746:	370c      	adds	r7, #12
 8001748:	46bd      	mov	sp, r7
 800174a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800174e:	4770      	bx	lr

08001750 <HAL_TIM_PeriodElapsedCallback>:
  * a global variable "uwTick" used as application time base.
  * @param  htim : TIM handle
  * @retval None
  */
void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim)
{
 8001750:	b580      	push	{r7, lr}
 8001752:	b082      	sub	sp, #8
 8001754:	af00      	add	r7, sp, #0
 8001756:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN Callback 0 */

  /* USER CODE END Callback 0 */
  if (htim->Instance == TIM14) {
 8001758:	687b      	ldr	r3, [r7, #4]
 800175a:	681b      	ldr	r3, [r3, #0]
 800175c:	4a04      	ldr	r2, [pc, #16]	; (8001770 <HAL_TIM_PeriodElapsedCallback+0x20>)
 800175e:	4293      	cmp	r3, r2
 8001760:	d101      	bne.n	8001766 <HAL_TIM_PeriodElapsedCallback+0x16>
    HAL_IncTick();
 8001762:	f000 fa11 	bl	8001b88 <HAL_IncTick>
  }
  /* USER CODE BEGIN Callback 1 */

  /* USER CODE END Callback 1 */
}
 8001766:	bf00      	nop
 8001768:	3708      	adds	r7, #8
 800176a:	46bd      	mov	sp, r7
 800176c:	bd80      	pop	{r7, pc}
 800176e:	bf00      	nop
 8001770:	40002000 	.word	0x40002000

08001774 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8001774:	b480      	push	{r7}
 8001776:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8001778:	b672      	cpsid	i
}
 800177a:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 800177c:	e7fe      	b.n	800177c <Error_Handler+0x8>
	...

08001780 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8001780:	b580      	push	{r7, lr}
 8001782:	b082      	sub	sp, #8
 8001784:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_PWR_CLK_ENABLE();
 8001786:	4b15      	ldr	r3, [pc, #84]	; (80017dc <HAL_MspInit+0x5c>)
 8001788:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800178a:	4a14      	ldr	r2, [pc, #80]	; (80017dc <HAL_MspInit+0x5c>)
 800178c:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8001790:	6413      	str	r3, [r2, #64]	; 0x40
 8001792:	4b12      	ldr	r3, [pc, #72]	; (80017dc <HAL_MspInit+0x5c>)
 8001794:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001796:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800179a:	607b      	str	r3, [r7, #4]
 800179c:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_SYSCFG_CLK_ENABLE();
 800179e:	4b0f      	ldr	r3, [pc, #60]	; (80017dc <HAL_MspInit+0x5c>)
 80017a0:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80017a2:	4a0e      	ldr	r2, [pc, #56]	; (80017dc <HAL_MspInit+0x5c>)
 80017a4:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 80017a8:	6453      	str	r3, [r2, #68]	; 0x44
 80017aa:	4b0c      	ldr	r3, [pc, #48]	; (80017dc <HAL_MspInit+0x5c>)
 80017ac:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80017ae:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 80017b2:	603b      	str	r3, [r7, #0]
 80017b4:	683b      	ldr	r3, [r7, #0]

  /* System interrupt init*/
  /* PendSV_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(PendSV_IRQn, 15, 0);
 80017b6:	2200      	movs	r2, #0
 80017b8:	210f      	movs	r1, #15
 80017ba:	f06f 0001 	mvn.w	r0, #1
 80017be:	f001 f915 	bl	80029ec <HAL_NVIC_SetPriority>

  /* Peripheral interrupt init */
  /* FPU_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(FPU_IRQn, 5, 0);
 80017c2:	2200      	movs	r2, #0
 80017c4:	2105      	movs	r1, #5
 80017c6:	2051      	movs	r0, #81	; 0x51
 80017c8:	f001 f910 	bl	80029ec <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(FPU_IRQn);
 80017cc:	2051      	movs	r0, #81	; 0x51
 80017ce:	f001 f929 	bl	8002a24 <HAL_NVIC_EnableIRQ>

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 80017d2:	bf00      	nop
 80017d4:	3708      	adds	r7, #8
 80017d6:	46bd      	mov	sp, r7
 80017d8:	bd80      	pop	{r7, pc}
 80017da:	bf00      	nop
 80017dc:	40023800 	.word	0x40023800

080017e0 <HAL_InitTick>:
  *         reset by HAL_Init() or at any time when clock is configured, by HAL_RCC_ClockConfig().
  * @param  TickPriority: Tick interrupt priority.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 80017e0:	b580      	push	{r7, lr}
 80017e2:	b08e      	sub	sp, #56	; 0x38
 80017e4:	af00      	add	r7, sp, #0
 80017e6:	6078      	str	r0, [r7, #4]
  RCC_ClkInitTypeDef    clkconfig;
  uint32_t              uwTimclock, uwAPB1Prescaler = 0U;
 80017e8:	2300      	movs	r3, #0
 80017ea:	62fb      	str	r3, [r7, #44]	; 0x2c

  uint32_t              uwPrescalerValue = 0U;
 80017ec:	2300      	movs	r3, #0
 80017ee:	62bb      	str	r3, [r7, #40]	; 0x28
  uint32_t              pFLatency;
  HAL_StatusTypeDef     status;

  /* Enable TIM14 clock */
  __HAL_RCC_TIM14_CLK_ENABLE();
 80017f0:	4b33      	ldr	r3, [pc, #204]	; (80018c0 <HAL_InitTick+0xe0>)
 80017f2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80017f4:	4a32      	ldr	r2, [pc, #200]	; (80018c0 <HAL_InitTick+0xe0>)
 80017f6:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80017fa:	6413      	str	r3, [r2, #64]	; 0x40
 80017fc:	4b30      	ldr	r3, [pc, #192]	; (80018c0 <HAL_InitTick+0xe0>)
 80017fe:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001800:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8001804:	60fb      	str	r3, [r7, #12]
 8001806:	68fb      	ldr	r3, [r7, #12]

  /* Get clock configuration */
  HAL_RCC_GetClockConfig(&clkconfig, &pFLatency);
 8001808:	f107 0210 	add.w	r2, r7, #16
 800180c:	f107 0314 	add.w	r3, r7, #20
 8001810:	4611      	mov	r1, r2
 8001812:	4618      	mov	r0, r3
 8001814:	f002 fa26 	bl	8003c64 <HAL_RCC_GetClockConfig>

  /* Get APB1 prescaler */
  uwAPB1Prescaler = clkconfig.APB1CLKDivider;
 8001818:	6a3b      	ldr	r3, [r7, #32]
 800181a:	62fb      	str	r3, [r7, #44]	; 0x2c
  /* Compute TIM14 clock */
  if (uwAPB1Prescaler == RCC_HCLK_DIV1)
 800181c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800181e:	2b00      	cmp	r3, #0
 8001820:	d103      	bne.n	800182a <HAL_InitTick+0x4a>
  {
    uwTimclock = HAL_RCC_GetPCLK1Freq();
 8001822:	f002 f9f7 	bl	8003c14 <HAL_RCC_GetPCLK1Freq>
 8001826:	6378      	str	r0, [r7, #52]	; 0x34
 8001828:	e004      	b.n	8001834 <HAL_InitTick+0x54>
  }
  else
  {
    uwTimclock = 2UL * HAL_RCC_GetPCLK1Freq();
 800182a:	f002 f9f3 	bl	8003c14 <HAL_RCC_GetPCLK1Freq>
 800182e:	4603      	mov	r3, r0
 8001830:	005b      	lsls	r3, r3, #1
 8001832:	637b      	str	r3, [r7, #52]	; 0x34
  }

  /* Compute the prescaler value to have TIM14 counter clock equal to 1MHz */
  uwPrescalerValue = (uint32_t) ((uwTimclock / 1000000U) - 1U);
 8001834:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8001836:	4a23      	ldr	r2, [pc, #140]	; (80018c4 <HAL_InitTick+0xe4>)
 8001838:	fba2 2303 	umull	r2, r3, r2, r3
 800183c:	0c9b      	lsrs	r3, r3, #18
 800183e:	3b01      	subs	r3, #1
 8001840:	62bb      	str	r3, [r7, #40]	; 0x28

  /* Initialize TIM14 */
  htim14.Instance = TIM14;
 8001842:	4b21      	ldr	r3, [pc, #132]	; (80018c8 <HAL_InitTick+0xe8>)
 8001844:	4a21      	ldr	r2, [pc, #132]	; (80018cc <HAL_InitTick+0xec>)
 8001846:	601a      	str	r2, [r3, #0]
  + Period = [(TIM14CLK/1000) - 1]. to have a (1/1000) s time base.
  + Prescaler = (uwTimclock/1000000 - 1) to have a 1MHz counter clock.
  + ClockDivision = 0
  + Counter direction = Up
  */
  htim14.Init.Period = (1000000U / 1000U) - 1U;
 8001848:	4b1f      	ldr	r3, [pc, #124]	; (80018c8 <HAL_InitTick+0xe8>)
 800184a:	f240 32e7 	movw	r2, #999	; 0x3e7
 800184e:	60da      	str	r2, [r3, #12]
  htim14.Init.Prescaler = uwPrescalerValue;
 8001850:	4a1d      	ldr	r2, [pc, #116]	; (80018c8 <HAL_InitTick+0xe8>)
 8001852:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8001854:	6053      	str	r3, [r2, #4]
  htim14.Init.ClockDivision = 0;
 8001856:	4b1c      	ldr	r3, [pc, #112]	; (80018c8 <HAL_InitTick+0xe8>)
 8001858:	2200      	movs	r2, #0
 800185a:	611a      	str	r2, [r3, #16]
  htim14.Init.CounterMode = TIM_COUNTERMODE_UP;
 800185c:	4b1a      	ldr	r3, [pc, #104]	; (80018c8 <HAL_InitTick+0xe8>)
 800185e:	2200      	movs	r2, #0
 8001860:	609a      	str	r2, [r3, #8]
  htim14.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8001862:	4b19      	ldr	r3, [pc, #100]	; (80018c8 <HAL_InitTick+0xe8>)
 8001864:	2200      	movs	r2, #0
 8001866:	619a      	str	r2, [r3, #24]

  status = HAL_TIM_Base_Init(&htim14);
 8001868:	4817      	ldr	r0, [pc, #92]	; (80018c8 <HAL_InitTick+0xe8>)
 800186a:	f002 fe55 	bl	8004518 <HAL_TIM_Base_Init>
 800186e:	4603      	mov	r3, r0
 8001870:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
  if (status == HAL_OK)
 8001874:	f897 3033 	ldrb.w	r3, [r7, #51]	; 0x33
 8001878:	2b00      	cmp	r3, #0
 800187a:	d11b      	bne.n	80018b4 <HAL_InitTick+0xd4>
  {
    /* Start the TIM time Base generation in interrupt mode */
    status = HAL_TIM_Base_Start_IT(&htim14);
 800187c:	4812      	ldr	r0, [pc, #72]	; (80018c8 <HAL_InitTick+0xe8>)
 800187e:	f002 fead 	bl	80045dc <HAL_TIM_Base_Start_IT>
 8001882:	4603      	mov	r3, r0
 8001884:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
    if (status == HAL_OK)
 8001888:	f897 3033 	ldrb.w	r3, [r7, #51]	; 0x33
 800188c:	2b00      	cmp	r3, #0
 800188e:	d111      	bne.n	80018b4 <HAL_InitTick+0xd4>
    {
    /* Enable the TIM14 global Interrupt */
        HAL_NVIC_EnableIRQ(TIM8_TRG_COM_TIM14_IRQn);
 8001890:	202d      	movs	r0, #45	; 0x2d
 8001892:	f001 f8c7 	bl	8002a24 <HAL_NVIC_EnableIRQ>
      /* Configure the SysTick IRQ priority */
      if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8001896:	687b      	ldr	r3, [r7, #4]
 8001898:	2b0f      	cmp	r3, #15
 800189a:	d808      	bhi.n	80018ae <HAL_InitTick+0xce>
      {
        /* Configure the TIM IRQ priority */
        HAL_NVIC_SetPriority(TIM8_TRG_COM_TIM14_IRQn, TickPriority, 0U);
 800189c:	2200      	movs	r2, #0
 800189e:	6879      	ldr	r1, [r7, #4]
 80018a0:	202d      	movs	r0, #45	; 0x2d
 80018a2:	f001 f8a3 	bl	80029ec <HAL_NVIC_SetPriority>
        uwTickPrio = TickPriority;
 80018a6:	4a0a      	ldr	r2, [pc, #40]	; (80018d0 <HAL_InitTick+0xf0>)
 80018a8:	687b      	ldr	r3, [r7, #4]
 80018aa:	6013      	str	r3, [r2, #0]
 80018ac:	e002      	b.n	80018b4 <HAL_InitTick+0xd4>
      }
      else
      {
        status = HAL_ERROR;
 80018ae:	2301      	movs	r3, #1
 80018b0:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
      }
    }
  }

 /* Return function status */
  return status;
 80018b4:	f897 3033 	ldrb.w	r3, [r7, #51]	; 0x33
}
 80018b8:	4618      	mov	r0, r3
 80018ba:	3738      	adds	r7, #56	; 0x38
 80018bc:	46bd      	mov	sp, r7
 80018be:	bd80      	pop	{r7, pc}
 80018c0:	40023800 	.word	0x40023800
 80018c4:	431bde83 	.word	0x431bde83
 80018c8:	2000141c 	.word	0x2000141c
 80018cc:	40002000 	.word	0x40002000
 80018d0:	20000018 	.word	0x20000018

080018d4 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 80018d4:	b480      	push	{r7}
 80018d6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
   while (1)
 80018d8:	e7fe      	b.n	80018d8 <NMI_Handler+0x4>

080018da <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 80018da:	b480      	push	{r7}
 80018dc:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 80018de:	e7fe      	b.n	80018de <HardFault_Handler+0x4>

080018e0 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 80018e0:	b480      	push	{r7}
 80018e2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 80018e4:	e7fe      	b.n	80018e4 <MemManage_Handler+0x4>

080018e6 <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 80018e6:	b480      	push	{r7}
 80018e8:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 80018ea:	e7fe      	b.n	80018ea <BusFault_Handler+0x4>

080018ec <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 80018ec:	b480      	push	{r7}
 80018ee:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 80018f0:	e7fe      	b.n	80018f0 <UsageFault_Handler+0x4>

080018f2 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 80018f2:	b480      	push	{r7}
 80018f4:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 80018f6:	bf00      	nop
 80018f8:	46bd      	mov	sp, r7
 80018fa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80018fe:	4770      	bx	lr

08001900 <CAN1_TX_IRQHandler>:

/**
  * @brief This function handles CAN1 TX interrupts.
  */
void CAN1_TX_IRQHandler(void)
{
 8001900:	b580      	push	{r7, lr}
 8001902:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN CAN1_TX_IRQn 0 */

  /* USER CODE END CAN1_TX_IRQn 0 */
  HAL_CAN_IRQHandler(&hcan1);
 8001904:	4802      	ldr	r0, [pc, #8]	; (8001910 <CAN1_TX_IRQHandler+0x10>)
 8001906:	f000 fd93 	bl	8002430 <HAL_CAN_IRQHandler>
  /* USER CODE BEGIN CAN1_TX_IRQn 1 */

  /* USER CODE END CAN1_TX_IRQn 1 */
}
 800190a:	bf00      	nop
 800190c:	bd80      	pop	{r7, pc}
 800190e:	bf00      	nop
 8001910:	20000090 	.word	0x20000090

08001914 <CAN1_RX0_IRQHandler>:

/**
  * @brief This function handles CAN1 RX0 interrupts.
  */
void CAN1_RX0_IRQHandler(void)
{
 8001914:	b580      	push	{r7, lr}
 8001916:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN CAN1_RX0_IRQn 0 */

  /* USER CODE END CAN1_RX0_IRQn 0 */
  HAL_CAN_IRQHandler(&hcan1);
 8001918:	4802      	ldr	r0, [pc, #8]	; (8001924 <CAN1_RX0_IRQHandler+0x10>)
 800191a:	f000 fd89 	bl	8002430 <HAL_CAN_IRQHandler>
  /* USER CODE BEGIN CAN1_RX0_IRQn 1 */

  /* USER CODE END CAN1_RX0_IRQn 1 */
}
 800191e:	bf00      	nop
 8001920:	bd80      	pop	{r7, pc}
 8001922:	bf00      	nop
 8001924:	20000090 	.word	0x20000090

08001928 <CAN1_RX1_IRQHandler>:

/**
  * @brief This function handles CAN1 RX1 interrupt.
  */
void CAN1_RX1_IRQHandler(void)
{
 8001928:	b580      	push	{r7, lr}
 800192a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN CAN1_RX1_IRQn 0 */

  /* USER CODE END CAN1_RX1_IRQn 0 */
  HAL_CAN_IRQHandler(&hcan1);
 800192c:	4802      	ldr	r0, [pc, #8]	; (8001938 <CAN1_RX1_IRQHandler+0x10>)
 800192e:	f000 fd7f 	bl	8002430 <HAL_CAN_IRQHandler>
  /* USER CODE BEGIN CAN1_RX1_IRQn 1 */

  /* USER CODE END CAN1_RX1_IRQn 1 */
}
 8001932:	bf00      	nop
 8001934:	bd80      	pop	{r7, pc}
 8001936:	bf00      	nop
 8001938:	20000090 	.word	0x20000090

0800193c <TIM8_TRG_COM_TIM14_IRQHandler>:

/**
  * @brief This function handles TIM8 trigger and commutation interrupts and TIM14 global interrupt.
  */
void TIM8_TRG_COM_TIM14_IRQHandler(void)
{
 800193c:	b580      	push	{r7, lr}
 800193e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM8_TRG_COM_TIM14_IRQn 0 */

  /* USER CODE END TIM8_TRG_COM_TIM14_IRQn 0 */
  HAL_TIM_IRQHandler(&htim14);
 8001940:	4802      	ldr	r0, [pc, #8]	; (800194c <TIM8_TRG_COM_TIM14_IRQHandler+0x10>)
 8001942:	f002 fec3 	bl	80046cc <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM8_TRG_COM_TIM14_IRQn 1 */

  /* USER CODE END TIM8_TRG_COM_TIM14_IRQn 1 */
}
 8001946:	bf00      	nop
 8001948:	bd80      	pop	{r7, pc}
 800194a:	bf00      	nop
 800194c:	2000141c 	.word	0x2000141c

08001950 <CAN2_TX_IRQHandler>:

/**
  * @brief This function handles CAN2 TX interrupts.
  */
void CAN2_TX_IRQHandler(void)
{
 8001950:	b580      	push	{r7, lr}
 8001952:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN CAN2_TX_IRQn 0 */

  /* USER CODE END CAN2_TX_IRQn 0 */
  HAL_CAN_IRQHandler(&hcan2);
 8001954:	4802      	ldr	r0, [pc, #8]	; (8001960 <CAN2_TX_IRQHandler+0x10>)
 8001956:	f000 fd6b 	bl	8002430 <HAL_CAN_IRQHandler>
  /* USER CODE BEGIN CAN2_TX_IRQn 1 */

  /* USER CODE END CAN2_TX_IRQn 1 */
}
 800195a:	bf00      	nop
 800195c:	bd80      	pop	{r7, pc}
 800195e:	bf00      	nop
 8001960:	200000b8 	.word	0x200000b8

08001964 <CAN2_RX0_IRQHandler>:

/**
  * @brief This function handles CAN2 RX0 interrupts.
  */
void CAN2_RX0_IRQHandler(void)
{
 8001964:	b580      	push	{r7, lr}
 8001966:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN CAN2_RX0_IRQn 0 */

  /* USER CODE END CAN2_RX0_IRQn 0 */
  HAL_CAN_IRQHandler(&hcan2);
 8001968:	4802      	ldr	r0, [pc, #8]	; (8001974 <CAN2_RX0_IRQHandler+0x10>)
 800196a:	f000 fd61 	bl	8002430 <HAL_CAN_IRQHandler>
  /* USER CODE BEGIN CAN2_RX0_IRQn 1 */

  /* USER CODE END CAN2_RX0_IRQn 1 */
}
 800196e:	bf00      	nop
 8001970:	bd80      	pop	{r7, pc}
 8001972:	bf00      	nop
 8001974:	200000b8 	.word	0x200000b8

08001978 <CAN2_RX1_IRQHandler>:

/**
  * @brief This function handles CAN2 RX1 interrupt.
  */
void CAN2_RX1_IRQHandler(void)
{
 8001978:	b580      	push	{r7, lr}
 800197a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN CAN2_RX1_IRQn 0 */

  /* USER CODE END CAN2_RX1_IRQn 0 */
  HAL_CAN_IRQHandler(&hcan2);
 800197c:	4802      	ldr	r0, [pc, #8]	; (8001988 <CAN2_RX1_IRQHandler+0x10>)
 800197e:	f000 fd57 	bl	8002430 <HAL_CAN_IRQHandler>
  /* USER CODE BEGIN CAN2_RX1_IRQn 1 */

  /* USER CODE END CAN2_RX1_IRQn 1 */
}
 8001982:	bf00      	nop
 8001984:	bd80      	pop	{r7, pc}
 8001986:	bf00      	nop
 8001988:	200000b8 	.word	0x200000b8

0800198c <FPU_IRQHandler>:

/**
  * @brief This function handles FPU global interrupt.
  */
void FPU_IRQHandler(void)
{
 800198c:	b480      	push	{r7}
 800198e:	af00      	add	r7, sp, #0

  /* USER CODE END FPU_IRQn 0 */
  /* USER CODE BEGIN FPU_IRQn 1 */

  /* USER CODE END FPU_IRQn 1 */
}
 8001990:	bf00      	nop
 8001992:	46bd      	mov	sp, r7
 8001994:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001998:	4770      	bx	lr
	...

0800199c <CAN3_TX_IRQHandler>:

/**
  * @brief This function handles CAN3 TX interrupt.
  */
void CAN3_TX_IRQHandler(void)
{
 800199c:	b580      	push	{r7, lr}
 800199e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN CAN3_TX_IRQn 0 */

  /* USER CODE END CAN3_TX_IRQn 0 */
  HAL_CAN_IRQHandler(&hcan3);
 80019a0:	4802      	ldr	r0, [pc, #8]	; (80019ac <CAN3_TX_IRQHandler+0x10>)
 80019a2:	f000 fd45 	bl	8002430 <HAL_CAN_IRQHandler>
  /* USER CODE BEGIN CAN3_TX_IRQn 1 */

  /* USER CODE END CAN3_TX_IRQn 1 */
}
 80019a6:	bf00      	nop
 80019a8:	bd80      	pop	{r7, pc}
 80019aa:	bf00      	nop
 80019ac:	200000e0 	.word	0x200000e0

080019b0 <CAN3_RX0_IRQHandler>:

/**
  * @brief This function handles CAN3 RX0 interrupt.
  */
void CAN3_RX0_IRQHandler(void)
{
 80019b0:	b580      	push	{r7, lr}
 80019b2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN CAN3_RX0_IRQn 0 */

  /* USER CODE END CAN3_RX0_IRQn 0 */
  HAL_CAN_IRQHandler(&hcan3);
 80019b4:	4802      	ldr	r0, [pc, #8]	; (80019c0 <CAN3_RX0_IRQHandler+0x10>)
 80019b6:	f000 fd3b 	bl	8002430 <HAL_CAN_IRQHandler>
  /* USER CODE BEGIN CAN3_RX0_IRQn 1 */

  /* USER CODE END CAN3_RX0_IRQn 1 */
}
 80019ba:	bf00      	nop
 80019bc:	bd80      	pop	{r7, pc}
 80019be:	bf00      	nop
 80019c0:	200000e0 	.word	0x200000e0

080019c4 <CAN3_RX1_IRQHandler>:

/**
  * @brief This function handles CAN3 RX1 interrupt.
  */
void CAN3_RX1_IRQHandler(void)
{
 80019c4:	b580      	push	{r7, lr}
 80019c6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN CAN3_RX1_IRQn 0 */

  /* USER CODE END CAN3_RX1_IRQn 0 */
  HAL_CAN_IRQHandler(&hcan3);
 80019c8:	4802      	ldr	r0, [pc, #8]	; (80019d4 <CAN3_RX1_IRQHandler+0x10>)
 80019ca:	f000 fd31 	bl	8002430 <HAL_CAN_IRQHandler>
  /* USER CODE BEGIN CAN3_RX1_IRQn 1 */

  /* USER CODE END CAN3_RX1_IRQn 1 */
}
 80019ce:	bf00      	nop
 80019d0:	bd80      	pop	{r7, pc}
 80019d2:	bf00      	nop
 80019d4:	200000e0 	.word	0x200000e0

080019d8 <SystemInit>:
  *         SystemFrequency variable.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 80019d8:	b480      	push	{r7}
 80019da:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
#if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
  SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 80019dc:	4b06      	ldr	r3, [pc, #24]	; (80019f8 <SystemInit+0x20>)
 80019de:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80019e2:	4a05      	ldr	r2, [pc, #20]	; (80019f8 <SystemInit+0x20>)
 80019e4:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 80019e8:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 80019ec:	bf00      	nop
 80019ee:	46bd      	mov	sp, r7
 80019f0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80019f4:	4770      	bx	lr
 80019f6:	bf00      	nop
 80019f8:	e000ed00 	.word	0xe000ed00

080019fc <MX_USART3_UART_Init>:
UART_HandleTypeDef huart3;

/* USART3 init function */

void MX_USART3_UART_Init(void)
{
 80019fc:	b580      	push	{r7, lr}
 80019fe:	af00      	add	r7, sp, #0
  /* USER CODE END USART3_Init 0 */

  /* USER CODE BEGIN USART3_Init 1 */

  /* USER CODE END USART3_Init 1 */
  huart3.Instance = USART3;
 8001a00:	4b14      	ldr	r3, [pc, #80]	; (8001a54 <MX_USART3_UART_Init+0x58>)
 8001a02:	4a15      	ldr	r2, [pc, #84]	; (8001a58 <MX_USART3_UART_Init+0x5c>)
 8001a04:	601a      	str	r2, [r3, #0]
  huart3.Init.BaudRate = 115200;
 8001a06:	4b13      	ldr	r3, [pc, #76]	; (8001a54 <MX_USART3_UART_Init+0x58>)
 8001a08:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 8001a0c:	605a      	str	r2, [r3, #4]
  huart3.Init.WordLength = UART_WORDLENGTH_8B;
 8001a0e:	4b11      	ldr	r3, [pc, #68]	; (8001a54 <MX_USART3_UART_Init+0x58>)
 8001a10:	2200      	movs	r2, #0
 8001a12:	609a      	str	r2, [r3, #8]
  huart3.Init.StopBits = UART_STOPBITS_1;
 8001a14:	4b0f      	ldr	r3, [pc, #60]	; (8001a54 <MX_USART3_UART_Init+0x58>)
 8001a16:	2200      	movs	r2, #0
 8001a18:	60da      	str	r2, [r3, #12]
  huart3.Init.Parity = UART_PARITY_NONE;
 8001a1a:	4b0e      	ldr	r3, [pc, #56]	; (8001a54 <MX_USART3_UART_Init+0x58>)
 8001a1c:	2200      	movs	r2, #0
 8001a1e:	611a      	str	r2, [r3, #16]
  huart3.Init.Mode = UART_MODE_TX_RX;
 8001a20:	4b0c      	ldr	r3, [pc, #48]	; (8001a54 <MX_USART3_UART_Init+0x58>)
 8001a22:	220c      	movs	r2, #12
 8001a24:	615a      	str	r2, [r3, #20]
  huart3.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8001a26:	4b0b      	ldr	r3, [pc, #44]	; (8001a54 <MX_USART3_UART_Init+0x58>)
 8001a28:	2200      	movs	r2, #0
 8001a2a:	619a      	str	r2, [r3, #24]
  huart3.Init.OverSampling = UART_OVERSAMPLING_16;
 8001a2c:	4b09      	ldr	r3, [pc, #36]	; (8001a54 <MX_USART3_UART_Init+0x58>)
 8001a2e:	2200      	movs	r2, #0
 8001a30:	61da      	str	r2, [r3, #28]
  huart3.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 8001a32:	4b08      	ldr	r3, [pc, #32]	; (8001a54 <MX_USART3_UART_Init+0x58>)
 8001a34:	2200      	movs	r2, #0
 8001a36:	621a      	str	r2, [r3, #32]
  huart3.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 8001a38:	4b06      	ldr	r3, [pc, #24]	; (8001a54 <MX_USART3_UART_Init+0x58>)
 8001a3a:	2200      	movs	r2, #0
 8001a3c:	625a      	str	r2, [r3, #36]	; 0x24
  if (HAL_UART_Init(&huart3) != HAL_OK)
 8001a3e:	4805      	ldr	r0, [pc, #20]	; (8001a54 <MX_USART3_UART_Init+0x58>)
 8001a40:	f003 f84a 	bl	8004ad8 <HAL_UART_Init>
 8001a44:	4603      	mov	r3, r0
 8001a46:	2b00      	cmp	r3, #0
 8001a48:	d001      	beq.n	8001a4e <MX_USART3_UART_Init+0x52>
  {
    Error_Handler();
 8001a4a:	f7ff fe93 	bl	8001774 <Error_Handler>
  }
  /* USER CODE BEGIN USART3_Init 2 */

  /* USER CODE END USART3_Init 2 */

}
 8001a4e:	bf00      	nop
 8001a50:	bd80      	pop	{r7, pc}
 8001a52:	bf00      	nop
 8001a54:	20001468 	.word	0x20001468
 8001a58:	40004800 	.word	0x40004800

08001a5c <HAL_UART_MspInit>:

void HAL_UART_MspInit(UART_HandleTypeDef* uartHandle)
{
 8001a5c:	b580      	push	{r7, lr}
 8001a5e:	b0ae      	sub	sp, #184	; 0xb8
 8001a60:	af00      	add	r7, sp, #0
 8001a62:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001a64:	f107 03a4 	add.w	r3, r7, #164	; 0xa4
 8001a68:	2200      	movs	r2, #0
 8001a6a:	601a      	str	r2, [r3, #0]
 8001a6c:	605a      	str	r2, [r3, #4]
 8001a6e:	609a      	str	r2, [r3, #8]
 8001a70:	60da      	str	r2, [r3, #12]
 8001a72:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 8001a74:	f107 0314 	add.w	r3, r7, #20
 8001a78:	2290      	movs	r2, #144	; 0x90
 8001a7a:	2100      	movs	r1, #0
 8001a7c:	4618      	mov	r0, r3
 8001a7e:	f006 fe85 	bl	800878c <memset>
  if(uartHandle->Instance==USART3)
 8001a82:	687b      	ldr	r3, [r7, #4]
 8001a84:	681b      	ldr	r3, [r3, #0]
 8001a86:	4a22      	ldr	r2, [pc, #136]	; (8001b10 <HAL_UART_MspInit+0xb4>)
 8001a88:	4293      	cmp	r3, r2
 8001a8a:	d13c      	bne.n	8001b06 <HAL_UART_MspInit+0xaa>

  /* USER CODE END USART3_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_USART3;
 8001a8c:	f44f 7380 	mov.w	r3, #256	; 0x100
 8001a90:	617b      	str	r3, [r7, #20]
    PeriphClkInitStruct.Usart3ClockSelection = RCC_USART3CLKSOURCE_PCLK1;
 8001a92:	2300      	movs	r3, #0
 8001a94:	663b      	str	r3, [r7, #96]	; 0x60
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 8001a96:	f107 0314 	add.w	r3, r7, #20
 8001a9a:	4618      	mov	r0, r3
 8001a9c:	f002 f914 	bl	8003cc8 <HAL_RCCEx_PeriphCLKConfig>
 8001aa0:	4603      	mov	r3, r0
 8001aa2:	2b00      	cmp	r3, #0
 8001aa4:	d001      	beq.n	8001aaa <HAL_UART_MspInit+0x4e>
    {
      Error_Handler();
 8001aa6:	f7ff fe65 	bl	8001774 <Error_Handler>
    }

    /* USART3 clock enable */
    __HAL_RCC_USART3_CLK_ENABLE();
 8001aaa:	4b1a      	ldr	r3, [pc, #104]	; (8001b14 <HAL_UART_MspInit+0xb8>)
 8001aac:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001aae:	4a19      	ldr	r2, [pc, #100]	; (8001b14 <HAL_UART_MspInit+0xb8>)
 8001ab0:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8001ab4:	6413      	str	r3, [r2, #64]	; 0x40
 8001ab6:	4b17      	ldr	r3, [pc, #92]	; (8001b14 <HAL_UART_MspInit+0xb8>)
 8001ab8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001aba:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8001abe:	613b      	str	r3, [r7, #16]
 8001ac0:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOD_CLK_ENABLE();
 8001ac2:	4b14      	ldr	r3, [pc, #80]	; (8001b14 <HAL_UART_MspInit+0xb8>)
 8001ac4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001ac6:	4a13      	ldr	r2, [pc, #76]	; (8001b14 <HAL_UART_MspInit+0xb8>)
 8001ac8:	f043 0308 	orr.w	r3, r3, #8
 8001acc:	6313      	str	r3, [r2, #48]	; 0x30
 8001ace:	4b11      	ldr	r3, [pc, #68]	; (8001b14 <HAL_UART_MspInit+0xb8>)
 8001ad0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001ad2:	f003 0308 	and.w	r3, r3, #8
 8001ad6:	60fb      	str	r3, [r7, #12]
 8001ad8:	68fb      	ldr	r3, [r7, #12]
    /**USART3 GPIO Configuration
    PD8     ------> USART3_TX
    PD9     ------> USART3_RX
    */
    GPIO_InitStruct.Pin = STLK_RX_Pin|STLK_TX_Pin;
 8001ada:	f44f 7340 	mov.w	r3, #768	; 0x300
 8001ade:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001ae2:	2302      	movs	r3, #2
 8001ae4:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001ae8:	2300      	movs	r3, #0
 8001aea:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001aee:	2303      	movs	r3, #3
 8001af0:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
    GPIO_InitStruct.Alternate = GPIO_AF7_USART3;
 8001af4:	2307      	movs	r3, #7
 8001af6:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
    HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 8001afa:	f107 03a4 	add.w	r3, r7, #164	; 0xa4
 8001afe:	4619      	mov	r1, r3
 8001b00:	4805      	ldr	r0, [pc, #20]	; (8001b18 <HAL_UART_MspInit+0xbc>)
 8001b02:	f001 f99b 	bl	8002e3c <HAL_GPIO_Init>

  /* USER CODE BEGIN USART3_MspInit 1 */

  /* USER CODE END USART3_MspInit 1 */
  }
}
 8001b06:	bf00      	nop
 8001b08:	37b8      	adds	r7, #184	; 0xb8
 8001b0a:	46bd      	mov	sp, r7
 8001b0c:	bd80      	pop	{r7, pc}
 8001b0e:	bf00      	nop
 8001b10:	40004800 	.word	0x40004800
 8001b14:	40023800 	.word	0x40023800
 8001b18:	40020c00 	.word	0x40020c00

08001b1c <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack      /* set stack pointer */
 8001b1c:	f8df d034 	ldr.w	sp, [pc, #52]	; 8001b54 <LoopFillZerobss+0x12>

/* Copy the data segment initializers from flash to SRAM */  
  ldr r0, =_sdata
 8001b20:	480d      	ldr	r0, [pc, #52]	; (8001b58 <LoopFillZerobss+0x16>)
  ldr r1, =_edata
 8001b22:	490e      	ldr	r1, [pc, #56]	; (8001b5c <LoopFillZerobss+0x1a>)
  ldr r2, =_sidata
 8001b24:	4a0e      	ldr	r2, [pc, #56]	; (8001b60 <LoopFillZerobss+0x1e>)
  movs r3, #0
 8001b26:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8001b28:	e002      	b.n	8001b30 <LoopCopyDataInit>

08001b2a <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8001b2a:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8001b2c:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8001b2e:	3304      	adds	r3, #4

08001b30 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8001b30:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8001b32:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8001b34:	d3f9      	bcc.n	8001b2a <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8001b36:	4a0b      	ldr	r2, [pc, #44]	; (8001b64 <LoopFillZerobss+0x22>)
  ldr r4, =_ebss
 8001b38:	4c0b      	ldr	r4, [pc, #44]	; (8001b68 <LoopFillZerobss+0x26>)
  movs r3, #0
 8001b3a:	2300      	movs	r3, #0
  b LoopFillZerobss
 8001b3c:	e001      	b.n	8001b42 <LoopFillZerobss>

08001b3e <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8001b3e:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8001b40:	3204      	adds	r2, #4

08001b42 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8001b42:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8001b44:	d3fb      	bcc.n	8001b3e <FillZerobss>

/* Call the clock system initialization function.*/
  bl  SystemInit   
 8001b46:	f7ff ff47 	bl	80019d8 <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 8001b4a:	f006 fe7d 	bl	8008848 <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 8001b4e:	f7ff fcc1 	bl	80014d4 <main>
  bx  lr    
 8001b52:	4770      	bx	lr
  ldr   sp, =_estack      /* set stack pointer */
 8001b54:	20080000 	.word	0x20080000
  ldr r0, =_sdata
 8001b58:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8001b5c:	20000074 	.word	0x20000074
  ldr r2, =_sidata
 8001b60:	08008aa8 	.word	0x08008aa8
  ldr r2, =_sbss
 8001b64:	20000074 	.word	0x20000074
  ldr r4, =_ebss
 8001b68:	2000b614 	.word	0x2000b614

08001b6c <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 8001b6c:	e7fe      	b.n	8001b6c <ADC_IRQHandler>

08001b6e <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8001b6e:	b580      	push	{r7, lr}
 8001b70:	af00      	add	r7, sp, #0
#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8001b72:	2003      	movs	r0, #3
 8001b74:	f000 ff2f 	bl	80029d6 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 8001b78:	200f      	movs	r0, #15
 8001b7a:	f7ff fe31 	bl	80017e0 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8001b7e:	f7ff fdff 	bl	8001780 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8001b82:	2300      	movs	r3, #0
}
 8001b84:	4618      	mov	r0, r3
 8001b86:	bd80      	pop	{r7, pc}

08001b88 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8001b88:	b480      	push	{r7}
 8001b8a:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8001b8c:	4b06      	ldr	r3, [pc, #24]	; (8001ba8 <HAL_IncTick+0x20>)
 8001b8e:	781b      	ldrb	r3, [r3, #0]
 8001b90:	461a      	mov	r2, r3
 8001b92:	4b06      	ldr	r3, [pc, #24]	; (8001bac <HAL_IncTick+0x24>)
 8001b94:	681b      	ldr	r3, [r3, #0]
 8001b96:	4413      	add	r3, r2
 8001b98:	4a04      	ldr	r2, [pc, #16]	; (8001bac <HAL_IncTick+0x24>)
 8001b9a:	6013      	str	r3, [r2, #0]
}
 8001b9c:	bf00      	nop
 8001b9e:	46bd      	mov	sp, r7
 8001ba0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001ba4:	4770      	bx	lr
 8001ba6:	bf00      	nop
 8001ba8:	2000001c 	.word	0x2000001c
 8001bac:	200014f0 	.word	0x200014f0

08001bb0 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8001bb0:	b480      	push	{r7}
 8001bb2:	af00      	add	r7, sp, #0
  return uwTick;
 8001bb4:	4b03      	ldr	r3, [pc, #12]	; (8001bc4 <HAL_GetTick+0x14>)
 8001bb6:	681b      	ldr	r3, [r3, #0]
}
 8001bb8:	4618      	mov	r0, r3
 8001bba:	46bd      	mov	sp, r7
 8001bbc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001bc0:	4770      	bx	lr
 8001bc2:	bf00      	nop
 8001bc4:	200014f0 	.word	0x200014f0

08001bc8 <HAL_CAN_Init>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_CAN_Init(CAN_HandleTypeDef *hcan)
{
 8001bc8:	b580      	push	{r7, lr}
 8001bca:	b084      	sub	sp, #16
 8001bcc:	af00      	add	r7, sp, #0
 8001bce:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Check CAN handle */
  if (hcan == NULL)
 8001bd0:	687b      	ldr	r3, [r7, #4]
 8001bd2:	2b00      	cmp	r3, #0
 8001bd4:	d101      	bne.n	8001bda <HAL_CAN_Init+0x12>
  {
    return HAL_ERROR;
 8001bd6:	2301      	movs	r3, #1
 8001bd8:	e0ed      	b.n	8001db6 <HAL_CAN_Init+0x1ee>
    /* Init the low level hardware: CLOCK, NVIC */
    hcan->MspInitCallback(hcan);
  }

#else
  if (hcan->State == HAL_CAN_STATE_RESET)
 8001bda:	687b      	ldr	r3, [r7, #4]
 8001bdc:	f893 3020 	ldrb.w	r3, [r3, #32]
 8001be0:	b2db      	uxtb	r3, r3
 8001be2:	2b00      	cmp	r3, #0
 8001be4:	d102      	bne.n	8001bec <HAL_CAN_Init+0x24>
  {
    /* Init the low level hardware: CLOCK, NVIC */
    HAL_CAN_MspInit(hcan);
 8001be6:	6878      	ldr	r0, [r7, #4]
 8001be8:	f7fe fd50 	bl	800068c <HAL_CAN_MspInit>
  }
#endif /* (USE_HAL_CAN_REGISTER_CALLBACKS) */

  /* Request initialisation */
  SET_BIT(hcan->Instance->MCR, CAN_MCR_INRQ);
 8001bec:	687b      	ldr	r3, [r7, #4]
 8001bee:	681b      	ldr	r3, [r3, #0]
 8001bf0:	681a      	ldr	r2, [r3, #0]
 8001bf2:	687b      	ldr	r3, [r7, #4]
 8001bf4:	681b      	ldr	r3, [r3, #0]
 8001bf6:	f042 0201 	orr.w	r2, r2, #1
 8001bfa:	601a      	str	r2, [r3, #0]

  /* Get tick */
  tickstart = HAL_GetTick();
 8001bfc:	f7ff ffd8 	bl	8001bb0 <HAL_GetTick>
 8001c00:	60f8      	str	r0, [r7, #12]

  /* Wait initialisation acknowledge */
  while ((hcan->Instance->MSR & CAN_MSR_INAK) == 0U)
 8001c02:	e012      	b.n	8001c2a <HAL_CAN_Init+0x62>
  {
    if ((HAL_GetTick() - tickstart) > CAN_TIMEOUT_VALUE)
 8001c04:	f7ff ffd4 	bl	8001bb0 <HAL_GetTick>
 8001c08:	4602      	mov	r2, r0
 8001c0a:	68fb      	ldr	r3, [r7, #12]
 8001c0c:	1ad3      	subs	r3, r2, r3
 8001c0e:	2b0a      	cmp	r3, #10
 8001c10:	d90b      	bls.n	8001c2a <HAL_CAN_Init+0x62>
    {
      /* Update error code */
      hcan->ErrorCode |= HAL_CAN_ERROR_TIMEOUT;
 8001c12:	687b      	ldr	r3, [r7, #4]
 8001c14:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001c16:	f443 3200 	orr.w	r2, r3, #131072	; 0x20000
 8001c1a:	687b      	ldr	r3, [r7, #4]
 8001c1c:	625a      	str	r2, [r3, #36]	; 0x24

      /* Change CAN state */
      hcan->State = HAL_CAN_STATE_ERROR;
 8001c1e:	687b      	ldr	r3, [r7, #4]
 8001c20:	2205      	movs	r2, #5
 8001c22:	f883 2020 	strb.w	r2, [r3, #32]

      return HAL_ERROR;
 8001c26:	2301      	movs	r3, #1
 8001c28:	e0c5      	b.n	8001db6 <HAL_CAN_Init+0x1ee>
  while ((hcan->Instance->MSR & CAN_MSR_INAK) == 0U)
 8001c2a:	687b      	ldr	r3, [r7, #4]
 8001c2c:	681b      	ldr	r3, [r3, #0]
 8001c2e:	685b      	ldr	r3, [r3, #4]
 8001c30:	f003 0301 	and.w	r3, r3, #1
 8001c34:	2b00      	cmp	r3, #0
 8001c36:	d0e5      	beq.n	8001c04 <HAL_CAN_Init+0x3c>
    }
  }

  /* Exit from sleep mode */
  CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_SLEEP);
 8001c38:	687b      	ldr	r3, [r7, #4]
 8001c3a:	681b      	ldr	r3, [r3, #0]
 8001c3c:	681a      	ldr	r2, [r3, #0]
 8001c3e:	687b      	ldr	r3, [r7, #4]
 8001c40:	681b      	ldr	r3, [r3, #0]
 8001c42:	f022 0202 	bic.w	r2, r2, #2
 8001c46:	601a      	str	r2, [r3, #0]

  /* Get tick */
  tickstart = HAL_GetTick();
 8001c48:	f7ff ffb2 	bl	8001bb0 <HAL_GetTick>
 8001c4c:	60f8      	str	r0, [r7, #12]

  /* Check Sleep mode leave acknowledge */
  while ((hcan->Instance->MSR & CAN_MSR_SLAK) != 0U)
 8001c4e:	e012      	b.n	8001c76 <HAL_CAN_Init+0xae>
  {
    if ((HAL_GetTick() - tickstart) > CAN_TIMEOUT_VALUE)
 8001c50:	f7ff ffae 	bl	8001bb0 <HAL_GetTick>
 8001c54:	4602      	mov	r2, r0
 8001c56:	68fb      	ldr	r3, [r7, #12]
 8001c58:	1ad3      	subs	r3, r2, r3
 8001c5a:	2b0a      	cmp	r3, #10
 8001c5c:	d90b      	bls.n	8001c76 <HAL_CAN_Init+0xae>
    {
      /* Update error code */
      hcan->ErrorCode |= HAL_CAN_ERROR_TIMEOUT;
 8001c5e:	687b      	ldr	r3, [r7, #4]
 8001c60:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001c62:	f443 3200 	orr.w	r2, r3, #131072	; 0x20000
 8001c66:	687b      	ldr	r3, [r7, #4]
 8001c68:	625a      	str	r2, [r3, #36]	; 0x24

      /* Change CAN state */
      hcan->State = HAL_CAN_STATE_ERROR;
 8001c6a:	687b      	ldr	r3, [r7, #4]
 8001c6c:	2205      	movs	r2, #5
 8001c6e:	f883 2020 	strb.w	r2, [r3, #32]

      return HAL_ERROR;
 8001c72:	2301      	movs	r3, #1
 8001c74:	e09f      	b.n	8001db6 <HAL_CAN_Init+0x1ee>
  while ((hcan->Instance->MSR & CAN_MSR_SLAK) != 0U)
 8001c76:	687b      	ldr	r3, [r7, #4]
 8001c78:	681b      	ldr	r3, [r3, #0]
 8001c7a:	685b      	ldr	r3, [r3, #4]
 8001c7c:	f003 0302 	and.w	r3, r3, #2
 8001c80:	2b00      	cmp	r3, #0
 8001c82:	d1e5      	bne.n	8001c50 <HAL_CAN_Init+0x88>
    }
  }

  /* Set the time triggered communication mode */
  if (hcan->Init.TimeTriggeredMode == ENABLE)
 8001c84:	687b      	ldr	r3, [r7, #4]
 8001c86:	7e1b      	ldrb	r3, [r3, #24]
 8001c88:	2b01      	cmp	r3, #1
 8001c8a:	d108      	bne.n	8001c9e <HAL_CAN_Init+0xd6>
  {
    SET_BIT(hcan->Instance->MCR, CAN_MCR_TTCM);
 8001c8c:	687b      	ldr	r3, [r7, #4]
 8001c8e:	681b      	ldr	r3, [r3, #0]
 8001c90:	681a      	ldr	r2, [r3, #0]
 8001c92:	687b      	ldr	r3, [r7, #4]
 8001c94:	681b      	ldr	r3, [r3, #0]
 8001c96:	f042 0280 	orr.w	r2, r2, #128	; 0x80
 8001c9a:	601a      	str	r2, [r3, #0]
 8001c9c:	e007      	b.n	8001cae <HAL_CAN_Init+0xe6>
  }
  else
  {
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_TTCM);
 8001c9e:	687b      	ldr	r3, [r7, #4]
 8001ca0:	681b      	ldr	r3, [r3, #0]
 8001ca2:	681a      	ldr	r2, [r3, #0]
 8001ca4:	687b      	ldr	r3, [r7, #4]
 8001ca6:	681b      	ldr	r3, [r3, #0]
 8001ca8:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 8001cac:	601a      	str	r2, [r3, #0]
  }

  /* Set the automatic bus-off management */
  if (hcan->Init.AutoBusOff == ENABLE)
 8001cae:	687b      	ldr	r3, [r7, #4]
 8001cb0:	7e5b      	ldrb	r3, [r3, #25]
 8001cb2:	2b01      	cmp	r3, #1
 8001cb4:	d108      	bne.n	8001cc8 <HAL_CAN_Init+0x100>
  {
    SET_BIT(hcan->Instance->MCR, CAN_MCR_ABOM);
 8001cb6:	687b      	ldr	r3, [r7, #4]
 8001cb8:	681b      	ldr	r3, [r3, #0]
 8001cba:	681a      	ldr	r2, [r3, #0]
 8001cbc:	687b      	ldr	r3, [r7, #4]
 8001cbe:	681b      	ldr	r3, [r3, #0]
 8001cc0:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8001cc4:	601a      	str	r2, [r3, #0]
 8001cc6:	e007      	b.n	8001cd8 <HAL_CAN_Init+0x110>
  }
  else
  {
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_ABOM);
 8001cc8:	687b      	ldr	r3, [r7, #4]
 8001cca:	681b      	ldr	r3, [r3, #0]
 8001ccc:	681a      	ldr	r2, [r3, #0]
 8001cce:	687b      	ldr	r3, [r7, #4]
 8001cd0:	681b      	ldr	r3, [r3, #0]
 8001cd2:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8001cd6:	601a      	str	r2, [r3, #0]
  }

  /* Set the automatic wake-up mode */
  if (hcan->Init.AutoWakeUp == ENABLE)
 8001cd8:	687b      	ldr	r3, [r7, #4]
 8001cda:	7e9b      	ldrb	r3, [r3, #26]
 8001cdc:	2b01      	cmp	r3, #1
 8001cde:	d108      	bne.n	8001cf2 <HAL_CAN_Init+0x12a>
  {
    SET_BIT(hcan->Instance->MCR, CAN_MCR_AWUM);
 8001ce0:	687b      	ldr	r3, [r7, #4]
 8001ce2:	681b      	ldr	r3, [r3, #0]
 8001ce4:	681a      	ldr	r2, [r3, #0]
 8001ce6:	687b      	ldr	r3, [r7, #4]
 8001ce8:	681b      	ldr	r3, [r3, #0]
 8001cea:	f042 0220 	orr.w	r2, r2, #32
 8001cee:	601a      	str	r2, [r3, #0]
 8001cf0:	e007      	b.n	8001d02 <HAL_CAN_Init+0x13a>
  }
  else
  {
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_AWUM);
 8001cf2:	687b      	ldr	r3, [r7, #4]
 8001cf4:	681b      	ldr	r3, [r3, #0]
 8001cf6:	681a      	ldr	r2, [r3, #0]
 8001cf8:	687b      	ldr	r3, [r7, #4]
 8001cfa:	681b      	ldr	r3, [r3, #0]
 8001cfc:	f022 0220 	bic.w	r2, r2, #32
 8001d00:	601a      	str	r2, [r3, #0]
  }

  /* Set the automatic retransmission */
  if (hcan->Init.AutoRetransmission == ENABLE)
 8001d02:	687b      	ldr	r3, [r7, #4]
 8001d04:	7edb      	ldrb	r3, [r3, #27]
 8001d06:	2b01      	cmp	r3, #1
 8001d08:	d108      	bne.n	8001d1c <HAL_CAN_Init+0x154>
  {
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_NART);
 8001d0a:	687b      	ldr	r3, [r7, #4]
 8001d0c:	681b      	ldr	r3, [r3, #0]
 8001d0e:	681a      	ldr	r2, [r3, #0]
 8001d10:	687b      	ldr	r3, [r7, #4]
 8001d12:	681b      	ldr	r3, [r3, #0]
 8001d14:	f022 0210 	bic.w	r2, r2, #16
 8001d18:	601a      	str	r2, [r3, #0]
 8001d1a:	e007      	b.n	8001d2c <HAL_CAN_Init+0x164>
  }
  else
  {
    SET_BIT(hcan->Instance->MCR, CAN_MCR_NART);
 8001d1c:	687b      	ldr	r3, [r7, #4]
 8001d1e:	681b      	ldr	r3, [r3, #0]
 8001d20:	681a      	ldr	r2, [r3, #0]
 8001d22:	687b      	ldr	r3, [r7, #4]
 8001d24:	681b      	ldr	r3, [r3, #0]
 8001d26:	f042 0210 	orr.w	r2, r2, #16
 8001d2a:	601a      	str	r2, [r3, #0]
  }

  /* Set the receive FIFO locked mode */
  if (hcan->Init.ReceiveFifoLocked == ENABLE)
 8001d2c:	687b      	ldr	r3, [r7, #4]
 8001d2e:	7f1b      	ldrb	r3, [r3, #28]
 8001d30:	2b01      	cmp	r3, #1
 8001d32:	d108      	bne.n	8001d46 <HAL_CAN_Init+0x17e>
  {
    SET_BIT(hcan->Instance->MCR, CAN_MCR_RFLM);
 8001d34:	687b      	ldr	r3, [r7, #4]
 8001d36:	681b      	ldr	r3, [r3, #0]
 8001d38:	681a      	ldr	r2, [r3, #0]
 8001d3a:	687b      	ldr	r3, [r7, #4]
 8001d3c:	681b      	ldr	r3, [r3, #0]
 8001d3e:	f042 0208 	orr.w	r2, r2, #8
 8001d42:	601a      	str	r2, [r3, #0]
 8001d44:	e007      	b.n	8001d56 <HAL_CAN_Init+0x18e>
  }
  else
  {
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_RFLM);
 8001d46:	687b      	ldr	r3, [r7, #4]
 8001d48:	681b      	ldr	r3, [r3, #0]
 8001d4a:	681a      	ldr	r2, [r3, #0]
 8001d4c:	687b      	ldr	r3, [r7, #4]
 8001d4e:	681b      	ldr	r3, [r3, #0]
 8001d50:	f022 0208 	bic.w	r2, r2, #8
 8001d54:	601a      	str	r2, [r3, #0]
  }

  /* Set the transmit FIFO priority */
  if (hcan->Init.TransmitFifoPriority == ENABLE)
 8001d56:	687b      	ldr	r3, [r7, #4]
 8001d58:	7f5b      	ldrb	r3, [r3, #29]
 8001d5a:	2b01      	cmp	r3, #1
 8001d5c:	d108      	bne.n	8001d70 <HAL_CAN_Init+0x1a8>
  {
    SET_BIT(hcan->Instance->MCR, CAN_MCR_TXFP);
 8001d5e:	687b      	ldr	r3, [r7, #4]
 8001d60:	681b      	ldr	r3, [r3, #0]
 8001d62:	681a      	ldr	r2, [r3, #0]
 8001d64:	687b      	ldr	r3, [r7, #4]
 8001d66:	681b      	ldr	r3, [r3, #0]
 8001d68:	f042 0204 	orr.w	r2, r2, #4
 8001d6c:	601a      	str	r2, [r3, #0]
 8001d6e:	e007      	b.n	8001d80 <HAL_CAN_Init+0x1b8>
  }
  else
  {
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_TXFP);
 8001d70:	687b      	ldr	r3, [r7, #4]
 8001d72:	681b      	ldr	r3, [r3, #0]
 8001d74:	681a      	ldr	r2, [r3, #0]
 8001d76:	687b      	ldr	r3, [r7, #4]
 8001d78:	681b      	ldr	r3, [r3, #0]
 8001d7a:	f022 0204 	bic.w	r2, r2, #4
 8001d7e:	601a      	str	r2, [r3, #0]
  }

  /* Set the bit timing register */
  WRITE_REG(hcan->Instance->BTR, (uint32_t)(hcan->Init.Mode           |
 8001d80:	687b      	ldr	r3, [r7, #4]
 8001d82:	689a      	ldr	r2, [r3, #8]
 8001d84:	687b      	ldr	r3, [r7, #4]
 8001d86:	68db      	ldr	r3, [r3, #12]
 8001d88:	431a      	orrs	r2, r3
 8001d8a:	687b      	ldr	r3, [r7, #4]
 8001d8c:	691b      	ldr	r3, [r3, #16]
 8001d8e:	431a      	orrs	r2, r3
 8001d90:	687b      	ldr	r3, [r7, #4]
 8001d92:	695b      	ldr	r3, [r3, #20]
 8001d94:	ea42 0103 	orr.w	r1, r2, r3
 8001d98:	687b      	ldr	r3, [r7, #4]
 8001d9a:	685b      	ldr	r3, [r3, #4]
 8001d9c:	1e5a      	subs	r2, r3, #1
 8001d9e:	687b      	ldr	r3, [r7, #4]
 8001da0:	681b      	ldr	r3, [r3, #0]
 8001da2:	430a      	orrs	r2, r1
 8001da4:	61da      	str	r2, [r3, #28]
                                            hcan->Init.TimeSeg1       |
                                            hcan->Init.TimeSeg2       |
                                            (hcan->Init.Prescaler - 1U)));

  /* Initialize the error code */
  hcan->ErrorCode = HAL_CAN_ERROR_NONE;
 8001da6:	687b      	ldr	r3, [r7, #4]
 8001da8:	2200      	movs	r2, #0
 8001daa:	625a      	str	r2, [r3, #36]	; 0x24

  /* Initialize the CAN state */
  hcan->State = HAL_CAN_STATE_READY;
 8001dac:	687b      	ldr	r3, [r7, #4]
 8001dae:	2201      	movs	r2, #1
 8001db0:	f883 2020 	strb.w	r2, [r3, #32]

  /* Return function status */
  return HAL_OK;
 8001db4:	2300      	movs	r3, #0
}
 8001db6:	4618      	mov	r0, r3
 8001db8:	3710      	adds	r7, #16
 8001dba:	46bd      	mov	sp, r7
 8001dbc:	bd80      	pop	{r7, pc}
	...

08001dc0 <HAL_CAN_ConfigFilter>:
  * @param  sFilterConfig pointer to a CAN_FilterTypeDef structure that
  *         contains the filter configuration information.
  * @retval None
  */
HAL_StatusTypeDef HAL_CAN_ConfigFilter(CAN_HandleTypeDef *hcan, const CAN_FilterTypeDef *sFilterConfig)
{
 8001dc0:	b480      	push	{r7}
 8001dc2:	b087      	sub	sp, #28
 8001dc4:	af00      	add	r7, sp, #0
 8001dc6:	6078      	str	r0, [r7, #4]
 8001dc8:	6039      	str	r1, [r7, #0]
  uint32_t filternbrbitpos;
  CAN_TypeDef *can_ip = hcan->Instance;
 8001dca:	687b      	ldr	r3, [r7, #4]
 8001dcc:	681b      	ldr	r3, [r3, #0]
 8001dce:	617b      	str	r3, [r7, #20]
  HAL_CAN_StateTypeDef state = hcan->State;
 8001dd0:	687b      	ldr	r3, [r7, #4]
 8001dd2:	f893 3020 	ldrb.w	r3, [r3, #32]
 8001dd6:	74fb      	strb	r3, [r7, #19]

  if ((state == HAL_CAN_STATE_READY) ||
 8001dd8:	7cfb      	ldrb	r3, [r7, #19]
 8001dda:	2b01      	cmp	r3, #1
 8001ddc:	d003      	beq.n	8001de6 <HAL_CAN_ConfigFilter+0x26>
 8001dde:	7cfb      	ldrb	r3, [r7, #19]
 8001de0:	2b02      	cmp	r3, #2
 8001de2:	f040 80c7 	bne.w	8001f74 <HAL_CAN_ConfigFilter+0x1b4>
    assert_param(IS_CAN_FILTER_FIFO(sFilterConfig->FilterFIFOAssignment));
    assert_param(IS_CAN_FILTER_ACTIVATION(sFilterConfig->FilterActivation));

#if defined(CAN3)
    /* Check the CAN instance */
    if (hcan->Instance == CAN3)
 8001de6:	687b      	ldr	r3, [r7, #4]
 8001de8:	681b      	ldr	r3, [r3, #0]
 8001dea:	4a69      	ldr	r2, [pc, #420]	; (8001f90 <HAL_CAN_ConfigFilter+0x1d0>)
 8001dec:	4293      	cmp	r3, r2
 8001dee:	d001      	beq.n	8001df4 <HAL_CAN_ConfigFilter+0x34>
    }
    else
    {
      /* CAN1 and CAN2 are dual instances with 28 common filters banks */
      /* Select master instance to access the filter banks */
      can_ip = CAN1;
 8001df0:	4b68      	ldr	r3, [pc, #416]	; (8001f94 <HAL_CAN_ConfigFilter+0x1d4>)
 8001df2:	617b      	str	r3, [r7, #20]
    /* Check the parameters */
    assert_param(IS_CAN_FILTER_BANK_SINGLE(sFilterConfig->FilterBank));
#endif

    /* Initialisation mode for the filter */
    SET_BIT(can_ip->FMR, CAN_FMR_FINIT);
 8001df4:	697b      	ldr	r3, [r7, #20]
 8001df6:	f8d3 3200 	ldr.w	r3, [r3, #512]	; 0x200
 8001dfa:	f043 0201 	orr.w	r2, r3, #1
 8001dfe:	697b      	ldr	r3, [r7, #20]
 8001e00:	f8c3 2200 	str.w	r2, [r3, #512]	; 0x200

#if defined(CAN3)
    /* Check the CAN instance */
    if (can_ip == CAN1)
 8001e04:	697b      	ldr	r3, [r7, #20]
 8001e06:	4a63      	ldr	r2, [pc, #396]	; (8001f94 <HAL_CAN_ConfigFilter+0x1d4>)
 8001e08:	4293      	cmp	r3, r2
 8001e0a:	d111      	bne.n	8001e30 <HAL_CAN_ConfigFilter+0x70>
    {
      /* Select the start filter number of CAN2 slave instance */
      CLEAR_BIT(can_ip->FMR, CAN_FMR_CAN2SB);
 8001e0c:	697b      	ldr	r3, [r7, #20]
 8001e0e:	f8d3 3200 	ldr.w	r3, [r3, #512]	; 0x200
 8001e12:	f423 527c 	bic.w	r2, r3, #16128	; 0x3f00
 8001e16:	697b      	ldr	r3, [r7, #20]
 8001e18:	f8c3 2200 	str.w	r2, [r3, #512]	; 0x200
      SET_BIT(can_ip->FMR, sFilterConfig->SlaveStartFilterBank << CAN_FMR_CAN2SB_Pos);
 8001e1c:	697b      	ldr	r3, [r7, #20]
 8001e1e:	f8d3 2200 	ldr.w	r2, [r3, #512]	; 0x200
 8001e22:	683b      	ldr	r3, [r7, #0]
 8001e24:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001e26:	021b      	lsls	r3, r3, #8
 8001e28:	431a      	orrs	r2, r3
 8001e2a:	697b      	ldr	r3, [r7, #20]
 8001e2c:	f8c3 2200 	str.w	r2, [r3, #512]	; 0x200
    CLEAR_BIT(can_ip->FMR, CAN_FMR_CAN2SB);
    SET_BIT(can_ip->FMR, sFilterConfig->SlaveStartFilterBank << CAN_FMR_CAN2SB_Pos);

#endif
    /* Convert filter number into bit position */
    filternbrbitpos = (uint32_t)1 << (sFilterConfig->FilterBank & 0x1FU);
 8001e30:	683b      	ldr	r3, [r7, #0]
 8001e32:	695b      	ldr	r3, [r3, #20]
 8001e34:	f003 031f 	and.w	r3, r3, #31
 8001e38:	2201      	movs	r2, #1
 8001e3a:	fa02 f303 	lsl.w	r3, r2, r3
 8001e3e:	60fb      	str	r3, [r7, #12]

    /* Filter Deactivation */
    CLEAR_BIT(can_ip->FA1R, filternbrbitpos);
 8001e40:	697b      	ldr	r3, [r7, #20]
 8001e42:	f8d3 221c 	ldr.w	r2, [r3, #540]	; 0x21c
 8001e46:	68fb      	ldr	r3, [r7, #12]
 8001e48:	43db      	mvns	r3, r3
 8001e4a:	401a      	ands	r2, r3
 8001e4c:	697b      	ldr	r3, [r7, #20]
 8001e4e:	f8c3 221c 	str.w	r2, [r3, #540]	; 0x21c

    /* Filter Scale */
    if (sFilterConfig->FilterScale == CAN_FILTERSCALE_16BIT)
 8001e52:	683b      	ldr	r3, [r7, #0]
 8001e54:	69db      	ldr	r3, [r3, #28]
 8001e56:	2b00      	cmp	r3, #0
 8001e58:	d123      	bne.n	8001ea2 <HAL_CAN_ConfigFilter+0xe2>
    {
      /* 16-bit scale for the filter */
      CLEAR_BIT(can_ip->FS1R, filternbrbitpos);
 8001e5a:	697b      	ldr	r3, [r7, #20]
 8001e5c:	f8d3 220c 	ldr.w	r2, [r3, #524]	; 0x20c
 8001e60:	68fb      	ldr	r3, [r7, #12]
 8001e62:	43db      	mvns	r3, r3
 8001e64:	401a      	ands	r2, r3
 8001e66:	697b      	ldr	r3, [r7, #20]
 8001e68:	f8c3 220c 	str.w	r2, [r3, #524]	; 0x20c

      /* First 16-bit identifier and First 16-bit mask */
      /* Or First 16-bit identifier and Second 16-bit identifier */
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR1 =
        ((0x0000FFFFU & (uint32_t)sFilterConfig->FilterMaskIdLow) << 16U) |
 8001e6c:	683b      	ldr	r3, [r7, #0]
 8001e6e:	68db      	ldr	r3, [r3, #12]
 8001e70:	0419      	lsls	r1, r3, #16
        (0x0000FFFFU & (uint32_t)sFilterConfig->FilterIdLow);
 8001e72:	683b      	ldr	r3, [r7, #0]
 8001e74:	685b      	ldr	r3, [r3, #4]
 8001e76:	b29b      	uxth	r3, r3
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR1 =
 8001e78:	683a      	ldr	r2, [r7, #0]
 8001e7a:	6952      	ldr	r2, [r2, #20]
        ((0x0000FFFFU & (uint32_t)sFilterConfig->FilterMaskIdLow) << 16U) |
 8001e7c:	4319      	orrs	r1, r3
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR1 =
 8001e7e:	697b      	ldr	r3, [r7, #20]
 8001e80:	3248      	adds	r2, #72	; 0x48
 8001e82:	f843 1032 	str.w	r1, [r3, r2, lsl #3]

      /* Second 16-bit identifier and Second 16-bit mask */
      /* Or Third 16-bit identifier and Fourth 16-bit identifier */
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR2 =
        ((0x0000FFFFU & (uint32_t)sFilterConfig->FilterMaskIdHigh) << 16U) |
 8001e86:	683b      	ldr	r3, [r7, #0]
 8001e88:	689b      	ldr	r3, [r3, #8]
 8001e8a:	0419      	lsls	r1, r3, #16
        (0x0000FFFFU & (uint32_t)sFilterConfig->FilterIdHigh);
 8001e8c:	683b      	ldr	r3, [r7, #0]
 8001e8e:	681b      	ldr	r3, [r3, #0]
 8001e90:	b29a      	uxth	r2, r3
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR2 =
 8001e92:	683b      	ldr	r3, [r7, #0]
 8001e94:	695b      	ldr	r3, [r3, #20]
        ((0x0000FFFFU & (uint32_t)sFilterConfig->FilterMaskIdHigh) << 16U) |
 8001e96:	430a      	orrs	r2, r1
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR2 =
 8001e98:	6979      	ldr	r1, [r7, #20]
 8001e9a:	3348      	adds	r3, #72	; 0x48
 8001e9c:	00db      	lsls	r3, r3, #3
 8001e9e:	440b      	add	r3, r1
 8001ea0:	605a      	str	r2, [r3, #4]
    }

    if (sFilterConfig->FilterScale == CAN_FILTERSCALE_32BIT)
 8001ea2:	683b      	ldr	r3, [r7, #0]
 8001ea4:	69db      	ldr	r3, [r3, #28]
 8001ea6:	2b01      	cmp	r3, #1
 8001ea8:	d122      	bne.n	8001ef0 <HAL_CAN_ConfigFilter+0x130>
    {
      /* 32-bit scale for the filter */
      SET_BIT(can_ip->FS1R, filternbrbitpos);
 8001eaa:	697b      	ldr	r3, [r7, #20]
 8001eac:	f8d3 220c 	ldr.w	r2, [r3, #524]	; 0x20c
 8001eb0:	68fb      	ldr	r3, [r7, #12]
 8001eb2:	431a      	orrs	r2, r3
 8001eb4:	697b      	ldr	r3, [r7, #20]
 8001eb6:	f8c3 220c 	str.w	r2, [r3, #524]	; 0x20c

      /* 32-bit identifier or First 32-bit identifier */
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR1 =
        ((0x0000FFFFU & (uint32_t)sFilterConfig->FilterIdHigh) << 16U) |
 8001eba:	683b      	ldr	r3, [r7, #0]
 8001ebc:	681b      	ldr	r3, [r3, #0]
 8001ebe:	0419      	lsls	r1, r3, #16
        (0x0000FFFFU & (uint32_t)sFilterConfig->FilterIdLow);
 8001ec0:	683b      	ldr	r3, [r7, #0]
 8001ec2:	685b      	ldr	r3, [r3, #4]
 8001ec4:	b29b      	uxth	r3, r3
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR1 =
 8001ec6:	683a      	ldr	r2, [r7, #0]
 8001ec8:	6952      	ldr	r2, [r2, #20]
        ((0x0000FFFFU & (uint32_t)sFilterConfig->FilterIdHigh) << 16U) |
 8001eca:	4319      	orrs	r1, r3
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR1 =
 8001ecc:	697b      	ldr	r3, [r7, #20]
 8001ece:	3248      	adds	r2, #72	; 0x48
 8001ed0:	f843 1032 	str.w	r1, [r3, r2, lsl #3]

      /* 32-bit mask or Second 32-bit identifier */
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR2 =
        ((0x0000FFFFU & (uint32_t)sFilterConfig->FilterMaskIdHigh) << 16U) |
 8001ed4:	683b      	ldr	r3, [r7, #0]
 8001ed6:	689b      	ldr	r3, [r3, #8]
 8001ed8:	0419      	lsls	r1, r3, #16
        (0x0000FFFFU & (uint32_t)sFilterConfig->FilterMaskIdLow);
 8001eda:	683b      	ldr	r3, [r7, #0]
 8001edc:	68db      	ldr	r3, [r3, #12]
 8001ede:	b29a      	uxth	r2, r3
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR2 =
 8001ee0:	683b      	ldr	r3, [r7, #0]
 8001ee2:	695b      	ldr	r3, [r3, #20]
        ((0x0000FFFFU & (uint32_t)sFilterConfig->FilterMaskIdHigh) << 16U) |
 8001ee4:	430a      	orrs	r2, r1
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR2 =
 8001ee6:	6979      	ldr	r1, [r7, #20]
 8001ee8:	3348      	adds	r3, #72	; 0x48
 8001eea:	00db      	lsls	r3, r3, #3
 8001eec:	440b      	add	r3, r1
 8001eee:	605a      	str	r2, [r3, #4]
    }

    /* Filter Mode */
    if (sFilterConfig->FilterMode == CAN_FILTERMODE_IDMASK)
 8001ef0:	683b      	ldr	r3, [r7, #0]
 8001ef2:	699b      	ldr	r3, [r3, #24]
 8001ef4:	2b00      	cmp	r3, #0
 8001ef6:	d109      	bne.n	8001f0c <HAL_CAN_ConfigFilter+0x14c>
    {
      /* Id/Mask mode for the filter*/
      CLEAR_BIT(can_ip->FM1R, filternbrbitpos);
 8001ef8:	697b      	ldr	r3, [r7, #20]
 8001efa:	f8d3 2204 	ldr.w	r2, [r3, #516]	; 0x204
 8001efe:	68fb      	ldr	r3, [r7, #12]
 8001f00:	43db      	mvns	r3, r3
 8001f02:	401a      	ands	r2, r3
 8001f04:	697b      	ldr	r3, [r7, #20]
 8001f06:	f8c3 2204 	str.w	r2, [r3, #516]	; 0x204
 8001f0a:	e007      	b.n	8001f1c <HAL_CAN_ConfigFilter+0x15c>
    }
    else /* CAN_FilterInitStruct->CAN_FilterMode == CAN_FilterMode_IdList */
    {
      /* Identifier list mode for the filter*/
      SET_BIT(can_ip->FM1R, filternbrbitpos);
 8001f0c:	697b      	ldr	r3, [r7, #20]
 8001f0e:	f8d3 2204 	ldr.w	r2, [r3, #516]	; 0x204
 8001f12:	68fb      	ldr	r3, [r7, #12]
 8001f14:	431a      	orrs	r2, r3
 8001f16:	697b      	ldr	r3, [r7, #20]
 8001f18:	f8c3 2204 	str.w	r2, [r3, #516]	; 0x204
    }

    /* Filter FIFO assignment */
    if (sFilterConfig->FilterFIFOAssignment == CAN_FILTER_FIFO0)
 8001f1c:	683b      	ldr	r3, [r7, #0]
 8001f1e:	691b      	ldr	r3, [r3, #16]
 8001f20:	2b00      	cmp	r3, #0
 8001f22:	d109      	bne.n	8001f38 <HAL_CAN_ConfigFilter+0x178>
    {
      /* FIFO 0 assignation for the filter */
      CLEAR_BIT(can_ip->FFA1R, filternbrbitpos);
 8001f24:	697b      	ldr	r3, [r7, #20]
 8001f26:	f8d3 2214 	ldr.w	r2, [r3, #532]	; 0x214
 8001f2a:	68fb      	ldr	r3, [r7, #12]
 8001f2c:	43db      	mvns	r3, r3
 8001f2e:	401a      	ands	r2, r3
 8001f30:	697b      	ldr	r3, [r7, #20]
 8001f32:	f8c3 2214 	str.w	r2, [r3, #532]	; 0x214
 8001f36:	e007      	b.n	8001f48 <HAL_CAN_ConfigFilter+0x188>
    }
    else
    {
      /* FIFO 1 assignation for the filter */
      SET_BIT(can_ip->FFA1R, filternbrbitpos);
 8001f38:	697b      	ldr	r3, [r7, #20]
 8001f3a:	f8d3 2214 	ldr.w	r2, [r3, #532]	; 0x214
 8001f3e:	68fb      	ldr	r3, [r7, #12]
 8001f40:	431a      	orrs	r2, r3
 8001f42:	697b      	ldr	r3, [r7, #20]
 8001f44:	f8c3 2214 	str.w	r2, [r3, #532]	; 0x214
    }

    /* Filter activation */
    if (sFilterConfig->FilterActivation == CAN_FILTER_ENABLE)
 8001f48:	683b      	ldr	r3, [r7, #0]
 8001f4a:	6a1b      	ldr	r3, [r3, #32]
 8001f4c:	2b01      	cmp	r3, #1
 8001f4e:	d107      	bne.n	8001f60 <HAL_CAN_ConfigFilter+0x1a0>
    {
      SET_BIT(can_ip->FA1R, filternbrbitpos);
 8001f50:	697b      	ldr	r3, [r7, #20]
 8001f52:	f8d3 221c 	ldr.w	r2, [r3, #540]	; 0x21c
 8001f56:	68fb      	ldr	r3, [r7, #12]
 8001f58:	431a      	orrs	r2, r3
 8001f5a:	697b      	ldr	r3, [r7, #20]
 8001f5c:	f8c3 221c 	str.w	r2, [r3, #540]	; 0x21c
    }

    /* Leave the initialisation mode for the filter */
    CLEAR_BIT(can_ip->FMR, CAN_FMR_FINIT);
 8001f60:	697b      	ldr	r3, [r7, #20]
 8001f62:	f8d3 3200 	ldr.w	r3, [r3, #512]	; 0x200
 8001f66:	f023 0201 	bic.w	r2, r3, #1
 8001f6a:	697b      	ldr	r3, [r7, #20]
 8001f6c:	f8c3 2200 	str.w	r2, [r3, #512]	; 0x200

    /* Return function status */
    return HAL_OK;
 8001f70:	2300      	movs	r3, #0
 8001f72:	e006      	b.n	8001f82 <HAL_CAN_ConfigFilter+0x1c2>
  }
  else
  {
    /* Update error code */
    hcan->ErrorCode |= HAL_CAN_ERROR_NOT_INITIALIZED;
 8001f74:	687b      	ldr	r3, [r7, #4]
 8001f76:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001f78:	f443 2280 	orr.w	r2, r3, #262144	; 0x40000
 8001f7c:	687b      	ldr	r3, [r7, #4]
 8001f7e:	625a      	str	r2, [r3, #36]	; 0x24

    return HAL_ERROR;
 8001f80:	2301      	movs	r3, #1
  }
}
 8001f82:	4618      	mov	r0, r3
 8001f84:	371c      	adds	r7, #28
 8001f86:	46bd      	mov	sp, r7
 8001f88:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001f8c:	4770      	bx	lr
 8001f8e:	bf00      	nop
 8001f90:	40003400 	.word	0x40003400
 8001f94:	40006400 	.word	0x40006400

08001f98 <HAL_CAN_Start>:
  * @param  hcan pointer to an CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_CAN_Start(CAN_HandleTypeDef *hcan)
{
 8001f98:	b580      	push	{r7, lr}
 8001f9a:	b084      	sub	sp, #16
 8001f9c:	af00      	add	r7, sp, #0
 8001f9e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  if (hcan->State == HAL_CAN_STATE_READY)
 8001fa0:	687b      	ldr	r3, [r7, #4]
 8001fa2:	f893 3020 	ldrb.w	r3, [r3, #32]
 8001fa6:	b2db      	uxtb	r3, r3
 8001fa8:	2b01      	cmp	r3, #1
 8001faa:	d12e      	bne.n	800200a <HAL_CAN_Start+0x72>
  {
    /* Change CAN peripheral state */
    hcan->State = HAL_CAN_STATE_LISTENING;
 8001fac:	687b      	ldr	r3, [r7, #4]
 8001fae:	2202      	movs	r2, #2
 8001fb0:	f883 2020 	strb.w	r2, [r3, #32]

    /* Request leave initialisation */
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_INRQ);
 8001fb4:	687b      	ldr	r3, [r7, #4]
 8001fb6:	681b      	ldr	r3, [r3, #0]
 8001fb8:	681a      	ldr	r2, [r3, #0]
 8001fba:	687b      	ldr	r3, [r7, #4]
 8001fbc:	681b      	ldr	r3, [r3, #0]
 8001fbe:	f022 0201 	bic.w	r2, r2, #1
 8001fc2:	601a      	str	r2, [r3, #0]

    /* Get tick */
    tickstart = HAL_GetTick();
 8001fc4:	f7ff fdf4 	bl	8001bb0 <HAL_GetTick>
 8001fc8:	60f8      	str	r0, [r7, #12]

    /* Wait the acknowledge */
    while ((hcan->Instance->MSR & CAN_MSR_INAK) != 0U)
 8001fca:	e012      	b.n	8001ff2 <HAL_CAN_Start+0x5a>
    {
      /* Check for the Timeout */
      if ((HAL_GetTick() - tickstart) > CAN_TIMEOUT_VALUE)
 8001fcc:	f7ff fdf0 	bl	8001bb0 <HAL_GetTick>
 8001fd0:	4602      	mov	r2, r0
 8001fd2:	68fb      	ldr	r3, [r7, #12]
 8001fd4:	1ad3      	subs	r3, r2, r3
 8001fd6:	2b0a      	cmp	r3, #10
 8001fd8:	d90b      	bls.n	8001ff2 <HAL_CAN_Start+0x5a>
      {
        /* Update error code */
        hcan->ErrorCode |= HAL_CAN_ERROR_TIMEOUT;
 8001fda:	687b      	ldr	r3, [r7, #4]
 8001fdc:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001fde:	f443 3200 	orr.w	r2, r3, #131072	; 0x20000
 8001fe2:	687b      	ldr	r3, [r7, #4]
 8001fe4:	625a      	str	r2, [r3, #36]	; 0x24

        /* Change CAN state */
        hcan->State = HAL_CAN_STATE_ERROR;
 8001fe6:	687b      	ldr	r3, [r7, #4]
 8001fe8:	2205      	movs	r2, #5
 8001fea:	f883 2020 	strb.w	r2, [r3, #32]

        return HAL_ERROR;
 8001fee:	2301      	movs	r3, #1
 8001ff0:	e012      	b.n	8002018 <HAL_CAN_Start+0x80>
    while ((hcan->Instance->MSR & CAN_MSR_INAK) != 0U)
 8001ff2:	687b      	ldr	r3, [r7, #4]
 8001ff4:	681b      	ldr	r3, [r3, #0]
 8001ff6:	685b      	ldr	r3, [r3, #4]
 8001ff8:	f003 0301 	and.w	r3, r3, #1
 8001ffc:	2b00      	cmp	r3, #0
 8001ffe:	d1e5      	bne.n	8001fcc <HAL_CAN_Start+0x34>
      }
    }

    /* Reset the CAN ErrorCode */
    hcan->ErrorCode = HAL_CAN_ERROR_NONE;
 8002000:	687b      	ldr	r3, [r7, #4]
 8002002:	2200      	movs	r2, #0
 8002004:	625a      	str	r2, [r3, #36]	; 0x24

    /* Return function status */
    return HAL_OK;
 8002006:	2300      	movs	r3, #0
 8002008:	e006      	b.n	8002018 <HAL_CAN_Start+0x80>
  }
  else
  {
    /* Update error code */
    hcan->ErrorCode |= HAL_CAN_ERROR_NOT_READY;
 800200a:	687b      	ldr	r3, [r7, #4]
 800200c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800200e:	f443 2200 	orr.w	r2, r3, #524288	; 0x80000
 8002012:	687b      	ldr	r3, [r7, #4]
 8002014:	625a      	str	r2, [r3, #36]	; 0x24

    return HAL_ERROR;
 8002016:	2301      	movs	r3, #1
  }
}
 8002018:	4618      	mov	r0, r3
 800201a:	3710      	adds	r7, #16
 800201c:	46bd      	mov	sp, r7
 800201e:	bd80      	pop	{r7, pc}

08002020 <HAL_CAN_AddTxMessage>:
  *         This parameter can be a value of @arg CAN_Tx_Mailboxes.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_CAN_AddTxMessage(CAN_HandleTypeDef *hcan, const CAN_TxHeaderTypeDef *pHeader,
                                       const uint8_t aData[], uint32_t *pTxMailbox)
{
 8002020:	b480      	push	{r7}
 8002022:	b089      	sub	sp, #36	; 0x24
 8002024:	af00      	add	r7, sp, #0
 8002026:	60f8      	str	r0, [r7, #12]
 8002028:	60b9      	str	r1, [r7, #8]
 800202a:	607a      	str	r2, [r7, #4]
 800202c:	603b      	str	r3, [r7, #0]
  uint32_t transmitmailbox;
  HAL_CAN_StateTypeDef state = hcan->State;
 800202e:	68fb      	ldr	r3, [r7, #12]
 8002030:	f893 3020 	ldrb.w	r3, [r3, #32]
 8002034:	77fb      	strb	r3, [r7, #31]
  uint32_t tsr = READ_REG(hcan->Instance->TSR);
 8002036:	68fb      	ldr	r3, [r7, #12]
 8002038:	681b      	ldr	r3, [r3, #0]
 800203a:	689b      	ldr	r3, [r3, #8]
 800203c:	61bb      	str	r3, [r7, #24]
  {
    assert_param(IS_CAN_EXTID(pHeader->ExtId));
  }
  assert_param(IS_FUNCTIONAL_STATE(pHeader->TransmitGlobalTime));

  if ((state == HAL_CAN_STATE_READY) ||
 800203e:	7ffb      	ldrb	r3, [r7, #31]
 8002040:	2b01      	cmp	r3, #1
 8002042:	d003      	beq.n	800204c <HAL_CAN_AddTxMessage+0x2c>
 8002044:	7ffb      	ldrb	r3, [r7, #31]
 8002046:	2b02      	cmp	r3, #2
 8002048:	f040 80ad 	bne.w	80021a6 <HAL_CAN_AddTxMessage+0x186>
      (state == HAL_CAN_STATE_LISTENING))
  {
    /* Check that all the Tx mailboxes are not full */
    if (((tsr & CAN_TSR_TME0) != 0U) ||
 800204c:	69bb      	ldr	r3, [r7, #24]
 800204e:	f003 6380 	and.w	r3, r3, #67108864	; 0x4000000
 8002052:	2b00      	cmp	r3, #0
 8002054:	d10a      	bne.n	800206c <HAL_CAN_AddTxMessage+0x4c>
        ((tsr & CAN_TSR_TME1) != 0U) ||
 8002056:	69bb      	ldr	r3, [r7, #24]
 8002058:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
    if (((tsr & CAN_TSR_TME0) != 0U) ||
 800205c:	2b00      	cmp	r3, #0
 800205e:	d105      	bne.n	800206c <HAL_CAN_AddTxMessage+0x4c>
        ((tsr & CAN_TSR_TME2) != 0U))
 8002060:	69bb      	ldr	r3, [r7, #24]
 8002062:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
        ((tsr & CAN_TSR_TME1) != 0U) ||
 8002066:	2b00      	cmp	r3, #0
 8002068:	f000 8095 	beq.w	8002196 <HAL_CAN_AddTxMessage+0x176>
    {
      /* Select an empty transmit mailbox */
      transmitmailbox = (tsr & CAN_TSR_CODE) >> CAN_TSR_CODE_Pos;
 800206c:	69bb      	ldr	r3, [r7, #24]
 800206e:	0e1b      	lsrs	r3, r3, #24
 8002070:	f003 0303 	and.w	r3, r3, #3
 8002074:	617b      	str	r3, [r7, #20]

      /* Store the Tx mailbox */
      *pTxMailbox = (uint32_t)1 << transmitmailbox;
 8002076:	2201      	movs	r2, #1
 8002078:	697b      	ldr	r3, [r7, #20]
 800207a:	409a      	lsls	r2, r3
 800207c:	683b      	ldr	r3, [r7, #0]
 800207e:	601a      	str	r2, [r3, #0]

      /* Set up the Id */
      if (pHeader->IDE == CAN_ID_STD)
 8002080:	68bb      	ldr	r3, [r7, #8]
 8002082:	689b      	ldr	r3, [r3, #8]
 8002084:	2b00      	cmp	r3, #0
 8002086:	d10d      	bne.n	80020a4 <HAL_CAN_AddTxMessage+0x84>
      {
        hcan->Instance->sTxMailBox[transmitmailbox].TIR = ((pHeader->StdId << CAN_TI0R_STID_Pos) |
 8002088:	68bb      	ldr	r3, [r7, #8]
 800208a:	681b      	ldr	r3, [r3, #0]
 800208c:	055a      	lsls	r2, r3, #21
                                                           pHeader->RTR);
 800208e:	68bb      	ldr	r3, [r7, #8]
 8002090:	68db      	ldr	r3, [r3, #12]
        hcan->Instance->sTxMailBox[transmitmailbox].TIR = ((pHeader->StdId << CAN_TI0R_STID_Pos) |
 8002092:	68f9      	ldr	r1, [r7, #12]
 8002094:	6809      	ldr	r1, [r1, #0]
 8002096:	431a      	orrs	r2, r3
 8002098:	697b      	ldr	r3, [r7, #20]
 800209a:	3318      	adds	r3, #24
 800209c:	011b      	lsls	r3, r3, #4
 800209e:	440b      	add	r3, r1
 80020a0:	601a      	str	r2, [r3, #0]
 80020a2:	e00f      	b.n	80020c4 <HAL_CAN_AddTxMessage+0xa4>
      }
      else
      {
        hcan->Instance->sTxMailBox[transmitmailbox].TIR = ((pHeader->ExtId << CAN_TI0R_EXID_Pos) |
 80020a4:	68bb      	ldr	r3, [r7, #8]
 80020a6:	685b      	ldr	r3, [r3, #4]
 80020a8:	00da      	lsls	r2, r3, #3
                                                           pHeader->IDE |
 80020aa:	68bb      	ldr	r3, [r7, #8]
 80020ac:	689b      	ldr	r3, [r3, #8]
        hcan->Instance->sTxMailBox[transmitmailbox].TIR = ((pHeader->ExtId << CAN_TI0R_EXID_Pos) |
 80020ae:	431a      	orrs	r2, r3
                                                           pHeader->RTR);
 80020b0:	68bb      	ldr	r3, [r7, #8]
 80020b2:	68db      	ldr	r3, [r3, #12]
        hcan->Instance->sTxMailBox[transmitmailbox].TIR = ((pHeader->ExtId << CAN_TI0R_EXID_Pos) |
 80020b4:	68f9      	ldr	r1, [r7, #12]
 80020b6:	6809      	ldr	r1, [r1, #0]
                                                           pHeader->IDE |
 80020b8:	431a      	orrs	r2, r3
        hcan->Instance->sTxMailBox[transmitmailbox].TIR = ((pHeader->ExtId << CAN_TI0R_EXID_Pos) |
 80020ba:	697b      	ldr	r3, [r7, #20]
 80020bc:	3318      	adds	r3, #24
 80020be:	011b      	lsls	r3, r3, #4
 80020c0:	440b      	add	r3, r1
 80020c2:	601a      	str	r2, [r3, #0]
      }

      /* Set up the DLC */
      hcan->Instance->sTxMailBox[transmitmailbox].TDTR = (pHeader->DLC);
 80020c4:	68fb      	ldr	r3, [r7, #12]
 80020c6:	6819      	ldr	r1, [r3, #0]
 80020c8:	68bb      	ldr	r3, [r7, #8]
 80020ca:	691a      	ldr	r2, [r3, #16]
 80020cc:	697b      	ldr	r3, [r7, #20]
 80020ce:	3318      	adds	r3, #24
 80020d0:	011b      	lsls	r3, r3, #4
 80020d2:	440b      	add	r3, r1
 80020d4:	3304      	adds	r3, #4
 80020d6:	601a      	str	r2, [r3, #0]

      /* Set up the Transmit Global Time mode */
      if (pHeader->TransmitGlobalTime == ENABLE)
 80020d8:	68bb      	ldr	r3, [r7, #8]
 80020da:	7d1b      	ldrb	r3, [r3, #20]
 80020dc:	2b01      	cmp	r3, #1
 80020de:	d111      	bne.n	8002104 <HAL_CAN_AddTxMessage+0xe4>
      {
        SET_BIT(hcan->Instance->sTxMailBox[transmitmailbox].TDTR, CAN_TDT0R_TGT);
 80020e0:	68fb      	ldr	r3, [r7, #12]
 80020e2:	681a      	ldr	r2, [r3, #0]
 80020e4:	697b      	ldr	r3, [r7, #20]
 80020e6:	3318      	adds	r3, #24
 80020e8:	011b      	lsls	r3, r3, #4
 80020ea:	4413      	add	r3, r2
 80020ec:	3304      	adds	r3, #4
 80020ee:	681b      	ldr	r3, [r3, #0]
 80020f0:	68fa      	ldr	r2, [r7, #12]
 80020f2:	6811      	ldr	r1, [r2, #0]
 80020f4:	f443 7280 	orr.w	r2, r3, #256	; 0x100
 80020f8:	697b      	ldr	r3, [r7, #20]
 80020fa:	3318      	adds	r3, #24
 80020fc:	011b      	lsls	r3, r3, #4
 80020fe:	440b      	add	r3, r1
 8002100:	3304      	adds	r3, #4
 8002102:	601a      	str	r2, [r3, #0]
      }

      /* Set up the data field */
      WRITE_REG(hcan->Instance->sTxMailBox[transmitmailbox].TDHR,
 8002104:	687b      	ldr	r3, [r7, #4]
 8002106:	3307      	adds	r3, #7
 8002108:	781b      	ldrb	r3, [r3, #0]
 800210a:	061a      	lsls	r2, r3, #24
 800210c:	687b      	ldr	r3, [r7, #4]
 800210e:	3306      	adds	r3, #6
 8002110:	781b      	ldrb	r3, [r3, #0]
 8002112:	041b      	lsls	r3, r3, #16
 8002114:	431a      	orrs	r2, r3
 8002116:	687b      	ldr	r3, [r7, #4]
 8002118:	3305      	adds	r3, #5
 800211a:	781b      	ldrb	r3, [r3, #0]
 800211c:	021b      	lsls	r3, r3, #8
 800211e:	4313      	orrs	r3, r2
 8002120:	687a      	ldr	r2, [r7, #4]
 8002122:	3204      	adds	r2, #4
 8002124:	7812      	ldrb	r2, [r2, #0]
 8002126:	4610      	mov	r0, r2
 8002128:	68fa      	ldr	r2, [r7, #12]
 800212a:	6811      	ldr	r1, [r2, #0]
 800212c:	ea43 0200 	orr.w	r2, r3, r0
 8002130:	697b      	ldr	r3, [r7, #20]
 8002132:	011b      	lsls	r3, r3, #4
 8002134:	440b      	add	r3, r1
 8002136:	f503 73c6 	add.w	r3, r3, #396	; 0x18c
 800213a:	601a      	str	r2, [r3, #0]
                ((uint32_t)aData[7] << CAN_TDH0R_DATA7_Pos) |
                ((uint32_t)aData[6] << CAN_TDH0R_DATA6_Pos) |
                ((uint32_t)aData[5] << CAN_TDH0R_DATA5_Pos) |
                ((uint32_t)aData[4] << CAN_TDH0R_DATA4_Pos));
      WRITE_REG(hcan->Instance->sTxMailBox[transmitmailbox].TDLR,
 800213c:	687b      	ldr	r3, [r7, #4]
 800213e:	3303      	adds	r3, #3
 8002140:	781b      	ldrb	r3, [r3, #0]
 8002142:	061a      	lsls	r2, r3, #24
 8002144:	687b      	ldr	r3, [r7, #4]
 8002146:	3302      	adds	r3, #2
 8002148:	781b      	ldrb	r3, [r3, #0]
 800214a:	041b      	lsls	r3, r3, #16
 800214c:	431a      	orrs	r2, r3
 800214e:	687b      	ldr	r3, [r7, #4]
 8002150:	3301      	adds	r3, #1
 8002152:	781b      	ldrb	r3, [r3, #0]
 8002154:	021b      	lsls	r3, r3, #8
 8002156:	4313      	orrs	r3, r2
 8002158:	687a      	ldr	r2, [r7, #4]
 800215a:	7812      	ldrb	r2, [r2, #0]
 800215c:	4610      	mov	r0, r2
 800215e:	68fa      	ldr	r2, [r7, #12]
 8002160:	6811      	ldr	r1, [r2, #0]
 8002162:	ea43 0200 	orr.w	r2, r3, r0
 8002166:	697b      	ldr	r3, [r7, #20]
 8002168:	011b      	lsls	r3, r3, #4
 800216a:	440b      	add	r3, r1
 800216c:	f503 73c4 	add.w	r3, r3, #392	; 0x188
 8002170:	601a      	str	r2, [r3, #0]
                ((uint32_t)aData[2] << CAN_TDL0R_DATA2_Pos) |
                ((uint32_t)aData[1] << CAN_TDL0R_DATA1_Pos) |
                ((uint32_t)aData[0] << CAN_TDL0R_DATA0_Pos));

      /* Request transmission */
      SET_BIT(hcan->Instance->sTxMailBox[transmitmailbox].TIR, CAN_TI0R_TXRQ);
 8002172:	68fb      	ldr	r3, [r7, #12]
 8002174:	681a      	ldr	r2, [r3, #0]
 8002176:	697b      	ldr	r3, [r7, #20]
 8002178:	3318      	adds	r3, #24
 800217a:	011b      	lsls	r3, r3, #4
 800217c:	4413      	add	r3, r2
 800217e:	681b      	ldr	r3, [r3, #0]
 8002180:	68fa      	ldr	r2, [r7, #12]
 8002182:	6811      	ldr	r1, [r2, #0]
 8002184:	f043 0201 	orr.w	r2, r3, #1
 8002188:	697b      	ldr	r3, [r7, #20]
 800218a:	3318      	adds	r3, #24
 800218c:	011b      	lsls	r3, r3, #4
 800218e:	440b      	add	r3, r1
 8002190:	601a      	str	r2, [r3, #0]

      /* Return function status */
      return HAL_OK;
 8002192:	2300      	movs	r3, #0
 8002194:	e00e      	b.n	80021b4 <HAL_CAN_AddTxMessage+0x194>
    }
    else
    {
      /* Update error code */
      hcan->ErrorCode |= HAL_CAN_ERROR_PARAM;
 8002196:	68fb      	ldr	r3, [r7, #12]
 8002198:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800219a:	f443 1200 	orr.w	r2, r3, #2097152	; 0x200000
 800219e:	68fb      	ldr	r3, [r7, #12]
 80021a0:	625a      	str	r2, [r3, #36]	; 0x24

      return HAL_ERROR;
 80021a2:	2301      	movs	r3, #1
 80021a4:	e006      	b.n	80021b4 <HAL_CAN_AddTxMessage+0x194>
    }
  }
  else
  {
    /* Update error code */
    hcan->ErrorCode |= HAL_CAN_ERROR_NOT_INITIALIZED;
 80021a6:	68fb      	ldr	r3, [r7, #12]
 80021a8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80021aa:	f443 2280 	orr.w	r2, r3, #262144	; 0x40000
 80021ae:	68fb      	ldr	r3, [r7, #12]
 80021b0:	625a      	str	r2, [r3, #36]	; 0x24

    return HAL_ERROR;
 80021b2:	2301      	movs	r3, #1
  }
}
 80021b4:	4618      	mov	r0, r3
 80021b6:	3724      	adds	r7, #36	; 0x24
 80021b8:	46bd      	mov	sp, r7
 80021ba:	f85d 7b04 	ldr.w	r7, [sp], #4
 80021be:	4770      	bx	lr

080021c0 <HAL_CAN_GetRxMessage>:
  * @param  aData array where the payload of the Rx frame will be stored.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_CAN_GetRxMessage(CAN_HandleTypeDef *hcan, uint32_t RxFifo,
                                       CAN_RxHeaderTypeDef *pHeader, uint8_t aData[])
{
 80021c0:	b480      	push	{r7}
 80021c2:	b087      	sub	sp, #28
 80021c4:	af00      	add	r7, sp, #0
 80021c6:	60f8      	str	r0, [r7, #12]
 80021c8:	60b9      	str	r1, [r7, #8]
 80021ca:	607a      	str	r2, [r7, #4]
 80021cc:	603b      	str	r3, [r7, #0]
  HAL_CAN_StateTypeDef state = hcan->State;
 80021ce:	68fb      	ldr	r3, [r7, #12]
 80021d0:	f893 3020 	ldrb.w	r3, [r3, #32]
 80021d4:	75fb      	strb	r3, [r7, #23]

  assert_param(IS_CAN_RX_FIFO(RxFifo));

  if ((state == HAL_CAN_STATE_READY) ||
 80021d6:	7dfb      	ldrb	r3, [r7, #23]
 80021d8:	2b01      	cmp	r3, #1
 80021da:	d003      	beq.n	80021e4 <HAL_CAN_GetRxMessage+0x24>
 80021dc:	7dfb      	ldrb	r3, [r7, #23]
 80021de:	2b02      	cmp	r3, #2
 80021e0:	f040 80f3 	bne.w	80023ca <HAL_CAN_GetRxMessage+0x20a>
      (state == HAL_CAN_STATE_LISTENING))
  {
    /* Check the Rx FIFO */
    if (RxFifo == CAN_RX_FIFO0) /* Rx element is assigned to Rx FIFO 0 */
 80021e4:	68bb      	ldr	r3, [r7, #8]
 80021e6:	2b00      	cmp	r3, #0
 80021e8:	d10e      	bne.n	8002208 <HAL_CAN_GetRxMessage+0x48>
    {
      /* Check that the Rx FIFO 0 is not empty */
      if ((hcan->Instance->RF0R & CAN_RF0R_FMP0) == 0U)
 80021ea:	68fb      	ldr	r3, [r7, #12]
 80021ec:	681b      	ldr	r3, [r3, #0]
 80021ee:	68db      	ldr	r3, [r3, #12]
 80021f0:	f003 0303 	and.w	r3, r3, #3
 80021f4:	2b00      	cmp	r3, #0
 80021f6:	d116      	bne.n	8002226 <HAL_CAN_GetRxMessage+0x66>
      {
        /* Update error code */
        hcan->ErrorCode |= HAL_CAN_ERROR_PARAM;
 80021f8:	68fb      	ldr	r3, [r7, #12]
 80021fa:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80021fc:	f443 1200 	orr.w	r2, r3, #2097152	; 0x200000
 8002200:	68fb      	ldr	r3, [r7, #12]
 8002202:	625a      	str	r2, [r3, #36]	; 0x24

        return HAL_ERROR;
 8002204:	2301      	movs	r3, #1
 8002206:	e0e7      	b.n	80023d8 <HAL_CAN_GetRxMessage+0x218>
      }
    }
    else /* Rx element is assigned to Rx FIFO 1 */
    {
      /* Check that the Rx FIFO 1 is not empty */
      if ((hcan->Instance->RF1R & CAN_RF1R_FMP1) == 0U)
 8002208:	68fb      	ldr	r3, [r7, #12]
 800220a:	681b      	ldr	r3, [r3, #0]
 800220c:	691b      	ldr	r3, [r3, #16]
 800220e:	f003 0303 	and.w	r3, r3, #3
 8002212:	2b00      	cmp	r3, #0
 8002214:	d107      	bne.n	8002226 <HAL_CAN_GetRxMessage+0x66>
      {
        /* Update error code */
        hcan->ErrorCode |= HAL_CAN_ERROR_PARAM;
 8002216:	68fb      	ldr	r3, [r7, #12]
 8002218:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800221a:	f443 1200 	orr.w	r2, r3, #2097152	; 0x200000
 800221e:	68fb      	ldr	r3, [r7, #12]
 8002220:	625a      	str	r2, [r3, #36]	; 0x24

        return HAL_ERROR;
 8002222:	2301      	movs	r3, #1
 8002224:	e0d8      	b.n	80023d8 <HAL_CAN_GetRxMessage+0x218>
      }
    }

    /* Get the header */
    pHeader->IDE = CAN_RI0R_IDE & hcan->Instance->sFIFOMailBox[RxFifo].RIR;
 8002226:	68fb      	ldr	r3, [r7, #12]
 8002228:	681a      	ldr	r2, [r3, #0]
 800222a:	68bb      	ldr	r3, [r7, #8]
 800222c:	331b      	adds	r3, #27
 800222e:	011b      	lsls	r3, r3, #4
 8002230:	4413      	add	r3, r2
 8002232:	681b      	ldr	r3, [r3, #0]
 8002234:	f003 0204 	and.w	r2, r3, #4
 8002238:	687b      	ldr	r3, [r7, #4]
 800223a:	609a      	str	r2, [r3, #8]
    if (pHeader->IDE == CAN_ID_STD)
 800223c:	687b      	ldr	r3, [r7, #4]
 800223e:	689b      	ldr	r3, [r3, #8]
 8002240:	2b00      	cmp	r3, #0
 8002242:	d10c      	bne.n	800225e <HAL_CAN_GetRxMessage+0x9e>
    {
      pHeader->StdId = (CAN_RI0R_STID & hcan->Instance->sFIFOMailBox[RxFifo].RIR) >> CAN_TI0R_STID_Pos;
 8002244:	68fb      	ldr	r3, [r7, #12]
 8002246:	681a      	ldr	r2, [r3, #0]
 8002248:	68bb      	ldr	r3, [r7, #8]
 800224a:	331b      	adds	r3, #27
 800224c:	011b      	lsls	r3, r3, #4
 800224e:	4413      	add	r3, r2
 8002250:	681b      	ldr	r3, [r3, #0]
 8002252:	0d5b      	lsrs	r3, r3, #21
 8002254:	f3c3 020a 	ubfx	r2, r3, #0, #11
 8002258:	687b      	ldr	r3, [r7, #4]
 800225a:	601a      	str	r2, [r3, #0]
 800225c:	e00b      	b.n	8002276 <HAL_CAN_GetRxMessage+0xb6>
    }
    else
    {
      pHeader->ExtId = ((CAN_RI0R_EXID | CAN_RI0R_STID) &
                        hcan->Instance->sFIFOMailBox[RxFifo].RIR) >> CAN_RI0R_EXID_Pos;
 800225e:	68fb      	ldr	r3, [r7, #12]
 8002260:	681a      	ldr	r2, [r3, #0]
 8002262:	68bb      	ldr	r3, [r7, #8]
 8002264:	331b      	adds	r3, #27
 8002266:	011b      	lsls	r3, r3, #4
 8002268:	4413      	add	r3, r2
 800226a:	681b      	ldr	r3, [r3, #0]
 800226c:	08db      	lsrs	r3, r3, #3
 800226e:	f023 4260 	bic.w	r2, r3, #3758096384	; 0xe0000000
      pHeader->ExtId = ((CAN_RI0R_EXID | CAN_RI0R_STID) &
 8002272:	687b      	ldr	r3, [r7, #4]
 8002274:	605a      	str	r2, [r3, #4]
    }
    pHeader->RTR = (CAN_RI0R_RTR & hcan->Instance->sFIFOMailBox[RxFifo].RIR);
 8002276:	68fb      	ldr	r3, [r7, #12]
 8002278:	681a      	ldr	r2, [r3, #0]
 800227a:	68bb      	ldr	r3, [r7, #8]
 800227c:	331b      	adds	r3, #27
 800227e:	011b      	lsls	r3, r3, #4
 8002280:	4413      	add	r3, r2
 8002282:	681b      	ldr	r3, [r3, #0]
 8002284:	f003 0202 	and.w	r2, r3, #2
 8002288:	687b      	ldr	r3, [r7, #4]
 800228a:	60da      	str	r2, [r3, #12]
    pHeader->DLC = (CAN_RDT0R_DLC & hcan->Instance->sFIFOMailBox[RxFifo].RDTR) >> CAN_RDT0R_DLC_Pos;
 800228c:	68fb      	ldr	r3, [r7, #12]
 800228e:	681a      	ldr	r2, [r3, #0]
 8002290:	68bb      	ldr	r3, [r7, #8]
 8002292:	331b      	adds	r3, #27
 8002294:	011b      	lsls	r3, r3, #4
 8002296:	4413      	add	r3, r2
 8002298:	3304      	adds	r3, #4
 800229a:	681b      	ldr	r3, [r3, #0]
 800229c:	f003 020f 	and.w	r2, r3, #15
 80022a0:	687b      	ldr	r3, [r7, #4]
 80022a2:	611a      	str	r2, [r3, #16]
    pHeader->FilterMatchIndex = (CAN_RDT0R_FMI & hcan->Instance->sFIFOMailBox[RxFifo].RDTR) >> CAN_RDT0R_FMI_Pos;
 80022a4:	68fb      	ldr	r3, [r7, #12]
 80022a6:	681a      	ldr	r2, [r3, #0]
 80022a8:	68bb      	ldr	r3, [r7, #8]
 80022aa:	331b      	adds	r3, #27
 80022ac:	011b      	lsls	r3, r3, #4
 80022ae:	4413      	add	r3, r2
 80022b0:	3304      	adds	r3, #4
 80022b2:	681b      	ldr	r3, [r3, #0]
 80022b4:	0a1b      	lsrs	r3, r3, #8
 80022b6:	b2da      	uxtb	r2, r3
 80022b8:	687b      	ldr	r3, [r7, #4]
 80022ba:	619a      	str	r2, [r3, #24]
    pHeader->Timestamp = (CAN_RDT0R_TIME & hcan->Instance->sFIFOMailBox[RxFifo].RDTR) >> CAN_RDT0R_TIME_Pos;
 80022bc:	68fb      	ldr	r3, [r7, #12]
 80022be:	681a      	ldr	r2, [r3, #0]
 80022c0:	68bb      	ldr	r3, [r7, #8]
 80022c2:	331b      	adds	r3, #27
 80022c4:	011b      	lsls	r3, r3, #4
 80022c6:	4413      	add	r3, r2
 80022c8:	3304      	adds	r3, #4
 80022ca:	681b      	ldr	r3, [r3, #0]
 80022cc:	0c1b      	lsrs	r3, r3, #16
 80022ce:	b29a      	uxth	r2, r3
 80022d0:	687b      	ldr	r3, [r7, #4]
 80022d2:	615a      	str	r2, [r3, #20]

    /* Get the data */
    aData[0] = (uint8_t)((CAN_RDL0R_DATA0 & hcan->Instance->sFIFOMailBox[RxFifo].RDLR) >> CAN_RDL0R_DATA0_Pos);
 80022d4:	68fb      	ldr	r3, [r7, #12]
 80022d6:	681a      	ldr	r2, [r3, #0]
 80022d8:	68bb      	ldr	r3, [r7, #8]
 80022da:	011b      	lsls	r3, r3, #4
 80022dc:	4413      	add	r3, r2
 80022de:	f503 73dc 	add.w	r3, r3, #440	; 0x1b8
 80022e2:	681b      	ldr	r3, [r3, #0]
 80022e4:	b2da      	uxtb	r2, r3
 80022e6:	683b      	ldr	r3, [r7, #0]
 80022e8:	701a      	strb	r2, [r3, #0]
    aData[1] = (uint8_t)((CAN_RDL0R_DATA1 & hcan->Instance->sFIFOMailBox[RxFifo].RDLR) >> CAN_RDL0R_DATA1_Pos);
 80022ea:	68fb      	ldr	r3, [r7, #12]
 80022ec:	681a      	ldr	r2, [r3, #0]
 80022ee:	68bb      	ldr	r3, [r7, #8]
 80022f0:	011b      	lsls	r3, r3, #4
 80022f2:	4413      	add	r3, r2
 80022f4:	f503 73dc 	add.w	r3, r3, #440	; 0x1b8
 80022f8:	681b      	ldr	r3, [r3, #0]
 80022fa:	0a1a      	lsrs	r2, r3, #8
 80022fc:	683b      	ldr	r3, [r7, #0]
 80022fe:	3301      	adds	r3, #1
 8002300:	b2d2      	uxtb	r2, r2
 8002302:	701a      	strb	r2, [r3, #0]
    aData[2] = (uint8_t)((CAN_RDL0R_DATA2 & hcan->Instance->sFIFOMailBox[RxFifo].RDLR) >> CAN_RDL0R_DATA2_Pos);
 8002304:	68fb      	ldr	r3, [r7, #12]
 8002306:	681a      	ldr	r2, [r3, #0]
 8002308:	68bb      	ldr	r3, [r7, #8]
 800230a:	011b      	lsls	r3, r3, #4
 800230c:	4413      	add	r3, r2
 800230e:	f503 73dc 	add.w	r3, r3, #440	; 0x1b8
 8002312:	681b      	ldr	r3, [r3, #0]
 8002314:	0c1a      	lsrs	r2, r3, #16
 8002316:	683b      	ldr	r3, [r7, #0]
 8002318:	3302      	adds	r3, #2
 800231a:	b2d2      	uxtb	r2, r2
 800231c:	701a      	strb	r2, [r3, #0]
    aData[3] = (uint8_t)((CAN_RDL0R_DATA3 & hcan->Instance->sFIFOMailBox[RxFifo].RDLR) >> CAN_RDL0R_DATA3_Pos);
 800231e:	68fb      	ldr	r3, [r7, #12]
 8002320:	681a      	ldr	r2, [r3, #0]
 8002322:	68bb      	ldr	r3, [r7, #8]
 8002324:	011b      	lsls	r3, r3, #4
 8002326:	4413      	add	r3, r2
 8002328:	f503 73dc 	add.w	r3, r3, #440	; 0x1b8
 800232c:	681b      	ldr	r3, [r3, #0]
 800232e:	0e1a      	lsrs	r2, r3, #24
 8002330:	683b      	ldr	r3, [r7, #0]
 8002332:	3303      	adds	r3, #3
 8002334:	b2d2      	uxtb	r2, r2
 8002336:	701a      	strb	r2, [r3, #0]
    aData[4] = (uint8_t)((CAN_RDH0R_DATA4 & hcan->Instance->sFIFOMailBox[RxFifo].RDHR) >> CAN_RDH0R_DATA4_Pos);
 8002338:	68fb      	ldr	r3, [r7, #12]
 800233a:	681a      	ldr	r2, [r3, #0]
 800233c:	68bb      	ldr	r3, [r7, #8]
 800233e:	011b      	lsls	r3, r3, #4
 8002340:	4413      	add	r3, r2
 8002342:	f503 73de 	add.w	r3, r3, #444	; 0x1bc
 8002346:	681a      	ldr	r2, [r3, #0]
 8002348:	683b      	ldr	r3, [r7, #0]
 800234a:	3304      	adds	r3, #4
 800234c:	b2d2      	uxtb	r2, r2
 800234e:	701a      	strb	r2, [r3, #0]
    aData[5] = (uint8_t)((CAN_RDH0R_DATA5 & hcan->Instance->sFIFOMailBox[RxFifo].RDHR) >> CAN_RDH0R_DATA5_Pos);
 8002350:	68fb      	ldr	r3, [r7, #12]
 8002352:	681a      	ldr	r2, [r3, #0]
 8002354:	68bb      	ldr	r3, [r7, #8]
 8002356:	011b      	lsls	r3, r3, #4
 8002358:	4413      	add	r3, r2
 800235a:	f503 73de 	add.w	r3, r3, #444	; 0x1bc
 800235e:	681b      	ldr	r3, [r3, #0]
 8002360:	0a1a      	lsrs	r2, r3, #8
 8002362:	683b      	ldr	r3, [r7, #0]
 8002364:	3305      	adds	r3, #5
 8002366:	b2d2      	uxtb	r2, r2
 8002368:	701a      	strb	r2, [r3, #0]
    aData[6] = (uint8_t)((CAN_RDH0R_DATA6 & hcan->Instance->sFIFOMailBox[RxFifo].RDHR) >> CAN_RDH0R_DATA6_Pos);
 800236a:	68fb      	ldr	r3, [r7, #12]
 800236c:	681a      	ldr	r2, [r3, #0]
 800236e:	68bb      	ldr	r3, [r7, #8]
 8002370:	011b      	lsls	r3, r3, #4
 8002372:	4413      	add	r3, r2
 8002374:	f503 73de 	add.w	r3, r3, #444	; 0x1bc
 8002378:	681b      	ldr	r3, [r3, #0]
 800237a:	0c1a      	lsrs	r2, r3, #16
 800237c:	683b      	ldr	r3, [r7, #0]
 800237e:	3306      	adds	r3, #6
 8002380:	b2d2      	uxtb	r2, r2
 8002382:	701a      	strb	r2, [r3, #0]
    aData[7] = (uint8_t)((CAN_RDH0R_DATA7 & hcan->Instance->sFIFOMailBox[RxFifo].RDHR) >> CAN_RDH0R_DATA7_Pos);
 8002384:	68fb      	ldr	r3, [r7, #12]
 8002386:	681a      	ldr	r2, [r3, #0]
 8002388:	68bb      	ldr	r3, [r7, #8]
 800238a:	011b      	lsls	r3, r3, #4
 800238c:	4413      	add	r3, r2
 800238e:	f503 73de 	add.w	r3, r3, #444	; 0x1bc
 8002392:	681b      	ldr	r3, [r3, #0]
 8002394:	0e1a      	lsrs	r2, r3, #24
 8002396:	683b      	ldr	r3, [r7, #0]
 8002398:	3307      	adds	r3, #7
 800239a:	b2d2      	uxtb	r2, r2
 800239c:	701a      	strb	r2, [r3, #0]

    /* Release the FIFO */
    if (RxFifo == CAN_RX_FIFO0) /* Rx element is assigned to Rx FIFO 0 */
 800239e:	68bb      	ldr	r3, [r7, #8]
 80023a0:	2b00      	cmp	r3, #0
 80023a2:	d108      	bne.n	80023b6 <HAL_CAN_GetRxMessage+0x1f6>
    {
      /* Release RX FIFO 0 */
      SET_BIT(hcan->Instance->RF0R, CAN_RF0R_RFOM0);
 80023a4:	68fb      	ldr	r3, [r7, #12]
 80023a6:	681b      	ldr	r3, [r3, #0]
 80023a8:	68da      	ldr	r2, [r3, #12]
 80023aa:	68fb      	ldr	r3, [r7, #12]
 80023ac:	681b      	ldr	r3, [r3, #0]
 80023ae:	f042 0220 	orr.w	r2, r2, #32
 80023b2:	60da      	str	r2, [r3, #12]
 80023b4:	e007      	b.n	80023c6 <HAL_CAN_GetRxMessage+0x206>
    }
    else /* Rx element is assigned to Rx FIFO 1 */
    {
      /* Release RX FIFO 1 */
      SET_BIT(hcan->Instance->RF1R, CAN_RF1R_RFOM1);
 80023b6:	68fb      	ldr	r3, [r7, #12]
 80023b8:	681b      	ldr	r3, [r3, #0]
 80023ba:	691a      	ldr	r2, [r3, #16]
 80023bc:	68fb      	ldr	r3, [r7, #12]
 80023be:	681b      	ldr	r3, [r3, #0]
 80023c0:	f042 0220 	orr.w	r2, r2, #32
 80023c4:	611a      	str	r2, [r3, #16]
    }

    /* Return function status */
    return HAL_OK;
 80023c6:	2300      	movs	r3, #0
 80023c8:	e006      	b.n	80023d8 <HAL_CAN_GetRxMessage+0x218>
  }
  else
  {
    /* Update error code */
    hcan->ErrorCode |= HAL_CAN_ERROR_NOT_INITIALIZED;
 80023ca:	68fb      	ldr	r3, [r7, #12]
 80023cc:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80023ce:	f443 2280 	orr.w	r2, r3, #262144	; 0x40000
 80023d2:	68fb      	ldr	r3, [r7, #12]
 80023d4:	625a      	str	r2, [r3, #36]	; 0x24

    return HAL_ERROR;
 80023d6:	2301      	movs	r3, #1
  }
}
 80023d8:	4618      	mov	r0, r3
 80023da:	371c      	adds	r7, #28
 80023dc:	46bd      	mov	sp, r7
 80023de:	f85d 7b04 	ldr.w	r7, [sp], #4
 80023e2:	4770      	bx	lr

080023e4 <HAL_CAN_ActivateNotification>:
  * @param  ActiveITs indicates which interrupts will be enabled.
  *         This parameter can be any combination of @arg CAN_Interrupts.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_CAN_ActivateNotification(CAN_HandleTypeDef *hcan, uint32_t ActiveITs)
{
 80023e4:	b480      	push	{r7}
 80023e6:	b085      	sub	sp, #20
 80023e8:	af00      	add	r7, sp, #0
 80023ea:	6078      	str	r0, [r7, #4]
 80023ec:	6039      	str	r1, [r7, #0]
  HAL_CAN_StateTypeDef state = hcan->State;
 80023ee:	687b      	ldr	r3, [r7, #4]
 80023f0:	f893 3020 	ldrb.w	r3, [r3, #32]
 80023f4:	73fb      	strb	r3, [r7, #15]

  /* Check function parameters */
  assert_param(IS_CAN_IT(ActiveITs));

  if ((state == HAL_CAN_STATE_READY) ||
 80023f6:	7bfb      	ldrb	r3, [r7, #15]
 80023f8:	2b01      	cmp	r3, #1
 80023fa:	d002      	beq.n	8002402 <HAL_CAN_ActivateNotification+0x1e>
 80023fc:	7bfb      	ldrb	r3, [r7, #15]
 80023fe:	2b02      	cmp	r3, #2
 8002400:	d109      	bne.n	8002416 <HAL_CAN_ActivateNotification+0x32>
      (state == HAL_CAN_STATE_LISTENING))
  {
    /* Enable the selected interrupts */
    __HAL_CAN_ENABLE_IT(hcan, ActiveITs);
 8002402:	687b      	ldr	r3, [r7, #4]
 8002404:	681b      	ldr	r3, [r3, #0]
 8002406:	6959      	ldr	r1, [r3, #20]
 8002408:	687b      	ldr	r3, [r7, #4]
 800240a:	681b      	ldr	r3, [r3, #0]
 800240c:	683a      	ldr	r2, [r7, #0]
 800240e:	430a      	orrs	r2, r1
 8002410:	615a      	str	r2, [r3, #20]

    /* Return function status */
    return HAL_OK;
 8002412:	2300      	movs	r3, #0
 8002414:	e006      	b.n	8002424 <HAL_CAN_ActivateNotification+0x40>
  }
  else
  {
    /* Update error code */
    hcan->ErrorCode |= HAL_CAN_ERROR_NOT_INITIALIZED;
 8002416:	687b      	ldr	r3, [r7, #4]
 8002418:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800241a:	f443 2280 	orr.w	r2, r3, #262144	; 0x40000
 800241e:	687b      	ldr	r3, [r7, #4]
 8002420:	625a      	str	r2, [r3, #36]	; 0x24

    return HAL_ERROR;
 8002422:	2301      	movs	r3, #1
  }
}
 8002424:	4618      	mov	r0, r3
 8002426:	3714      	adds	r7, #20
 8002428:	46bd      	mov	sp, r7
 800242a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800242e:	4770      	bx	lr

08002430 <HAL_CAN_IRQHandler>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
void HAL_CAN_IRQHandler(CAN_HandleTypeDef *hcan)
{
 8002430:	b580      	push	{r7, lr}
 8002432:	b08a      	sub	sp, #40	; 0x28
 8002434:	af00      	add	r7, sp, #0
 8002436:	6078      	str	r0, [r7, #4]
  uint32_t errorcode = HAL_CAN_ERROR_NONE;
 8002438:	2300      	movs	r3, #0
 800243a:	627b      	str	r3, [r7, #36]	; 0x24
  uint32_t interrupts = READ_REG(hcan->Instance->IER);
 800243c:	687b      	ldr	r3, [r7, #4]
 800243e:	681b      	ldr	r3, [r3, #0]
 8002440:	695b      	ldr	r3, [r3, #20]
 8002442:	623b      	str	r3, [r7, #32]
  uint32_t msrflags = READ_REG(hcan->Instance->MSR);
 8002444:	687b      	ldr	r3, [r7, #4]
 8002446:	681b      	ldr	r3, [r3, #0]
 8002448:	685b      	ldr	r3, [r3, #4]
 800244a:	61fb      	str	r3, [r7, #28]
  uint32_t tsrflags = READ_REG(hcan->Instance->TSR);
 800244c:	687b      	ldr	r3, [r7, #4]
 800244e:	681b      	ldr	r3, [r3, #0]
 8002450:	689b      	ldr	r3, [r3, #8]
 8002452:	61bb      	str	r3, [r7, #24]
  uint32_t rf0rflags = READ_REG(hcan->Instance->RF0R);
 8002454:	687b      	ldr	r3, [r7, #4]
 8002456:	681b      	ldr	r3, [r3, #0]
 8002458:	68db      	ldr	r3, [r3, #12]
 800245a:	617b      	str	r3, [r7, #20]
  uint32_t rf1rflags = READ_REG(hcan->Instance->RF1R);
 800245c:	687b      	ldr	r3, [r7, #4]
 800245e:	681b      	ldr	r3, [r3, #0]
 8002460:	691b      	ldr	r3, [r3, #16]
 8002462:	613b      	str	r3, [r7, #16]
  uint32_t esrflags = READ_REG(hcan->Instance->ESR);
 8002464:	687b      	ldr	r3, [r7, #4]
 8002466:	681b      	ldr	r3, [r3, #0]
 8002468:	699b      	ldr	r3, [r3, #24]
 800246a:	60fb      	str	r3, [r7, #12]

  /* Transmit Mailbox empty interrupt management *****************************/
  if ((interrupts & CAN_IT_TX_MAILBOX_EMPTY) != 0U)
 800246c:	6a3b      	ldr	r3, [r7, #32]
 800246e:	f003 0301 	and.w	r3, r3, #1
 8002472:	2b00      	cmp	r3, #0
 8002474:	d07c      	beq.n	8002570 <HAL_CAN_IRQHandler+0x140>
  {
    /* Transmit Mailbox 0 management *****************************************/
    if ((tsrflags & CAN_TSR_RQCP0) != 0U)
 8002476:	69bb      	ldr	r3, [r7, #24]
 8002478:	f003 0301 	and.w	r3, r3, #1
 800247c:	2b00      	cmp	r3, #0
 800247e:	d023      	beq.n	80024c8 <HAL_CAN_IRQHandler+0x98>
    {
      /* Clear the Transmission Complete flag (and TXOK0,ALST0,TERR0 bits) */
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_RQCP0);
 8002480:	687b      	ldr	r3, [r7, #4]
 8002482:	681b      	ldr	r3, [r3, #0]
 8002484:	2201      	movs	r2, #1
 8002486:	609a      	str	r2, [r3, #8]

      if ((tsrflags & CAN_TSR_TXOK0) != 0U)
 8002488:	69bb      	ldr	r3, [r7, #24]
 800248a:	f003 0302 	and.w	r3, r3, #2
 800248e:	2b00      	cmp	r3, #0
 8002490:	d003      	beq.n	800249a <HAL_CAN_IRQHandler+0x6a>
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
        /* Call registered callback*/
        hcan->TxMailbox0CompleteCallback(hcan);
#else
        /* Call weak (surcharged) callback */
        HAL_CAN_TxMailbox0CompleteCallback(hcan);
 8002492:	6878      	ldr	r0, [r7, #4]
 8002494:	f000 f983 	bl	800279e <HAL_CAN_TxMailbox0CompleteCallback>
 8002498:	e016      	b.n	80024c8 <HAL_CAN_IRQHandler+0x98>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
      }
      else
      {
        if ((tsrflags & CAN_TSR_ALST0) != 0U)
 800249a:	69bb      	ldr	r3, [r7, #24]
 800249c:	f003 0304 	and.w	r3, r3, #4
 80024a0:	2b00      	cmp	r3, #0
 80024a2:	d004      	beq.n	80024ae <HAL_CAN_IRQHandler+0x7e>
        {
          /* Update error code */
          errorcode |= HAL_CAN_ERROR_TX_ALST0;
 80024a4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80024a6:	f443 6300 	orr.w	r3, r3, #2048	; 0x800
 80024aa:	627b      	str	r3, [r7, #36]	; 0x24
 80024ac:	e00c      	b.n	80024c8 <HAL_CAN_IRQHandler+0x98>
        }
        else if ((tsrflags & CAN_TSR_TERR0) != 0U)
 80024ae:	69bb      	ldr	r3, [r7, #24]
 80024b0:	f003 0308 	and.w	r3, r3, #8
 80024b4:	2b00      	cmp	r3, #0
 80024b6:	d004      	beq.n	80024c2 <HAL_CAN_IRQHandler+0x92>
        {
          /* Update error code */
          errorcode |= HAL_CAN_ERROR_TX_TERR0;
 80024b8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80024ba:	f443 5380 	orr.w	r3, r3, #4096	; 0x1000
 80024be:	627b      	str	r3, [r7, #36]	; 0x24
 80024c0:	e002      	b.n	80024c8 <HAL_CAN_IRQHandler+0x98>
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
          /* Call registered callback*/
          hcan->TxMailbox0AbortCallback(hcan);
#else
          /* Call weak (surcharged) callback */
          HAL_CAN_TxMailbox0AbortCallback(hcan);
 80024c2:	6878      	ldr	r0, [r7, #4]
 80024c4:	f000 f989 	bl	80027da <HAL_CAN_TxMailbox0AbortCallback>
        }
      }
    }

    /* Transmit Mailbox 1 management *****************************************/
    if ((tsrflags & CAN_TSR_RQCP1) != 0U)
 80024c8:	69bb      	ldr	r3, [r7, #24]
 80024ca:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80024ce:	2b00      	cmp	r3, #0
 80024d0:	d024      	beq.n	800251c <HAL_CAN_IRQHandler+0xec>
    {
      /* Clear the Transmission Complete flag (and TXOK1,ALST1,TERR1 bits) */
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_RQCP1);
 80024d2:	687b      	ldr	r3, [r7, #4]
 80024d4:	681b      	ldr	r3, [r3, #0]
 80024d6:	f44f 7280 	mov.w	r2, #256	; 0x100
 80024da:	609a      	str	r2, [r3, #8]

      if ((tsrflags & CAN_TSR_TXOK1) != 0U)
 80024dc:	69bb      	ldr	r3, [r7, #24]
 80024de:	f403 7300 	and.w	r3, r3, #512	; 0x200
 80024e2:	2b00      	cmp	r3, #0
 80024e4:	d003      	beq.n	80024ee <HAL_CAN_IRQHandler+0xbe>
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
        /* Call registered callback*/
        hcan->TxMailbox1CompleteCallback(hcan);
#else
        /* Call weak (surcharged) callback */
        HAL_CAN_TxMailbox1CompleteCallback(hcan);
 80024e6:	6878      	ldr	r0, [r7, #4]
 80024e8:	f000 f963 	bl	80027b2 <HAL_CAN_TxMailbox1CompleteCallback>
 80024ec:	e016      	b.n	800251c <HAL_CAN_IRQHandler+0xec>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
      }
      else
      {
        if ((tsrflags & CAN_TSR_ALST1) != 0U)
 80024ee:	69bb      	ldr	r3, [r7, #24]
 80024f0:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80024f4:	2b00      	cmp	r3, #0
 80024f6:	d004      	beq.n	8002502 <HAL_CAN_IRQHandler+0xd2>
        {
          /* Update error code */
          errorcode |= HAL_CAN_ERROR_TX_ALST1;
 80024f8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80024fa:	f443 5300 	orr.w	r3, r3, #8192	; 0x2000
 80024fe:	627b      	str	r3, [r7, #36]	; 0x24
 8002500:	e00c      	b.n	800251c <HAL_CAN_IRQHandler+0xec>
        }
        else if ((tsrflags & CAN_TSR_TERR1) != 0U)
 8002502:	69bb      	ldr	r3, [r7, #24]
 8002504:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8002508:	2b00      	cmp	r3, #0
 800250a:	d004      	beq.n	8002516 <HAL_CAN_IRQHandler+0xe6>
        {
          /* Update error code */
          errorcode |= HAL_CAN_ERROR_TX_TERR1;
 800250c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800250e:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8002512:	627b      	str	r3, [r7, #36]	; 0x24
 8002514:	e002      	b.n	800251c <HAL_CAN_IRQHandler+0xec>
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
          /* Call registered callback*/
          hcan->TxMailbox1AbortCallback(hcan);
#else
          /* Call weak (surcharged) callback */
          HAL_CAN_TxMailbox1AbortCallback(hcan);
 8002516:	6878      	ldr	r0, [r7, #4]
 8002518:	f000 f969 	bl	80027ee <HAL_CAN_TxMailbox1AbortCallback>
        }
      }
    }

    /* Transmit Mailbox 2 management *****************************************/
    if ((tsrflags & CAN_TSR_RQCP2) != 0U)
 800251c:	69bb      	ldr	r3, [r7, #24]
 800251e:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8002522:	2b00      	cmp	r3, #0
 8002524:	d024      	beq.n	8002570 <HAL_CAN_IRQHandler+0x140>
    {
      /* Clear the Transmission Complete flag (and TXOK2,ALST2,TERR2 bits) */
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_RQCP2);
 8002526:	687b      	ldr	r3, [r7, #4]
 8002528:	681b      	ldr	r3, [r3, #0]
 800252a:	f44f 3280 	mov.w	r2, #65536	; 0x10000
 800252e:	609a      	str	r2, [r3, #8]

      if ((tsrflags & CAN_TSR_TXOK2) != 0U)
 8002530:	69bb      	ldr	r3, [r7, #24]
 8002532:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002536:	2b00      	cmp	r3, #0
 8002538:	d003      	beq.n	8002542 <HAL_CAN_IRQHandler+0x112>
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
        /* Call registered callback*/
        hcan->TxMailbox2CompleteCallback(hcan);
#else
        /* Call weak (surcharged) callback */
        HAL_CAN_TxMailbox2CompleteCallback(hcan);
 800253a:	6878      	ldr	r0, [r7, #4]
 800253c:	f000 f943 	bl	80027c6 <HAL_CAN_TxMailbox2CompleteCallback>
 8002540:	e016      	b.n	8002570 <HAL_CAN_IRQHandler+0x140>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
      }
      else
      {
        if ((tsrflags & CAN_TSR_ALST2) != 0U)
 8002542:	69bb      	ldr	r3, [r7, #24]
 8002544:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8002548:	2b00      	cmp	r3, #0
 800254a:	d004      	beq.n	8002556 <HAL_CAN_IRQHandler+0x126>
        {
          /* Update error code */
          errorcode |= HAL_CAN_ERROR_TX_ALST2;
 800254c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800254e:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8002552:	627b      	str	r3, [r7, #36]	; 0x24
 8002554:	e00c      	b.n	8002570 <HAL_CAN_IRQHandler+0x140>
        }
        else if ((tsrflags & CAN_TSR_TERR2) != 0U)
 8002556:	69bb      	ldr	r3, [r7, #24]
 8002558:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 800255c:	2b00      	cmp	r3, #0
 800255e:	d004      	beq.n	800256a <HAL_CAN_IRQHandler+0x13a>
        {
          /* Update error code */
          errorcode |= HAL_CAN_ERROR_TX_TERR2;
 8002560:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002562:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8002566:	627b      	str	r3, [r7, #36]	; 0x24
 8002568:	e002      	b.n	8002570 <HAL_CAN_IRQHandler+0x140>
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
          /* Call registered callback*/
          hcan->TxMailbox2AbortCallback(hcan);
#else
          /* Call weak (surcharged) callback */
          HAL_CAN_TxMailbox2AbortCallback(hcan);
 800256a:	6878      	ldr	r0, [r7, #4]
 800256c:	f000 f949 	bl	8002802 <HAL_CAN_TxMailbox2AbortCallback>
      }
    }
  }

  /* Receive FIFO 0 overrun interrupt management *****************************/
  if ((interrupts & CAN_IT_RX_FIFO0_OVERRUN) != 0U)
 8002570:	6a3b      	ldr	r3, [r7, #32]
 8002572:	f003 0308 	and.w	r3, r3, #8
 8002576:	2b00      	cmp	r3, #0
 8002578:	d00c      	beq.n	8002594 <HAL_CAN_IRQHandler+0x164>
  {
    if ((rf0rflags & CAN_RF0R_FOVR0) != 0U)
 800257a:	697b      	ldr	r3, [r7, #20]
 800257c:	f003 0310 	and.w	r3, r3, #16
 8002580:	2b00      	cmp	r3, #0
 8002582:	d007      	beq.n	8002594 <HAL_CAN_IRQHandler+0x164>
    {
      /* Set CAN error code to Rx Fifo 0 overrun error */
      errorcode |= HAL_CAN_ERROR_RX_FOV0;
 8002584:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002586:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 800258a:	627b      	str	r3, [r7, #36]	; 0x24

      /* Clear FIFO0 Overrun Flag */
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_FOV0);
 800258c:	687b      	ldr	r3, [r7, #4]
 800258e:	681b      	ldr	r3, [r3, #0]
 8002590:	2210      	movs	r2, #16
 8002592:	60da      	str	r2, [r3, #12]
    }
  }

  /* Receive FIFO 0 full interrupt management ********************************/
  if ((interrupts & CAN_IT_RX_FIFO0_FULL) != 0U)
 8002594:	6a3b      	ldr	r3, [r7, #32]
 8002596:	f003 0304 	and.w	r3, r3, #4
 800259a:	2b00      	cmp	r3, #0
 800259c:	d00b      	beq.n	80025b6 <HAL_CAN_IRQHandler+0x186>
  {
    if ((rf0rflags & CAN_RF0R_FULL0) != 0U)
 800259e:	697b      	ldr	r3, [r7, #20]
 80025a0:	f003 0308 	and.w	r3, r3, #8
 80025a4:	2b00      	cmp	r3, #0
 80025a6:	d006      	beq.n	80025b6 <HAL_CAN_IRQHandler+0x186>
    {
      /* Clear FIFO 0 full Flag */
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_FF0);
 80025a8:	687b      	ldr	r3, [r7, #4]
 80025aa:	681b      	ldr	r3, [r3, #0]
 80025ac:	2208      	movs	r2, #8
 80025ae:	60da      	str	r2, [r3, #12]
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
      /* Call registered callback*/
      hcan->RxFifo0FullCallback(hcan);
#else
      /* Call weak (surcharged) callback */
      HAL_CAN_RxFifo0FullCallback(hcan);
 80025b0:	6878      	ldr	r0, [r7, #4]
 80025b2:	f000 f930 	bl	8002816 <HAL_CAN_RxFifo0FullCallback>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
    }
  }

  /* Receive FIFO 0 message pending interrupt management *********************/
  if ((interrupts & CAN_IT_RX_FIFO0_MSG_PENDING) != 0U)
 80025b6:	6a3b      	ldr	r3, [r7, #32]
 80025b8:	f003 0302 	and.w	r3, r3, #2
 80025bc:	2b00      	cmp	r3, #0
 80025be:	d009      	beq.n	80025d4 <HAL_CAN_IRQHandler+0x1a4>
  {
    /* Check if message is still pending */
    if ((hcan->Instance->RF0R & CAN_RF0R_FMP0) != 0U)
 80025c0:	687b      	ldr	r3, [r7, #4]
 80025c2:	681b      	ldr	r3, [r3, #0]
 80025c4:	68db      	ldr	r3, [r3, #12]
 80025c6:	f003 0303 	and.w	r3, r3, #3
 80025ca:	2b00      	cmp	r3, #0
 80025cc:	d002      	beq.n	80025d4 <HAL_CAN_IRQHandler+0x1a4>
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
      /* Call registered callback*/
      hcan->RxFifo0MsgPendingCallback(hcan);
#else
      /* Call weak (surcharged) callback */
      HAL_CAN_RxFifo0MsgPendingCallback(hcan);
 80025ce:	6878      	ldr	r0, [r7, #4]
 80025d0:	f7fe fdd2 	bl	8001178 <HAL_CAN_RxFifo0MsgPendingCallback>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
    }
  }

  /* Receive FIFO 1 overrun interrupt management *****************************/
  if ((interrupts & CAN_IT_RX_FIFO1_OVERRUN) != 0U)
 80025d4:	6a3b      	ldr	r3, [r7, #32]
 80025d6:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80025da:	2b00      	cmp	r3, #0
 80025dc:	d00c      	beq.n	80025f8 <HAL_CAN_IRQHandler+0x1c8>
  {
    if ((rf1rflags & CAN_RF1R_FOVR1) != 0U)
 80025de:	693b      	ldr	r3, [r7, #16]
 80025e0:	f003 0310 	and.w	r3, r3, #16
 80025e4:	2b00      	cmp	r3, #0
 80025e6:	d007      	beq.n	80025f8 <HAL_CAN_IRQHandler+0x1c8>
    {
      /* Set CAN error code to Rx Fifo 1 overrun error */
      errorcode |= HAL_CAN_ERROR_RX_FOV1;
 80025e8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80025ea:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 80025ee:	627b      	str	r3, [r7, #36]	; 0x24

      /* Clear FIFO1 Overrun Flag */
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_FOV1);
 80025f0:	687b      	ldr	r3, [r7, #4]
 80025f2:	681b      	ldr	r3, [r3, #0]
 80025f4:	2210      	movs	r2, #16
 80025f6:	611a      	str	r2, [r3, #16]
    }
  }

  /* Receive FIFO 1 full interrupt management ********************************/
  if ((interrupts & CAN_IT_RX_FIFO1_FULL) != 0U)
 80025f8:	6a3b      	ldr	r3, [r7, #32]
 80025fa:	f003 0320 	and.w	r3, r3, #32
 80025fe:	2b00      	cmp	r3, #0
 8002600:	d00b      	beq.n	800261a <HAL_CAN_IRQHandler+0x1ea>
  {
    if ((rf1rflags & CAN_RF1R_FULL1) != 0U)
 8002602:	693b      	ldr	r3, [r7, #16]
 8002604:	f003 0308 	and.w	r3, r3, #8
 8002608:	2b00      	cmp	r3, #0
 800260a:	d006      	beq.n	800261a <HAL_CAN_IRQHandler+0x1ea>
    {
      /* Clear FIFO 1 full Flag */
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_FF1);
 800260c:	687b      	ldr	r3, [r7, #4]
 800260e:	681b      	ldr	r3, [r3, #0]
 8002610:	2208      	movs	r2, #8
 8002612:	611a      	str	r2, [r3, #16]
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
      /* Call registered callback*/
      hcan->RxFifo1FullCallback(hcan);
#else
      /* Call weak (surcharged) callback */
      HAL_CAN_RxFifo1FullCallback(hcan);
 8002614:	6878      	ldr	r0, [r7, #4]
 8002616:	f000 f908 	bl	800282a <HAL_CAN_RxFifo1FullCallback>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
    }
  }

  /* Receive FIFO 1 message pending interrupt management *********************/
  if ((interrupts & CAN_IT_RX_FIFO1_MSG_PENDING) != 0U)
 800261a:	6a3b      	ldr	r3, [r7, #32]
 800261c:	f003 0310 	and.w	r3, r3, #16
 8002620:	2b00      	cmp	r3, #0
 8002622:	d009      	beq.n	8002638 <HAL_CAN_IRQHandler+0x208>
  {
    /* Check if message is still pending */
    if ((hcan->Instance->RF1R & CAN_RF1R_FMP1) != 0U)
 8002624:	687b      	ldr	r3, [r7, #4]
 8002626:	681b      	ldr	r3, [r3, #0]
 8002628:	691b      	ldr	r3, [r3, #16]
 800262a:	f003 0303 	and.w	r3, r3, #3
 800262e:	2b00      	cmp	r3, #0
 8002630:	d002      	beq.n	8002638 <HAL_CAN_IRQHandler+0x208>
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
      /* Call registered callback*/
      hcan->RxFifo1MsgPendingCallback(hcan);
#else
      /* Call weak (surcharged) callback */
      HAL_CAN_RxFifo1MsgPendingCallback(hcan);
 8002632:	6878      	ldr	r0, [r7, #4]
 8002634:	f7fe fdac 	bl	8001190 <HAL_CAN_RxFifo1MsgPendingCallback>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
    }
  }

  /* Sleep interrupt management *********************************************/
  if ((interrupts & CAN_IT_SLEEP_ACK) != 0U)
 8002638:	6a3b      	ldr	r3, [r7, #32]
 800263a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800263e:	2b00      	cmp	r3, #0
 8002640:	d00b      	beq.n	800265a <HAL_CAN_IRQHandler+0x22a>
  {
    if ((msrflags & CAN_MSR_SLAKI) != 0U)
 8002642:	69fb      	ldr	r3, [r7, #28]
 8002644:	f003 0310 	and.w	r3, r3, #16
 8002648:	2b00      	cmp	r3, #0
 800264a:	d006      	beq.n	800265a <HAL_CAN_IRQHandler+0x22a>
    {
      /* Clear Sleep interrupt Flag */
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_SLAKI);
 800264c:	687b      	ldr	r3, [r7, #4]
 800264e:	681b      	ldr	r3, [r3, #0]
 8002650:	2210      	movs	r2, #16
 8002652:	605a      	str	r2, [r3, #4]
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
      /* Call registered callback*/
      hcan->SleepCallback(hcan);
#else
      /* Call weak (surcharged) callback */
      HAL_CAN_SleepCallback(hcan);
 8002654:	6878      	ldr	r0, [r7, #4]
 8002656:	f000 f8f2 	bl	800283e <HAL_CAN_SleepCallback>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
    }
  }

  /* WakeUp interrupt management *********************************************/
  if ((interrupts & CAN_IT_WAKEUP) != 0U)
 800265a:	6a3b      	ldr	r3, [r7, #32]
 800265c:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8002660:	2b00      	cmp	r3, #0
 8002662:	d00b      	beq.n	800267c <HAL_CAN_IRQHandler+0x24c>
  {
    if ((msrflags & CAN_MSR_WKUI) != 0U)
 8002664:	69fb      	ldr	r3, [r7, #28]
 8002666:	f003 0308 	and.w	r3, r3, #8
 800266a:	2b00      	cmp	r3, #0
 800266c:	d006      	beq.n	800267c <HAL_CAN_IRQHandler+0x24c>
    {
      /* Clear WakeUp Flag */
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_WKU);
 800266e:	687b      	ldr	r3, [r7, #4]
 8002670:	681b      	ldr	r3, [r3, #0]
 8002672:	2208      	movs	r2, #8
 8002674:	605a      	str	r2, [r3, #4]
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
      /* Call registered callback*/
      hcan->WakeUpFromRxMsgCallback(hcan);
#else
      /* Call weak (surcharged) callback */
      HAL_CAN_WakeUpFromRxMsgCallback(hcan);
 8002676:	6878      	ldr	r0, [r7, #4]
 8002678:	f000 f8eb 	bl	8002852 <HAL_CAN_WakeUpFromRxMsgCallback>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
    }
  }

  /* Error interrupts management *********************************************/
  if ((interrupts & CAN_IT_ERROR) != 0U)
 800267c:	6a3b      	ldr	r3, [r7, #32]
 800267e:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8002682:	2b00      	cmp	r3, #0
 8002684:	d07b      	beq.n	800277e <HAL_CAN_IRQHandler+0x34e>
  {
    if ((msrflags & CAN_MSR_ERRI) != 0U)
 8002686:	69fb      	ldr	r3, [r7, #28]
 8002688:	f003 0304 	and.w	r3, r3, #4
 800268c:	2b00      	cmp	r3, #0
 800268e:	d072      	beq.n	8002776 <HAL_CAN_IRQHandler+0x346>
    {
      /* Check Error Warning Flag */
      if (((interrupts & CAN_IT_ERROR_WARNING) != 0U) &&
 8002690:	6a3b      	ldr	r3, [r7, #32]
 8002692:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002696:	2b00      	cmp	r3, #0
 8002698:	d008      	beq.n	80026ac <HAL_CAN_IRQHandler+0x27c>
          ((esrflags & CAN_ESR_EWGF) != 0U))
 800269a:	68fb      	ldr	r3, [r7, #12]
 800269c:	f003 0301 	and.w	r3, r3, #1
      if (((interrupts & CAN_IT_ERROR_WARNING) != 0U) &&
 80026a0:	2b00      	cmp	r3, #0
 80026a2:	d003      	beq.n	80026ac <HAL_CAN_IRQHandler+0x27c>
      {
        /* Set CAN error code to Error Warning */
        errorcode |= HAL_CAN_ERROR_EWG;
 80026a4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80026a6:	f043 0301 	orr.w	r3, r3, #1
 80026aa:	627b      	str	r3, [r7, #36]	; 0x24

        /* No need for clear of Error Warning Flag as read-only */
      }

      /* Check Error Passive Flag */
      if (((interrupts & CAN_IT_ERROR_PASSIVE) != 0U) &&
 80026ac:	6a3b      	ldr	r3, [r7, #32]
 80026ae:	f403 7300 	and.w	r3, r3, #512	; 0x200
 80026b2:	2b00      	cmp	r3, #0
 80026b4:	d008      	beq.n	80026c8 <HAL_CAN_IRQHandler+0x298>
          ((esrflags & CAN_ESR_EPVF) != 0U))
 80026b6:	68fb      	ldr	r3, [r7, #12]
 80026b8:	f003 0302 	and.w	r3, r3, #2
      if (((interrupts & CAN_IT_ERROR_PASSIVE) != 0U) &&
 80026bc:	2b00      	cmp	r3, #0
 80026be:	d003      	beq.n	80026c8 <HAL_CAN_IRQHandler+0x298>
      {
        /* Set CAN error code to Error Passive */
        errorcode |= HAL_CAN_ERROR_EPV;
 80026c0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80026c2:	f043 0302 	orr.w	r3, r3, #2
 80026c6:	627b      	str	r3, [r7, #36]	; 0x24

        /* No need for clear of Error Passive Flag as read-only */
      }

      /* Check Bus-off Flag */
      if (((interrupts & CAN_IT_BUSOFF) != 0U) &&
 80026c8:	6a3b      	ldr	r3, [r7, #32]
 80026ca:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80026ce:	2b00      	cmp	r3, #0
 80026d0:	d008      	beq.n	80026e4 <HAL_CAN_IRQHandler+0x2b4>
          ((esrflags & CAN_ESR_BOFF) != 0U))
 80026d2:	68fb      	ldr	r3, [r7, #12]
 80026d4:	f003 0304 	and.w	r3, r3, #4
      if (((interrupts & CAN_IT_BUSOFF) != 0U) &&
 80026d8:	2b00      	cmp	r3, #0
 80026da:	d003      	beq.n	80026e4 <HAL_CAN_IRQHandler+0x2b4>
      {
        /* Set CAN error code to Bus-Off */
        errorcode |= HAL_CAN_ERROR_BOF;
 80026dc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80026de:	f043 0304 	orr.w	r3, r3, #4
 80026e2:	627b      	str	r3, [r7, #36]	; 0x24

        /* No need for clear of Error Bus-Off as read-only */
      }

      /* Check Last Error Code Flag */
      if (((interrupts & CAN_IT_LAST_ERROR_CODE) != 0U) &&
 80026e4:	6a3b      	ldr	r3, [r7, #32]
 80026e6:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 80026ea:	2b00      	cmp	r3, #0
 80026ec:	d043      	beq.n	8002776 <HAL_CAN_IRQHandler+0x346>
          ((esrflags & CAN_ESR_LEC) != 0U))
 80026ee:	68fb      	ldr	r3, [r7, #12]
 80026f0:	f003 0370 	and.w	r3, r3, #112	; 0x70
      if (((interrupts & CAN_IT_LAST_ERROR_CODE) != 0U) &&
 80026f4:	2b00      	cmp	r3, #0
 80026f6:	d03e      	beq.n	8002776 <HAL_CAN_IRQHandler+0x346>
      {
        switch (esrflags & CAN_ESR_LEC)
 80026f8:	68fb      	ldr	r3, [r7, #12]
 80026fa:	f003 0370 	and.w	r3, r3, #112	; 0x70
 80026fe:	2b60      	cmp	r3, #96	; 0x60
 8002700:	d02b      	beq.n	800275a <HAL_CAN_IRQHandler+0x32a>
 8002702:	2b60      	cmp	r3, #96	; 0x60
 8002704:	d82e      	bhi.n	8002764 <HAL_CAN_IRQHandler+0x334>
 8002706:	2b50      	cmp	r3, #80	; 0x50
 8002708:	d022      	beq.n	8002750 <HAL_CAN_IRQHandler+0x320>
 800270a:	2b50      	cmp	r3, #80	; 0x50
 800270c:	d82a      	bhi.n	8002764 <HAL_CAN_IRQHandler+0x334>
 800270e:	2b40      	cmp	r3, #64	; 0x40
 8002710:	d019      	beq.n	8002746 <HAL_CAN_IRQHandler+0x316>
 8002712:	2b40      	cmp	r3, #64	; 0x40
 8002714:	d826      	bhi.n	8002764 <HAL_CAN_IRQHandler+0x334>
 8002716:	2b30      	cmp	r3, #48	; 0x30
 8002718:	d010      	beq.n	800273c <HAL_CAN_IRQHandler+0x30c>
 800271a:	2b30      	cmp	r3, #48	; 0x30
 800271c:	d822      	bhi.n	8002764 <HAL_CAN_IRQHandler+0x334>
 800271e:	2b10      	cmp	r3, #16
 8002720:	d002      	beq.n	8002728 <HAL_CAN_IRQHandler+0x2f8>
 8002722:	2b20      	cmp	r3, #32
 8002724:	d005      	beq.n	8002732 <HAL_CAN_IRQHandler+0x302>
          case (CAN_ESR_LEC_2 | CAN_ESR_LEC_1):
            /* Set CAN error code to CRC error */
            errorcode |= HAL_CAN_ERROR_CRC;
            break;
          default:
            break;
 8002726:	e01d      	b.n	8002764 <HAL_CAN_IRQHandler+0x334>
            errorcode |= HAL_CAN_ERROR_STF;
 8002728:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800272a:	f043 0308 	orr.w	r3, r3, #8
 800272e:	627b      	str	r3, [r7, #36]	; 0x24
            break;
 8002730:	e019      	b.n	8002766 <HAL_CAN_IRQHandler+0x336>
            errorcode |= HAL_CAN_ERROR_FOR;
 8002732:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002734:	f043 0310 	orr.w	r3, r3, #16
 8002738:	627b      	str	r3, [r7, #36]	; 0x24
            break;
 800273a:	e014      	b.n	8002766 <HAL_CAN_IRQHandler+0x336>
            errorcode |= HAL_CAN_ERROR_ACK;
 800273c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800273e:	f043 0320 	orr.w	r3, r3, #32
 8002742:	627b      	str	r3, [r7, #36]	; 0x24
            break;
 8002744:	e00f      	b.n	8002766 <HAL_CAN_IRQHandler+0x336>
            errorcode |= HAL_CAN_ERROR_BR;
 8002746:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002748:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800274c:	627b      	str	r3, [r7, #36]	; 0x24
            break;
 800274e:	e00a      	b.n	8002766 <HAL_CAN_IRQHandler+0x336>
            errorcode |= HAL_CAN_ERROR_BD;
 8002750:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002752:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8002756:	627b      	str	r3, [r7, #36]	; 0x24
            break;
 8002758:	e005      	b.n	8002766 <HAL_CAN_IRQHandler+0x336>
            errorcode |= HAL_CAN_ERROR_CRC;
 800275a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800275c:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8002760:	627b      	str	r3, [r7, #36]	; 0x24
            break;
 8002762:	e000      	b.n	8002766 <HAL_CAN_IRQHandler+0x336>
            break;
 8002764:	bf00      	nop
        }

        /* Clear Last error code Flag */
        CLEAR_BIT(hcan->Instance->ESR, CAN_ESR_LEC);
 8002766:	687b      	ldr	r3, [r7, #4]
 8002768:	681b      	ldr	r3, [r3, #0]
 800276a:	699a      	ldr	r2, [r3, #24]
 800276c:	687b      	ldr	r3, [r7, #4]
 800276e:	681b      	ldr	r3, [r3, #0]
 8002770:	f022 0270 	bic.w	r2, r2, #112	; 0x70
 8002774:	619a      	str	r2, [r3, #24]
      }
    }

    /* Clear ERRI Flag */
    __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_ERRI);
 8002776:	687b      	ldr	r3, [r7, #4]
 8002778:	681b      	ldr	r3, [r3, #0]
 800277a:	2204      	movs	r2, #4
 800277c:	605a      	str	r2, [r3, #4]
  }

  /* Call the Error call Back in case of Errors */
  if (errorcode != HAL_CAN_ERROR_NONE)
 800277e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002780:	2b00      	cmp	r3, #0
 8002782:	d008      	beq.n	8002796 <HAL_CAN_IRQHandler+0x366>
  {
    /* Update error code in handle */
    hcan->ErrorCode |= errorcode;
 8002784:	687b      	ldr	r3, [r7, #4]
 8002786:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8002788:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800278a:	431a      	orrs	r2, r3
 800278c:	687b      	ldr	r3, [r7, #4]
 800278e:	625a      	str	r2, [r3, #36]	; 0x24
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
    /* Call registered callback*/
    hcan->ErrorCallback(hcan);
#else
    /* Call weak (surcharged) callback */
    HAL_CAN_ErrorCallback(hcan);
 8002790:	6878      	ldr	r0, [r7, #4]
 8002792:	f000 f868 	bl	8002866 <HAL_CAN_ErrorCallback>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
  }
}
 8002796:	bf00      	nop
 8002798:	3728      	adds	r7, #40	; 0x28
 800279a:	46bd      	mov	sp, r7
 800279c:	bd80      	pop	{r7, pc}

0800279e <HAL_CAN_TxMailbox0CompleteCallback>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_TxMailbox0CompleteCallback(CAN_HandleTypeDef *hcan)
{
 800279e:	b480      	push	{r7}
 80027a0:	b083      	sub	sp, #12
 80027a2:	af00      	add	r7, sp, #0
 80027a4:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_TxMailbox0CompleteCallback could be implemented in the
            user file
   */
}
 80027a6:	bf00      	nop
 80027a8:	370c      	adds	r7, #12
 80027aa:	46bd      	mov	sp, r7
 80027ac:	f85d 7b04 	ldr.w	r7, [sp], #4
 80027b0:	4770      	bx	lr

080027b2 <HAL_CAN_TxMailbox1CompleteCallback>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_TxMailbox1CompleteCallback(CAN_HandleTypeDef *hcan)
{
 80027b2:	b480      	push	{r7}
 80027b4:	b083      	sub	sp, #12
 80027b6:	af00      	add	r7, sp, #0
 80027b8:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_TxMailbox1CompleteCallback could be implemented in the
            user file
   */
}
 80027ba:	bf00      	nop
 80027bc:	370c      	adds	r7, #12
 80027be:	46bd      	mov	sp, r7
 80027c0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80027c4:	4770      	bx	lr

080027c6 <HAL_CAN_TxMailbox2CompleteCallback>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_TxMailbox2CompleteCallback(CAN_HandleTypeDef *hcan)
{
 80027c6:	b480      	push	{r7}
 80027c8:	b083      	sub	sp, #12
 80027ca:	af00      	add	r7, sp, #0
 80027cc:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_TxMailbox2CompleteCallback could be implemented in the
            user file
   */
}
 80027ce:	bf00      	nop
 80027d0:	370c      	adds	r7, #12
 80027d2:	46bd      	mov	sp, r7
 80027d4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80027d8:	4770      	bx	lr

080027da <HAL_CAN_TxMailbox0AbortCallback>:
  * @param  hcan pointer to an CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_TxMailbox0AbortCallback(CAN_HandleTypeDef *hcan)
{
 80027da:	b480      	push	{r7}
 80027dc:	b083      	sub	sp, #12
 80027de:	af00      	add	r7, sp, #0
 80027e0:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_TxMailbox0AbortCallback could be implemented in the
            user file
   */
}
 80027e2:	bf00      	nop
 80027e4:	370c      	adds	r7, #12
 80027e6:	46bd      	mov	sp, r7
 80027e8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80027ec:	4770      	bx	lr

080027ee <HAL_CAN_TxMailbox1AbortCallback>:
  * @param  hcan pointer to an CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_TxMailbox1AbortCallback(CAN_HandleTypeDef *hcan)
{
 80027ee:	b480      	push	{r7}
 80027f0:	b083      	sub	sp, #12
 80027f2:	af00      	add	r7, sp, #0
 80027f4:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_TxMailbox1AbortCallback could be implemented in the
            user file
   */
}
 80027f6:	bf00      	nop
 80027f8:	370c      	adds	r7, #12
 80027fa:	46bd      	mov	sp, r7
 80027fc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002800:	4770      	bx	lr

08002802 <HAL_CAN_TxMailbox2AbortCallback>:
  * @param  hcan pointer to an CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_TxMailbox2AbortCallback(CAN_HandleTypeDef *hcan)
{
 8002802:	b480      	push	{r7}
 8002804:	b083      	sub	sp, #12
 8002806:	af00      	add	r7, sp, #0
 8002808:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_TxMailbox2AbortCallback could be implemented in the
            user file
   */
}
 800280a:	bf00      	nop
 800280c:	370c      	adds	r7, #12
 800280e:	46bd      	mov	sp, r7
 8002810:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002814:	4770      	bx	lr

08002816 <HAL_CAN_RxFifo0FullCallback>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_RxFifo0FullCallback(CAN_HandleTypeDef *hcan)
{
 8002816:	b480      	push	{r7}
 8002818:	b083      	sub	sp, #12
 800281a:	af00      	add	r7, sp, #0
 800281c:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_RxFifo0FullCallback could be implemented in the user
            file
   */
}
 800281e:	bf00      	nop
 8002820:	370c      	adds	r7, #12
 8002822:	46bd      	mov	sp, r7
 8002824:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002828:	4770      	bx	lr

0800282a <HAL_CAN_RxFifo1FullCallback>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_RxFifo1FullCallback(CAN_HandleTypeDef *hcan)
{
 800282a:	b480      	push	{r7}
 800282c:	b083      	sub	sp, #12
 800282e:	af00      	add	r7, sp, #0
 8002830:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_RxFifo1FullCallback could be implemented in the user
            file
   */
}
 8002832:	bf00      	nop
 8002834:	370c      	adds	r7, #12
 8002836:	46bd      	mov	sp, r7
 8002838:	f85d 7b04 	ldr.w	r7, [sp], #4
 800283c:	4770      	bx	lr

0800283e <HAL_CAN_SleepCallback>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_SleepCallback(CAN_HandleTypeDef *hcan)
{
 800283e:	b480      	push	{r7}
 8002840:	b083      	sub	sp, #12
 8002842:	af00      	add	r7, sp, #0
 8002844:	6078      	str	r0, [r7, #4]
  UNUSED(hcan);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_SleepCallback could be implemented in the user file
   */
}
 8002846:	bf00      	nop
 8002848:	370c      	adds	r7, #12
 800284a:	46bd      	mov	sp, r7
 800284c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002850:	4770      	bx	lr

08002852 <HAL_CAN_WakeUpFromRxMsgCallback>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_WakeUpFromRxMsgCallback(CAN_HandleTypeDef *hcan)
{
 8002852:	b480      	push	{r7}
 8002854:	b083      	sub	sp, #12
 8002856:	af00      	add	r7, sp, #0
 8002858:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_WakeUpFromRxMsgCallback could be implemented in the
            user file
   */
}
 800285a:	bf00      	nop
 800285c:	370c      	adds	r7, #12
 800285e:	46bd      	mov	sp, r7
 8002860:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002864:	4770      	bx	lr

08002866 <HAL_CAN_ErrorCallback>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_ErrorCallback(CAN_HandleTypeDef *hcan)
{
 8002866:	b480      	push	{r7}
 8002868:	b083      	sub	sp, #12
 800286a:	af00      	add	r7, sp, #0
 800286c:	6078      	str	r0, [r7, #4]
  UNUSED(hcan);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_ErrorCallback could be implemented in the user file
   */
}
 800286e:	bf00      	nop
 8002870:	370c      	adds	r7, #12
 8002872:	46bd      	mov	sp, r7
 8002874:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002878:	4770      	bx	lr
	...

0800287c <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 800287c:	b480      	push	{r7}
 800287e:	b085      	sub	sp, #20
 8002880:	af00      	add	r7, sp, #0
 8002882:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8002884:	687b      	ldr	r3, [r7, #4]
 8002886:	f003 0307 	and.w	r3, r3, #7
 800288a:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 800288c:	4b0b      	ldr	r3, [pc, #44]	; (80028bc <__NVIC_SetPriorityGrouping+0x40>)
 800288e:	68db      	ldr	r3, [r3, #12]
 8002890:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8002892:	68ba      	ldr	r2, [r7, #8]
 8002894:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8002898:	4013      	ands	r3, r2
 800289a:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 800289c:	68fb      	ldr	r3, [r7, #12]
 800289e:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 80028a0:	68bb      	ldr	r3, [r7, #8]
 80028a2:	431a      	orrs	r2, r3
  reg_value  =  (reg_value                                   |
 80028a4:	4b06      	ldr	r3, [pc, #24]	; (80028c0 <__NVIC_SetPriorityGrouping+0x44>)
 80028a6:	4313      	orrs	r3, r2
 80028a8:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 80028aa:	4a04      	ldr	r2, [pc, #16]	; (80028bc <__NVIC_SetPriorityGrouping+0x40>)
 80028ac:	68bb      	ldr	r3, [r7, #8]
 80028ae:	60d3      	str	r3, [r2, #12]
}
 80028b0:	bf00      	nop
 80028b2:	3714      	adds	r7, #20
 80028b4:	46bd      	mov	sp, r7
 80028b6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80028ba:	4770      	bx	lr
 80028bc:	e000ed00 	.word	0xe000ed00
 80028c0:	05fa0000 	.word	0x05fa0000

080028c4 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 80028c4:	b480      	push	{r7}
 80028c6:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 80028c8:	4b04      	ldr	r3, [pc, #16]	; (80028dc <__NVIC_GetPriorityGrouping+0x18>)
 80028ca:	68db      	ldr	r3, [r3, #12]
 80028cc:	0a1b      	lsrs	r3, r3, #8
 80028ce:	f003 0307 	and.w	r3, r3, #7
}
 80028d2:	4618      	mov	r0, r3
 80028d4:	46bd      	mov	sp, r7
 80028d6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80028da:	4770      	bx	lr
 80028dc:	e000ed00 	.word	0xe000ed00

080028e0 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 80028e0:	b480      	push	{r7}
 80028e2:	b083      	sub	sp, #12
 80028e4:	af00      	add	r7, sp, #0
 80028e6:	4603      	mov	r3, r0
 80028e8:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 80028ea:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80028ee:	2b00      	cmp	r3, #0
 80028f0:	db0b      	blt.n	800290a <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 80028f2:	79fb      	ldrb	r3, [r7, #7]
 80028f4:	f003 021f 	and.w	r2, r3, #31
 80028f8:	4907      	ldr	r1, [pc, #28]	; (8002918 <__NVIC_EnableIRQ+0x38>)
 80028fa:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80028fe:	095b      	lsrs	r3, r3, #5
 8002900:	2001      	movs	r0, #1
 8002902:	fa00 f202 	lsl.w	r2, r0, r2
 8002906:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 800290a:	bf00      	nop
 800290c:	370c      	adds	r7, #12
 800290e:	46bd      	mov	sp, r7
 8002910:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002914:	4770      	bx	lr
 8002916:	bf00      	nop
 8002918:	e000e100 	.word	0xe000e100

0800291c <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 800291c:	b480      	push	{r7}
 800291e:	b083      	sub	sp, #12
 8002920:	af00      	add	r7, sp, #0
 8002922:	4603      	mov	r3, r0
 8002924:	6039      	str	r1, [r7, #0]
 8002926:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8002928:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800292c:	2b00      	cmp	r3, #0
 800292e:	db0a      	blt.n	8002946 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]                = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8002930:	683b      	ldr	r3, [r7, #0]
 8002932:	b2da      	uxtb	r2, r3
 8002934:	490c      	ldr	r1, [pc, #48]	; (8002968 <__NVIC_SetPriority+0x4c>)
 8002936:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800293a:	0112      	lsls	r2, r2, #4
 800293c:	b2d2      	uxtb	r2, r2
 800293e:	440b      	add	r3, r1
 8002940:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHPR[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8002944:	e00a      	b.n	800295c <__NVIC_SetPriority+0x40>
    SCB->SHPR[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8002946:	683b      	ldr	r3, [r7, #0]
 8002948:	b2da      	uxtb	r2, r3
 800294a:	4908      	ldr	r1, [pc, #32]	; (800296c <__NVIC_SetPriority+0x50>)
 800294c:	79fb      	ldrb	r3, [r7, #7]
 800294e:	f003 030f 	and.w	r3, r3, #15
 8002952:	3b04      	subs	r3, #4
 8002954:	0112      	lsls	r2, r2, #4
 8002956:	b2d2      	uxtb	r2, r2
 8002958:	440b      	add	r3, r1
 800295a:	761a      	strb	r2, [r3, #24]
}
 800295c:	bf00      	nop
 800295e:	370c      	adds	r7, #12
 8002960:	46bd      	mov	sp, r7
 8002962:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002966:	4770      	bx	lr
 8002968:	e000e100 	.word	0xe000e100
 800296c:	e000ed00 	.word	0xe000ed00

08002970 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8002970:	b480      	push	{r7}
 8002972:	b089      	sub	sp, #36	; 0x24
 8002974:	af00      	add	r7, sp, #0
 8002976:	60f8      	str	r0, [r7, #12]
 8002978:	60b9      	str	r1, [r7, #8]
 800297a:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 800297c:	68fb      	ldr	r3, [r7, #12]
 800297e:	f003 0307 	and.w	r3, r3, #7
 8002982:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8002984:	69fb      	ldr	r3, [r7, #28]
 8002986:	f1c3 0307 	rsb	r3, r3, #7
 800298a:	2b04      	cmp	r3, #4
 800298c:	bf28      	it	cs
 800298e:	2304      	movcs	r3, #4
 8002990:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8002992:	69fb      	ldr	r3, [r7, #28]
 8002994:	3304      	adds	r3, #4
 8002996:	2b06      	cmp	r3, #6
 8002998:	d902      	bls.n	80029a0 <NVIC_EncodePriority+0x30>
 800299a:	69fb      	ldr	r3, [r7, #28]
 800299c:	3b03      	subs	r3, #3
 800299e:	e000      	b.n	80029a2 <NVIC_EncodePriority+0x32>
 80029a0:	2300      	movs	r3, #0
 80029a2:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80029a4:	f04f 32ff 	mov.w	r2, #4294967295
 80029a8:	69bb      	ldr	r3, [r7, #24]
 80029aa:	fa02 f303 	lsl.w	r3, r2, r3
 80029ae:	43da      	mvns	r2, r3
 80029b0:	68bb      	ldr	r3, [r7, #8]
 80029b2:	401a      	ands	r2, r3
 80029b4:	697b      	ldr	r3, [r7, #20]
 80029b6:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 80029b8:	f04f 31ff 	mov.w	r1, #4294967295
 80029bc:	697b      	ldr	r3, [r7, #20]
 80029be:	fa01 f303 	lsl.w	r3, r1, r3
 80029c2:	43d9      	mvns	r1, r3
 80029c4:	687b      	ldr	r3, [r7, #4]
 80029c6:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80029c8:	4313      	orrs	r3, r2
         );
}
 80029ca:	4618      	mov	r0, r3
 80029cc:	3724      	adds	r7, #36	; 0x24
 80029ce:	46bd      	mov	sp, r7
 80029d0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80029d4:	4770      	bx	lr

080029d6 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 80029d6:	b580      	push	{r7, lr}
 80029d8:	b082      	sub	sp, #8
 80029da:	af00      	add	r7, sp, #0
 80029dc:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 80029de:	6878      	ldr	r0, [r7, #4]
 80029e0:	f7ff ff4c 	bl	800287c <__NVIC_SetPriorityGrouping>
}
 80029e4:	bf00      	nop
 80029e6:	3708      	adds	r7, #8
 80029e8:	46bd      	mov	sp, r7
 80029ea:	bd80      	pop	{r7, pc}

080029ec <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 80029ec:	b580      	push	{r7, lr}
 80029ee:	b086      	sub	sp, #24
 80029f0:	af00      	add	r7, sp, #0
 80029f2:	4603      	mov	r3, r0
 80029f4:	60b9      	str	r1, [r7, #8]
 80029f6:	607a      	str	r2, [r7, #4]
 80029f8:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00;
 80029fa:	2300      	movs	r3, #0
 80029fc:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 80029fe:	f7ff ff61 	bl	80028c4 <__NVIC_GetPriorityGrouping>
 8002a02:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8002a04:	687a      	ldr	r2, [r7, #4]
 8002a06:	68b9      	ldr	r1, [r7, #8]
 8002a08:	6978      	ldr	r0, [r7, #20]
 8002a0a:	f7ff ffb1 	bl	8002970 <NVIC_EncodePriority>
 8002a0e:	4602      	mov	r2, r0
 8002a10:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8002a14:	4611      	mov	r1, r2
 8002a16:	4618      	mov	r0, r3
 8002a18:	f7ff ff80 	bl	800291c <__NVIC_SetPriority>
}
 8002a1c:	bf00      	nop
 8002a1e:	3718      	adds	r7, #24
 8002a20:	46bd      	mov	sp, r7
 8002a22:	bd80      	pop	{r7, pc}

08002a24 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f7xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8002a24:	b580      	push	{r7, lr}
 8002a26:	b082      	sub	sp, #8
 8002a28:	af00      	add	r7, sp, #0
 8002a2a:	4603      	mov	r3, r0
 8002a2c:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8002a2e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002a32:	4618      	mov	r0, r3
 8002a34:	f7ff ff54 	bl	80028e0 <__NVIC_EnableIRQ>
}
 8002a38:	bf00      	nop
 8002a3a:	3708      	adds	r7, #8
 8002a3c:	46bd      	mov	sp, r7
 8002a3e:	bd80      	pop	{r7, pc}

08002a40 <HAL_CRC_Init>:
  *         parameters in the CRC_InitTypeDef and create the associated handle.
  * @param  hcrc CRC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_CRC_Init(CRC_HandleTypeDef *hcrc)
{
 8002a40:	b580      	push	{r7, lr}
 8002a42:	b082      	sub	sp, #8
 8002a44:	af00      	add	r7, sp, #0
 8002a46:	6078      	str	r0, [r7, #4]
  /* Check the CRC handle allocation */
  if (hcrc == NULL)
 8002a48:	687b      	ldr	r3, [r7, #4]
 8002a4a:	2b00      	cmp	r3, #0
 8002a4c:	d101      	bne.n	8002a52 <HAL_CRC_Init+0x12>
  {
    return HAL_ERROR;
 8002a4e:	2301      	movs	r3, #1
 8002a50:	e054      	b.n	8002afc <HAL_CRC_Init+0xbc>
  }

  /* Check the parameters */
  assert_param(IS_CRC_ALL_INSTANCE(hcrc->Instance));

  if (hcrc->State == HAL_CRC_STATE_RESET)
 8002a52:	687b      	ldr	r3, [r7, #4]
 8002a54:	7f5b      	ldrb	r3, [r3, #29]
 8002a56:	b2db      	uxtb	r3, r3
 8002a58:	2b00      	cmp	r3, #0
 8002a5a:	d105      	bne.n	8002a68 <HAL_CRC_Init+0x28>
  {
    /* Allocate lock resource and initialize it */
    hcrc->Lock = HAL_UNLOCKED;
 8002a5c:	687b      	ldr	r3, [r7, #4]
 8002a5e:	2200      	movs	r2, #0
 8002a60:	771a      	strb	r2, [r3, #28]
    /* Init the low level hardware */
    HAL_CRC_MspInit(hcrc);
 8002a62:	6878      	ldr	r0, [r7, #4]
 8002a64:	f7fe fbc2 	bl	80011ec <HAL_CRC_MspInit>
  }

  hcrc->State = HAL_CRC_STATE_BUSY;
 8002a68:	687b      	ldr	r3, [r7, #4]
 8002a6a:	2202      	movs	r2, #2
 8002a6c:	775a      	strb	r2, [r3, #29]

  /* check whether or not non-default generating polynomial has been
   * picked up by user */
  assert_param(IS_DEFAULT_POLYNOMIAL(hcrc->Init.DefaultPolynomialUse));
  if (hcrc->Init.DefaultPolynomialUse == DEFAULT_POLYNOMIAL_ENABLE)
 8002a6e:	687b      	ldr	r3, [r7, #4]
 8002a70:	791b      	ldrb	r3, [r3, #4]
 8002a72:	2b00      	cmp	r3, #0
 8002a74:	d10c      	bne.n	8002a90 <HAL_CRC_Init+0x50>
  {
    /* initialize peripheral with default generating polynomial */
    WRITE_REG(hcrc->Instance->POL, DEFAULT_CRC32_POLY);
 8002a76:	687b      	ldr	r3, [r7, #4]
 8002a78:	681b      	ldr	r3, [r3, #0]
 8002a7a:	4a22      	ldr	r2, [pc, #136]	; (8002b04 <HAL_CRC_Init+0xc4>)
 8002a7c:	615a      	str	r2, [r3, #20]
    MODIFY_REG(hcrc->Instance->CR, CRC_CR_POLYSIZE, CRC_POLYLENGTH_32B);
 8002a7e:	687b      	ldr	r3, [r7, #4]
 8002a80:	681b      	ldr	r3, [r3, #0]
 8002a82:	689a      	ldr	r2, [r3, #8]
 8002a84:	687b      	ldr	r3, [r7, #4]
 8002a86:	681b      	ldr	r3, [r3, #0]
 8002a88:	f022 0218 	bic.w	r2, r2, #24
 8002a8c:	609a      	str	r2, [r3, #8]
 8002a8e:	e00c      	b.n	8002aaa <HAL_CRC_Init+0x6a>
  }
  else
  {
    /* initialize CRC peripheral with generating polynomial defined by user */
    if (HAL_CRCEx_Polynomial_Set(hcrc, hcrc->Init.GeneratingPolynomial, hcrc->Init.CRCLength) != HAL_OK)
 8002a90:	687b      	ldr	r3, [r7, #4]
 8002a92:	6899      	ldr	r1, [r3, #8]
 8002a94:	687b      	ldr	r3, [r7, #4]
 8002a96:	68db      	ldr	r3, [r3, #12]
 8002a98:	461a      	mov	r2, r3
 8002a9a:	6878      	ldr	r0, [r7, #4]
 8002a9c:	f000 f948 	bl	8002d30 <HAL_CRCEx_Polynomial_Set>
 8002aa0:	4603      	mov	r3, r0
 8002aa2:	2b00      	cmp	r3, #0
 8002aa4:	d001      	beq.n	8002aaa <HAL_CRC_Init+0x6a>
    {
      return HAL_ERROR;
 8002aa6:	2301      	movs	r3, #1
 8002aa8:	e028      	b.n	8002afc <HAL_CRC_Init+0xbc>
  }

  /* check whether or not non-default CRC initial value has been
   * picked up by user */
  assert_param(IS_DEFAULT_INIT_VALUE(hcrc->Init.DefaultInitValueUse));
  if (hcrc->Init.DefaultInitValueUse == DEFAULT_INIT_VALUE_ENABLE)
 8002aaa:	687b      	ldr	r3, [r7, #4]
 8002aac:	795b      	ldrb	r3, [r3, #5]
 8002aae:	2b00      	cmp	r3, #0
 8002ab0:	d105      	bne.n	8002abe <HAL_CRC_Init+0x7e>
  {
    WRITE_REG(hcrc->Instance->INIT, DEFAULT_CRC_INITVALUE);
 8002ab2:	687b      	ldr	r3, [r7, #4]
 8002ab4:	681b      	ldr	r3, [r3, #0]
 8002ab6:	f04f 32ff 	mov.w	r2, #4294967295
 8002aba:	611a      	str	r2, [r3, #16]
 8002abc:	e004      	b.n	8002ac8 <HAL_CRC_Init+0x88>
  }
  else
  {
    WRITE_REG(hcrc->Instance->INIT, hcrc->Init.InitValue);
 8002abe:	687b      	ldr	r3, [r7, #4]
 8002ac0:	681b      	ldr	r3, [r3, #0]
 8002ac2:	687a      	ldr	r2, [r7, #4]
 8002ac4:	6912      	ldr	r2, [r2, #16]
 8002ac6:	611a      	str	r2, [r3, #16]
  }


  /* set input data inversion mode */
  assert_param(IS_CRC_INPUTDATA_INVERSION_MODE(hcrc->Init.InputDataInversionMode));
  MODIFY_REG(hcrc->Instance->CR, CRC_CR_REV_IN, hcrc->Init.InputDataInversionMode);
 8002ac8:	687b      	ldr	r3, [r7, #4]
 8002aca:	681b      	ldr	r3, [r3, #0]
 8002acc:	689b      	ldr	r3, [r3, #8]
 8002ace:	f023 0160 	bic.w	r1, r3, #96	; 0x60
 8002ad2:	687b      	ldr	r3, [r7, #4]
 8002ad4:	695a      	ldr	r2, [r3, #20]
 8002ad6:	687b      	ldr	r3, [r7, #4]
 8002ad8:	681b      	ldr	r3, [r3, #0]
 8002ada:	430a      	orrs	r2, r1
 8002adc:	609a      	str	r2, [r3, #8]

  /* set output data inversion mode */
  assert_param(IS_CRC_OUTPUTDATA_INVERSION_MODE(hcrc->Init.OutputDataInversionMode));
  MODIFY_REG(hcrc->Instance->CR, CRC_CR_REV_OUT, hcrc->Init.OutputDataInversionMode);
 8002ade:	687b      	ldr	r3, [r7, #4]
 8002ae0:	681b      	ldr	r3, [r3, #0]
 8002ae2:	689b      	ldr	r3, [r3, #8]
 8002ae4:	f023 0180 	bic.w	r1, r3, #128	; 0x80
 8002ae8:	687b      	ldr	r3, [r7, #4]
 8002aea:	699a      	ldr	r2, [r3, #24]
 8002aec:	687b      	ldr	r3, [r7, #4]
 8002aee:	681b      	ldr	r3, [r3, #0]
 8002af0:	430a      	orrs	r2, r1
 8002af2:	609a      	str	r2, [r3, #8]
  /* makes sure the input data format (bytes, halfwords or words stream)
   * is properly specified by user */
  assert_param(IS_CRC_INPUTDATA_FORMAT(hcrc->InputDataFormat));

  /* Change CRC peripheral state */
  hcrc->State = HAL_CRC_STATE_READY;
 8002af4:	687b      	ldr	r3, [r7, #4]
 8002af6:	2201      	movs	r2, #1
 8002af8:	775a      	strb	r2, [r3, #29]

  /* Return function status */
  return HAL_OK;
 8002afa:	2300      	movs	r3, #0
}
 8002afc:	4618      	mov	r0, r3
 8002afe:	3708      	adds	r7, #8
 8002b00:	46bd      	mov	sp, r7
 8002b02:	bd80      	pop	{r7, pc}
 8002b04:	04c11db7 	.word	0x04c11db7

08002b08 <HAL_CRC_Calculate>:
  *        and the API will internally adjust its input data processing based on the
  *        handle field hcrc->InputDataFormat.
  * @retval uint32_t CRC (returned value LSBs for CRC shorter than 32 bits)
  */
uint32_t HAL_CRC_Calculate(CRC_HandleTypeDef *hcrc, uint32_t pBuffer[], uint32_t BufferLength)
{
 8002b08:	b580      	push	{r7, lr}
 8002b0a:	b086      	sub	sp, #24
 8002b0c:	af00      	add	r7, sp, #0
 8002b0e:	60f8      	str	r0, [r7, #12]
 8002b10:	60b9      	str	r1, [r7, #8]
 8002b12:	607a      	str	r2, [r7, #4]
  uint32_t index;      /* CRC input data buffer index */
  uint32_t temp = 0U;  /* CRC output (read from hcrc->Instance->DR register) */
 8002b14:	2300      	movs	r3, #0
 8002b16:	613b      	str	r3, [r7, #16]

  /* Change CRC peripheral state */
  hcrc->State = HAL_CRC_STATE_BUSY;
 8002b18:	68fb      	ldr	r3, [r7, #12]
 8002b1a:	2202      	movs	r2, #2
 8002b1c:	775a      	strb	r2, [r3, #29]

  /* Reset CRC Calculation Unit (hcrc->Instance->INIT is
  *  written in hcrc->Instance->DR) */
  __HAL_CRC_DR_RESET(hcrc);
 8002b1e:	68fb      	ldr	r3, [r7, #12]
 8002b20:	681b      	ldr	r3, [r3, #0]
 8002b22:	689a      	ldr	r2, [r3, #8]
 8002b24:	68fb      	ldr	r3, [r7, #12]
 8002b26:	681b      	ldr	r3, [r3, #0]
 8002b28:	f042 0201 	orr.w	r2, r2, #1
 8002b2c:	609a      	str	r2, [r3, #8]

  switch (hcrc->InputDataFormat)
 8002b2e:	68fb      	ldr	r3, [r7, #12]
 8002b30:	6a1b      	ldr	r3, [r3, #32]
 8002b32:	2b03      	cmp	r3, #3
 8002b34:	d006      	beq.n	8002b44 <HAL_CRC_Calculate+0x3c>
 8002b36:	2b03      	cmp	r3, #3
 8002b38:	d829      	bhi.n	8002b8e <HAL_CRC_Calculate+0x86>
 8002b3a:	2b01      	cmp	r3, #1
 8002b3c:	d019      	beq.n	8002b72 <HAL_CRC_Calculate+0x6a>
 8002b3e:	2b02      	cmp	r3, #2
 8002b40:	d01e      	beq.n	8002b80 <HAL_CRC_Calculate+0x78>
      /* Specific 16-bit input data handling  */
      temp = CRC_Handle_16(hcrc, (uint16_t *)(void *)pBuffer, BufferLength);    /* Derogation MisraC2012 R.11.5 */
      break;

    default:
      break;
 8002b42:	e024      	b.n	8002b8e <HAL_CRC_Calculate+0x86>
      for (index = 0U; index < BufferLength; index++)
 8002b44:	2300      	movs	r3, #0
 8002b46:	617b      	str	r3, [r7, #20]
 8002b48:	e00a      	b.n	8002b60 <HAL_CRC_Calculate+0x58>
        hcrc->Instance->DR = pBuffer[index];
 8002b4a:	697b      	ldr	r3, [r7, #20]
 8002b4c:	009b      	lsls	r3, r3, #2
 8002b4e:	68ba      	ldr	r2, [r7, #8]
 8002b50:	441a      	add	r2, r3
 8002b52:	68fb      	ldr	r3, [r7, #12]
 8002b54:	681b      	ldr	r3, [r3, #0]
 8002b56:	6812      	ldr	r2, [r2, #0]
 8002b58:	601a      	str	r2, [r3, #0]
      for (index = 0U; index < BufferLength; index++)
 8002b5a:	697b      	ldr	r3, [r7, #20]
 8002b5c:	3301      	adds	r3, #1
 8002b5e:	617b      	str	r3, [r7, #20]
 8002b60:	697a      	ldr	r2, [r7, #20]
 8002b62:	687b      	ldr	r3, [r7, #4]
 8002b64:	429a      	cmp	r2, r3
 8002b66:	d3f0      	bcc.n	8002b4a <HAL_CRC_Calculate+0x42>
      temp = hcrc->Instance->DR;
 8002b68:	68fb      	ldr	r3, [r7, #12]
 8002b6a:	681b      	ldr	r3, [r3, #0]
 8002b6c:	681b      	ldr	r3, [r3, #0]
 8002b6e:	613b      	str	r3, [r7, #16]
      break;
 8002b70:	e00e      	b.n	8002b90 <HAL_CRC_Calculate+0x88>
      temp = CRC_Handle_8(hcrc, (uint8_t *)pBuffer, BufferLength);
 8002b72:	687a      	ldr	r2, [r7, #4]
 8002b74:	68b9      	ldr	r1, [r7, #8]
 8002b76:	68f8      	ldr	r0, [r7, #12]
 8002b78:	f000 f812 	bl	8002ba0 <CRC_Handle_8>
 8002b7c:	6138      	str	r0, [r7, #16]
      break;
 8002b7e:	e007      	b.n	8002b90 <HAL_CRC_Calculate+0x88>
      temp = CRC_Handle_16(hcrc, (uint16_t *)(void *)pBuffer, BufferLength);    /* Derogation MisraC2012 R.11.5 */
 8002b80:	687a      	ldr	r2, [r7, #4]
 8002b82:	68b9      	ldr	r1, [r7, #8]
 8002b84:	68f8      	ldr	r0, [r7, #12]
 8002b86:	f000 f899 	bl	8002cbc <CRC_Handle_16>
 8002b8a:	6138      	str	r0, [r7, #16]
      break;
 8002b8c:	e000      	b.n	8002b90 <HAL_CRC_Calculate+0x88>
      break;
 8002b8e:	bf00      	nop
  }

  /* Change CRC peripheral state */
  hcrc->State = HAL_CRC_STATE_READY;
 8002b90:	68fb      	ldr	r3, [r7, #12]
 8002b92:	2201      	movs	r2, #1
 8002b94:	775a      	strb	r2, [r3, #29]

  /* Return the CRC computed value */
  return temp;
 8002b96:	693b      	ldr	r3, [r7, #16]
}
 8002b98:	4618      	mov	r0, r3
 8002b9a:	3718      	adds	r7, #24
 8002b9c:	46bd      	mov	sp, r7
 8002b9e:	bd80      	pop	{r7, pc}

08002ba0 <CRC_Handle_8>:
  * @param  pBuffer pointer to the input data buffer
  * @param  BufferLength input data buffer length
  * @retval uint32_t CRC (returned value LSBs for CRC shorter than 32 bits)
  */
static uint32_t CRC_Handle_8(CRC_HandleTypeDef *hcrc, uint8_t pBuffer[], uint32_t BufferLength)
{
 8002ba0:	b480      	push	{r7}
 8002ba2:	b089      	sub	sp, #36	; 0x24
 8002ba4:	af00      	add	r7, sp, #0
 8002ba6:	60f8      	str	r0, [r7, #12]
 8002ba8:	60b9      	str	r1, [r7, #8]
 8002baa:	607a      	str	r2, [r7, #4]
  __IO uint16_t *pReg;

  /* Processing time optimization: 4 bytes are entered in a row with a single word write,
   * last bytes must be carefully fed to the CRC calculator to ensure a correct type
   * handling by the peripheral */
  for (i = 0U; i < (BufferLength / 4U); i++)
 8002bac:	2300      	movs	r3, #0
 8002bae:	61fb      	str	r3, [r7, #28]
 8002bb0:	e023      	b.n	8002bfa <CRC_Handle_8+0x5a>
  {
    hcrc->Instance->DR = ((uint32_t)pBuffer[4U * i] << 24U) | \
 8002bb2:	69fb      	ldr	r3, [r7, #28]
 8002bb4:	009b      	lsls	r3, r3, #2
 8002bb6:	68ba      	ldr	r2, [r7, #8]
 8002bb8:	4413      	add	r3, r2
 8002bba:	781b      	ldrb	r3, [r3, #0]
 8002bbc:	061a      	lsls	r2, r3, #24
                         ((uint32_t)pBuffer[(4U * i) + 1U] << 16U) | \
 8002bbe:	69fb      	ldr	r3, [r7, #28]
 8002bc0:	009b      	lsls	r3, r3, #2
 8002bc2:	3301      	adds	r3, #1
 8002bc4:	68b9      	ldr	r1, [r7, #8]
 8002bc6:	440b      	add	r3, r1
 8002bc8:	781b      	ldrb	r3, [r3, #0]
 8002bca:	041b      	lsls	r3, r3, #16
    hcrc->Instance->DR = ((uint32_t)pBuffer[4U * i] << 24U) | \
 8002bcc:	431a      	orrs	r2, r3
                         ((uint32_t)pBuffer[(4U * i) + 2U] << 8U)  | \
 8002bce:	69fb      	ldr	r3, [r7, #28]
 8002bd0:	009b      	lsls	r3, r3, #2
 8002bd2:	3302      	adds	r3, #2
 8002bd4:	68b9      	ldr	r1, [r7, #8]
 8002bd6:	440b      	add	r3, r1
 8002bd8:	781b      	ldrb	r3, [r3, #0]
 8002bda:	021b      	lsls	r3, r3, #8
                         ((uint32_t)pBuffer[(4U * i) + 1U] << 16U) | \
 8002bdc:	431a      	orrs	r2, r3
                         (uint32_t)pBuffer[(4U * i) + 3U];
 8002bde:	69fb      	ldr	r3, [r7, #28]
 8002be0:	009b      	lsls	r3, r3, #2
 8002be2:	3303      	adds	r3, #3
 8002be4:	68b9      	ldr	r1, [r7, #8]
 8002be6:	440b      	add	r3, r1
 8002be8:	781b      	ldrb	r3, [r3, #0]
 8002bea:	4619      	mov	r1, r3
    hcrc->Instance->DR = ((uint32_t)pBuffer[4U * i] << 24U) | \
 8002bec:	68fb      	ldr	r3, [r7, #12]
 8002bee:	681b      	ldr	r3, [r3, #0]
                         ((uint32_t)pBuffer[(4U * i) + 2U] << 8U)  | \
 8002bf0:	430a      	orrs	r2, r1
    hcrc->Instance->DR = ((uint32_t)pBuffer[4U * i] << 24U) | \
 8002bf2:	601a      	str	r2, [r3, #0]
  for (i = 0U; i < (BufferLength / 4U); i++)
 8002bf4:	69fb      	ldr	r3, [r7, #28]
 8002bf6:	3301      	adds	r3, #1
 8002bf8:	61fb      	str	r3, [r7, #28]
 8002bfa:	687b      	ldr	r3, [r7, #4]
 8002bfc:	089b      	lsrs	r3, r3, #2
 8002bfe:	69fa      	ldr	r2, [r7, #28]
 8002c00:	429a      	cmp	r2, r3
 8002c02:	d3d6      	bcc.n	8002bb2 <CRC_Handle_8+0x12>
  }
  /* last bytes specific handling */
  if ((BufferLength % 4U) != 0U)
 8002c04:	687b      	ldr	r3, [r7, #4]
 8002c06:	f003 0303 	and.w	r3, r3, #3
 8002c0a:	2b00      	cmp	r3, #0
 8002c0c:	d04d      	beq.n	8002caa <CRC_Handle_8+0x10a>
  {
    if ((BufferLength % 4U) == 1U)
 8002c0e:	687b      	ldr	r3, [r7, #4]
 8002c10:	f003 0303 	and.w	r3, r3, #3
 8002c14:	2b01      	cmp	r3, #1
 8002c16:	d107      	bne.n	8002c28 <CRC_Handle_8+0x88>
    {
      *(__IO uint8_t *)(__IO void *)(&hcrc->Instance->DR) = pBuffer[4U * i];         /* Derogation MisraC2012 R.11.5 */
 8002c18:	69fb      	ldr	r3, [r7, #28]
 8002c1a:	009b      	lsls	r3, r3, #2
 8002c1c:	68ba      	ldr	r2, [r7, #8]
 8002c1e:	4413      	add	r3, r2
 8002c20:	68fa      	ldr	r2, [r7, #12]
 8002c22:	6812      	ldr	r2, [r2, #0]
 8002c24:	781b      	ldrb	r3, [r3, #0]
 8002c26:	7013      	strb	r3, [r2, #0]
    }
    if ((BufferLength % 4U) == 2U)
 8002c28:	687b      	ldr	r3, [r7, #4]
 8002c2a:	f003 0303 	and.w	r3, r3, #3
 8002c2e:	2b02      	cmp	r3, #2
 8002c30:	d116      	bne.n	8002c60 <CRC_Handle_8+0xc0>
    {
      data = ((uint16_t)(pBuffer[4U * i]) << 8U) | (uint16_t)pBuffer[(4U * i) + 1U];
 8002c32:	69fb      	ldr	r3, [r7, #28]
 8002c34:	009b      	lsls	r3, r3, #2
 8002c36:	68ba      	ldr	r2, [r7, #8]
 8002c38:	4413      	add	r3, r2
 8002c3a:	781b      	ldrb	r3, [r3, #0]
 8002c3c:	021b      	lsls	r3, r3, #8
 8002c3e:	b21a      	sxth	r2, r3
 8002c40:	69fb      	ldr	r3, [r7, #28]
 8002c42:	009b      	lsls	r3, r3, #2
 8002c44:	3301      	adds	r3, #1
 8002c46:	68b9      	ldr	r1, [r7, #8]
 8002c48:	440b      	add	r3, r1
 8002c4a:	781b      	ldrb	r3, [r3, #0]
 8002c4c:	b21b      	sxth	r3, r3
 8002c4e:	4313      	orrs	r3, r2
 8002c50:	b21b      	sxth	r3, r3
 8002c52:	837b      	strh	r3, [r7, #26]
      pReg = (__IO uint16_t *)(__IO void *)(&hcrc->Instance->DR);                    /* Derogation MisraC2012 R.11.5 */
 8002c54:	68fb      	ldr	r3, [r7, #12]
 8002c56:	681b      	ldr	r3, [r3, #0]
 8002c58:	617b      	str	r3, [r7, #20]
      *pReg = data;
 8002c5a:	697b      	ldr	r3, [r7, #20]
 8002c5c:	8b7a      	ldrh	r2, [r7, #26]
 8002c5e:	801a      	strh	r2, [r3, #0]
    }
    if ((BufferLength % 4U) == 3U)
 8002c60:	687b      	ldr	r3, [r7, #4]
 8002c62:	f003 0303 	and.w	r3, r3, #3
 8002c66:	2b03      	cmp	r3, #3
 8002c68:	d11f      	bne.n	8002caa <CRC_Handle_8+0x10a>
    {
      data = ((uint16_t)(pBuffer[4U * i]) << 8U) | (uint16_t)pBuffer[(4U * i) + 1U];
 8002c6a:	69fb      	ldr	r3, [r7, #28]
 8002c6c:	009b      	lsls	r3, r3, #2
 8002c6e:	68ba      	ldr	r2, [r7, #8]
 8002c70:	4413      	add	r3, r2
 8002c72:	781b      	ldrb	r3, [r3, #0]
 8002c74:	021b      	lsls	r3, r3, #8
 8002c76:	b21a      	sxth	r2, r3
 8002c78:	69fb      	ldr	r3, [r7, #28]
 8002c7a:	009b      	lsls	r3, r3, #2
 8002c7c:	3301      	adds	r3, #1
 8002c7e:	68b9      	ldr	r1, [r7, #8]
 8002c80:	440b      	add	r3, r1
 8002c82:	781b      	ldrb	r3, [r3, #0]
 8002c84:	b21b      	sxth	r3, r3
 8002c86:	4313      	orrs	r3, r2
 8002c88:	b21b      	sxth	r3, r3
 8002c8a:	837b      	strh	r3, [r7, #26]
      pReg = (__IO uint16_t *)(__IO void *)(&hcrc->Instance->DR);                    /* Derogation MisraC2012 R.11.5 */
 8002c8c:	68fb      	ldr	r3, [r7, #12]
 8002c8e:	681b      	ldr	r3, [r3, #0]
 8002c90:	617b      	str	r3, [r7, #20]
      *pReg = data;
 8002c92:	697b      	ldr	r3, [r7, #20]
 8002c94:	8b7a      	ldrh	r2, [r7, #26]
 8002c96:	801a      	strh	r2, [r3, #0]

      *(__IO uint8_t *)(__IO void *)(&hcrc->Instance->DR) = pBuffer[(4U * i) + 2U];  /* Derogation MisraC2012 R.11.5 */
 8002c98:	69fb      	ldr	r3, [r7, #28]
 8002c9a:	009b      	lsls	r3, r3, #2
 8002c9c:	3302      	adds	r3, #2
 8002c9e:	68ba      	ldr	r2, [r7, #8]
 8002ca0:	4413      	add	r3, r2
 8002ca2:	68fa      	ldr	r2, [r7, #12]
 8002ca4:	6812      	ldr	r2, [r2, #0]
 8002ca6:	781b      	ldrb	r3, [r3, #0]
 8002ca8:	7013      	strb	r3, [r2, #0]
    }
  }

  /* Return the CRC computed value */
  return hcrc->Instance->DR;
 8002caa:	68fb      	ldr	r3, [r7, #12]
 8002cac:	681b      	ldr	r3, [r3, #0]
 8002cae:	681b      	ldr	r3, [r3, #0]
}
 8002cb0:	4618      	mov	r0, r3
 8002cb2:	3724      	adds	r7, #36	; 0x24
 8002cb4:	46bd      	mov	sp, r7
 8002cb6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002cba:	4770      	bx	lr

08002cbc <CRC_Handle_16>:
  * @param  pBuffer pointer to the input data buffer
  * @param  BufferLength input data buffer length
  * @retval uint32_t CRC (returned value LSBs for CRC shorter than 32 bits)
  */
static uint32_t CRC_Handle_16(CRC_HandleTypeDef *hcrc, uint16_t pBuffer[], uint32_t BufferLength)
{
 8002cbc:	b480      	push	{r7}
 8002cbe:	b087      	sub	sp, #28
 8002cc0:	af00      	add	r7, sp, #0
 8002cc2:	60f8      	str	r0, [r7, #12]
 8002cc4:	60b9      	str	r1, [r7, #8]
 8002cc6:	607a      	str	r2, [r7, #4]
  __IO uint16_t *pReg;

  /* Processing time optimization: 2 HalfWords are entered in a row with a single word write,
   * in case of odd length, last HalfWord must be carefully fed to the CRC calculator to ensure
   * a correct type handling by the peripheral */
  for (i = 0U; i < (BufferLength / 2U); i++)
 8002cc8:	2300      	movs	r3, #0
 8002cca:	617b      	str	r3, [r7, #20]
 8002ccc:	e013      	b.n	8002cf6 <CRC_Handle_16+0x3a>
  {
    hcrc->Instance->DR = ((uint32_t)pBuffer[2U * i] << 16U) | (uint32_t)pBuffer[(2U * i) + 1U];
 8002cce:	697b      	ldr	r3, [r7, #20]
 8002cd0:	009b      	lsls	r3, r3, #2
 8002cd2:	68ba      	ldr	r2, [r7, #8]
 8002cd4:	4413      	add	r3, r2
 8002cd6:	881b      	ldrh	r3, [r3, #0]
 8002cd8:	041a      	lsls	r2, r3, #16
 8002cda:	697b      	ldr	r3, [r7, #20]
 8002cdc:	009b      	lsls	r3, r3, #2
 8002cde:	3302      	adds	r3, #2
 8002ce0:	68b9      	ldr	r1, [r7, #8]
 8002ce2:	440b      	add	r3, r1
 8002ce4:	881b      	ldrh	r3, [r3, #0]
 8002ce6:	4619      	mov	r1, r3
 8002ce8:	68fb      	ldr	r3, [r7, #12]
 8002cea:	681b      	ldr	r3, [r3, #0]
 8002cec:	430a      	orrs	r2, r1
 8002cee:	601a      	str	r2, [r3, #0]
  for (i = 0U; i < (BufferLength / 2U); i++)
 8002cf0:	697b      	ldr	r3, [r7, #20]
 8002cf2:	3301      	adds	r3, #1
 8002cf4:	617b      	str	r3, [r7, #20]
 8002cf6:	687b      	ldr	r3, [r7, #4]
 8002cf8:	085b      	lsrs	r3, r3, #1
 8002cfa:	697a      	ldr	r2, [r7, #20]
 8002cfc:	429a      	cmp	r2, r3
 8002cfe:	d3e6      	bcc.n	8002cce <CRC_Handle_16+0x12>
  }
  if ((BufferLength % 2U) != 0U)
 8002d00:	687b      	ldr	r3, [r7, #4]
 8002d02:	f003 0301 	and.w	r3, r3, #1
 8002d06:	2b00      	cmp	r3, #0
 8002d08:	d009      	beq.n	8002d1e <CRC_Handle_16+0x62>
  {
    pReg = (__IO uint16_t *)(__IO void *)(&hcrc->Instance->DR);                 /* Derogation MisraC2012 R.11.5 */
 8002d0a:	68fb      	ldr	r3, [r7, #12]
 8002d0c:	681b      	ldr	r3, [r3, #0]
 8002d0e:	613b      	str	r3, [r7, #16]
    *pReg = pBuffer[2U * i];
 8002d10:	697b      	ldr	r3, [r7, #20]
 8002d12:	009b      	lsls	r3, r3, #2
 8002d14:	68ba      	ldr	r2, [r7, #8]
 8002d16:	4413      	add	r3, r2
 8002d18:	881a      	ldrh	r2, [r3, #0]
 8002d1a:	693b      	ldr	r3, [r7, #16]
 8002d1c:	801a      	strh	r2, [r3, #0]
  }

  /* Return the CRC computed value */
  return hcrc->Instance->DR;
 8002d1e:	68fb      	ldr	r3, [r7, #12]
 8002d20:	681b      	ldr	r3, [r3, #0]
 8002d22:	681b      	ldr	r3, [r3, #0]
}
 8002d24:	4618      	mov	r0, r3
 8002d26:	371c      	adds	r7, #28
 8002d28:	46bd      	mov	sp, r7
 8002d2a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002d2e:	4770      	bx	lr

08002d30 <HAL_CRCEx_Polynomial_Set>:
  *          @arg @ref CRC_POLYLENGTH_16B 16-bit long CRC (generating polynomial of degree 16)
  *          @arg @ref CRC_POLYLENGTH_32B 32-bit long CRC (generating polynomial of degree 32)
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_CRCEx_Polynomial_Set(CRC_HandleTypeDef *hcrc, uint32_t Pol, uint32_t PolyLength)
{
 8002d30:	b480      	push	{r7}
 8002d32:	b087      	sub	sp, #28
 8002d34:	af00      	add	r7, sp, #0
 8002d36:	60f8      	str	r0, [r7, #12]
 8002d38:	60b9      	str	r1, [r7, #8]
 8002d3a:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8002d3c:	2300      	movs	r3, #0
 8002d3e:	75fb      	strb	r3, [r7, #23]
  uint32_t msb = 31U; /* polynomial degree is 32 at most, so msb is initialized to max value */
 8002d40:	231f      	movs	r3, #31
 8002d42:	613b      	str	r3, [r7, #16]
   * definition. HAL_ERROR is reported if Pol degree is
   * larger than that indicated by PolyLength.
   * Look for MSB position: msb will contain the degree of
   *  the second to the largest polynomial member. E.g., for
   *  X^7 + X^6 + X^5 + X^2 + 1, msb = 6. */
  while ((msb-- > 0U) && ((Pol & ((uint32_t)(0x1U) << (msb & 0x1FU))) == 0U))
 8002d44:	bf00      	nop
 8002d46:	693b      	ldr	r3, [r7, #16]
 8002d48:	1e5a      	subs	r2, r3, #1
 8002d4a:	613a      	str	r2, [r7, #16]
 8002d4c:	2b00      	cmp	r3, #0
 8002d4e:	d009      	beq.n	8002d64 <HAL_CRCEx_Polynomial_Set+0x34>
 8002d50:	693b      	ldr	r3, [r7, #16]
 8002d52:	f003 031f 	and.w	r3, r3, #31
 8002d56:	68ba      	ldr	r2, [r7, #8]
 8002d58:	fa22 f303 	lsr.w	r3, r2, r3
 8002d5c:	f003 0301 	and.w	r3, r3, #1
 8002d60:	2b00      	cmp	r3, #0
 8002d62:	d0f0      	beq.n	8002d46 <HAL_CRCEx_Polynomial_Set+0x16>
  {
  }

  switch (PolyLength)
 8002d64:	687b      	ldr	r3, [r7, #4]
 8002d66:	2b18      	cmp	r3, #24
 8002d68:	d846      	bhi.n	8002df8 <HAL_CRCEx_Polynomial_Set+0xc8>
 8002d6a:	a201      	add	r2, pc, #4	; (adr r2, 8002d70 <HAL_CRCEx_Polynomial_Set+0x40>)
 8002d6c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8002d70:	08002dff 	.word	0x08002dff
 8002d74:	08002df9 	.word	0x08002df9
 8002d78:	08002df9 	.word	0x08002df9
 8002d7c:	08002df9 	.word	0x08002df9
 8002d80:	08002df9 	.word	0x08002df9
 8002d84:	08002df9 	.word	0x08002df9
 8002d88:	08002df9 	.word	0x08002df9
 8002d8c:	08002df9 	.word	0x08002df9
 8002d90:	08002ded 	.word	0x08002ded
 8002d94:	08002df9 	.word	0x08002df9
 8002d98:	08002df9 	.word	0x08002df9
 8002d9c:	08002df9 	.word	0x08002df9
 8002da0:	08002df9 	.word	0x08002df9
 8002da4:	08002df9 	.word	0x08002df9
 8002da8:	08002df9 	.word	0x08002df9
 8002dac:	08002df9 	.word	0x08002df9
 8002db0:	08002de1 	.word	0x08002de1
 8002db4:	08002df9 	.word	0x08002df9
 8002db8:	08002df9 	.word	0x08002df9
 8002dbc:	08002df9 	.word	0x08002df9
 8002dc0:	08002df9 	.word	0x08002df9
 8002dc4:	08002df9 	.word	0x08002df9
 8002dc8:	08002df9 	.word	0x08002df9
 8002dcc:	08002df9 	.word	0x08002df9
 8002dd0:	08002dd5 	.word	0x08002dd5
  {
    case CRC_POLYLENGTH_7B:
      if (msb >= HAL_CRC_LENGTH_7B)
 8002dd4:	693b      	ldr	r3, [r7, #16]
 8002dd6:	2b06      	cmp	r3, #6
 8002dd8:	d913      	bls.n	8002e02 <HAL_CRCEx_Polynomial_Set+0xd2>
      {
        status =   HAL_ERROR;
 8002dda:	2301      	movs	r3, #1
 8002ddc:	75fb      	strb	r3, [r7, #23]
      }
      break;
 8002dde:	e010      	b.n	8002e02 <HAL_CRCEx_Polynomial_Set+0xd2>
    case CRC_POLYLENGTH_8B:
      if (msb >= HAL_CRC_LENGTH_8B)
 8002de0:	693b      	ldr	r3, [r7, #16]
 8002de2:	2b07      	cmp	r3, #7
 8002de4:	d90f      	bls.n	8002e06 <HAL_CRCEx_Polynomial_Set+0xd6>
      {
        status =   HAL_ERROR;
 8002de6:	2301      	movs	r3, #1
 8002de8:	75fb      	strb	r3, [r7, #23]
      }
      break;
 8002dea:	e00c      	b.n	8002e06 <HAL_CRCEx_Polynomial_Set+0xd6>
    case CRC_POLYLENGTH_16B:
      if (msb >= HAL_CRC_LENGTH_16B)
 8002dec:	693b      	ldr	r3, [r7, #16]
 8002dee:	2b0f      	cmp	r3, #15
 8002df0:	d90b      	bls.n	8002e0a <HAL_CRCEx_Polynomial_Set+0xda>
      {
        status =   HAL_ERROR;
 8002df2:	2301      	movs	r3, #1
 8002df4:	75fb      	strb	r3, [r7, #23]
      }
      break;
 8002df6:	e008      	b.n	8002e0a <HAL_CRCEx_Polynomial_Set+0xda>

    case CRC_POLYLENGTH_32B:
      /* no polynomial definition vs. polynomial length issue possible */
      break;
    default:
      status =  HAL_ERROR;
 8002df8:	2301      	movs	r3, #1
 8002dfa:	75fb      	strb	r3, [r7, #23]
      break;
 8002dfc:	e006      	b.n	8002e0c <HAL_CRCEx_Polynomial_Set+0xdc>
      break;
 8002dfe:	bf00      	nop
 8002e00:	e004      	b.n	8002e0c <HAL_CRCEx_Polynomial_Set+0xdc>
      break;
 8002e02:	bf00      	nop
 8002e04:	e002      	b.n	8002e0c <HAL_CRCEx_Polynomial_Set+0xdc>
      break;
 8002e06:	bf00      	nop
 8002e08:	e000      	b.n	8002e0c <HAL_CRCEx_Polynomial_Set+0xdc>
      break;
 8002e0a:	bf00      	nop
  }
  if (status == HAL_OK)
 8002e0c:	7dfb      	ldrb	r3, [r7, #23]
 8002e0e:	2b00      	cmp	r3, #0
 8002e10:	d10d      	bne.n	8002e2e <HAL_CRCEx_Polynomial_Set+0xfe>
  {
    /* set generating polynomial */
    WRITE_REG(hcrc->Instance->POL, Pol);
 8002e12:	68fb      	ldr	r3, [r7, #12]
 8002e14:	681b      	ldr	r3, [r3, #0]
 8002e16:	68ba      	ldr	r2, [r7, #8]
 8002e18:	615a      	str	r2, [r3, #20]

    /* set generating polynomial size */
    MODIFY_REG(hcrc->Instance->CR, CRC_CR_POLYSIZE, PolyLength);
 8002e1a:	68fb      	ldr	r3, [r7, #12]
 8002e1c:	681b      	ldr	r3, [r3, #0]
 8002e1e:	689b      	ldr	r3, [r3, #8]
 8002e20:	f023 0118 	bic.w	r1, r3, #24
 8002e24:	68fb      	ldr	r3, [r7, #12]
 8002e26:	681b      	ldr	r3, [r3, #0]
 8002e28:	687a      	ldr	r2, [r7, #4]
 8002e2a:	430a      	orrs	r2, r1
 8002e2c:	609a      	str	r2, [r3, #8]
  }
  /* Return function status */
  return status;
 8002e2e:	7dfb      	ldrb	r3, [r7, #23]
}
 8002e30:	4618      	mov	r0, r3
 8002e32:	371c      	adds	r7, #28
 8002e34:	46bd      	mov	sp, r7
 8002e36:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002e3a:	4770      	bx	lr

08002e3c <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8002e3c:	b480      	push	{r7}
 8002e3e:	b089      	sub	sp, #36	; 0x24
 8002e40:	af00      	add	r7, sp, #0
 8002e42:	6078      	str	r0, [r7, #4]
 8002e44:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00;
 8002e46:	2300      	movs	r3, #0
 8002e48:	61fb      	str	r3, [r7, #28]
  uint32_t ioposition = 0x00;
 8002e4a:	2300      	movs	r3, #0
 8002e4c:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00;
 8002e4e:	2300      	movs	r3, #0
 8002e50:	613b      	str	r3, [r7, #16]
  uint32_t temp = 0x00;
 8002e52:	2300      	movs	r3, #0
 8002e54:	61bb      	str	r3, [r7, #24]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  for(position = 0; position < GPIO_NUMBER; position++)
 8002e56:	2300      	movs	r3, #0
 8002e58:	61fb      	str	r3, [r7, #28]
 8002e5a:	e175      	b.n	8003148 <HAL_GPIO_Init+0x30c>
  {
    /* Get the IO position */
    ioposition = ((uint32_t)0x01) << position;
 8002e5c:	2201      	movs	r2, #1
 8002e5e:	69fb      	ldr	r3, [r7, #28]
 8002e60:	fa02 f303 	lsl.w	r3, r2, r3
 8002e64:	617b      	str	r3, [r7, #20]
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 8002e66:	683b      	ldr	r3, [r7, #0]
 8002e68:	681b      	ldr	r3, [r3, #0]
 8002e6a:	697a      	ldr	r2, [r7, #20]
 8002e6c:	4013      	ands	r3, r2
 8002e6e:	613b      	str	r3, [r7, #16]

    if(iocurrent == ioposition)
 8002e70:	693a      	ldr	r2, [r7, #16]
 8002e72:	697b      	ldr	r3, [r7, #20]
 8002e74:	429a      	cmp	r2, r3
 8002e76:	f040 8164 	bne.w	8003142 <HAL_GPIO_Init+0x306>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF))
 8002e7a:	683b      	ldr	r3, [r7, #0]
 8002e7c:	685b      	ldr	r3, [r3, #4]
 8002e7e:	f003 0303 	and.w	r3, r3, #3
 8002e82:	2b01      	cmp	r3, #1
 8002e84:	d005      	beq.n	8002e92 <HAL_GPIO_Init+0x56>
 8002e86:	683b      	ldr	r3, [r7, #0]
 8002e88:	685b      	ldr	r3, [r3, #4]
 8002e8a:	f003 0303 	and.w	r3, r3, #3
 8002e8e:	2b02      	cmp	r3, #2
 8002e90:	d130      	bne.n	8002ef4 <HAL_GPIO_Init+0xb8>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR; 
 8002e92:	687b      	ldr	r3, [r7, #4]
 8002e94:	689b      	ldr	r3, [r3, #8]
 8002e96:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2));
 8002e98:	69fb      	ldr	r3, [r7, #28]
 8002e9a:	005b      	lsls	r3, r3, #1
 8002e9c:	2203      	movs	r2, #3
 8002e9e:	fa02 f303 	lsl.w	r3, r2, r3
 8002ea2:	43db      	mvns	r3, r3
 8002ea4:	69ba      	ldr	r2, [r7, #24]
 8002ea6:	4013      	ands	r3, r2
 8002ea8:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2));
 8002eaa:	683b      	ldr	r3, [r7, #0]
 8002eac:	68da      	ldr	r2, [r3, #12]
 8002eae:	69fb      	ldr	r3, [r7, #28]
 8002eb0:	005b      	lsls	r3, r3, #1
 8002eb2:	fa02 f303 	lsl.w	r3, r2, r3
 8002eb6:	69ba      	ldr	r2, [r7, #24]
 8002eb8:	4313      	orrs	r3, r2
 8002eba:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 8002ebc:	687b      	ldr	r3, [r7, #4]
 8002ebe:	69ba      	ldr	r2, [r7, #24]
 8002ec0:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8002ec2:	687b      	ldr	r3, [r7, #4]
 8002ec4:	685b      	ldr	r3, [r3, #4]
 8002ec6:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 8002ec8:	2201      	movs	r2, #1
 8002eca:	69fb      	ldr	r3, [r7, #28]
 8002ecc:	fa02 f303 	lsl.w	r3, r2, r3
 8002ed0:	43db      	mvns	r3, r3
 8002ed2:	69ba      	ldr	r2, [r7, #24]
 8002ed4:	4013      	ands	r3, r2
 8002ed6:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8002ed8:	683b      	ldr	r3, [r7, #0]
 8002eda:	685b      	ldr	r3, [r3, #4]
 8002edc:	091b      	lsrs	r3, r3, #4
 8002ede:	f003 0201 	and.w	r2, r3, #1
 8002ee2:	69fb      	ldr	r3, [r7, #28]
 8002ee4:	fa02 f303 	lsl.w	r3, r2, r3
 8002ee8:	69ba      	ldr	r2, [r7, #24]
 8002eea:	4313      	orrs	r3, r2
 8002eec:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 8002eee:	687b      	ldr	r3, [r7, #4]
 8002ef0:	69ba      	ldr	r2, [r7, #24]
 8002ef2:	605a      	str	r2, [r3, #4]
      }
      
      if((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8002ef4:	683b      	ldr	r3, [r7, #0]
 8002ef6:	685b      	ldr	r3, [r3, #4]
 8002ef8:	f003 0303 	and.w	r3, r3, #3
 8002efc:	2b03      	cmp	r3, #3
 8002efe:	d017      	beq.n	8002f30 <HAL_GPIO_Init+0xf4>
      {
        /* Check the Pull parameter */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 8002f00:	687b      	ldr	r3, [r7, #4]
 8002f02:	68db      	ldr	r3, [r3, #12]
 8002f04:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2));
 8002f06:	69fb      	ldr	r3, [r7, #28]
 8002f08:	005b      	lsls	r3, r3, #1
 8002f0a:	2203      	movs	r2, #3
 8002f0c:	fa02 f303 	lsl.w	r3, r2, r3
 8002f10:	43db      	mvns	r3, r3
 8002f12:	69ba      	ldr	r2, [r7, #24]
 8002f14:	4013      	ands	r3, r2
 8002f16:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Pull) << (position * 2));
 8002f18:	683b      	ldr	r3, [r7, #0]
 8002f1a:	689a      	ldr	r2, [r3, #8]
 8002f1c:	69fb      	ldr	r3, [r7, #28]
 8002f1e:	005b      	lsls	r3, r3, #1
 8002f20:	fa02 f303 	lsl.w	r3, r2, r3
 8002f24:	69ba      	ldr	r2, [r7, #24]
 8002f26:	4313      	orrs	r3, r2
 8002f28:	61bb      	str	r3, [r7, #24]
        GPIOx->PUPDR = temp;
 8002f2a:	687b      	ldr	r3, [r7, #4]
 8002f2c:	69ba      	ldr	r2, [r7, #24]
 8002f2e:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8002f30:	683b      	ldr	r3, [r7, #0]
 8002f32:	685b      	ldr	r3, [r3, #4]
 8002f34:	f003 0303 	and.w	r3, r3, #3
 8002f38:	2b02      	cmp	r3, #2
 8002f3a:	d123      	bne.n	8002f84 <HAL_GPIO_Init+0x148>
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3];
 8002f3c:	69fb      	ldr	r3, [r7, #28]
 8002f3e:	08da      	lsrs	r2, r3, #3
 8002f40:	687b      	ldr	r3, [r7, #4]
 8002f42:	3208      	adds	r2, #8
 8002f44:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8002f48:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)0xF << ((uint32_t)(position & (uint32_t)0x07) * 4)) ;
 8002f4a:	69fb      	ldr	r3, [r7, #28]
 8002f4c:	f003 0307 	and.w	r3, r3, #7
 8002f50:	009b      	lsls	r3, r3, #2
 8002f52:	220f      	movs	r2, #15
 8002f54:	fa02 f303 	lsl.w	r3, r2, r3
 8002f58:	43db      	mvns	r3, r3
 8002f5a:	69ba      	ldr	r2, [r7, #24]
 8002f5c:	4013      	ands	r3, r2
 8002f5e:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & (uint32_t)0x07) * 4));
 8002f60:	683b      	ldr	r3, [r7, #0]
 8002f62:	691a      	ldr	r2, [r3, #16]
 8002f64:	69fb      	ldr	r3, [r7, #28]
 8002f66:	f003 0307 	and.w	r3, r3, #7
 8002f6a:	009b      	lsls	r3, r3, #2
 8002f6c:	fa02 f303 	lsl.w	r3, r2, r3
 8002f70:	69ba      	ldr	r2, [r7, #24]
 8002f72:	4313      	orrs	r3, r2
 8002f74:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3] = temp;
 8002f76:	69fb      	ldr	r3, [r7, #28]
 8002f78:	08da      	lsrs	r2, r3, #3
 8002f7a:	687b      	ldr	r3, [r7, #4]
 8002f7c:	3208      	adds	r2, #8
 8002f7e:	69b9      	ldr	r1, [r7, #24]
 8002f80:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }
      
      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8002f84:	687b      	ldr	r3, [r7, #4]
 8002f86:	681b      	ldr	r3, [r3, #0]
 8002f88:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2));
 8002f8a:	69fb      	ldr	r3, [r7, #28]
 8002f8c:	005b      	lsls	r3, r3, #1
 8002f8e:	2203      	movs	r2, #3
 8002f90:	fa02 f303 	lsl.w	r3, r2, r3
 8002f94:	43db      	mvns	r3, r3
 8002f96:	69ba      	ldr	r2, [r7, #24]
 8002f98:	4013      	ands	r3, r2
 8002f9a:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2));
 8002f9c:	683b      	ldr	r3, [r7, #0]
 8002f9e:	685b      	ldr	r3, [r3, #4]
 8002fa0:	f003 0203 	and.w	r2, r3, #3
 8002fa4:	69fb      	ldr	r3, [r7, #28]
 8002fa6:	005b      	lsls	r3, r3, #1
 8002fa8:	fa02 f303 	lsl.w	r3, r2, r3
 8002fac:	69ba      	ldr	r2, [r7, #24]
 8002fae:	4313      	orrs	r3, r2
 8002fb0:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 8002fb2:	687b      	ldr	r3, [r7, #4]
 8002fb4:	69ba      	ldr	r2, [r7, #24]
 8002fb6:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) != 0x00u)
 8002fb8:	683b      	ldr	r3, [r7, #0]
 8002fba:	685b      	ldr	r3, [r3, #4]
 8002fbc:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 8002fc0:	2b00      	cmp	r3, #0
 8002fc2:	f000 80be 	beq.w	8003142 <HAL_GPIO_Init+0x306>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8002fc6:	4b66      	ldr	r3, [pc, #408]	; (8003160 <HAL_GPIO_Init+0x324>)
 8002fc8:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002fca:	4a65      	ldr	r2, [pc, #404]	; (8003160 <HAL_GPIO_Init+0x324>)
 8002fcc:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8002fd0:	6453      	str	r3, [r2, #68]	; 0x44
 8002fd2:	4b63      	ldr	r3, [pc, #396]	; (8003160 <HAL_GPIO_Init+0x324>)
 8002fd4:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002fd6:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8002fda:	60fb      	str	r3, [r7, #12]
 8002fdc:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2];
 8002fde:	4a61      	ldr	r2, [pc, #388]	; (8003164 <HAL_GPIO_Init+0x328>)
 8002fe0:	69fb      	ldr	r3, [r7, #28]
 8002fe2:	089b      	lsrs	r3, r3, #2
 8002fe4:	3302      	adds	r3, #2
 8002fe6:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8002fea:	61bb      	str	r3, [r7, #24]
        temp &= ~(((uint32_t)0x0F) << (4 * (position & 0x03)));
 8002fec:	69fb      	ldr	r3, [r7, #28]
 8002fee:	f003 0303 	and.w	r3, r3, #3
 8002ff2:	009b      	lsls	r3, r3, #2
 8002ff4:	220f      	movs	r2, #15
 8002ff6:	fa02 f303 	lsl.w	r3, r2, r3
 8002ffa:	43db      	mvns	r3, r3
 8002ffc:	69ba      	ldr	r2, [r7, #24]
 8002ffe:	4013      	ands	r3, r2
 8003000:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4 * (position & 0x03)));
 8003002:	687b      	ldr	r3, [r7, #4]
 8003004:	4a58      	ldr	r2, [pc, #352]	; (8003168 <HAL_GPIO_Init+0x32c>)
 8003006:	4293      	cmp	r3, r2
 8003008:	d037      	beq.n	800307a <HAL_GPIO_Init+0x23e>
 800300a:	687b      	ldr	r3, [r7, #4]
 800300c:	4a57      	ldr	r2, [pc, #348]	; (800316c <HAL_GPIO_Init+0x330>)
 800300e:	4293      	cmp	r3, r2
 8003010:	d031      	beq.n	8003076 <HAL_GPIO_Init+0x23a>
 8003012:	687b      	ldr	r3, [r7, #4]
 8003014:	4a56      	ldr	r2, [pc, #344]	; (8003170 <HAL_GPIO_Init+0x334>)
 8003016:	4293      	cmp	r3, r2
 8003018:	d02b      	beq.n	8003072 <HAL_GPIO_Init+0x236>
 800301a:	687b      	ldr	r3, [r7, #4]
 800301c:	4a55      	ldr	r2, [pc, #340]	; (8003174 <HAL_GPIO_Init+0x338>)
 800301e:	4293      	cmp	r3, r2
 8003020:	d025      	beq.n	800306e <HAL_GPIO_Init+0x232>
 8003022:	687b      	ldr	r3, [r7, #4]
 8003024:	4a54      	ldr	r2, [pc, #336]	; (8003178 <HAL_GPIO_Init+0x33c>)
 8003026:	4293      	cmp	r3, r2
 8003028:	d01f      	beq.n	800306a <HAL_GPIO_Init+0x22e>
 800302a:	687b      	ldr	r3, [r7, #4]
 800302c:	4a53      	ldr	r2, [pc, #332]	; (800317c <HAL_GPIO_Init+0x340>)
 800302e:	4293      	cmp	r3, r2
 8003030:	d019      	beq.n	8003066 <HAL_GPIO_Init+0x22a>
 8003032:	687b      	ldr	r3, [r7, #4]
 8003034:	4a52      	ldr	r2, [pc, #328]	; (8003180 <HAL_GPIO_Init+0x344>)
 8003036:	4293      	cmp	r3, r2
 8003038:	d013      	beq.n	8003062 <HAL_GPIO_Init+0x226>
 800303a:	687b      	ldr	r3, [r7, #4]
 800303c:	4a51      	ldr	r2, [pc, #324]	; (8003184 <HAL_GPIO_Init+0x348>)
 800303e:	4293      	cmp	r3, r2
 8003040:	d00d      	beq.n	800305e <HAL_GPIO_Init+0x222>
 8003042:	687b      	ldr	r3, [r7, #4]
 8003044:	4a50      	ldr	r2, [pc, #320]	; (8003188 <HAL_GPIO_Init+0x34c>)
 8003046:	4293      	cmp	r3, r2
 8003048:	d007      	beq.n	800305a <HAL_GPIO_Init+0x21e>
 800304a:	687b      	ldr	r3, [r7, #4]
 800304c:	4a4f      	ldr	r2, [pc, #316]	; (800318c <HAL_GPIO_Init+0x350>)
 800304e:	4293      	cmp	r3, r2
 8003050:	d101      	bne.n	8003056 <HAL_GPIO_Init+0x21a>
 8003052:	2309      	movs	r3, #9
 8003054:	e012      	b.n	800307c <HAL_GPIO_Init+0x240>
 8003056:	230a      	movs	r3, #10
 8003058:	e010      	b.n	800307c <HAL_GPIO_Init+0x240>
 800305a:	2308      	movs	r3, #8
 800305c:	e00e      	b.n	800307c <HAL_GPIO_Init+0x240>
 800305e:	2307      	movs	r3, #7
 8003060:	e00c      	b.n	800307c <HAL_GPIO_Init+0x240>
 8003062:	2306      	movs	r3, #6
 8003064:	e00a      	b.n	800307c <HAL_GPIO_Init+0x240>
 8003066:	2305      	movs	r3, #5
 8003068:	e008      	b.n	800307c <HAL_GPIO_Init+0x240>
 800306a:	2304      	movs	r3, #4
 800306c:	e006      	b.n	800307c <HAL_GPIO_Init+0x240>
 800306e:	2303      	movs	r3, #3
 8003070:	e004      	b.n	800307c <HAL_GPIO_Init+0x240>
 8003072:	2302      	movs	r3, #2
 8003074:	e002      	b.n	800307c <HAL_GPIO_Init+0x240>
 8003076:	2301      	movs	r3, #1
 8003078:	e000      	b.n	800307c <HAL_GPIO_Init+0x240>
 800307a:	2300      	movs	r3, #0
 800307c:	69fa      	ldr	r2, [r7, #28]
 800307e:	f002 0203 	and.w	r2, r2, #3
 8003082:	0092      	lsls	r2, r2, #2
 8003084:	4093      	lsls	r3, r2
 8003086:	69ba      	ldr	r2, [r7, #24]
 8003088:	4313      	orrs	r3, r2
 800308a:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2] = temp;
 800308c:	4935      	ldr	r1, [pc, #212]	; (8003164 <HAL_GPIO_Init+0x328>)
 800308e:	69fb      	ldr	r3, [r7, #28]
 8003090:	089b      	lsrs	r3, r3, #2
 8003092:	3302      	adds	r3, #2
 8003094:	69ba      	ldr	r2, [r7, #24]
 8003096:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 800309a:	4b3d      	ldr	r3, [pc, #244]	; (8003190 <HAL_GPIO_Init+0x354>)
 800309c:	689b      	ldr	r3, [r3, #8]
 800309e:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 80030a0:	693b      	ldr	r3, [r7, #16]
 80030a2:	43db      	mvns	r3, r3
 80030a4:	69ba      	ldr	r2, [r7, #24]
 80030a6:	4013      	ands	r3, r2
 80030a8:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_RISING) != 0x00u)
 80030aa:	683b      	ldr	r3, [r7, #0]
 80030ac:	685b      	ldr	r3, [r3, #4]
 80030ae:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 80030b2:	2b00      	cmp	r3, #0
 80030b4:	d003      	beq.n	80030be <HAL_GPIO_Init+0x282>
        {
          temp |= iocurrent;
 80030b6:	69ba      	ldr	r2, [r7, #24]
 80030b8:	693b      	ldr	r3, [r7, #16]
 80030ba:	4313      	orrs	r3, r2
 80030bc:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR = temp;
 80030be:	4a34      	ldr	r2, [pc, #208]	; (8003190 <HAL_GPIO_Init+0x354>)
 80030c0:	69bb      	ldr	r3, [r7, #24]
 80030c2:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 80030c4:	4b32      	ldr	r3, [pc, #200]	; (8003190 <HAL_GPIO_Init+0x354>)
 80030c6:	68db      	ldr	r3, [r3, #12]
 80030c8:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 80030ca:	693b      	ldr	r3, [r7, #16]
 80030cc:	43db      	mvns	r3, r3
 80030ce:	69ba      	ldr	r2, [r7, #24]
 80030d0:	4013      	ands	r3, r2
 80030d2:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00u)
 80030d4:	683b      	ldr	r3, [r7, #0]
 80030d6:	685b      	ldr	r3, [r3, #4]
 80030d8:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 80030dc:	2b00      	cmp	r3, #0
 80030de:	d003      	beq.n	80030e8 <HAL_GPIO_Init+0x2ac>
        {
          temp |= iocurrent;
 80030e0:	69ba      	ldr	r2, [r7, #24]
 80030e2:	693b      	ldr	r3, [r7, #16]
 80030e4:	4313      	orrs	r3, r2
 80030e6:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR = temp;
 80030e8:	4a29      	ldr	r2, [pc, #164]	; (8003190 <HAL_GPIO_Init+0x354>)
 80030ea:	69bb      	ldr	r3, [r7, #24]
 80030ec:	60d3      	str	r3, [r2, #12]

        temp = EXTI->EMR;
 80030ee:	4b28      	ldr	r3, [pc, #160]	; (8003190 <HAL_GPIO_Init+0x354>)
 80030f0:	685b      	ldr	r3, [r3, #4]
 80030f2:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 80030f4:	693b      	ldr	r3, [r7, #16]
 80030f6:	43db      	mvns	r3, r3
 80030f8:	69ba      	ldr	r2, [r7, #24]
 80030fa:	4013      	ands	r3, r2
 80030fc:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_EVT) != 0x00u)
 80030fe:	683b      	ldr	r3, [r7, #0]
 8003100:	685b      	ldr	r3, [r3, #4]
 8003102:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8003106:	2b00      	cmp	r3, #0
 8003108:	d003      	beq.n	8003112 <HAL_GPIO_Init+0x2d6>
        {
          temp |= iocurrent;
 800310a:	69ba      	ldr	r2, [r7, #24]
 800310c:	693b      	ldr	r3, [r7, #16]
 800310e:	4313      	orrs	r3, r2
 8003110:	61bb      	str	r3, [r7, #24]
        }
        EXTI->EMR = temp;
 8003112:	4a1f      	ldr	r2, [pc, #124]	; (8003190 <HAL_GPIO_Init+0x354>)
 8003114:	69bb      	ldr	r3, [r7, #24]
 8003116:	6053      	str	r3, [r2, #4]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 8003118:	4b1d      	ldr	r3, [pc, #116]	; (8003190 <HAL_GPIO_Init+0x354>)
 800311a:	681b      	ldr	r3, [r3, #0]
 800311c:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 800311e:	693b      	ldr	r3, [r7, #16]
 8003120:	43db      	mvns	r3, r3
 8003122:	69ba      	ldr	r2, [r7, #24]
 8003124:	4013      	ands	r3, r2
 8003126:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_IT) != 0x00u)
 8003128:	683b      	ldr	r3, [r7, #0]
 800312a:	685b      	ldr	r3, [r3, #4]
 800312c:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8003130:	2b00      	cmp	r3, #0
 8003132:	d003      	beq.n	800313c <HAL_GPIO_Init+0x300>
        {
          temp |= iocurrent;
 8003134:	69ba      	ldr	r2, [r7, #24]
 8003136:	693b      	ldr	r3, [r7, #16]
 8003138:	4313      	orrs	r3, r2
 800313a:	61bb      	str	r3, [r7, #24]
        }
        EXTI->IMR = temp;
 800313c:	4a14      	ldr	r2, [pc, #80]	; (8003190 <HAL_GPIO_Init+0x354>)
 800313e:	69bb      	ldr	r3, [r7, #24]
 8003140:	6013      	str	r3, [r2, #0]
  for(position = 0; position < GPIO_NUMBER; position++)
 8003142:	69fb      	ldr	r3, [r7, #28]
 8003144:	3301      	adds	r3, #1
 8003146:	61fb      	str	r3, [r7, #28]
 8003148:	69fb      	ldr	r3, [r7, #28]
 800314a:	2b0f      	cmp	r3, #15
 800314c:	f67f ae86 	bls.w	8002e5c <HAL_GPIO_Init+0x20>
      }
    }
  }
}
 8003150:	bf00      	nop
 8003152:	bf00      	nop
 8003154:	3724      	adds	r7, #36	; 0x24
 8003156:	46bd      	mov	sp, r7
 8003158:	f85d 7b04 	ldr.w	r7, [sp], #4
 800315c:	4770      	bx	lr
 800315e:	bf00      	nop
 8003160:	40023800 	.word	0x40023800
 8003164:	40013800 	.word	0x40013800
 8003168:	40020000 	.word	0x40020000
 800316c:	40020400 	.word	0x40020400
 8003170:	40020800 	.word	0x40020800
 8003174:	40020c00 	.word	0x40020c00
 8003178:	40021000 	.word	0x40021000
 800317c:	40021400 	.word	0x40021400
 8003180:	40021800 	.word	0x40021800
 8003184:	40021c00 	.word	0x40021c00
 8003188:	40022000 	.word	0x40022000
 800318c:	40022400 	.word	0x40022400
 8003190:	40013c00 	.word	0x40013c00

08003194 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8003194:	b480      	push	{r7}
 8003196:	b083      	sub	sp, #12
 8003198:	af00      	add	r7, sp, #0
 800319a:	6078      	str	r0, [r7, #4]
 800319c:	460b      	mov	r3, r1
 800319e:	807b      	strh	r3, [r7, #2]
 80031a0:	4613      	mov	r3, r2
 80031a2:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 80031a4:	787b      	ldrb	r3, [r7, #1]
 80031a6:	2b00      	cmp	r3, #0
 80031a8:	d003      	beq.n	80031b2 <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 80031aa:	887a      	ldrh	r2, [r7, #2]
 80031ac:	687b      	ldr	r3, [r7, #4]
 80031ae:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16;
  }
}
 80031b0:	e003      	b.n	80031ba <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16;
 80031b2:	887b      	ldrh	r3, [r7, #2]
 80031b4:	041a      	lsls	r2, r3, #16
 80031b6:	687b      	ldr	r3, [r7, #4]
 80031b8:	619a      	str	r2, [r3, #24]
}
 80031ba:	bf00      	nop
 80031bc:	370c      	adds	r7, #12
 80031be:	46bd      	mov	sp, r7
 80031c0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80031c4:	4770      	bx	lr

080031c6 <HAL_GPIO_TogglePin>:
  * @param  GPIOx Where x can be (A..I) to select the GPIO peripheral.
  * @param  GPIO_Pin Specifies the pins to be toggled.
  * @retval None
  */
void HAL_GPIO_TogglePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin)
{
 80031c6:	b480      	push	{r7}
 80031c8:	b085      	sub	sp, #20
 80031ca:	af00      	add	r7, sp, #0
 80031cc:	6078      	str	r0, [r7, #4]
 80031ce:	460b      	mov	r3, r1
 80031d0:	807b      	strh	r3, [r7, #2]

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  /* get current Output Data Register value */
  odr = GPIOx->ODR;
 80031d2:	687b      	ldr	r3, [r7, #4]
 80031d4:	695b      	ldr	r3, [r3, #20]
 80031d6:	60fb      	str	r3, [r7, #12]

  /* Set selected pins that were at low level, and reset ones that were high */
  GPIOx->BSRR = ((odr & GPIO_Pin) << GPIO_NUMBER) | (~odr & GPIO_Pin);
 80031d8:	887a      	ldrh	r2, [r7, #2]
 80031da:	68fb      	ldr	r3, [r7, #12]
 80031dc:	4013      	ands	r3, r2
 80031de:	041a      	lsls	r2, r3, #16
 80031e0:	68fb      	ldr	r3, [r7, #12]
 80031e2:	43d9      	mvns	r1, r3
 80031e4:	887b      	ldrh	r3, [r7, #2]
 80031e6:	400b      	ands	r3, r1
 80031e8:	431a      	orrs	r2, r3
 80031ea:	687b      	ldr	r3, [r7, #4]
 80031ec:	619a      	str	r2, [r3, #24]
}
 80031ee:	bf00      	nop
 80031f0:	3714      	adds	r7, #20
 80031f2:	46bd      	mov	sp, r7
 80031f4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80031f8:	4770      	bx	lr
	...

080031fc <HAL_PWR_EnableBkUpAccess>:
  * @note If the HSE divided by 2, 3, ..31 is used as the RTC clock, the 
  *         Backup Domain Access should be kept enabled.
  * @retval None
  */
void HAL_PWR_EnableBkUpAccess(void)
{
 80031fc:	b480      	push	{r7}
 80031fe:	af00      	add	r7, sp, #0
  /* Enable access to RTC and backup registers */
  SET_BIT(PWR->CR1, PWR_CR1_DBP);
 8003200:	4b05      	ldr	r3, [pc, #20]	; (8003218 <HAL_PWR_EnableBkUpAccess+0x1c>)
 8003202:	681b      	ldr	r3, [r3, #0]
 8003204:	4a04      	ldr	r2, [pc, #16]	; (8003218 <HAL_PWR_EnableBkUpAccess+0x1c>)
 8003206:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 800320a:	6013      	str	r3, [r2, #0]
}
 800320c:	bf00      	nop
 800320e:	46bd      	mov	sp, r7
 8003210:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003214:	4770      	bx	lr
 8003216:	bf00      	nop
 8003218:	40007000 	.word	0x40007000

0800321c <HAL_PWREx_EnableOverDrive>:
  *         During the Over-drive switch activation, no peripheral clocks should be enabled.   
  *         The peripheral clocks must be enabled once the Over-drive mode is activated.   
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PWREx_EnableOverDrive(void)
{
 800321c:	b580      	push	{r7, lr}
 800321e:	b082      	sub	sp, #8
 8003220:	af00      	add	r7, sp, #0
  uint32_t tickstart = 0;
 8003222:	2300      	movs	r3, #0
 8003224:	607b      	str	r3, [r7, #4]

  __HAL_RCC_PWR_CLK_ENABLE();
 8003226:	4b23      	ldr	r3, [pc, #140]	; (80032b4 <HAL_PWREx_EnableOverDrive+0x98>)
 8003228:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800322a:	4a22      	ldr	r2, [pc, #136]	; (80032b4 <HAL_PWREx_EnableOverDrive+0x98>)
 800322c:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8003230:	6413      	str	r3, [r2, #64]	; 0x40
 8003232:	4b20      	ldr	r3, [pc, #128]	; (80032b4 <HAL_PWREx_EnableOverDrive+0x98>)
 8003234:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003236:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800323a:	603b      	str	r3, [r7, #0]
 800323c:	683b      	ldr	r3, [r7, #0]
  
  /* Enable the Over-drive to extend the clock frequency to 216 MHz */
  __HAL_PWR_OVERDRIVE_ENABLE();
 800323e:	4b1e      	ldr	r3, [pc, #120]	; (80032b8 <HAL_PWREx_EnableOverDrive+0x9c>)
 8003240:	681b      	ldr	r3, [r3, #0]
 8003242:	4a1d      	ldr	r2, [pc, #116]	; (80032b8 <HAL_PWREx_EnableOverDrive+0x9c>)
 8003244:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8003248:	6013      	str	r3, [r2, #0]

  /* Get tick */
  tickstart = HAL_GetTick();
 800324a:	f7fe fcb1 	bl	8001bb0 <HAL_GetTick>
 800324e:	6078      	str	r0, [r7, #4]

  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_ODRDY))
 8003250:	e009      	b.n	8003266 <HAL_PWREx_EnableOverDrive+0x4a>
  {
    if((HAL_GetTick() - tickstart ) > PWR_OVERDRIVE_TIMEOUT_VALUE)
 8003252:	f7fe fcad 	bl	8001bb0 <HAL_GetTick>
 8003256:	4602      	mov	r2, r0
 8003258:	687b      	ldr	r3, [r7, #4]
 800325a:	1ad3      	subs	r3, r2, r3
 800325c:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 8003260:	d901      	bls.n	8003266 <HAL_PWREx_EnableOverDrive+0x4a>
    {
      return HAL_TIMEOUT;
 8003262:	2303      	movs	r3, #3
 8003264:	e022      	b.n	80032ac <HAL_PWREx_EnableOverDrive+0x90>
  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_ODRDY))
 8003266:	4b14      	ldr	r3, [pc, #80]	; (80032b8 <HAL_PWREx_EnableOverDrive+0x9c>)
 8003268:	685b      	ldr	r3, [r3, #4]
 800326a:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 800326e:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8003272:	d1ee      	bne.n	8003252 <HAL_PWREx_EnableOverDrive+0x36>
    }
  }
  
  /* Enable the Over-drive switch */
  __HAL_PWR_OVERDRIVESWITCHING_ENABLE();
 8003274:	4b10      	ldr	r3, [pc, #64]	; (80032b8 <HAL_PWREx_EnableOverDrive+0x9c>)
 8003276:	681b      	ldr	r3, [r3, #0]
 8003278:	4a0f      	ldr	r2, [pc, #60]	; (80032b8 <HAL_PWREx_EnableOverDrive+0x9c>)
 800327a:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 800327e:	6013      	str	r3, [r2, #0]

  /* Get tick */
  tickstart = HAL_GetTick();
 8003280:	f7fe fc96 	bl	8001bb0 <HAL_GetTick>
 8003284:	6078      	str	r0, [r7, #4]

  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_ODSWRDY))
 8003286:	e009      	b.n	800329c <HAL_PWREx_EnableOverDrive+0x80>
  {
    if((HAL_GetTick() - tickstart ) > PWR_OVERDRIVE_TIMEOUT_VALUE)
 8003288:	f7fe fc92 	bl	8001bb0 <HAL_GetTick>
 800328c:	4602      	mov	r2, r0
 800328e:	687b      	ldr	r3, [r7, #4]
 8003290:	1ad3      	subs	r3, r2, r3
 8003292:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 8003296:	d901      	bls.n	800329c <HAL_PWREx_EnableOverDrive+0x80>
    {
      return HAL_TIMEOUT;
 8003298:	2303      	movs	r3, #3
 800329a:	e007      	b.n	80032ac <HAL_PWREx_EnableOverDrive+0x90>
  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_ODSWRDY))
 800329c:	4b06      	ldr	r3, [pc, #24]	; (80032b8 <HAL_PWREx_EnableOverDrive+0x9c>)
 800329e:	685b      	ldr	r3, [r3, #4]
 80032a0:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80032a4:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 80032a8:	d1ee      	bne.n	8003288 <HAL_PWREx_EnableOverDrive+0x6c>
    }
  } 
  return HAL_OK;
 80032aa:	2300      	movs	r3, #0
}
 80032ac:	4618      	mov	r0, r3
 80032ae:	3708      	adds	r7, #8
 80032b0:	46bd      	mov	sp, r7
 80032b2:	bd80      	pop	{r7, pc}
 80032b4:	40023800 	.word	0x40023800
 80032b8:	40007000 	.word	0x40007000

080032bc <HAL_RCC_OscConfig>:
  *         supported by this function. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 80032bc:	b580      	push	{r7, lr}
 80032be:	b086      	sub	sp, #24
 80032c0:	af00      	add	r7, sp, #0
 80032c2:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t pll_config;
  FlagStatus pwrclkchanged = RESET;
 80032c4:	2300      	movs	r3, #0
 80032c6:	75fb      	strb	r3, [r7, #23]

  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 80032c8:	687b      	ldr	r3, [r7, #4]
 80032ca:	2b00      	cmp	r3, #0
 80032cc:	d101      	bne.n	80032d2 <HAL_RCC_OscConfig+0x16>
  {
    return HAL_ERROR;
 80032ce:	2301      	movs	r3, #1
 80032d0:	e29b      	b.n	800380a <HAL_RCC_OscConfig+0x54e>

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 80032d2:	687b      	ldr	r3, [r7, #4]
 80032d4:	681b      	ldr	r3, [r3, #0]
 80032d6:	f003 0301 	and.w	r3, r3, #1
 80032da:	2b00      	cmp	r3, #0
 80032dc:	f000 8087 	beq.w	80033ee <HAL_RCC_OscConfig+0x132>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
    /* When the HSE is used as system clock or clock source for PLL, It can not be disabled */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSE)
 80032e0:	4b96      	ldr	r3, [pc, #600]	; (800353c <HAL_RCC_OscConfig+0x280>)
 80032e2:	689b      	ldr	r3, [r3, #8]
 80032e4:	f003 030c 	and.w	r3, r3, #12
 80032e8:	2b04      	cmp	r3, #4
 80032ea:	d00c      	beq.n	8003306 <HAL_RCC_OscConfig+0x4a>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 80032ec:	4b93      	ldr	r3, [pc, #588]	; (800353c <HAL_RCC_OscConfig+0x280>)
 80032ee:	689b      	ldr	r3, [r3, #8]
 80032f0:	f003 030c 	and.w	r3, r3, #12
 80032f4:	2b08      	cmp	r3, #8
 80032f6:	d112      	bne.n	800331e <HAL_RCC_OscConfig+0x62>
 80032f8:	4b90      	ldr	r3, [pc, #576]	; (800353c <HAL_RCC_OscConfig+0x280>)
 80032fa:	685b      	ldr	r3, [r3, #4]
 80032fc:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8003300:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8003304:	d10b      	bne.n	800331e <HAL_RCC_OscConfig+0x62>
    {
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8003306:	4b8d      	ldr	r3, [pc, #564]	; (800353c <HAL_RCC_OscConfig+0x280>)
 8003308:	681b      	ldr	r3, [r3, #0]
 800330a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800330e:	2b00      	cmp	r3, #0
 8003310:	d06c      	beq.n	80033ec <HAL_RCC_OscConfig+0x130>
 8003312:	687b      	ldr	r3, [r7, #4]
 8003314:	685b      	ldr	r3, [r3, #4]
 8003316:	2b00      	cmp	r3, #0
 8003318:	d168      	bne.n	80033ec <HAL_RCC_OscConfig+0x130>
      {
        return HAL_ERROR;
 800331a:	2301      	movs	r3, #1
 800331c:	e275      	b.n	800380a <HAL_RCC_OscConfig+0x54e>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 800331e:	687b      	ldr	r3, [r7, #4]
 8003320:	685b      	ldr	r3, [r3, #4]
 8003322:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8003326:	d106      	bne.n	8003336 <HAL_RCC_OscConfig+0x7a>
 8003328:	4b84      	ldr	r3, [pc, #528]	; (800353c <HAL_RCC_OscConfig+0x280>)
 800332a:	681b      	ldr	r3, [r3, #0]
 800332c:	4a83      	ldr	r2, [pc, #524]	; (800353c <HAL_RCC_OscConfig+0x280>)
 800332e:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8003332:	6013      	str	r3, [r2, #0]
 8003334:	e02e      	b.n	8003394 <HAL_RCC_OscConfig+0xd8>
 8003336:	687b      	ldr	r3, [r7, #4]
 8003338:	685b      	ldr	r3, [r3, #4]
 800333a:	2b00      	cmp	r3, #0
 800333c:	d10c      	bne.n	8003358 <HAL_RCC_OscConfig+0x9c>
 800333e:	4b7f      	ldr	r3, [pc, #508]	; (800353c <HAL_RCC_OscConfig+0x280>)
 8003340:	681b      	ldr	r3, [r3, #0]
 8003342:	4a7e      	ldr	r2, [pc, #504]	; (800353c <HAL_RCC_OscConfig+0x280>)
 8003344:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8003348:	6013      	str	r3, [r2, #0]
 800334a:	4b7c      	ldr	r3, [pc, #496]	; (800353c <HAL_RCC_OscConfig+0x280>)
 800334c:	681b      	ldr	r3, [r3, #0]
 800334e:	4a7b      	ldr	r2, [pc, #492]	; (800353c <HAL_RCC_OscConfig+0x280>)
 8003350:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8003354:	6013      	str	r3, [r2, #0]
 8003356:	e01d      	b.n	8003394 <HAL_RCC_OscConfig+0xd8>
 8003358:	687b      	ldr	r3, [r7, #4]
 800335a:	685b      	ldr	r3, [r3, #4]
 800335c:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8003360:	d10c      	bne.n	800337c <HAL_RCC_OscConfig+0xc0>
 8003362:	4b76      	ldr	r3, [pc, #472]	; (800353c <HAL_RCC_OscConfig+0x280>)
 8003364:	681b      	ldr	r3, [r3, #0]
 8003366:	4a75      	ldr	r2, [pc, #468]	; (800353c <HAL_RCC_OscConfig+0x280>)
 8003368:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 800336c:	6013      	str	r3, [r2, #0]
 800336e:	4b73      	ldr	r3, [pc, #460]	; (800353c <HAL_RCC_OscConfig+0x280>)
 8003370:	681b      	ldr	r3, [r3, #0]
 8003372:	4a72      	ldr	r2, [pc, #456]	; (800353c <HAL_RCC_OscConfig+0x280>)
 8003374:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8003378:	6013      	str	r3, [r2, #0]
 800337a:	e00b      	b.n	8003394 <HAL_RCC_OscConfig+0xd8>
 800337c:	4b6f      	ldr	r3, [pc, #444]	; (800353c <HAL_RCC_OscConfig+0x280>)
 800337e:	681b      	ldr	r3, [r3, #0]
 8003380:	4a6e      	ldr	r2, [pc, #440]	; (800353c <HAL_RCC_OscConfig+0x280>)
 8003382:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8003386:	6013      	str	r3, [r2, #0]
 8003388:	4b6c      	ldr	r3, [pc, #432]	; (800353c <HAL_RCC_OscConfig+0x280>)
 800338a:	681b      	ldr	r3, [r3, #0]
 800338c:	4a6b      	ldr	r2, [pc, #428]	; (800353c <HAL_RCC_OscConfig+0x280>)
 800338e:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8003392:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if (RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8003394:	687b      	ldr	r3, [r7, #4]
 8003396:	685b      	ldr	r3, [r3, #4]
 8003398:	2b00      	cmp	r3, #0
 800339a:	d013      	beq.n	80033c4 <HAL_RCC_OscConfig+0x108>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800339c:	f7fe fc08 	bl	8001bb0 <HAL_GetTick>
 80033a0:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80033a2:	e008      	b.n	80033b6 <HAL_RCC_OscConfig+0xfa>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 80033a4:	f7fe fc04 	bl	8001bb0 <HAL_GetTick>
 80033a8:	4602      	mov	r2, r0
 80033aa:	693b      	ldr	r3, [r7, #16]
 80033ac:	1ad3      	subs	r3, r2, r3
 80033ae:	2b64      	cmp	r3, #100	; 0x64
 80033b0:	d901      	bls.n	80033b6 <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 80033b2:	2303      	movs	r3, #3
 80033b4:	e229      	b.n	800380a <HAL_RCC_OscConfig+0x54e>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80033b6:	4b61      	ldr	r3, [pc, #388]	; (800353c <HAL_RCC_OscConfig+0x280>)
 80033b8:	681b      	ldr	r3, [r3, #0]
 80033ba:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80033be:	2b00      	cmp	r3, #0
 80033c0:	d0f0      	beq.n	80033a4 <HAL_RCC_OscConfig+0xe8>
 80033c2:	e014      	b.n	80033ee <HAL_RCC_OscConfig+0x132>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80033c4:	f7fe fbf4 	bl	8001bb0 <HAL_GetTick>
 80033c8:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is bypassed or disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 80033ca:	e008      	b.n	80033de <HAL_RCC_OscConfig+0x122>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 80033cc:	f7fe fbf0 	bl	8001bb0 <HAL_GetTick>
 80033d0:	4602      	mov	r2, r0
 80033d2:	693b      	ldr	r3, [r7, #16]
 80033d4:	1ad3      	subs	r3, r2, r3
 80033d6:	2b64      	cmp	r3, #100	; 0x64
 80033d8:	d901      	bls.n	80033de <HAL_RCC_OscConfig+0x122>
          {
            return HAL_TIMEOUT;
 80033da:	2303      	movs	r3, #3
 80033dc:	e215      	b.n	800380a <HAL_RCC_OscConfig+0x54e>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 80033de:	4b57      	ldr	r3, [pc, #348]	; (800353c <HAL_RCC_OscConfig+0x280>)
 80033e0:	681b      	ldr	r3, [r3, #0]
 80033e2:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80033e6:	2b00      	cmp	r3, #0
 80033e8:	d1f0      	bne.n	80033cc <HAL_RCC_OscConfig+0x110>
 80033ea:	e000      	b.n	80033ee <HAL_RCC_OscConfig+0x132>
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80033ec:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 80033ee:	687b      	ldr	r3, [r7, #4]
 80033f0:	681b      	ldr	r3, [r3, #0]
 80033f2:	f003 0302 	and.w	r3, r3, #2
 80033f6:	2b00      	cmp	r3, #0
 80033f8:	d069      	beq.n	80034ce <HAL_RCC_OscConfig+0x212>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSI)
 80033fa:	4b50      	ldr	r3, [pc, #320]	; (800353c <HAL_RCC_OscConfig+0x280>)
 80033fc:	689b      	ldr	r3, [r3, #8]
 80033fe:	f003 030c 	and.w	r3, r3, #12
 8003402:	2b00      	cmp	r3, #0
 8003404:	d00b      	beq.n	800341e <HAL_RCC_OscConfig+0x162>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8003406:	4b4d      	ldr	r3, [pc, #308]	; (800353c <HAL_RCC_OscConfig+0x280>)
 8003408:	689b      	ldr	r3, [r3, #8]
 800340a:	f003 030c 	and.w	r3, r3, #12
 800340e:	2b08      	cmp	r3, #8
 8003410:	d11c      	bne.n	800344c <HAL_RCC_OscConfig+0x190>
 8003412:	4b4a      	ldr	r3, [pc, #296]	; (800353c <HAL_RCC_OscConfig+0x280>)
 8003414:	685b      	ldr	r3, [r3, #4]
 8003416:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 800341a:	2b00      	cmp	r3, #0
 800341c:	d116      	bne.n	800344c <HAL_RCC_OscConfig+0x190>
    {
      /* When HSI is used as system clock it will not disabled */
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 800341e:	4b47      	ldr	r3, [pc, #284]	; (800353c <HAL_RCC_OscConfig+0x280>)
 8003420:	681b      	ldr	r3, [r3, #0]
 8003422:	f003 0302 	and.w	r3, r3, #2
 8003426:	2b00      	cmp	r3, #0
 8003428:	d005      	beq.n	8003436 <HAL_RCC_OscConfig+0x17a>
 800342a:	687b      	ldr	r3, [r7, #4]
 800342c:	68db      	ldr	r3, [r3, #12]
 800342e:	2b01      	cmp	r3, #1
 8003430:	d001      	beq.n	8003436 <HAL_RCC_OscConfig+0x17a>
      {
        return HAL_ERROR;
 8003432:	2301      	movs	r3, #1
 8003434:	e1e9      	b.n	800380a <HAL_RCC_OscConfig+0x54e>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8003436:	4b41      	ldr	r3, [pc, #260]	; (800353c <HAL_RCC_OscConfig+0x280>)
 8003438:	681b      	ldr	r3, [r3, #0]
 800343a:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 800343e:	687b      	ldr	r3, [r7, #4]
 8003440:	691b      	ldr	r3, [r3, #16]
 8003442:	00db      	lsls	r3, r3, #3
 8003444:	493d      	ldr	r1, [pc, #244]	; (800353c <HAL_RCC_OscConfig+0x280>)
 8003446:	4313      	orrs	r3, r2
 8003448:	600b      	str	r3, [r1, #0]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 800344a:	e040      	b.n	80034ce <HAL_RCC_OscConfig+0x212>
      }
    }
    else
    {
      /* Check the HSI State */
      if ((RCC_OscInitStruct->HSIState) != RCC_HSI_OFF)
 800344c:	687b      	ldr	r3, [r7, #4]
 800344e:	68db      	ldr	r3, [r3, #12]
 8003450:	2b00      	cmp	r3, #0
 8003452:	d023      	beq.n	800349c <HAL_RCC_OscConfig+0x1e0>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8003454:	4b39      	ldr	r3, [pc, #228]	; (800353c <HAL_RCC_OscConfig+0x280>)
 8003456:	681b      	ldr	r3, [r3, #0]
 8003458:	4a38      	ldr	r2, [pc, #224]	; (800353c <HAL_RCC_OscConfig+0x280>)
 800345a:	f043 0301 	orr.w	r3, r3, #1
 800345e:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003460:	f7fe fba6 	bl	8001bb0 <HAL_GetTick>
 8003464:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8003466:	e008      	b.n	800347a <HAL_RCC_OscConfig+0x1be>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8003468:	f7fe fba2 	bl	8001bb0 <HAL_GetTick>
 800346c:	4602      	mov	r2, r0
 800346e:	693b      	ldr	r3, [r7, #16]
 8003470:	1ad3      	subs	r3, r2, r3
 8003472:	2b02      	cmp	r3, #2
 8003474:	d901      	bls.n	800347a <HAL_RCC_OscConfig+0x1be>
          {
            return HAL_TIMEOUT;
 8003476:	2303      	movs	r3, #3
 8003478:	e1c7      	b.n	800380a <HAL_RCC_OscConfig+0x54e>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 800347a:	4b30      	ldr	r3, [pc, #192]	; (800353c <HAL_RCC_OscConfig+0x280>)
 800347c:	681b      	ldr	r3, [r3, #0]
 800347e:	f003 0302 	and.w	r3, r3, #2
 8003482:	2b00      	cmp	r3, #0
 8003484:	d0f0      	beq.n	8003468 <HAL_RCC_OscConfig+0x1ac>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8003486:	4b2d      	ldr	r3, [pc, #180]	; (800353c <HAL_RCC_OscConfig+0x280>)
 8003488:	681b      	ldr	r3, [r3, #0]
 800348a:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 800348e:	687b      	ldr	r3, [r7, #4]
 8003490:	691b      	ldr	r3, [r3, #16]
 8003492:	00db      	lsls	r3, r3, #3
 8003494:	4929      	ldr	r1, [pc, #164]	; (800353c <HAL_RCC_OscConfig+0x280>)
 8003496:	4313      	orrs	r3, r2
 8003498:	600b      	str	r3, [r1, #0]
 800349a:	e018      	b.n	80034ce <HAL_RCC_OscConfig+0x212>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 800349c:	4b27      	ldr	r3, [pc, #156]	; (800353c <HAL_RCC_OscConfig+0x280>)
 800349e:	681b      	ldr	r3, [r3, #0]
 80034a0:	4a26      	ldr	r2, [pc, #152]	; (800353c <HAL_RCC_OscConfig+0x280>)
 80034a2:	f023 0301 	bic.w	r3, r3, #1
 80034a6:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80034a8:	f7fe fb82 	bl	8001bb0 <HAL_GetTick>
 80034ac:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 80034ae:	e008      	b.n	80034c2 <HAL_RCC_OscConfig+0x206>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 80034b0:	f7fe fb7e 	bl	8001bb0 <HAL_GetTick>
 80034b4:	4602      	mov	r2, r0
 80034b6:	693b      	ldr	r3, [r7, #16]
 80034b8:	1ad3      	subs	r3, r2, r3
 80034ba:	2b02      	cmp	r3, #2
 80034bc:	d901      	bls.n	80034c2 <HAL_RCC_OscConfig+0x206>
          {
            return HAL_TIMEOUT;
 80034be:	2303      	movs	r3, #3
 80034c0:	e1a3      	b.n	800380a <HAL_RCC_OscConfig+0x54e>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 80034c2:	4b1e      	ldr	r3, [pc, #120]	; (800353c <HAL_RCC_OscConfig+0x280>)
 80034c4:	681b      	ldr	r3, [r3, #0]
 80034c6:	f003 0302 	and.w	r3, r3, #2
 80034ca:	2b00      	cmp	r3, #0
 80034cc:	d1f0      	bne.n	80034b0 <HAL_RCC_OscConfig+0x1f4>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 80034ce:	687b      	ldr	r3, [r7, #4]
 80034d0:	681b      	ldr	r3, [r3, #0]
 80034d2:	f003 0308 	and.w	r3, r3, #8
 80034d6:	2b00      	cmp	r3, #0
 80034d8:	d038      	beq.n	800354c <HAL_RCC_OscConfig+0x290>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if ((RCC_OscInitStruct->LSIState) != RCC_LSI_OFF)
 80034da:	687b      	ldr	r3, [r7, #4]
 80034dc:	695b      	ldr	r3, [r3, #20]
 80034de:	2b00      	cmp	r3, #0
 80034e0:	d019      	beq.n	8003516 <HAL_RCC_OscConfig+0x25a>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 80034e2:	4b16      	ldr	r3, [pc, #88]	; (800353c <HAL_RCC_OscConfig+0x280>)
 80034e4:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 80034e6:	4a15      	ldr	r2, [pc, #84]	; (800353c <HAL_RCC_OscConfig+0x280>)
 80034e8:	f043 0301 	orr.w	r3, r3, #1
 80034ec:	6753      	str	r3, [r2, #116]	; 0x74

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80034ee:	f7fe fb5f 	bl	8001bb0 <HAL_GetTick>
 80034f2:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 80034f4:	e008      	b.n	8003508 <HAL_RCC_OscConfig+0x24c>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 80034f6:	f7fe fb5b 	bl	8001bb0 <HAL_GetTick>
 80034fa:	4602      	mov	r2, r0
 80034fc:	693b      	ldr	r3, [r7, #16]
 80034fe:	1ad3      	subs	r3, r2, r3
 8003500:	2b02      	cmp	r3, #2
 8003502:	d901      	bls.n	8003508 <HAL_RCC_OscConfig+0x24c>
        {
          return HAL_TIMEOUT;
 8003504:	2303      	movs	r3, #3
 8003506:	e180      	b.n	800380a <HAL_RCC_OscConfig+0x54e>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8003508:	4b0c      	ldr	r3, [pc, #48]	; (800353c <HAL_RCC_OscConfig+0x280>)
 800350a:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800350c:	f003 0302 	and.w	r3, r3, #2
 8003510:	2b00      	cmp	r3, #0
 8003512:	d0f0      	beq.n	80034f6 <HAL_RCC_OscConfig+0x23a>
 8003514:	e01a      	b.n	800354c <HAL_RCC_OscConfig+0x290>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8003516:	4b09      	ldr	r3, [pc, #36]	; (800353c <HAL_RCC_OscConfig+0x280>)
 8003518:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800351a:	4a08      	ldr	r2, [pc, #32]	; (800353c <HAL_RCC_OscConfig+0x280>)
 800351c:	f023 0301 	bic.w	r3, r3, #1
 8003520:	6753      	str	r3, [r2, #116]	; 0x74

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8003522:	f7fe fb45 	bl	8001bb0 <HAL_GetTick>
 8003526:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8003528:	e00a      	b.n	8003540 <HAL_RCC_OscConfig+0x284>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 800352a:	f7fe fb41 	bl	8001bb0 <HAL_GetTick>
 800352e:	4602      	mov	r2, r0
 8003530:	693b      	ldr	r3, [r7, #16]
 8003532:	1ad3      	subs	r3, r2, r3
 8003534:	2b02      	cmp	r3, #2
 8003536:	d903      	bls.n	8003540 <HAL_RCC_OscConfig+0x284>
        {
          return HAL_TIMEOUT;
 8003538:	2303      	movs	r3, #3
 800353a:	e166      	b.n	800380a <HAL_RCC_OscConfig+0x54e>
 800353c:	40023800 	.word	0x40023800
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8003540:	4b92      	ldr	r3, [pc, #584]	; (800378c <HAL_RCC_OscConfig+0x4d0>)
 8003542:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8003544:	f003 0302 	and.w	r3, r3, #2
 8003548:	2b00      	cmp	r3, #0
 800354a:	d1ee      	bne.n	800352a <HAL_RCC_OscConfig+0x26e>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 800354c:	687b      	ldr	r3, [r7, #4]
 800354e:	681b      	ldr	r3, [r3, #0]
 8003550:	f003 0304 	and.w	r3, r3, #4
 8003554:	2b00      	cmp	r3, #0
 8003556:	f000 80a4 	beq.w	80036a2 <HAL_RCC_OscConfig+0x3e6>
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 800355a:	4b8c      	ldr	r3, [pc, #560]	; (800378c <HAL_RCC_OscConfig+0x4d0>)
 800355c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800355e:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8003562:	2b00      	cmp	r3, #0
 8003564:	d10d      	bne.n	8003582 <HAL_RCC_OscConfig+0x2c6>
    {
      /* Enable Power Clock*/
      __HAL_RCC_PWR_CLK_ENABLE();
 8003566:	4b89      	ldr	r3, [pc, #548]	; (800378c <HAL_RCC_OscConfig+0x4d0>)
 8003568:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800356a:	4a88      	ldr	r2, [pc, #544]	; (800378c <HAL_RCC_OscConfig+0x4d0>)
 800356c:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8003570:	6413      	str	r3, [r2, #64]	; 0x40
 8003572:	4b86      	ldr	r3, [pc, #536]	; (800378c <HAL_RCC_OscConfig+0x4d0>)
 8003574:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003576:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800357a:	60bb      	str	r3, [r7, #8]
 800357c:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 800357e:	2301      	movs	r3, #1
 8003580:	75fb      	strb	r3, [r7, #23]
    }

    if (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8003582:	4b83      	ldr	r3, [pc, #524]	; (8003790 <HAL_RCC_OscConfig+0x4d4>)
 8003584:	681b      	ldr	r3, [r3, #0]
 8003586:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800358a:	2b00      	cmp	r3, #0
 800358c:	d118      	bne.n	80035c0 <HAL_RCC_OscConfig+0x304>
    {
      /* Enable write access to Backup domain */
      PWR->CR1 |= PWR_CR1_DBP;
 800358e:	4b80      	ldr	r3, [pc, #512]	; (8003790 <HAL_RCC_OscConfig+0x4d4>)
 8003590:	681b      	ldr	r3, [r3, #0]
 8003592:	4a7f      	ldr	r2, [pc, #508]	; (8003790 <HAL_RCC_OscConfig+0x4d4>)
 8003594:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8003598:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 800359a:	f7fe fb09 	bl	8001bb0 <HAL_GetTick>
 800359e:	6138      	str	r0, [r7, #16]

      while (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 80035a0:	e008      	b.n	80035b4 <HAL_RCC_OscConfig+0x2f8>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 80035a2:	f7fe fb05 	bl	8001bb0 <HAL_GetTick>
 80035a6:	4602      	mov	r2, r0
 80035a8:	693b      	ldr	r3, [r7, #16]
 80035aa:	1ad3      	subs	r3, r2, r3
 80035ac:	2b64      	cmp	r3, #100	; 0x64
 80035ae:	d901      	bls.n	80035b4 <HAL_RCC_OscConfig+0x2f8>
        {
          return HAL_TIMEOUT;
 80035b0:	2303      	movs	r3, #3
 80035b2:	e12a      	b.n	800380a <HAL_RCC_OscConfig+0x54e>
      while (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 80035b4:	4b76      	ldr	r3, [pc, #472]	; (8003790 <HAL_RCC_OscConfig+0x4d4>)
 80035b6:	681b      	ldr	r3, [r3, #0]
 80035b8:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80035bc:	2b00      	cmp	r3, #0
 80035be:	d0f0      	beq.n	80035a2 <HAL_RCC_OscConfig+0x2e6>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 80035c0:	687b      	ldr	r3, [r7, #4]
 80035c2:	689b      	ldr	r3, [r3, #8]
 80035c4:	2b01      	cmp	r3, #1
 80035c6:	d106      	bne.n	80035d6 <HAL_RCC_OscConfig+0x31a>
 80035c8:	4b70      	ldr	r3, [pc, #448]	; (800378c <HAL_RCC_OscConfig+0x4d0>)
 80035ca:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80035cc:	4a6f      	ldr	r2, [pc, #444]	; (800378c <HAL_RCC_OscConfig+0x4d0>)
 80035ce:	f043 0301 	orr.w	r3, r3, #1
 80035d2:	6713      	str	r3, [r2, #112]	; 0x70
 80035d4:	e02d      	b.n	8003632 <HAL_RCC_OscConfig+0x376>
 80035d6:	687b      	ldr	r3, [r7, #4]
 80035d8:	689b      	ldr	r3, [r3, #8]
 80035da:	2b00      	cmp	r3, #0
 80035dc:	d10c      	bne.n	80035f8 <HAL_RCC_OscConfig+0x33c>
 80035de:	4b6b      	ldr	r3, [pc, #428]	; (800378c <HAL_RCC_OscConfig+0x4d0>)
 80035e0:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80035e2:	4a6a      	ldr	r2, [pc, #424]	; (800378c <HAL_RCC_OscConfig+0x4d0>)
 80035e4:	f023 0301 	bic.w	r3, r3, #1
 80035e8:	6713      	str	r3, [r2, #112]	; 0x70
 80035ea:	4b68      	ldr	r3, [pc, #416]	; (800378c <HAL_RCC_OscConfig+0x4d0>)
 80035ec:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80035ee:	4a67      	ldr	r2, [pc, #412]	; (800378c <HAL_RCC_OscConfig+0x4d0>)
 80035f0:	f023 0304 	bic.w	r3, r3, #4
 80035f4:	6713      	str	r3, [r2, #112]	; 0x70
 80035f6:	e01c      	b.n	8003632 <HAL_RCC_OscConfig+0x376>
 80035f8:	687b      	ldr	r3, [r7, #4]
 80035fa:	689b      	ldr	r3, [r3, #8]
 80035fc:	2b05      	cmp	r3, #5
 80035fe:	d10c      	bne.n	800361a <HAL_RCC_OscConfig+0x35e>
 8003600:	4b62      	ldr	r3, [pc, #392]	; (800378c <HAL_RCC_OscConfig+0x4d0>)
 8003602:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003604:	4a61      	ldr	r2, [pc, #388]	; (800378c <HAL_RCC_OscConfig+0x4d0>)
 8003606:	f043 0304 	orr.w	r3, r3, #4
 800360a:	6713      	str	r3, [r2, #112]	; 0x70
 800360c:	4b5f      	ldr	r3, [pc, #380]	; (800378c <HAL_RCC_OscConfig+0x4d0>)
 800360e:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003610:	4a5e      	ldr	r2, [pc, #376]	; (800378c <HAL_RCC_OscConfig+0x4d0>)
 8003612:	f043 0301 	orr.w	r3, r3, #1
 8003616:	6713      	str	r3, [r2, #112]	; 0x70
 8003618:	e00b      	b.n	8003632 <HAL_RCC_OscConfig+0x376>
 800361a:	4b5c      	ldr	r3, [pc, #368]	; (800378c <HAL_RCC_OscConfig+0x4d0>)
 800361c:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800361e:	4a5b      	ldr	r2, [pc, #364]	; (800378c <HAL_RCC_OscConfig+0x4d0>)
 8003620:	f023 0301 	bic.w	r3, r3, #1
 8003624:	6713      	str	r3, [r2, #112]	; 0x70
 8003626:	4b59      	ldr	r3, [pc, #356]	; (800378c <HAL_RCC_OscConfig+0x4d0>)
 8003628:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800362a:	4a58      	ldr	r2, [pc, #352]	; (800378c <HAL_RCC_OscConfig+0x4d0>)
 800362c:	f023 0304 	bic.w	r3, r3, #4
 8003630:	6713      	str	r3, [r2, #112]	; 0x70
    /* Check the LSE State */
    if ((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 8003632:	687b      	ldr	r3, [r7, #4]
 8003634:	689b      	ldr	r3, [r3, #8]
 8003636:	2b00      	cmp	r3, #0
 8003638:	d015      	beq.n	8003666 <HAL_RCC_OscConfig+0x3aa>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800363a:	f7fe fab9 	bl	8001bb0 <HAL_GetTick>
 800363e:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8003640:	e00a      	b.n	8003658 <HAL_RCC_OscConfig+0x39c>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8003642:	f7fe fab5 	bl	8001bb0 <HAL_GetTick>
 8003646:	4602      	mov	r2, r0
 8003648:	693b      	ldr	r3, [r7, #16]
 800364a:	1ad3      	subs	r3, r2, r3
 800364c:	f241 3288 	movw	r2, #5000	; 0x1388
 8003650:	4293      	cmp	r3, r2
 8003652:	d901      	bls.n	8003658 <HAL_RCC_OscConfig+0x39c>
        {
          return HAL_TIMEOUT;
 8003654:	2303      	movs	r3, #3
 8003656:	e0d8      	b.n	800380a <HAL_RCC_OscConfig+0x54e>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8003658:	4b4c      	ldr	r3, [pc, #304]	; (800378c <HAL_RCC_OscConfig+0x4d0>)
 800365a:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800365c:	f003 0302 	and.w	r3, r3, #2
 8003660:	2b00      	cmp	r3, #0
 8003662:	d0ee      	beq.n	8003642 <HAL_RCC_OscConfig+0x386>
 8003664:	e014      	b.n	8003690 <HAL_RCC_OscConfig+0x3d4>
      }
    }
    else
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8003666:	f7fe faa3 	bl	8001bb0 <HAL_GetTick>
 800366a:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 800366c:	e00a      	b.n	8003684 <HAL_RCC_OscConfig+0x3c8>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 800366e:	f7fe fa9f 	bl	8001bb0 <HAL_GetTick>
 8003672:	4602      	mov	r2, r0
 8003674:	693b      	ldr	r3, [r7, #16]
 8003676:	1ad3      	subs	r3, r2, r3
 8003678:	f241 3288 	movw	r2, #5000	; 0x1388
 800367c:	4293      	cmp	r3, r2
 800367e:	d901      	bls.n	8003684 <HAL_RCC_OscConfig+0x3c8>
        {
          return HAL_TIMEOUT;
 8003680:	2303      	movs	r3, #3
 8003682:	e0c2      	b.n	800380a <HAL_RCC_OscConfig+0x54e>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8003684:	4b41      	ldr	r3, [pc, #260]	; (800378c <HAL_RCC_OscConfig+0x4d0>)
 8003686:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003688:	f003 0302 	and.w	r3, r3, #2
 800368c:	2b00      	cmp	r3, #0
 800368e:	d1ee      	bne.n	800366e <HAL_RCC_OscConfig+0x3b2>
        }
      }
    }

    /* Restore clock configuration if changed */
    if (pwrclkchanged == SET)
 8003690:	7dfb      	ldrb	r3, [r7, #23]
 8003692:	2b01      	cmp	r3, #1
 8003694:	d105      	bne.n	80036a2 <HAL_RCC_OscConfig+0x3e6>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8003696:	4b3d      	ldr	r3, [pc, #244]	; (800378c <HAL_RCC_OscConfig+0x4d0>)
 8003698:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800369a:	4a3c      	ldr	r2, [pc, #240]	; (800378c <HAL_RCC_OscConfig+0x4d0>)
 800369c:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 80036a0:	6413      	str	r3, [r2, #64]	; 0x40
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 80036a2:	687b      	ldr	r3, [r7, #4]
 80036a4:	699b      	ldr	r3, [r3, #24]
 80036a6:	2b00      	cmp	r3, #0
 80036a8:	f000 80ae 	beq.w	8003808 <HAL_RCC_OscConfig+0x54c>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 80036ac:	4b37      	ldr	r3, [pc, #220]	; (800378c <HAL_RCC_OscConfig+0x4d0>)
 80036ae:	689b      	ldr	r3, [r3, #8]
 80036b0:	f003 030c 	and.w	r3, r3, #12
 80036b4:	2b08      	cmp	r3, #8
 80036b6:	d06d      	beq.n	8003794 <HAL_RCC_OscConfig+0x4d8>
    {
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 80036b8:	687b      	ldr	r3, [r7, #4]
 80036ba:	699b      	ldr	r3, [r3, #24]
 80036bc:	2b02      	cmp	r3, #2
 80036be:	d14b      	bne.n	8003758 <HAL_RCC_OscConfig+0x49c>
#if defined (RCC_PLLCFGR_PLLR)
        assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));
#endif

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80036c0:	4b32      	ldr	r3, [pc, #200]	; (800378c <HAL_RCC_OscConfig+0x4d0>)
 80036c2:	681b      	ldr	r3, [r3, #0]
 80036c4:	4a31      	ldr	r2, [pc, #196]	; (800378c <HAL_RCC_OscConfig+0x4d0>)
 80036c6:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 80036ca:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80036cc:	f7fe fa70 	bl	8001bb0 <HAL_GetTick>
 80036d0:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 80036d2:	e008      	b.n	80036e6 <HAL_RCC_OscConfig+0x42a>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80036d4:	f7fe fa6c 	bl	8001bb0 <HAL_GetTick>
 80036d8:	4602      	mov	r2, r0
 80036da:	693b      	ldr	r3, [r7, #16]
 80036dc:	1ad3      	subs	r3, r2, r3
 80036de:	2b02      	cmp	r3, #2
 80036e0:	d901      	bls.n	80036e6 <HAL_RCC_OscConfig+0x42a>
          {
            return HAL_TIMEOUT;
 80036e2:	2303      	movs	r3, #3
 80036e4:	e091      	b.n	800380a <HAL_RCC_OscConfig+0x54e>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 80036e6:	4b29      	ldr	r3, [pc, #164]	; (800378c <HAL_RCC_OscConfig+0x4d0>)
 80036e8:	681b      	ldr	r3, [r3, #0]
 80036ea:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80036ee:	2b00      	cmp	r3, #0
 80036f0:	d1f0      	bne.n	80036d4 <HAL_RCC_OscConfig+0x418>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
#if defined (RCC_PLLCFGR_PLLR)
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 80036f2:	687b      	ldr	r3, [r7, #4]
 80036f4:	69da      	ldr	r2, [r3, #28]
 80036f6:	687b      	ldr	r3, [r7, #4]
 80036f8:	6a1b      	ldr	r3, [r3, #32]
 80036fa:	431a      	orrs	r2, r3
 80036fc:	687b      	ldr	r3, [r7, #4]
 80036fe:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003700:	019b      	lsls	r3, r3, #6
 8003702:	431a      	orrs	r2, r3
 8003704:	687b      	ldr	r3, [r7, #4]
 8003706:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003708:	085b      	lsrs	r3, r3, #1
 800370a:	3b01      	subs	r3, #1
 800370c:	041b      	lsls	r3, r3, #16
 800370e:	431a      	orrs	r2, r3
 8003710:	687b      	ldr	r3, [r7, #4]
 8003712:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003714:	061b      	lsls	r3, r3, #24
 8003716:	431a      	orrs	r2, r3
 8003718:	687b      	ldr	r3, [r7, #4]
 800371a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800371c:	071b      	lsls	r3, r3, #28
 800371e:	491b      	ldr	r1, [pc, #108]	; (800378c <HAL_RCC_OscConfig+0x4d0>)
 8003720:	4313      	orrs	r3, r2
 8003722:	604b      	str	r3, [r1, #4]
                             RCC_OscInitStruct->PLL.PLLP,
                             RCC_OscInitStruct->PLL.PLLQ);
#endif

        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8003724:	4b19      	ldr	r3, [pc, #100]	; (800378c <HAL_RCC_OscConfig+0x4d0>)
 8003726:	681b      	ldr	r3, [r3, #0]
 8003728:	4a18      	ldr	r2, [pc, #96]	; (800378c <HAL_RCC_OscConfig+0x4d0>)
 800372a:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 800372e:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003730:	f7fe fa3e 	bl	8001bb0 <HAL_GetTick>
 8003734:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8003736:	e008      	b.n	800374a <HAL_RCC_OscConfig+0x48e>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8003738:	f7fe fa3a 	bl	8001bb0 <HAL_GetTick>
 800373c:	4602      	mov	r2, r0
 800373e:	693b      	ldr	r3, [r7, #16]
 8003740:	1ad3      	subs	r3, r2, r3
 8003742:	2b02      	cmp	r3, #2
 8003744:	d901      	bls.n	800374a <HAL_RCC_OscConfig+0x48e>
          {
            return HAL_TIMEOUT;
 8003746:	2303      	movs	r3, #3
 8003748:	e05f      	b.n	800380a <HAL_RCC_OscConfig+0x54e>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 800374a:	4b10      	ldr	r3, [pc, #64]	; (800378c <HAL_RCC_OscConfig+0x4d0>)
 800374c:	681b      	ldr	r3, [r3, #0]
 800374e:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8003752:	2b00      	cmp	r3, #0
 8003754:	d0f0      	beq.n	8003738 <HAL_RCC_OscConfig+0x47c>
 8003756:	e057      	b.n	8003808 <HAL_RCC_OscConfig+0x54c>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8003758:	4b0c      	ldr	r3, [pc, #48]	; (800378c <HAL_RCC_OscConfig+0x4d0>)
 800375a:	681b      	ldr	r3, [r3, #0]
 800375c:	4a0b      	ldr	r2, [pc, #44]	; (800378c <HAL_RCC_OscConfig+0x4d0>)
 800375e:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 8003762:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003764:	f7fe fa24 	bl	8001bb0 <HAL_GetTick>
 8003768:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 800376a:	e008      	b.n	800377e <HAL_RCC_OscConfig+0x4c2>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 800376c:	f7fe fa20 	bl	8001bb0 <HAL_GetTick>
 8003770:	4602      	mov	r2, r0
 8003772:	693b      	ldr	r3, [r7, #16]
 8003774:	1ad3      	subs	r3, r2, r3
 8003776:	2b02      	cmp	r3, #2
 8003778:	d901      	bls.n	800377e <HAL_RCC_OscConfig+0x4c2>
          {
            return HAL_TIMEOUT;
 800377a:	2303      	movs	r3, #3
 800377c:	e045      	b.n	800380a <HAL_RCC_OscConfig+0x54e>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 800377e:	4b03      	ldr	r3, [pc, #12]	; (800378c <HAL_RCC_OscConfig+0x4d0>)
 8003780:	681b      	ldr	r3, [r3, #0]
 8003782:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8003786:	2b00      	cmp	r3, #0
 8003788:	d1f0      	bne.n	800376c <HAL_RCC_OscConfig+0x4b0>
 800378a:	e03d      	b.n	8003808 <HAL_RCC_OscConfig+0x54c>
 800378c:	40023800 	.word	0x40023800
 8003790:	40007000 	.word	0x40007000
      }
    }
    else
    {
      /* Do not return HAL_ERROR if request repeats the current configuration */
      pll_config = RCC->PLLCFGR;
 8003794:	4b1f      	ldr	r3, [pc, #124]	; (8003814 <HAL_RCC_OscConfig+0x558>)
 8003796:	685b      	ldr	r3, [r3, #4]
 8003798:	60fb      	str	r3, [r7, #12]
#if defined (RCC_PLLCFGR_PLLR)
      if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 800379a:	687b      	ldr	r3, [r7, #4]
 800379c:	699b      	ldr	r3, [r3, #24]
 800379e:	2b01      	cmp	r3, #1
 80037a0:	d030      	beq.n	8003804 <HAL_RCC_OscConfig+0x548>
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 80037a2:	68fb      	ldr	r3, [r7, #12]
 80037a4:	f403 0280 	and.w	r2, r3, #4194304	; 0x400000
 80037a8:	687b      	ldr	r3, [r7, #4]
 80037aa:	69db      	ldr	r3, [r3, #28]
      if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 80037ac:	429a      	cmp	r2, r3
 80037ae:	d129      	bne.n	8003804 <HAL_RCC_OscConfig+0x548>
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != RCC_OscInitStruct->PLL.PLLM) ||
 80037b0:	68fb      	ldr	r3, [r7, #12]
 80037b2:	f003 023f 	and.w	r2, r3, #63	; 0x3f
 80037b6:	687b      	ldr	r3, [r7, #4]
 80037b8:	6a1b      	ldr	r3, [r3, #32]
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 80037ba:	429a      	cmp	r2, r3
 80037bc:	d122      	bne.n	8003804 <HAL_RCC_OscConfig+0x548>
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 80037be:	68fa      	ldr	r2, [r7, #12]
 80037c0:	f647 73c0 	movw	r3, #32704	; 0x7fc0
 80037c4:	4013      	ands	r3, r2
 80037c6:	687a      	ldr	r2, [r7, #4]
 80037c8:	6a52      	ldr	r2, [r2, #36]	; 0x24
 80037ca:	0192      	lsls	r2, r2, #6
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != RCC_OscInitStruct->PLL.PLLM) ||
 80037cc:	4293      	cmp	r3, r2
 80037ce:	d119      	bne.n	8003804 <HAL_RCC_OscConfig+0x548>
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != ((((RCC_OscInitStruct->PLL.PLLP) >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos)) ||
 80037d0:	68fb      	ldr	r3, [r7, #12]
 80037d2:	f403 3240 	and.w	r2, r3, #196608	; 0x30000
 80037d6:	687b      	ldr	r3, [r7, #4]
 80037d8:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80037da:	085b      	lsrs	r3, r3, #1
 80037dc:	3b01      	subs	r3, #1
 80037de:	041b      	lsls	r3, r3, #16
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 80037e0:	429a      	cmp	r2, r3
 80037e2:	d10f      	bne.n	8003804 <HAL_RCC_OscConfig+0x548>
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
 80037e4:	68fb      	ldr	r3, [r7, #12]
 80037e6:	f003 6270 	and.w	r2, r3, #251658240	; 0xf000000
 80037ea:	687b      	ldr	r3, [r7, #4]
 80037ec:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80037ee:	061b      	lsls	r3, r3, #24
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != ((((RCC_OscInitStruct->PLL.PLLP) >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos)) ||
 80037f0:	429a      	cmp	r2, r3
 80037f2:	d107      	bne.n	8003804 <HAL_RCC_OscConfig+0x548>
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLR) != (RCC_OscInitStruct->PLL.PLLR << RCC_PLLCFGR_PLLR_Pos)))
 80037f4:	68fb      	ldr	r3, [r7, #12]
 80037f6:	f003 42e0 	and.w	r2, r3, #1879048192	; 0x70000000
 80037fa:	687b      	ldr	r3, [r7, #4]
 80037fc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80037fe:	071b      	lsls	r3, r3, #28
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
 8003800:	429a      	cmp	r2, r3
 8003802:	d001      	beq.n	8003808 <HAL_RCC_OscConfig+0x54c>
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != ((((RCC_OscInitStruct->PLL.PLLP) >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos)) ||
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)))
#endif
      {
        return HAL_ERROR;
 8003804:	2301      	movs	r3, #1
 8003806:	e000      	b.n	800380a <HAL_RCC_OscConfig+0x54e>
      }
    }
  }
  return HAL_OK;
 8003808:	2300      	movs	r3, #0
}
 800380a:	4618      	mov	r0, r3
 800380c:	3718      	adds	r7, #24
 800380e:	46bd      	mov	sp, r7
 8003810:	bd80      	pop	{r7, pc}
 8003812:	bf00      	nop
 8003814:	40023800 	.word	0x40023800

08003818 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8003818:	b580      	push	{r7, lr}
 800381a:	b084      	sub	sp, #16
 800381c:	af00      	add	r7, sp, #0
 800381e:	6078      	str	r0, [r7, #4]
 8003820:	6039      	str	r1, [r7, #0]
  uint32_t tickstart = 0;
 8003822:	2300      	movs	r3, #0
 8003824:	60fb      	str	r3, [r7, #12]

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 8003826:	687b      	ldr	r3, [r7, #4]
 8003828:	2b00      	cmp	r3, #0
 800382a:	d101      	bne.n	8003830 <HAL_RCC_ClockConfig+0x18>
  {
    return HAL_ERROR;
 800382c:	2301      	movs	r3, #1
 800382e:	e0d0      	b.n	80039d2 <HAL_RCC_ClockConfig+0x1ba>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
     must be correctly programmed according to the frequency of the CPU clock
     (HCLK) and the supply voltage of the device. */

  /* Increasing the CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 8003830:	4b6a      	ldr	r3, [pc, #424]	; (80039dc <HAL_RCC_ClockConfig+0x1c4>)
 8003832:	681b      	ldr	r3, [r3, #0]
 8003834:	f003 030f 	and.w	r3, r3, #15
 8003838:	683a      	ldr	r2, [r7, #0]
 800383a:	429a      	cmp	r2, r3
 800383c:	d910      	bls.n	8003860 <HAL_RCC_ClockConfig+0x48>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800383e:	4b67      	ldr	r3, [pc, #412]	; (80039dc <HAL_RCC_ClockConfig+0x1c4>)
 8003840:	681b      	ldr	r3, [r3, #0]
 8003842:	f023 020f 	bic.w	r2, r3, #15
 8003846:	4965      	ldr	r1, [pc, #404]	; (80039dc <HAL_RCC_ClockConfig+0x1c4>)
 8003848:	683b      	ldr	r3, [r7, #0]
 800384a:	4313      	orrs	r3, r2
 800384c:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 800384e:	4b63      	ldr	r3, [pc, #396]	; (80039dc <HAL_RCC_ClockConfig+0x1c4>)
 8003850:	681b      	ldr	r3, [r3, #0]
 8003852:	f003 030f 	and.w	r3, r3, #15
 8003856:	683a      	ldr	r2, [r7, #0]
 8003858:	429a      	cmp	r2, r3
 800385a:	d001      	beq.n	8003860 <HAL_RCC_ClockConfig+0x48>
    {
      return HAL_ERROR;
 800385c:	2301      	movs	r3, #1
 800385e:	e0b8      	b.n	80039d2 <HAL_RCC_ClockConfig+0x1ba>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8003860:	687b      	ldr	r3, [r7, #4]
 8003862:	681b      	ldr	r3, [r3, #0]
 8003864:	f003 0302 	and.w	r3, r3, #2
 8003868:	2b00      	cmp	r3, #0
 800386a:	d020      	beq.n	80038ae <HAL_RCC_ClockConfig+0x96>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 800386c:	687b      	ldr	r3, [r7, #4]
 800386e:	681b      	ldr	r3, [r3, #0]
 8003870:	f003 0304 	and.w	r3, r3, #4
 8003874:	2b00      	cmp	r3, #0
 8003876:	d005      	beq.n	8003884 <HAL_RCC_ClockConfig+0x6c>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8003878:	4b59      	ldr	r3, [pc, #356]	; (80039e0 <HAL_RCC_ClockConfig+0x1c8>)
 800387a:	689b      	ldr	r3, [r3, #8]
 800387c:	4a58      	ldr	r2, [pc, #352]	; (80039e0 <HAL_RCC_ClockConfig+0x1c8>)
 800387e:	f443 53e0 	orr.w	r3, r3, #7168	; 0x1c00
 8003882:	6093      	str	r3, [r2, #8]
    }

    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8003884:	687b      	ldr	r3, [r7, #4]
 8003886:	681b      	ldr	r3, [r3, #0]
 8003888:	f003 0308 	and.w	r3, r3, #8
 800388c:	2b00      	cmp	r3, #0
 800388e:	d005      	beq.n	800389c <HAL_RCC_ClockConfig+0x84>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 8003890:	4b53      	ldr	r3, [pc, #332]	; (80039e0 <HAL_RCC_ClockConfig+0x1c8>)
 8003892:	689b      	ldr	r3, [r3, #8]
 8003894:	4a52      	ldr	r2, [pc, #328]	; (80039e0 <HAL_RCC_ClockConfig+0x1c8>)
 8003896:	f443 4360 	orr.w	r3, r3, #57344	; 0xe000
 800389a:	6093      	str	r3, [r2, #8]
    }

    /* Set the new HCLK clock divider */
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 800389c:	4b50      	ldr	r3, [pc, #320]	; (80039e0 <HAL_RCC_ClockConfig+0x1c8>)
 800389e:	689b      	ldr	r3, [r3, #8]
 80038a0:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 80038a4:	687b      	ldr	r3, [r7, #4]
 80038a6:	689b      	ldr	r3, [r3, #8]
 80038a8:	494d      	ldr	r1, [pc, #308]	; (80039e0 <HAL_RCC_ClockConfig+0x1c8>)
 80038aa:	4313      	orrs	r3, r2
 80038ac:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 80038ae:	687b      	ldr	r3, [r7, #4]
 80038b0:	681b      	ldr	r3, [r3, #0]
 80038b2:	f003 0301 	and.w	r3, r3, #1
 80038b6:	2b00      	cmp	r3, #0
 80038b8:	d040      	beq.n	800393c <HAL_RCC_ClockConfig+0x124>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 80038ba:	687b      	ldr	r3, [r7, #4]
 80038bc:	685b      	ldr	r3, [r3, #4]
 80038be:	2b01      	cmp	r3, #1
 80038c0:	d107      	bne.n	80038d2 <HAL_RCC_ClockConfig+0xba>
    {
      /* Check the HSE ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80038c2:	4b47      	ldr	r3, [pc, #284]	; (80039e0 <HAL_RCC_ClockConfig+0x1c8>)
 80038c4:	681b      	ldr	r3, [r3, #0]
 80038c6:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80038ca:	2b00      	cmp	r3, #0
 80038cc:	d115      	bne.n	80038fa <HAL_RCC_ClockConfig+0xe2>
      {
        return HAL_ERROR;
 80038ce:	2301      	movs	r3, #1
 80038d0:	e07f      	b.n	80039d2 <HAL_RCC_ClockConfig+0x1ba>
      }
    }
    /* PLL is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 80038d2:	687b      	ldr	r3, [r7, #4]
 80038d4:	685b      	ldr	r3, [r3, #4]
 80038d6:	2b02      	cmp	r3, #2
 80038d8:	d107      	bne.n	80038ea <HAL_RCC_ClockConfig+0xd2>
    {
      /* Check the PLL ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 80038da:	4b41      	ldr	r3, [pc, #260]	; (80039e0 <HAL_RCC_ClockConfig+0x1c8>)
 80038dc:	681b      	ldr	r3, [r3, #0]
 80038de:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80038e2:	2b00      	cmp	r3, #0
 80038e4:	d109      	bne.n	80038fa <HAL_RCC_ClockConfig+0xe2>
      {
        return HAL_ERROR;
 80038e6:	2301      	movs	r3, #1
 80038e8:	e073      	b.n	80039d2 <HAL_RCC_ClockConfig+0x1ba>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80038ea:	4b3d      	ldr	r3, [pc, #244]	; (80039e0 <HAL_RCC_ClockConfig+0x1c8>)
 80038ec:	681b      	ldr	r3, [r3, #0]
 80038ee:	f003 0302 	and.w	r3, r3, #2
 80038f2:	2b00      	cmp	r3, #0
 80038f4:	d101      	bne.n	80038fa <HAL_RCC_ClockConfig+0xe2>
      {
        return HAL_ERROR;
 80038f6:	2301      	movs	r3, #1
 80038f8:	e06b      	b.n	80039d2 <HAL_RCC_ClockConfig+0x1ba>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 80038fa:	4b39      	ldr	r3, [pc, #228]	; (80039e0 <HAL_RCC_ClockConfig+0x1c8>)
 80038fc:	689b      	ldr	r3, [r3, #8]
 80038fe:	f023 0203 	bic.w	r2, r3, #3
 8003902:	687b      	ldr	r3, [r7, #4]
 8003904:	685b      	ldr	r3, [r3, #4]
 8003906:	4936      	ldr	r1, [pc, #216]	; (80039e0 <HAL_RCC_ClockConfig+0x1c8>)
 8003908:	4313      	orrs	r3, r2
 800390a:	608b      	str	r3, [r1, #8]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 800390c:	f7fe f950 	bl	8001bb0 <HAL_GetTick>
 8003910:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8003912:	e00a      	b.n	800392a <HAL_RCC_ClockConfig+0x112>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8003914:	f7fe f94c 	bl	8001bb0 <HAL_GetTick>
 8003918:	4602      	mov	r2, r0
 800391a:	68fb      	ldr	r3, [r7, #12]
 800391c:	1ad3      	subs	r3, r2, r3
 800391e:	f241 3288 	movw	r2, #5000	; 0x1388
 8003922:	4293      	cmp	r3, r2
 8003924:	d901      	bls.n	800392a <HAL_RCC_ClockConfig+0x112>
      {
        return HAL_TIMEOUT;
 8003926:	2303      	movs	r3, #3
 8003928:	e053      	b.n	80039d2 <HAL_RCC_ClockConfig+0x1ba>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 800392a:	4b2d      	ldr	r3, [pc, #180]	; (80039e0 <HAL_RCC_ClockConfig+0x1c8>)
 800392c:	689b      	ldr	r3, [r3, #8]
 800392e:	f003 020c 	and.w	r2, r3, #12
 8003932:	687b      	ldr	r3, [r7, #4]
 8003934:	685b      	ldr	r3, [r3, #4]
 8003936:	009b      	lsls	r3, r3, #2
 8003938:	429a      	cmp	r2, r3
 800393a:	d1eb      	bne.n	8003914 <HAL_RCC_ClockConfig+0xfc>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 800393c:	4b27      	ldr	r3, [pc, #156]	; (80039dc <HAL_RCC_ClockConfig+0x1c4>)
 800393e:	681b      	ldr	r3, [r3, #0]
 8003940:	f003 030f 	and.w	r3, r3, #15
 8003944:	683a      	ldr	r2, [r7, #0]
 8003946:	429a      	cmp	r2, r3
 8003948:	d210      	bcs.n	800396c <HAL_RCC_ClockConfig+0x154>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800394a:	4b24      	ldr	r3, [pc, #144]	; (80039dc <HAL_RCC_ClockConfig+0x1c4>)
 800394c:	681b      	ldr	r3, [r3, #0]
 800394e:	f023 020f 	bic.w	r2, r3, #15
 8003952:	4922      	ldr	r1, [pc, #136]	; (80039dc <HAL_RCC_ClockConfig+0x1c4>)
 8003954:	683b      	ldr	r3, [r7, #0]
 8003956:	4313      	orrs	r3, r2
 8003958:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 800395a:	4b20      	ldr	r3, [pc, #128]	; (80039dc <HAL_RCC_ClockConfig+0x1c4>)
 800395c:	681b      	ldr	r3, [r3, #0]
 800395e:	f003 030f 	and.w	r3, r3, #15
 8003962:	683a      	ldr	r2, [r7, #0]
 8003964:	429a      	cmp	r2, r3
 8003966:	d001      	beq.n	800396c <HAL_RCC_ClockConfig+0x154>
    {
      return HAL_ERROR;
 8003968:	2301      	movs	r3, #1
 800396a:	e032      	b.n	80039d2 <HAL_RCC_ClockConfig+0x1ba>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 800396c:	687b      	ldr	r3, [r7, #4]
 800396e:	681b      	ldr	r3, [r3, #0]
 8003970:	f003 0304 	and.w	r3, r3, #4
 8003974:	2b00      	cmp	r3, #0
 8003976:	d008      	beq.n	800398a <HAL_RCC_ClockConfig+0x172>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8003978:	4b19      	ldr	r3, [pc, #100]	; (80039e0 <HAL_RCC_ClockConfig+0x1c8>)
 800397a:	689b      	ldr	r3, [r3, #8]
 800397c:	f423 52e0 	bic.w	r2, r3, #7168	; 0x1c00
 8003980:	687b      	ldr	r3, [r7, #4]
 8003982:	68db      	ldr	r3, [r3, #12]
 8003984:	4916      	ldr	r1, [pc, #88]	; (80039e0 <HAL_RCC_ClockConfig+0x1c8>)
 8003986:	4313      	orrs	r3, r2
 8003988:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 800398a:	687b      	ldr	r3, [r7, #4]
 800398c:	681b      	ldr	r3, [r3, #0]
 800398e:	f003 0308 	and.w	r3, r3, #8
 8003992:	2b00      	cmp	r3, #0
 8003994:	d009      	beq.n	80039aa <HAL_RCC_ClockConfig+0x192>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3));
 8003996:	4b12      	ldr	r3, [pc, #72]	; (80039e0 <HAL_RCC_ClockConfig+0x1c8>)
 8003998:	689b      	ldr	r3, [r3, #8]
 800399a:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
 800399e:	687b      	ldr	r3, [r7, #4]
 80039a0:	691b      	ldr	r3, [r3, #16]
 80039a2:	00db      	lsls	r3, r3, #3
 80039a4:	490e      	ldr	r1, [pc, #56]	; (80039e0 <HAL_RCC_ClockConfig+0x1c8>)
 80039a6:	4313      	orrs	r3, r2
 80039a8:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos];
 80039aa:	f000 f821 	bl	80039f0 <HAL_RCC_GetSysClockFreq>
 80039ae:	4602      	mov	r2, r0
 80039b0:	4b0b      	ldr	r3, [pc, #44]	; (80039e0 <HAL_RCC_ClockConfig+0x1c8>)
 80039b2:	689b      	ldr	r3, [r3, #8]
 80039b4:	091b      	lsrs	r3, r3, #4
 80039b6:	f003 030f 	and.w	r3, r3, #15
 80039ba:	490a      	ldr	r1, [pc, #40]	; (80039e4 <HAL_RCC_ClockConfig+0x1cc>)
 80039bc:	5ccb      	ldrb	r3, [r1, r3]
 80039be:	fa22 f303 	lsr.w	r3, r2, r3
 80039c2:	4a09      	ldr	r2, [pc, #36]	; (80039e8 <HAL_RCC_ClockConfig+0x1d0>)
 80039c4:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  HAL_InitTick(uwTickPrio);
 80039c6:	4b09      	ldr	r3, [pc, #36]	; (80039ec <HAL_RCC_ClockConfig+0x1d4>)
 80039c8:	681b      	ldr	r3, [r3, #0]
 80039ca:	4618      	mov	r0, r3
 80039cc:	f7fd ff08 	bl	80017e0 <HAL_InitTick>

  return HAL_OK;
 80039d0:	2300      	movs	r3, #0
}
 80039d2:	4618      	mov	r0, r3
 80039d4:	3710      	adds	r7, #16
 80039d6:	46bd      	mov	sp, r7
 80039d8:	bd80      	pop	{r7, pc}
 80039da:	bf00      	nop
 80039dc:	40023c00 	.word	0x40023c00
 80039e0:	40023800 	.word	0x40023800
 80039e4:	08008a80 	.word	0x08008a80
 80039e8:	20000014 	.word	0x20000014
 80039ec:	20000018 	.word	0x20000018

080039f0 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 80039f0:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 80039f4:	b094      	sub	sp, #80	; 0x50
 80039f6:	af00      	add	r7, sp, #0
  uint32_t pllm = 0, pllvco = 0, pllp = 0;
 80039f8:	2300      	movs	r3, #0
 80039fa:	647b      	str	r3, [r7, #68]	; 0x44
 80039fc:	2300      	movs	r3, #0
 80039fe:	64fb      	str	r3, [r7, #76]	; 0x4c
 8003a00:	2300      	movs	r3, #0
 8003a02:	643b      	str	r3, [r7, #64]	; 0x40
  uint32_t sysclockfreq = 0;
 8003a04:	2300      	movs	r3, #0
 8003a06:	64bb      	str	r3, [r7, #72]	; 0x48

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 8003a08:	4b79      	ldr	r3, [pc, #484]	; (8003bf0 <HAL_RCC_GetSysClockFreq+0x200>)
 8003a0a:	689b      	ldr	r3, [r3, #8]
 8003a0c:	f003 030c 	and.w	r3, r3, #12
 8003a10:	2b08      	cmp	r3, #8
 8003a12:	d00d      	beq.n	8003a30 <HAL_RCC_GetSysClockFreq+0x40>
 8003a14:	2b08      	cmp	r3, #8
 8003a16:	f200 80e1 	bhi.w	8003bdc <HAL_RCC_GetSysClockFreq+0x1ec>
 8003a1a:	2b00      	cmp	r3, #0
 8003a1c:	d002      	beq.n	8003a24 <HAL_RCC_GetSysClockFreq+0x34>
 8003a1e:	2b04      	cmp	r3, #4
 8003a20:	d003      	beq.n	8003a2a <HAL_RCC_GetSysClockFreq+0x3a>
 8003a22:	e0db      	b.n	8003bdc <HAL_RCC_GetSysClockFreq+0x1ec>
  {
    case RCC_SYSCLKSOURCE_STATUS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 8003a24:	4b73      	ldr	r3, [pc, #460]	; (8003bf4 <HAL_RCC_GetSysClockFreq+0x204>)
 8003a26:	64bb      	str	r3, [r7, #72]	; 0x48
      break;
 8003a28:	e0db      	b.n	8003be2 <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    case RCC_SYSCLKSOURCE_STATUS_HSE:  /* HSE used as system clock  source */
    {
      sysclockfreq = HSE_VALUE;
 8003a2a:	4b73      	ldr	r3, [pc, #460]	; (8003bf8 <HAL_RCC_GetSysClockFreq+0x208>)
 8003a2c:	64bb      	str	r3, [r7, #72]	; 0x48
      break;
 8003a2e:	e0d8      	b.n	8003be2 <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    case RCC_SYSCLKSOURCE_STATUS_PLLCLK:  /* PLL used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 8003a30:	4b6f      	ldr	r3, [pc, #444]	; (8003bf0 <HAL_RCC_GetSysClockFreq+0x200>)
 8003a32:	685b      	ldr	r3, [r3, #4]
 8003a34:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8003a38:	647b      	str	r3, [r7, #68]	; 0x44
      if (__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLCFGR_PLLSRC_HSI)
 8003a3a:	4b6d      	ldr	r3, [pc, #436]	; (8003bf0 <HAL_RCC_GetSysClockFreq+0x200>)
 8003a3c:	685b      	ldr	r3, [r3, #4]
 8003a3e:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8003a42:	2b00      	cmp	r3, #0
 8003a44:	d063      	beq.n	8003b0e <HAL_RCC_GetSysClockFreq+0x11e>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t)((((uint64_t) HSE_VALUE * ((uint64_t)((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8003a46:	4b6a      	ldr	r3, [pc, #424]	; (8003bf0 <HAL_RCC_GetSysClockFreq+0x200>)
 8003a48:	685b      	ldr	r3, [r3, #4]
 8003a4a:	099b      	lsrs	r3, r3, #6
 8003a4c:	2200      	movs	r2, #0
 8003a4e:	63bb      	str	r3, [r7, #56]	; 0x38
 8003a50:	63fa      	str	r2, [r7, #60]	; 0x3c
 8003a52:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8003a54:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8003a58:	633b      	str	r3, [r7, #48]	; 0x30
 8003a5a:	2300      	movs	r3, #0
 8003a5c:	637b      	str	r3, [r7, #52]	; 0x34
 8003a5e:	e9d7 450c 	ldrd	r4, r5, [r7, #48]	; 0x30
 8003a62:	4622      	mov	r2, r4
 8003a64:	462b      	mov	r3, r5
 8003a66:	f04f 0000 	mov.w	r0, #0
 8003a6a:	f04f 0100 	mov.w	r1, #0
 8003a6e:	0159      	lsls	r1, r3, #5
 8003a70:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 8003a74:	0150      	lsls	r0, r2, #5
 8003a76:	4602      	mov	r2, r0
 8003a78:	460b      	mov	r3, r1
 8003a7a:	4621      	mov	r1, r4
 8003a7c:	1a51      	subs	r1, r2, r1
 8003a7e:	6139      	str	r1, [r7, #16]
 8003a80:	4629      	mov	r1, r5
 8003a82:	eb63 0301 	sbc.w	r3, r3, r1
 8003a86:	617b      	str	r3, [r7, #20]
 8003a88:	f04f 0200 	mov.w	r2, #0
 8003a8c:	f04f 0300 	mov.w	r3, #0
 8003a90:	e9d7 ab04 	ldrd	sl, fp, [r7, #16]
 8003a94:	4659      	mov	r1, fp
 8003a96:	018b      	lsls	r3, r1, #6
 8003a98:	4651      	mov	r1, sl
 8003a9a:	ea43 6391 	orr.w	r3, r3, r1, lsr #26
 8003a9e:	4651      	mov	r1, sl
 8003aa0:	018a      	lsls	r2, r1, #6
 8003aa2:	4651      	mov	r1, sl
 8003aa4:	ebb2 0801 	subs.w	r8, r2, r1
 8003aa8:	4659      	mov	r1, fp
 8003aaa:	eb63 0901 	sbc.w	r9, r3, r1
 8003aae:	f04f 0200 	mov.w	r2, #0
 8003ab2:	f04f 0300 	mov.w	r3, #0
 8003ab6:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 8003aba:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 8003abe:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 8003ac2:	4690      	mov	r8, r2
 8003ac4:	4699      	mov	r9, r3
 8003ac6:	4623      	mov	r3, r4
 8003ac8:	eb18 0303 	adds.w	r3, r8, r3
 8003acc:	60bb      	str	r3, [r7, #8]
 8003ace:	462b      	mov	r3, r5
 8003ad0:	eb49 0303 	adc.w	r3, r9, r3
 8003ad4:	60fb      	str	r3, [r7, #12]
 8003ad6:	f04f 0200 	mov.w	r2, #0
 8003ada:	f04f 0300 	mov.w	r3, #0
 8003ade:	e9d7 4502 	ldrd	r4, r5, [r7, #8]
 8003ae2:	4629      	mov	r1, r5
 8003ae4:	024b      	lsls	r3, r1, #9
 8003ae6:	4621      	mov	r1, r4
 8003ae8:	ea43 53d1 	orr.w	r3, r3, r1, lsr #23
 8003aec:	4621      	mov	r1, r4
 8003aee:	024a      	lsls	r2, r1, #9
 8003af0:	4610      	mov	r0, r2
 8003af2:	4619      	mov	r1, r3
 8003af4:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8003af6:	2200      	movs	r2, #0
 8003af8:	62bb      	str	r3, [r7, #40]	; 0x28
 8003afa:	62fa      	str	r2, [r7, #44]	; 0x2c
 8003afc:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	; 0x28
 8003b00:	f7fc fb9e 	bl	8000240 <__aeabi_uldivmod>
 8003b04:	4602      	mov	r2, r0
 8003b06:	460b      	mov	r3, r1
 8003b08:	4613      	mov	r3, r2
 8003b0a:	64fb      	str	r3, [r7, #76]	; 0x4c
 8003b0c:	e058      	b.n	8003bc0 <HAL_RCC_GetSysClockFreq+0x1d0>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t)((((uint64_t) HSI_VALUE * ((uint64_t)((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8003b0e:	4b38      	ldr	r3, [pc, #224]	; (8003bf0 <HAL_RCC_GetSysClockFreq+0x200>)
 8003b10:	685b      	ldr	r3, [r3, #4]
 8003b12:	099b      	lsrs	r3, r3, #6
 8003b14:	2200      	movs	r2, #0
 8003b16:	4618      	mov	r0, r3
 8003b18:	4611      	mov	r1, r2
 8003b1a:	f3c0 0308 	ubfx	r3, r0, #0, #9
 8003b1e:	623b      	str	r3, [r7, #32]
 8003b20:	2300      	movs	r3, #0
 8003b22:	627b      	str	r3, [r7, #36]	; 0x24
 8003b24:	e9d7 8908 	ldrd	r8, r9, [r7, #32]
 8003b28:	4642      	mov	r2, r8
 8003b2a:	464b      	mov	r3, r9
 8003b2c:	f04f 0000 	mov.w	r0, #0
 8003b30:	f04f 0100 	mov.w	r1, #0
 8003b34:	0159      	lsls	r1, r3, #5
 8003b36:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 8003b3a:	0150      	lsls	r0, r2, #5
 8003b3c:	4602      	mov	r2, r0
 8003b3e:	460b      	mov	r3, r1
 8003b40:	4641      	mov	r1, r8
 8003b42:	ebb2 0a01 	subs.w	sl, r2, r1
 8003b46:	4649      	mov	r1, r9
 8003b48:	eb63 0b01 	sbc.w	fp, r3, r1
 8003b4c:	f04f 0200 	mov.w	r2, #0
 8003b50:	f04f 0300 	mov.w	r3, #0
 8003b54:	ea4f 138b 	mov.w	r3, fp, lsl #6
 8003b58:	ea43 639a 	orr.w	r3, r3, sl, lsr #26
 8003b5c:	ea4f 128a 	mov.w	r2, sl, lsl #6
 8003b60:	ebb2 040a 	subs.w	r4, r2, sl
 8003b64:	eb63 050b 	sbc.w	r5, r3, fp
 8003b68:	f04f 0200 	mov.w	r2, #0
 8003b6c:	f04f 0300 	mov.w	r3, #0
 8003b70:	00eb      	lsls	r3, r5, #3
 8003b72:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 8003b76:	00e2      	lsls	r2, r4, #3
 8003b78:	4614      	mov	r4, r2
 8003b7a:	461d      	mov	r5, r3
 8003b7c:	4643      	mov	r3, r8
 8003b7e:	18e3      	adds	r3, r4, r3
 8003b80:	603b      	str	r3, [r7, #0]
 8003b82:	464b      	mov	r3, r9
 8003b84:	eb45 0303 	adc.w	r3, r5, r3
 8003b88:	607b      	str	r3, [r7, #4]
 8003b8a:	f04f 0200 	mov.w	r2, #0
 8003b8e:	f04f 0300 	mov.w	r3, #0
 8003b92:	e9d7 4500 	ldrd	r4, r5, [r7]
 8003b96:	4629      	mov	r1, r5
 8003b98:	028b      	lsls	r3, r1, #10
 8003b9a:	4621      	mov	r1, r4
 8003b9c:	ea43 5391 	orr.w	r3, r3, r1, lsr #22
 8003ba0:	4621      	mov	r1, r4
 8003ba2:	028a      	lsls	r2, r1, #10
 8003ba4:	4610      	mov	r0, r2
 8003ba6:	4619      	mov	r1, r3
 8003ba8:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8003baa:	2200      	movs	r2, #0
 8003bac:	61bb      	str	r3, [r7, #24]
 8003bae:	61fa      	str	r2, [r7, #28]
 8003bb0:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 8003bb4:	f7fc fb44 	bl	8000240 <__aeabi_uldivmod>
 8003bb8:	4602      	mov	r2, r0
 8003bba:	460b      	mov	r3, r1
 8003bbc:	4613      	mov	r3, r2
 8003bbe:	64fb      	str	r3, [r7, #76]	; 0x4c
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1) * 2);
 8003bc0:	4b0b      	ldr	r3, [pc, #44]	; (8003bf0 <HAL_RCC_GetSysClockFreq+0x200>)
 8003bc2:	685b      	ldr	r3, [r3, #4]
 8003bc4:	0c1b      	lsrs	r3, r3, #16
 8003bc6:	f003 0303 	and.w	r3, r3, #3
 8003bca:	3301      	adds	r3, #1
 8003bcc:	005b      	lsls	r3, r3, #1
 8003bce:	643b      	str	r3, [r7, #64]	; 0x40

      sysclockfreq = pllvco / pllp;
 8003bd0:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 8003bd2:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8003bd4:	fbb2 f3f3 	udiv	r3, r2, r3
 8003bd8:	64bb      	str	r3, [r7, #72]	; 0x48
      break;
 8003bda:	e002      	b.n	8003be2 <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    default:
    {
      sysclockfreq = HSI_VALUE;
 8003bdc:	4b05      	ldr	r3, [pc, #20]	; (8003bf4 <HAL_RCC_GetSysClockFreq+0x204>)
 8003bde:	64bb      	str	r3, [r7, #72]	; 0x48
      break;
 8003be0:	bf00      	nop
    }
  }
  return sysclockfreq;
 8003be2:	6cbb      	ldr	r3, [r7, #72]	; 0x48
}
 8003be4:	4618      	mov	r0, r3
 8003be6:	3750      	adds	r7, #80	; 0x50
 8003be8:	46bd      	mov	sp, r7
 8003bea:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 8003bee:	bf00      	nop
 8003bf0:	40023800 	.word	0x40023800
 8003bf4:	00f42400 	.word	0x00f42400
 8003bf8:	007a1200 	.word	0x007a1200

08003bfc <HAL_RCC_GetHCLKFreq>:
  *         right HCLK value. Otherwise, any configuration based on this function will be incorrect.
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency.
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8003bfc:	b480      	push	{r7}
 8003bfe:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8003c00:	4b03      	ldr	r3, [pc, #12]	; (8003c10 <HAL_RCC_GetHCLKFreq+0x14>)
 8003c02:	681b      	ldr	r3, [r3, #0]
}
 8003c04:	4618      	mov	r0, r3
 8003c06:	46bd      	mov	sp, r7
 8003c08:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003c0c:	4770      	bx	lr
 8003c0e:	bf00      	nop
 8003c10:	20000014 	.word	0x20000014

08003c14 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8003c14:	b580      	push	{r7, lr}
 8003c16:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos]);
 8003c18:	f7ff fff0 	bl	8003bfc <HAL_RCC_GetHCLKFreq>
 8003c1c:	4602      	mov	r2, r0
 8003c1e:	4b05      	ldr	r3, [pc, #20]	; (8003c34 <HAL_RCC_GetPCLK1Freq+0x20>)
 8003c20:	689b      	ldr	r3, [r3, #8]
 8003c22:	0a9b      	lsrs	r3, r3, #10
 8003c24:	f003 0307 	and.w	r3, r3, #7
 8003c28:	4903      	ldr	r1, [pc, #12]	; (8003c38 <HAL_RCC_GetPCLK1Freq+0x24>)
 8003c2a:	5ccb      	ldrb	r3, [r1, r3]
 8003c2c:	fa22 f303 	lsr.w	r3, r2, r3
}
 8003c30:	4618      	mov	r0, r3
 8003c32:	bd80      	pop	{r7, pc}
 8003c34:	40023800 	.word	0x40023800
 8003c38:	08008a90 	.word	0x08008a90

08003c3c <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8003c3c:	b580      	push	{r7, lr}
 8003c3e:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_Pos]);
 8003c40:	f7ff ffdc 	bl	8003bfc <HAL_RCC_GetHCLKFreq>
 8003c44:	4602      	mov	r2, r0
 8003c46:	4b05      	ldr	r3, [pc, #20]	; (8003c5c <HAL_RCC_GetPCLK2Freq+0x20>)
 8003c48:	689b      	ldr	r3, [r3, #8]
 8003c4a:	0b5b      	lsrs	r3, r3, #13
 8003c4c:	f003 0307 	and.w	r3, r3, #7
 8003c50:	4903      	ldr	r1, [pc, #12]	; (8003c60 <HAL_RCC_GetPCLK2Freq+0x24>)
 8003c52:	5ccb      	ldrb	r3, [r1, r3]
 8003c54:	fa22 f303 	lsr.w	r3, r2, r3
}
 8003c58:	4618      	mov	r0, r3
 8003c5a:	bd80      	pop	{r7, pc}
 8003c5c:	40023800 	.word	0x40023800
 8003c60:	08008a90 	.word	0x08008a90

08003c64 <HAL_RCC_GetClockConfig>:
  * will be configured.
  * @param  pFLatency Pointer on the Flash Latency.
  * @retval None
  */
void HAL_RCC_GetClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t *pFLatency)
{
 8003c64:	b480      	push	{r7}
 8003c66:	b083      	sub	sp, #12
 8003c68:	af00      	add	r7, sp, #0
 8003c6a:	6078      	str	r0, [r7, #4]
 8003c6c:	6039      	str	r1, [r7, #0]
  /* Set all possible values for the Clock type parameter --------------------*/
  RCC_ClkInitStruct->ClockType = RCC_CLOCKTYPE_SYSCLK | RCC_CLOCKTYPE_HCLK | RCC_CLOCKTYPE_PCLK1 | RCC_CLOCKTYPE_PCLK2;
 8003c6e:	687b      	ldr	r3, [r7, #4]
 8003c70:	220f      	movs	r2, #15
 8003c72:	601a      	str	r2, [r3, #0]

  /* Get the SYSCLK configuration --------------------------------------------*/
  RCC_ClkInitStruct->SYSCLKSource = (uint32_t)(RCC->CFGR & RCC_CFGR_SW);
 8003c74:	4b12      	ldr	r3, [pc, #72]	; (8003cc0 <HAL_RCC_GetClockConfig+0x5c>)
 8003c76:	689b      	ldr	r3, [r3, #8]
 8003c78:	f003 0203 	and.w	r2, r3, #3
 8003c7c:	687b      	ldr	r3, [r7, #4]
 8003c7e:	605a      	str	r2, [r3, #4]

  /* Get the HCLK configuration ----------------------------------------------*/
  RCC_ClkInitStruct->AHBCLKDivider = (uint32_t)(RCC->CFGR & RCC_CFGR_HPRE);
 8003c80:	4b0f      	ldr	r3, [pc, #60]	; (8003cc0 <HAL_RCC_GetClockConfig+0x5c>)
 8003c82:	689b      	ldr	r3, [r3, #8]
 8003c84:	f003 02f0 	and.w	r2, r3, #240	; 0xf0
 8003c88:	687b      	ldr	r3, [r7, #4]
 8003c8a:	609a      	str	r2, [r3, #8]

  /* Get the APB1 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB1CLKDivider = (uint32_t)(RCC->CFGR & RCC_CFGR_PPRE1);
 8003c8c:	4b0c      	ldr	r3, [pc, #48]	; (8003cc0 <HAL_RCC_GetClockConfig+0x5c>)
 8003c8e:	689b      	ldr	r3, [r3, #8]
 8003c90:	f403 52e0 	and.w	r2, r3, #7168	; 0x1c00
 8003c94:	687b      	ldr	r3, [r7, #4]
 8003c96:	60da      	str	r2, [r3, #12]

  /* Get the APB2 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB2CLKDivider = (uint32_t)((RCC->CFGR & RCC_CFGR_PPRE2) >> 3);
 8003c98:	4b09      	ldr	r3, [pc, #36]	; (8003cc0 <HAL_RCC_GetClockConfig+0x5c>)
 8003c9a:	689b      	ldr	r3, [r3, #8]
 8003c9c:	08db      	lsrs	r3, r3, #3
 8003c9e:	f403 52e0 	and.w	r2, r3, #7168	; 0x1c00
 8003ca2:	687b      	ldr	r3, [r7, #4]
 8003ca4:	611a      	str	r2, [r3, #16]

  /* Get the Flash Wait State (Latency) configuration ------------------------*/
  *pFLatency = (uint32_t)(FLASH->ACR & FLASH_ACR_LATENCY);
 8003ca6:	4b07      	ldr	r3, [pc, #28]	; (8003cc4 <HAL_RCC_GetClockConfig+0x60>)
 8003ca8:	681b      	ldr	r3, [r3, #0]
 8003caa:	f003 020f 	and.w	r2, r3, #15
 8003cae:	683b      	ldr	r3, [r7, #0]
 8003cb0:	601a      	str	r2, [r3, #0]
}
 8003cb2:	bf00      	nop
 8003cb4:	370c      	adds	r7, #12
 8003cb6:	46bd      	mov	sp, r7
 8003cb8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003cbc:	4770      	bx	lr
 8003cbe:	bf00      	nop
 8003cc0:	40023800 	.word	0x40023800
 8003cc4:	40023c00 	.word	0x40023c00

08003cc8 <HAL_RCCEx_PeriphCLKConfig>:
  *         the backup registers) are set to their reset values.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 8003cc8:	b580      	push	{r7, lr}
 8003cca:	b088      	sub	sp, #32
 8003ccc:	af00      	add	r7, sp, #0
 8003cce:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0;
 8003cd0:	2300      	movs	r3, #0
 8003cd2:	617b      	str	r3, [r7, #20]
  uint32_t tmpreg0 = 0;
 8003cd4:	2300      	movs	r3, #0
 8003cd6:	613b      	str	r3, [r7, #16]
  uint32_t tmpreg1 = 0;
 8003cd8:	2300      	movs	r3, #0
 8003cda:	60fb      	str	r3, [r7, #12]
  uint32_t plli2sused = 0;
 8003cdc:	2300      	movs	r3, #0
 8003cde:	61fb      	str	r3, [r7, #28]
  uint32_t pllsaiused = 0;
 8003ce0:	2300      	movs	r3, #0
 8003ce2:	61bb      	str	r3, [r7, #24]

  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));

  /*----------------------------------- I2S configuration ----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S) == (RCC_PERIPHCLK_I2S))
 8003ce4:	687b      	ldr	r3, [r7, #4]
 8003ce6:	681b      	ldr	r3, [r3, #0]
 8003ce8:	f003 0301 	and.w	r3, r3, #1
 8003cec:	2b00      	cmp	r3, #0
 8003cee:	d012      	beq.n	8003d16 <HAL_RCCEx_PeriphCLKConfig+0x4e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2SCLKSOURCE(PeriphClkInit->I2sClockSelection));

    /* Configure I2S Clock source */
    __HAL_RCC_I2S_CONFIG(PeriphClkInit->I2sClockSelection);
 8003cf0:	4b69      	ldr	r3, [pc, #420]	; (8003e98 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8003cf2:	689b      	ldr	r3, [r3, #8]
 8003cf4:	4a68      	ldr	r2, [pc, #416]	; (8003e98 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8003cf6:	f423 0300 	bic.w	r3, r3, #8388608	; 0x800000
 8003cfa:	6093      	str	r3, [r2, #8]
 8003cfc:	4b66      	ldr	r3, [pc, #408]	; (8003e98 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8003cfe:	689a      	ldr	r2, [r3, #8]
 8003d00:	687b      	ldr	r3, [r7, #4]
 8003d02:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8003d04:	4964      	ldr	r1, [pc, #400]	; (8003e98 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8003d06:	4313      	orrs	r3, r2
 8003d08:	608b      	str	r3, [r1, #8]

    /* Enable the PLLI2S when it's used as clock source for I2S */
    if(PeriphClkInit->I2sClockSelection == RCC_I2SCLKSOURCE_PLLI2S)
 8003d0a:	687b      	ldr	r3, [r7, #4]
 8003d0c:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8003d0e:	2b00      	cmp	r3, #0
 8003d10:	d101      	bne.n	8003d16 <HAL_RCCEx_PeriphCLKConfig+0x4e>
    {
      plli2sused = 1;
 8003d12:	2301      	movs	r3, #1
 8003d14:	61fb      	str	r3, [r7, #28]
    }
  }

  /*------------------------------------ SAI1 configuration --------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == (RCC_PERIPHCLK_SAI1))
 8003d16:	687b      	ldr	r3, [r7, #4]
 8003d18:	681b      	ldr	r3, [r3, #0]
 8003d1a:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 8003d1e:	2b00      	cmp	r3, #0
 8003d20:	d017      	beq.n	8003d52 <HAL_RCCEx_PeriphCLKConfig+0x8a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAI1CLKSOURCE(PeriphClkInit->Sai1ClockSelection));

    /* Configure SAI1 Clock source */
    __HAL_RCC_SAI1_CONFIG(PeriphClkInit->Sai1ClockSelection);
 8003d22:	4b5d      	ldr	r3, [pc, #372]	; (8003e98 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8003d24:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8003d28:	f423 1240 	bic.w	r2, r3, #3145728	; 0x300000
 8003d2c:	687b      	ldr	r3, [r7, #4]
 8003d2e:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8003d30:	4959      	ldr	r1, [pc, #356]	; (8003e98 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8003d32:	4313      	orrs	r3, r2
 8003d34:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c
    /* Enable the PLLI2S when it's used as clock source for SAI */
    if(PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLI2S)
 8003d38:	687b      	ldr	r3, [r7, #4]
 8003d3a:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8003d3c:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8003d40:	d101      	bne.n	8003d46 <HAL_RCCEx_PeriphCLKConfig+0x7e>
    {
      plli2sused = 1;
 8003d42:	2301      	movs	r3, #1
 8003d44:	61fb      	str	r3, [r7, #28]
    }
    /* Enable the PLLSAI when it's used as clock source for SAI */
    if(PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLSAI)
 8003d46:	687b      	ldr	r3, [r7, #4]
 8003d48:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8003d4a:	2b00      	cmp	r3, #0
 8003d4c:	d101      	bne.n	8003d52 <HAL_RCCEx_PeriphCLKConfig+0x8a>
    {
      pllsaiused = 1;
 8003d4e:	2301      	movs	r3, #1
 8003d50:	61bb      	str	r3, [r7, #24]
    }
  }

  /*------------------------------------ SAI2 configuration --------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == (RCC_PERIPHCLK_SAI2))
 8003d52:	687b      	ldr	r3, [r7, #4]
 8003d54:	681b      	ldr	r3, [r3, #0]
 8003d56:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8003d5a:	2b00      	cmp	r3, #0
 8003d5c:	d017      	beq.n	8003d8e <HAL_RCCEx_PeriphCLKConfig+0xc6>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAI2CLKSOURCE(PeriphClkInit->Sai2ClockSelection));

    /* Configure SAI2 Clock source */
    __HAL_RCC_SAI2_CONFIG(PeriphClkInit->Sai2ClockSelection);
 8003d5e:	4b4e      	ldr	r3, [pc, #312]	; (8003e98 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8003d60:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8003d64:	f423 0240 	bic.w	r2, r3, #12582912	; 0xc00000
 8003d68:	687b      	ldr	r3, [r7, #4]
 8003d6a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003d6c:	494a      	ldr	r1, [pc, #296]	; (8003e98 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8003d6e:	4313      	orrs	r3, r2
 8003d70:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c

    /* Enable the PLLI2S when it's used as clock source for SAI */
    if(PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLI2S)
 8003d74:	687b      	ldr	r3, [r7, #4]
 8003d76:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003d78:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8003d7c:	d101      	bne.n	8003d82 <HAL_RCCEx_PeriphCLKConfig+0xba>
    {
      plli2sused = 1;
 8003d7e:	2301      	movs	r3, #1
 8003d80:	61fb      	str	r3, [r7, #28]
    }
    /* Enable the PLLSAI when it's used as clock source for SAI */
    if(PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLSAI)
 8003d82:	687b      	ldr	r3, [r7, #4]
 8003d84:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003d86:	2b00      	cmp	r3, #0
 8003d88:	d101      	bne.n	8003d8e <HAL_RCCEx_PeriphCLKConfig+0xc6>
    {
      pllsaiused = 1;
 8003d8a:	2301      	movs	r3, #1
 8003d8c:	61bb      	str	r3, [r7, #24]
    }
  }

  /*-------------------------------------- SPDIF-RX Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPDIFRX) == RCC_PERIPHCLK_SPDIFRX)
 8003d8e:	687b      	ldr	r3, [r7, #4]
 8003d90:	681b      	ldr	r3, [r3, #0]
 8003d92:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8003d96:	2b00      	cmp	r3, #0
 8003d98:	d001      	beq.n	8003d9e <HAL_RCCEx_PeriphCLKConfig+0xd6>
  {
      plli2sused = 1;
 8003d9a:	2301      	movs	r3, #1
 8003d9c:	61fb      	str	r3, [r7, #28]
  }

  /*------------------------------------ RTC configuration --------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == (RCC_PERIPHCLK_RTC))
 8003d9e:	687b      	ldr	r3, [r7, #4]
 8003da0:	681b      	ldr	r3, [r3, #0]
 8003da2:	f003 0320 	and.w	r3, r3, #32
 8003da6:	2b00      	cmp	r3, #0
 8003da8:	f000 808b 	beq.w	8003ec2 <HAL_RCCEx_PeriphCLKConfig+0x1fa>
  {
    /* Check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* Enable Power Clock*/
    __HAL_RCC_PWR_CLK_ENABLE();
 8003dac:	4b3a      	ldr	r3, [pc, #232]	; (8003e98 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8003dae:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003db0:	4a39      	ldr	r2, [pc, #228]	; (8003e98 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8003db2:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8003db6:	6413      	str	r3, [r2, #64]	; 0x40
 8003db8:	4b37      	ldr	r3, [pc, #220]	; (8003e98 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8003dba:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003dbc:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8003dc0:	60bb      	str	r3, [r7, #8]
 8003dc2:	68bb      	ldr	r3, [r7, #8]

    /* Enable write access to Backup domain */
    PWR->CR1 |= PWR_CR1_DBP;
 8003dc4:	4b35      	ldr	r3, [pc, #212]	; (8003e9c <HAL_RCCEx_PeriphCLKConfig+0x1d4>)
 8003dc6:	681b      	ldr	r3, [r3, #0]
 8003dc8:	4a34      	ldr	r2, [pc, #208]	; (8003e9c <HAL_RCCEx_PeriphCLKConfig+0x1d4>)
 8003dca:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8003dce:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8003dd0:	f7fd feee 	bl	8001bb0 <HAL_GetTick>
 8003dd4:	6178      	str	r0, [r7, #20]

    /* Wait for Backup domain Write protection disable */
    while((PWR->CR1 & PWR_CR1_DBP) == RESET)
 8003dd6:	e008      	b.n	8003dea <HAL_RCCEx_PeriphCLKConfig+0x122>
    {
      if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8003dd8:	f7fd feea 	bl	8001bb0 <HAL_GetTick>
 8003ddc:	4602      	mov	r2, r0
 8003dde:	697b      	ldr	r3, [r7, #20]
 8003de0:	1ad3      	subs	r3, r2, r3
 8003de2:	2b64      	cmp	r3, #100	; 0x64
 8003de4:	d901      	bls.n	8003dea <HAL_RCCEx_PeriphCLKConfig+0x122>
      {
        return HAL_TIMEOUT;
 8003de6:	2303      	movs	r3, #3
 8003de8:	e38f      	b.n	800450a <HAL_RCCEx_PeriphCLKConfig+0x842>
    while((PWR->CR1 & PWR_CR1_DBP) == RESET)
 8003dea:	4b2c      	ldr	r3, [pc, #176]	; (8003e9c <HAL_RCCEx_PeriphCLKConfig+0x1d4>)
 8003dec:	681b      	ldr	r3, [r3, #0]
 8003dee:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8003df2:	2b00      	cmp	r3, #0
 8003df4:	d0f0      	beq.n	8003dd8 <HAL_RCCEx_PeriphCLKConfig+0x110>
      }
    }

    /* Reset the Backup domain only if the RTC Clock source selection is modified */
    tmpreg0 = (RCC->BDCR & RCC_BDCR_RTCSEL);
 8003df6:	4b28      	ldr	r3, [pc, #160]	; (8003e98 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8003df8:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003dfa:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8003dfe:	613b      	str	r3, [r7, #16]

    if((tmpreg0 != 0x00000000U) && (tmpreg0 != (PeriphClkInit->RTCClockSelection & RCC_BDCR_RTCSEL)))
 8003e00:	693b      	ldr	r3, [r7, #16]
 8003e02:	2b00      	cmp	r3, #0
 8003e04:	d035      	beq.n	8003e72 <HAL_RCCEx_PeriphCLKConfig+0x1aa>
 8003e06:	687b      	ldr	r3, [r7, #4]
 8003e08:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003e0a:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8003e0e:	693a      	ldr	r2, [r7, #16]
 8003e10:	429a      	cmp	r2, r3
 8003e12:	d02e      	beq.n	8003e72 <HAL_RCCEx_PeriphCLKConfig+0x1aa>
    {
      /* Store the content of BDCR register before the reset of Backup Domain */
      tmpreg0 = (RCC->BDCR & ~(RCC_BDCR_RTCSEL));
 8003e14:	4b20      	ldr	r3, [pc, #128]	; (8003e98 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8003e16:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003e18:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8003e1c:	613b      	str	r3, [r7, #16]

      /* RTC Clock selection can be changed only if the Backup Domain is reset */
      __HAL_RCC_BACKUPRESET_FORCE();
 8003e1e:	4b1e      	ldr	r3, [pc, #120]	; (8003e98 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8003e20:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003e22:	4a1d      	ldr	r2, [pc, #116]	; (8003e98 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8003e24:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8003e28:	6713      	str	r3, [r2, #112]	; 0x70
      __HAL_RCC_BACKUPRESET_RELEASE();
 8003e2a:	4b1b      	ldr	r3, [pc, #108]	; (8003e98 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8003e2c:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003e2e:	4a1a      	ldr	r2, [pc, #104]	; (8003e98 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8003e30:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8003e34:	6713      	str	r3, [r2, #112]	; 0x70

      /* Restore the Content of BDCR register */
      RCC->BDCR = tmpreg0;
 8003e36:	4a18      	ldr	r2, [pc, #96]	; (8003e98 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8003e38:	693b      	ldr	r3, [r7, #16]
 8003e3a:	6713      	str	r3, [r2, #112]	; 0x70

      /* Wait for LSE reactivation if LSE was enable prior to Backup Domain reset */
      if (HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSEON))
 8003e3c:	4b16      	ldr	r3, [pc, #88]	; (8003e98 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8003e3e:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003e40:	f003 0301 	and.w	r3, r3, #1
 8003e44:	2b01      	cmp	r3, #1
 8003e46:	d114      	bne.n	8003e72 <HAL_RCCEx_PeriphCLKConfig+0x1aa>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003e48:	f7fd feb2 	bl	8001bb0 <HAL_GetTick>
 8003e4c:	6178      	str	r0, [r7, #20]

        /* Wait till LSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8003e4e:	e00a      	b.n	8003e66 <HAL_RCCEx_PeriphCLKConfig+0x19e>
        {
          if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8003e50:	f7fd feae 	bl	8001bb0 <HAL_GetTick>
 8003e54:	4602      	mov	r2, r0
 8003e56:	697b      	ldr	r3, [r7, #20]
 8003e58:	1ad3      	subs	r3, r2, r3
 8003e5a:	f241 3288 	movw	r2, #5000	; 0x1388
 8003e5e:	4293      	cmp	r3, r2
 8003e60:	d901      	bls.n	8003e66 <HAL_RCCEx_PeriphCLKConfig+0x19e>
          {
            return HAL_TIMEOUT;
 8003e62:	2303      	movs	r3, #3
 8003e64:	e351      	b.n	800450a <HAL_RCCEx_PeriphCLKConfig+0x842>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8003e66:	4b0c      	ldr	r3, [pc, #48]	; (8003e98 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8003e68:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003e6a:	f003 0302 	and.w	r3, r3, #2
 8003e6e:	2b00      	cmp	r3, #0
 8003e70:	d0ee      	beq.n	8003e50 <HAL_RCCEx_PeriphCLKConfig+0x188>
          }
        }
      }
    }
    __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 8003e72:	687b      	ldr	r3, [r7, #4]
 8003e74:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003e76:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8003e7a:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 8003e7e:	d111      	bne.n	8003ea4 <HAL_RCCEx_PeriphCLKConfig+0x1dc>
 8003e80:	4b05      	ldr	r3, [pc, #20]	; (8003e98 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8003e82:	689b      	ldr	r3, [r3, #8]
 8003e84:	f423 12f8 	bic.w	r2, r3, #2031616	; 0x1f0000
 8003e88:	687b      	ldr	r3, [r7, #4]
 8003e8a:	6b19      	ldr	r1, [r3, #48]	; 0x30
 8003e8c:	4b04      	ldr	r3, [pc, #16]	; (8003ea0 <HAL_RCCEx_PeriphCLKConfig+0x1d8>)
 8003e8e:	400b      	ands	r3, r1
 8003e90:	4901      	ldr	r1, [pc, #4]	; (8003e98 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8003e92:	4313      	orrs	r3, r2
 8003e94:	608b      	str	r3, [r1, #8]
 8003e96:	e00b      	b.n	8003eb0 <HAL_RCCEx_PeriphCLKConfig+0x1e8>
 8003e98:	40023800 	.word	0x40023800
 8003e9c:	40007000 	.word	0x40007000
 8003ea0:	0ffffcff 	.word	0x0ffffcff
 8003ea4:	4bac      	ldr	r3, [pc, #688]	; (8004158 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8003ea6:	689b      	ldr	r3, [r3, #8]
 8003ea8:	4aab      	ldr	r2, [pc, #684]	; (8004158 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8003eaa:	f423 13f8 	bic.w	r3, r3, #2031616	; 0x1f0000
 8003eae:	6093      	str	r3, [r2, #8]
 8003eb0:	4ba9      	ldr	r3, [pc, #676]	; (8004158 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8003eb2:	6f1a      	ldr	r2, [r3, #112]	; 0x70
 8003eb4:	687b      	ldr	r3, [r7, #4]
 8003eb6:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003eb8:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8003ebc:	49a6      	ldr	r1, [pc, #664]	; (8004158 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8003ebe:	4313      	orrs	r3, r2
 8003ec0:	670b      	str	r3, [r1, #112]	; 0x70
  }

  /*------------------------------------ TIM configuration --------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM) == (RCC_PERIPHCLK_TIM))
 8003ec2:	687b      	ldr	r3, [r7, #4]
 8003ec4:	681b      	ldr	r3, [r3, #0]
 8003ec6:	f003 0310 	and.w	r3, r3, #16
 8003eca:	2b00      	cmp	r3, #0
 8003ecc:	d010      	beq.n	8003ef0 <HAL_RCCEx_PeriphCLKConfig+0x228>
  {
    /* Check the parameters */
    assert_param(IS_RCC_TIMPRES(PeriphClkInit->TIMPresSelection));

    /* Configure Timer Prescaler */
    __HAL_RCC_TIMCLKPRESCALER(PeriphClkInit->TIMPresSelection);
 8003ece:	4ba2      	ldr	r3, [pc, #648]	; (8004158 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8003ed0:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8003ed4:	4aa0      	ldr	r2, [pc, #640]	; (8004158 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8003ed6:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 8003eda:	f8c2 308c 	str.w	r3, [r2, #140]	; 0x8c
 8003ede:	4b9e      	ldr	r3, [pc, #632]	; (8004158 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8003ee0:	f8d3 208c 	ldr.w	r2, [r3, #140]	; 0x8c
 8003ee4:	687b      	ldr	r3, [r7, #4]
 8003ee6:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003ee8:	499b      	ldr	r1, [pc, #620]	; (8004158 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8003eea:	4313      	orrs	r3, r2
 8003eec:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c
  }

  /*-------------------------------------- I2C1 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C1) == RCC_PERIPHCLK_I2C1)
 8003ef0:	687b      	ldr	r3, [r7, #4]
 8003ef2:	681b      	ldr	r3, [r3, #0]
 8003ef4:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8003ef8:	2b00      	cmp	r3, #0
 8003efa:	d00a      	beq.n	8003f12 <HAL_RCCEx_PeriphCLKConfig+0x24a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C1CLKSOURCE(PeriphClkInit->I2c1ClockSelection));

    /* Configure the I2C1 clock source */
    __HAL_RCC_I2C1_CONFIG(PeriphClkInit->I2c1ClockSelection);
 8003efc:	4b96      	ldr	r3, [pc, #600]	; (8004158 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8003efe:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8003f02:	f423 3240 	bic.w	r2, r3, #196608	; 0x30000
 8003f06:	687b      	ldr	r3, [r7, #4]
 8003f08:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8003f0a:	4993      	ldr	r1, [pc, #588]	; (8004158 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8003f0c:	4313      	orrs	r3, r2
 8003f0e:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- I2C2 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C2) == RCC_PERIPHCLK_I2C2)
 8003f12:	687b      	ldr	r3, [r7, #4]
 8003f14:	681b      	ldr	r3, [r3, #0]
 8003f16:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8003f1a:	2b00      	cmp	r3, #0
 8003f1c:	d00a      	beq.n	8003f34 <HAL_RCCEx_PeriphCLKConfig+0x26c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C2CLKSOURCE(PeriphClkInit->I2c2ClockSelection));

    /* Configure the I2C2 clock source */
    __HAL_RCC_I2C2_CONFIG(PeriphClkInit->I2c2ClockSelection);
 8003f1e:	4b8e      	ldr	r3, [pc, #568]	; (8004158 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8003f20:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8003f24:	f423 2240 	bic.w	r2, r3, #786432	; 0xc0000
 8003f28:	687b      	ldr	r3, [r7, #4]
 8003f2a:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8003f2c:	498a      	ldr	r1, [pc, #552]	; (8004158 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8003f2e:	4313      	orrs	r3, r2
 8003f30:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- I2C3 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C3) == RCC_PERIPHCLK_I2C3)
 8003f34:	687b      	ldr	r3, [r7, #4]
 8003f36:	681b      	ldr	r3, [r3, #0]
 8003f38:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8003f3c:	2b00      	cmp	r3, #0
 8003f3e:	d00a      	beq.n	8003f56 <HAL_RCCEx_PeriphCLKConfig+0x28e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C3CLKSOURCE(PeriphClkInit->I2c3ClockSelection));

    /* Configure the I2C3 clock source */
    __HAL_RCC_I2C3_CONFIG(PeriphClkInit->I2c3ClockSelection);
 8003f40:	4b85      	ldr	r3, [pc, #532]	; (8004158 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8003f42:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8003f46:	f423 1240 	bic.w	r2, r3, #3145728	; 0x300000
 8003f4a:	687b      	ldr	r3, [r7, #4]
 8003f4c:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8003f4e:	4982      	ldr	r1, [pc, #520]	; (8004158 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8003f50:	4313      	orrs	r3, r2
 8003f52:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- I2C4 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C4) == RCC_PERIPHCLK_I2C4)
 8003f56:	687b      	ldr	r3, [r7, #4]
 8003f58:	681b      	ldr	r3, [r3, #0]
 8003f5a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8003f5e:	2b00      	cmp	r3, #0
 8003f60:	d00a      	beq.n	8003f78 <HAL_RCCEx_PeriphCLKConfig+0x2b0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C4CLKSOURCE(PeriphClkInit->I2c4ClockSelection));

    /* Configure the I2C4 clock source */
    __HAL_RCC_I2C4_CONFIG(PeriphClkInit->I2c4ClockSelection);
 8003f62:	4b7d      	ldr	r3, [pc, #500]	; (8004158 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8003f64:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8003f68:	f423 0240 	bic.w	r2, r3, #12582912	; 0xc00000
 8003f6c:	687b      	ldr	r3, [r7, #4]
 8003f6e:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003f70:	4979      	ldr	r1, [pc, #484]	; (8004158 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8003f72:	4313      	orrs	r3, r2
 8003f74:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- USART1 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART1) == RCC_PERIPHCLK_USART1)
 8003f78:	687b      	ldr	r3, [r7, #4]
 8003f7a:	681b      	ldr	r3, [r3, #0]
 8003f7c:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8003f80:	2b00      	cmp	r3, #0
 8003f82:	d00a      	beq.n	8003f9a <HAL_RCCEx_PeriphCLKConfig+0x2d2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART1CLKSOURCE(PeriphClkInit->Usart1ClockSelection));

    /* Configure the USART1 clock source */
    __HAL_RCC_USART1_CONFIG(PeriphClkInit->Usart1ClockSelection);
 8003f84:	4b74      	ldr	r3, [pc, #464]	; (8004158 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8003f86:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8003f8a:	f023 0203 	bic.w	r2, r3, #3
 8003f8e:	687b      	ldr	r3, [r7, #4]
 8003f90:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003f92:	4971      	ldr	r1, [pc, #452]	; (8004158 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8003f94:	4313      	orrs	r3, r2
 8003f96:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- USART2 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART2) == RCC_PERIPHCLK_USART2)
 8003f9a:	687b      	ldr	r3, [r7, #4]
 8003f9c:	681b      	ldr	r3, [r3, #0]
 8003f9e:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8003fa2:	2b00      	cmp	r3, #0
 8003fa4:	d00a      	beq.n	8003fbc <HAL_RCCEx_PeriphCLKConfig+0x2f4>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART2CLKSOURCE(PeriphClkInit->Usart2ClockSelection));

    /* Configure the USART2 clock source */
    __HAL_RCC_USART2_CONFIG(PeriphClkInit->Usart2ClockSelection);
 8003fa6:	4b6c      	ldr	r3, [pc, #432]	; (8004158 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8003fa8:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8003fac:	f023 020c 	bic.w	r2, r3, #12
 8003fb0:	687b      	ldr	r3, [r7, #4]
 8003fb2:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8003fb4:	4968      	ldr	r1, [pc, #416]	; (8004158 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8003fb6:	4313      	orrs	r3, r2
 8003fb8:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- USART3 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART3) == RCC_PERIPHCLK_USART3)
 8003fbc:	687b      	ldr	r3, [r7, #4]
 8003fbe:	681b      	ldr	r3, [r3, #0]
 8003fc0:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8003fc4:	2b00      	cmp	r3, #0
 8003fc6:	d00a      	beq.n	8003fde <HAL_RCCEx_PeriphCLKConfig+0x316>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART3CLKSOURCE(PeriphClkInit->Usart3ClockSelection));

    /* Configure the USART3 clock source */
    __HAL_RCC_USART3_CONFIG(PeriphClkInit->Usart3ClockSelection);
 8003fc8:	4b63      	ldr	r3, [pc, #396]	; (8004158 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8003fca:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8003fce:	f023 0230 	bic.w	r2, r3, #48	; 0x30
 8003fd2:	687b      	ldr	r3, [r7, #4]
 8003fd4:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8003fd6:	4960      	ldr	r1, [pc, #384]	; (8004158 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8003fd8:	4313      	orrs	r3, r2
 8003fda:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- UART4 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART4) == RCC_PERIPHCLK_UART4)
 8003fde:	687b      	ldr	r3, [r7, #4]
 8003fe0:	681b      	ldr	r3, [r3, #0]
 8003fe2:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8003fe6:	2b00      	cmp	r3, #0
 8003fe8:	d00a      	beq.n	8004000 <HAL_RCCEx_PeriphCLKConfig+0x338>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART4CLKSOURCE(PeriphClkInit->Uart4ClockSelection));

    /* Configure the UART4 clock source */
    __HAL_RCC_UART4_CONFIG(PeriphClkInit->Uart4ClockSelection);
 8003fea:	4b5b      	ldr	r3, [pc, #364]	; (8004158 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8003fec:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8003ff0:	f023 02c0 	bic.w	r2, r3, #192	; 0xc0
 8003ff4:	687b      	ldr	r3, [r7, #4]
 8003ff6:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8003ff8:	4957      	ldr	r1, [pc, #348]	; (8004158 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8003ffa:	4313      	orrs	r3, r2
 8003ffc:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- UART5 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART5) == RCC_PERIPHCLK_UART5)
 8004000:	687b      	ldr	r3, [r7, #4]
 8004002:	681b      	ldr	r3, [r3, #0]
 8004004:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8004008:	2b00      	cmp	r3, #0
 800400a:	d00a      	beq.n	8004022 <HAL_RCCEx_PeriphCLKConfig+0x35a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART5CLKSOURCE(PeriphClkInit->Uart5ClockSelection));

    /* Configure the UART5 clock source */
    __HAL_RCC_UART5_CONFIG(PeriphClkInit->Uart5ClockSelection);
 800400c:	4b52      	ldr	r3, [pc, #328]	; (8004158 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 800400e:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8004012:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 8004016:	687b      	ldr	r3, [r7, #4]
 8004018:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800401a:	494f      	ldr	r1, [pc, #316]	; (8004158 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 800401c:	4313      	orrs	r3, r2
 800401e:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- USART6 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART6) == RCC_PERIPHCLK_USART6)
 8004022:	687b      	ldr	r3, [r7, #4]
 8004024:	681b      	ldr	r3, [r3, #0]
 8004026:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 800402a:	2b00      	cmp	r3, #0
 800402c:	d00a      	beq.n	8004044 <HAL_RCCEx_PeriphCLKConfig+0x37c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART6CLKSOURCE(PeriphClkInit->Usart6ClockSelection));

    /* Configure the USART6 clock source */
    __HAL_RCC_USART6_CONFIG(PeriphClkInit->Usart6ClockSelection);
 800402e:	4b4a      	ldr	r3, [pc, #296]	; (8004158 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8004030:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8004034:	f423 6240 	bic.w	r2, r3, #3072	; 0xc00
 8004038:	687b      	ldr	r3, [r7, #4]
 800403a:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800403c:	4946      	ldr	r1, [pc, #280]	; (8004158 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 800403e:	4313      	orrs	r3, r2
 8004040:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- UART7 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART7) == RCC_PERIPHCLK_UART7)
 8004044:	687b      	ldr	r3, [r7, #4]
 8004046:	681b      	ldr	r3, [r3, #0]
 8004048:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 800404c:	2b00      	cmp	r3, #0
 800404e:	d00a      	beq.n	8004066 <HAL_RCCEx_PeriphCLKConfig+0x39e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART7CLKSOURCE(PeriphClkInit->Uart7ClockSelection));

    /* Configure the UART7 clock source */
    __HAL_RCC_UART7_CONFIG(PeriphClkInit->Uart7ClockSelection);
 8004050:	4b41      	ldr	r3, [pc, #260]	; (8004158 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8004052:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8004056:	f423 5240 	bic.w	r2, r3, #12288	; 0x3000
 800405a:	687b      	ldr	r3, [r7, #4]
 800405c:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800405e:	493e      	ldr	r1, [pc, #248]	; (8004158 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8004060:	4313      	orrs	r3, r2
 8004062:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- UART8 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART8) == RCC_PERIPHCLK_UART8)
 8004066:	687b      	ldr	r3, [r7, #4]
 8004068:	681b      	ldr	r3, [r3, #0]
 800406a:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 800406e:	2b00      	cmp	r3, #0
 8004070:	d00a      	beq.n	8004088 <HAL_RCCEx_PeriphCLKConfig+0x3c0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART8CLKSOURCE(PeriphClkInit->Uart8ClockSelection));

    /* Configure the UART8 clock source */
    __HAL_RCC_UART8_CONFIG(PeriphClkInit->Uart8ClockSelection);
 8004072:	4b39      	ldr	r3, [pc, #228]	; (8004158 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8004074:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8004078:	f423 4240 	bic.w	r2, r3, #49152	; 0xc000
 800407c:	687b      	ldr	r3, [r7, #4]
 800407e:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8004080:	4935      	ldr	r1, [pc, #212]	; (8004158 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8004082:	4313      	orrs	r3, r2
 8004084:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*--------------------------------------- CEC Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CEC) == RCC_PERIPHCLK_CEC)
 8004088:	687b      	ldr	r3, [r7, #4]
 800408a:	681b      	ldr	r3, [r3, #0]
 800408c:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8004090:	2b00      	cmp	r3, #0
 8004092:	d00a      	beq.n	80040aa <HAL_RCCEx_PeriphCLKConfig+0x3e2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_CECCLKSOURCE(PeriphClkInit->CecClockSelection));

    /* Configure the CEC clock source */
    __HAL_RCC_CEC_CONFIG(PeriphClkInit->CecClockSelection);
 8004094:	4b30      	ldr	r3, [pc, #192]	; (8004158 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8004096:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800409a:	f023 6280 	bic.w	r2, r3, #67108864	; 0x4000000
 800409e:	687b      	ldr	r3, [r7, #4]
 80040a0:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 80040a2:	492d      	ldr	r1, [pc, #180]	; (8004158 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 80040a4:	4313      	orrs	r3, r2
 80040a6:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- CK48 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CLK48) == RCC_PERIPHCLK_CLK48)
 80040aa:	687b      	ldr	r3, [r7, #4]
 80040ac:	681b      	ldr	r3, [r3, #0]
 80040ae:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 80040b2:	2b00      	cmp	r3, #0
 80040b4:	d011      	beq.n	80040da <HAL_RCCEx_PeriphCLKConfig+0x412>
  {
    /* Check the parameters */
    assert_param(IS_RCC_CLK48SOURCE(PeriphClkInit->Clk48ClockSelection));

    /* Configure the CLK48 source */
    __HAL_RCC_CLK48_CONFIG(PeriphClkInit->Clk48ClockSelection);
 80040b6:	4b28      	ldr	r3, [pc, #160]	; (8004158 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 80040b8:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80040bc:	f023 6200 	bic.w	r2, r3, #134217728	; 0x8000000
 80040c0:	687b      	ldr	r3, [r7, #4]
 80040c2:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 80040c4:	4924      	ldr	r1, [pc, #144]	; (8004158 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 80040c6:	4313      	orrs	r3, r2
 80040c8:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90

    /* Enable the PLLSAI when it's used as clock source for CK48 */
    if(PeriphClkInit->Clk48ClockSelection == RCC_CLK48SOURCE_PLLSAIP)
 80040cc:	687b      	ldr	r3, [r7, #4]
 80040ce:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 80040d0:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 80040d4:	d101      	bne.n	80040da <HAL_RCCEx_PeriphCLKConfig+0x412>
    {
      pllsaiused = 1;
 80040d6:	2301      	movs	r3, #1
 80040d8:	61bb      	str	r3, [r7, #24]
    }
  }

  /*-------------------------------------- LTDC Configuration -----------------------------------*/
#if defined(STM32F746xx) || defined(STM32F756xx) || defined (STM32F767xx) || defined (STM32F769xx) || defined (STM32F777xx) || defined (STM32F779xx) || defined (STM32F750xx)
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LTDC) == RCC_PERIPHCLK_LTDC)
 80040da:	687b      	ldr	r3, [r7, #4]
 80040dc:	681b      	ldr	r3, [r3, #0]
 80040de:	f003 0308 	and.w	r3, r3, #8
 80040e2:	2b00      	cmp	r3, #0
 80040e4:	d001      	beq.n	80040ea <HAL_RCCEx_PeriphCLKConfig+0x422>
  {
    pllsaiused = 1;
 80040e6:	2301      	movs	r3, #1
 80040e8:	61bb      	str	r3, [r7, #24]
  }
#endif /* STM32F746xx || STM32F756xx || STM32F767xx || STM32F769xx || STM32F777xx || STM32F779xx || STM32F750xx */

  /*-------------------------------------- LPTIM1 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM1) == RCC_PERIPHCLK_LPTIM1)
 80040ea:	687b      	ldr	r3, [r7, #4]
 80040ec:	681b      	ldr	r3, [r3, #0]
 80040ee:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 80040f2:	2b00      	cmp	r3, #0
 80040f4:	d00a      	beq.n	800410c <HAL_RCCEx_PeriphCLKConfig+0x444>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LPTIM1CLK(PeriphClkInit->Lptim1ClockSelection));

    /* Configure the LTPIM1 clock source */
    __HAL_RCC_LPTIM1_CONFIG(PeriphClkInit->Lptim1ClockSelection);
 80040f6:	4b18      	ldr	r3, [pc, #96]	; (8004158 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 80040f8:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80040fc:	f023 7240 	bic.w	r2, r3, #50331648	; 0x3000000
 8004100:	687b      	ldr	r3, [r7, #4]
 8004102:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8004104:	4914      	ldr	r1, [pc, #80]	; (8004158 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8004106:	4313      	orrs	r3, r2
 8004108:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
   }

  /*------------------------------------- SDMMC1 Configuration ------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SDMMC1) == RCC_PERIPHCLK_SDMMC1)
 800410c:	687b      	ldr	r3, [r7, #4]
 800410e:	681b      	ldr	r3, [r3, #0]
 8004110:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 8004114:	2b00      	cmp	r3, #0
 8004116:	d00b      	beq.n	8004130 <HAL_RCCEx_PeriphCLKConfig+0x468>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SDMMC1CLKSOURCE(PeriphClkInit->Sdmmc1ClockSelection));

    /* Configure the SDMMC1 clock source */
    __HAL_RCC_SDMMC1_CONFIG(PeriphClkInit->Sdmmc1ClockSelection);
 8004118:	4b0f      	ldr	r3, [pc, #60]	; (8004158 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 800411a:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800411e:	f023 5280 	bic.w	r2, r3, #268435456	; 0x10000000
 8004122:	687b      	ldr	r3, [r7, #4]
 8004124:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8004128:	490b      	ldr	r1, [pc, #44]	; (8004158 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 800412a:	4313      	orrs	r3, r2
 800412c:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

#if defined (STM32F765xx) || defined (STM32F767xx) || defined (STM32F769xx) || defined (STM32F777xx) || defined (STM32F779xx)
  /*------------------------------------- SDMMC2 Configuration ------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SDMMC2) == RCC_PERIPHCLK_SDMMC2)
 8004130:	687b      	ldr	r3, [r7, #4]
 8004132:	681b      	ldr	r3, [r3, #0]
 8004134:	f003 6380 	and.w	r3, r3, #67108864	; 0x4000000
 8004138:	2b00      	cmp	r3, #0
 800413a:	d00f      	beq.n	800415c <HAL_RCCEx_PeriphCLKConfig+0x494>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SDMMC2CLKSOURCE(PeriphClkInit->Sdmmc2ClockSelection));

    /* Configure the SDMMC2 clock source */
    __HAL_RCC_SDMMC2_CONFIG(PeriphClkInit->Sdmmc2ClockSelection);
 800413c:	4b06      	ldr	r3, [pc, #24]	; (8004158 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 800413e:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8004142:	f023 5200 	bic.w	r2, r3, #536870912	; 0x20000000
 8004146:	687b      	ldr	r3, [r7, #4]
 8004148:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 800414c:	4902      	ldr	r1, [pc, #8]	; (8004158 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 800414e:	4313      	orrs	r3, r2
 8004150:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
 8004154:	e002      	b.n	800415c <HAL_RCCEx_PeriphCLKConfig+0x494>
 8004156:	bf00      	nop
 8004158:	40023800 	.word	0x40023800
  }

  /*------------------------------------- DFSDM1 Configuration -------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_DFSDM1) == RCC_PERIPHCLK_DFSDM1)
 800415c:	687b      	ldr	r3, [r7, #4]
 800415e:	681b      	ldr	r3, [r3, #0]
 8004160:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8004164:	2b00      	cmp	r3, #0
 8004166:	d00b      	beq.n	8004180 <HAL_RCCEx_PeriphCLKConfig+0x4b8>
  {
    /* Check the parameters */
    assert_param(IS_RCC_DFSDM1CLKSOURCE(PeriphClkInit->Dfsdm1ClockSelection));

    /* Configure the DFSDM1 interface clock source */
    __HAL_RCC_DFSDM1_CONFIG(PeriphClkInit->Dfsdm1ClockSelection);
 8004168:	4b8a      	ldr	r3, [pc, #552]	; (8004394 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 800416a:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 800416e:	f023 7200 	bic.w	r2, r3, #33554432	; 0x2000000
 8004172:	687b      	ldr	r3, [r7, #4]
 8004174:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8004178:	4986      	ldr	r1, [pc, #536]	; (8004394 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 800417a:	4313      	orrs	r3, r2
 800417c:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c
  }

  /*------------------------------------- DFSDM AUDIO Configuration -------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_DFSDM1_AUDIO) == RCC_PERIPHCLK_DFSDM1_AUDIO)
 8004180:	687b      	ldr	r3, [r7, #4]
 8004182:	681b      	ldr	r3, [r3, #0]
 8004184:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8004188:	2b00      	cmp	r3, #0
 800418a:	d00b      	beq.n	80041a4 <HAL_RCCEx_PeriphCLKConfig+0x4dc>
  {
    /* Check the parameters */
    assert_param(IS_RCC_DFSDM1AUDIOCLKSOURCE(PeriphClkInit->Dfsdm1AudioClockSelection));

    /* Configure the DFSDM interface clock source */
    __HAL_RCC_DFSDM1AUDIO_CONFIG(PeriphClkInit->Dfsdm1AudioClockSelection);
 800418c:	4b81      	ldr	r3, [pc, #516]	; (8004394 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 800418e:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8004192:	f023 6280 	bic.w	r2, r3, #67108864	; 0x4000000
 8004196:	687b      	ldr	r3, [r7, #4]
 8004198:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 800419c:	497d      	ldr	r1, [pc, #500]	; (8004394 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 800419e:	4313      	orrs	r3, r2
 80041a0:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c
  }
#endif /* STM32F767xx || STM32F769xx || STM32F777xx || STM32F779xx */

  /*-------------------------------------- PLLI2S Configuration ---------------------------------*/
  /* PLLI2S is configured when a peripheral will use it as source clock : SAI1, SAI2, I2S or SPDIF-RX */
  if((plli2sused == 1) || ((PeriphClkInit->PeriphClockSelection & RCC_PERIPHCLK_PLLI2S) == RCC_PERIPHCLK_PLLI2S))
 80041a4:	69fb      	ldr	r3, [r7, #28]
 80041a6:	2b01      	cmp	r3, #1
 80041a8:	d006      	beq.n	80041b8 <HAL_RCCEx_PeriphCLKConfig+0x4f0>
 80041aa:	687b      	ldr	r3, [r7, #4]
 80041ac:	681b      	ldr	r3, [r3, #0]
 80041ae:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80041b2:	2b00      	cmp	r3, #0
 80041b4:	f000 80d6 	beq.w	8004364 <HAL_RCCEx_PeriphCLKConfig+0x69c>
  {
    /* Disable the PLLI2S */
    __HAL_RCC_PLLI2S_DISABLE();
 80041b8:	4b76      	ldr	r3, [pc, #472]	; (8004394 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 80041ba:	681b      	ldr	r3, [r3, #0]
 80041bc:	4a75      	ldr	r2, [pc, #468]	; (8004394 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 80041be:	f023 6380 	bic.w	r3, r3, #67108864	; 0x4000000
 80041c2:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 80041c4:	f7fd fcf4 	bl	8001bb0 <HAL_GetTick>
 80041c8:	6178      	str	r0, [r7, #20]

    /* Wait till PLLI2S is disabled */
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  != RESET)
 80041ca:	e008      	b.n	80041de <HAL_RCCEx_PeriphCLKConfig+0x516>
    {
      if((HAL_GetTick() - tickstart) > PLLI2S_TIMEOUT_VALUE)
 80041cc:	f7fd fcf0 	bl	8001bb0 <HAL_GetTick>
 80041d0:	4602      	mov	r2, r0
 80041d2:	697b      	ldr	r3, [r7, #20]
 80041d4:	1ad3      	subs	r3, r2, r3
 80041d6:	2b64      	cmp	r3, #100	; 0x64
 80041d8:	d901      	bls.n	80041de <HAL_RCCEx_PeriphCLKConfig+0x516>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 80041da:	2303      	movs	r3, #3
 80041dc:	e195      	b.n	800450a <HAL_RCCEx_PeriphCLKConfig+0x842>
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  != RESET)
 80041de:	4b6d      	ldr	r3, [pc, #436]	; (8004394 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 80041e0:	681b      	ldr	r3, [r3, #0]
 80041e2:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 80041e6:	2b00      	cmp	r3, #0
 80041e8:	d1f0      	bne.n	80041cc <HAL_RCCEx_PeriphCLKConfig+0x504>

    /* check for common PLLI2S Parameters */
    assert_param(IS_RCC_PLLI2SN_VALUE(PeriphClkInit->PLLI2S.PLLI2SN));

    /*----------------- In Case of PLLI2S is selected as source clock for I2S -------------------*/
    if(((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S) == RCC_PERIPHCLK_I2S) && (PeriphClkInit->I2sClockSelection == RCC_I2SCLKSOURCE_PLLI2S)))
 80041ea:	687b      	ldr	r3, [r7, #4]
 80041ec:	681b      	ldr	r3, [r3, #0]
 80041ee:	f003 0301 	and.w	r3, r3, #1
 80041f2:	2b00      	cmp	r3, #0
 80041f4:	d021      	beq.n	800423a <HAL_RCCEx_PeriphCLKConfig+0x572>
 80041f6:	687b      	ldr	r3, [r7, #4]
 80041f8:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80041fa:	2b00      	cmp	r3, #0
 80041fc:	d11d      	bne.n	800423a <HAL_RCCEx_PeriphCLKConfig+0x572>
    {
      /* check for Parameters */
      assert_param(IS_RCC_PLLI2SR_VALUE(PeriphClkInit->PLLI2S.PLLI2SR));

      /* Read PLLI2SP and PLLI2SQ value from PLLI2SCFGR register (this value is not needed for I2S configuration) */
      tmpreg0 = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SP) >> RCC_PLLI2SCFGR_PLLI2SP_Pos);
 80041fe:	4b65      	ldr	r3, [pc, #404]	; (8004394 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 8004200:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8004204:	0c1b      	lsrs	r3, r3, #16
 8004206:	f003 0303 	and.w	r3, r3, #3
 800420a:	613b      	str	r3, [r7, #16]
      tmpreg1 = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SQ) >> RCC_PLLI2SCFGR_PLLI2SQ_Pos);
 800420c:	4b61      	ldr	r3, [pc, #388]	; (8004394 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 800420e:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8004212:	0e1b      	lsrs	r3, r3, #24
 8004214:	f003 030f 	and.w	r3, r3, #15
 8004218:	60fb      	str	r3, [r7, #12]
      /* Configure the PLLI2S division factors */
      /* PLLI2S_VCO = f(VCO clock) = f(PLLI2S clock input) x (PLLI2SN/PLLM) */
      /* I2SCLK = f(PLLI2S clock output) = f(VCO clock) / PLLI2SR */
      __HAL_RCC_PLLI2S_CONFIG(PeriphClkInit->PLLI2S.PLLI2SN , tmpreg0, tmpreg1, PeriphClkInit->PLLI2S.PLLI2SR);
 800421a:	687b      	ldr	r3, [r7, #4]
 800421c:	685b      	ldr	r3, [r3, #4]
 800421e:	019a      	lsls	r2, r3, #6
 8004220:	693b      	ldr	r3, [r7, #16]
 8004222:	041b      	lsls	r3, r3, #16
 8004224:	431a      	orrs	r2, r3
 8004226:	68fb      	ldr	r3, [r7, #12]
 8004228:	061b      	lsls	r3, r3, #24
 800422a:	431a      	orrs	r2, r3
 800422c:	687b      	ldr	r3, [r7, #4]
 800422e:	689b      	ldr	r3, [r3, #8]
 8004230:	071b      	lsls	r3, r3, #28
 8004232:	4958      	ldr	r1, [pc, #352]	; (8004394 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 8004234:	4313      	orrs	r3, r2
 8004236:	f8c1 3084 	str.w	r3, [r1, #132]	; 0x84
    }

    /*----------------- In Case of PLLI2S is selected as source clock for SAI -------------------*/
    if(((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1) && (PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLI2S)) ||
 800423a:	687b      	ldr	r3, [r7, #4]
 800423c:	681b      	ldr	r3, [r3, #0]
 800423e:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 8004242:	2b00      	cmp	r3, #0
 8004244:	d004      	beq.n	8004250 <HAL_RCCEx_PeriphCLKConfig+0x588>
 8004246:	687b      	ldr	r3, [r7, #4]
 8004248:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800424a:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 800424e:	d00a      	beq.n	8004266 <HAL_RCCEx_PeriphCLKConfig+0x59e>
       ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == RCC_PERIPHCLK_SAI2) && (PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLI2S)))
 8004250:	687b      	ldr	r3, [r7, #4]
 8004252:	681b      	ldr	r3, [r3, #0]
 8004254:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
    if(((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1) && (PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLI2S)) ||
 8004258:	2b00      	cmp	r3, #0
 800425a:	d02e      	beq.n	80042ba <HAL_RCCEx_PeriphCLKConfig+0x5f2>
       ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == RCC_PERIPHCLK_SAI2) && (PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLI2S)))
 800425c:	687b      	ldr	r3, [r7, #4]
 800425e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004260:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8004264:	d129      	bne.n	80042ba <HAL_RCCEx_PeriphCLKConfig+0x5f2>
      assert_param(IS_RCC_PLLI2SQ_VALUE(PeriphClkInit->PLLI2S.PLLI2SQ));
      /* Check for PLLI2S/DIVQ parameters */
      assert_param(IS_RCC_PLLI2S_DIVQ_VALUE(PeriphClkInit->PLLI2SDivQ));

      /* Read PLLI2SP and PLLI2SR values from PLLI2SCFGR register (this value is not needed for SAI configuration) */
      tmpreg0 = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SP) >> RCC_PLLI2SCFGR_PLLI2SP_Pos);
 8004266:	4b4b      	ldr	r3, [pc, #300]	; (8004394 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 8004268:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 800426c:	0c1b      	lsrs	r3, r3, #16
 800426e:	f003 0303 	and.w	r3, r3, #3
 8004272:	613b      	str	r3, [r7, #16]
      tmpreg1 = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SR) >> RCC_PLLI2SCFGR_PLLI2SR_Pos);
 8004274:	4b47      	ldr	r3, [pc, #284]	; (8004394 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 8004276:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 800427a:	0f1b      	lsrs	r3, r3, #28
 800427c:	f003 0307 	and.w	r3, r3, #7
 8004280:	60fb      	str	r3, [r7, #12]
      /* Configure the PLLI2S division factors */
      /* PLLI2S_VCO Input  = PLL_SOURCE/PLLM */
      /* PLLI2S_VCO Output = PLLI2S_VCO Input * PLLI2SN */
      /* SAI_CLK(first level) = PLLI2S_VCO Output/PLLI2SQ */
      __HAL_RCC_PLLI2S_CONFIG(PeriphClkInit->PLLI2S.PLLI2SN, tmpreg0, PeriphClkInit->PLLI2S.PLLI2SQ, tmpreg1);
 8004282:	687b      	ldr	r3, [r7, #4]
 8004284:	685b      	ldr	r3, [r3, #4]
 8004286:	019a      	lsls	r2, r3, #6
 8004288:	693b      	ldr	r3, [r7, #16]
 800428a:	041b      	lsls	r3, r3, #16
 800428c:	431a      	orrs	r2, r3
 800428e:	687b      	ldr	r3, [r7, #4]
 8004290:	68db      	ldr	r3, [r3, #12]
 8004292:	061b      	lsls	r3, r3, #24
 8004294:	431a      	orrs	r2, r3
 8004296:	68fb      	ldr	r3, [r7, #12]
 8004298:	071b      	lsls	r3, r3, #28
 800429a:	493e      	ldr	r1, [pc, #248]	; (8004394 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 800429c:	4313      	orrs	r3, r2
 800429e:	f8c1 3084 	str.w	r3, [r1, #132]	; 0x84

      /* SAI_CLK_x = SAI_CLK(first level)/PLLI2SDIVQ */
      __HAL_RCC_PLLI2S_PLLSAICLKDIVQ_CONFIG(PeriphClkInit->PLLI2SDivQ);
 80042a2:	4b3c      	ldr	r3, [pc, #240]	; (8004394 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 80042a4:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 80042a8:	f023 021f 	bic.w	r2, r3, #31
 80042ac:	687b      	ldr	r3, [r7, #4]
 80042ae:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80042b0:	3b01      	subs	r3, #1
 80042b2:	4938      	ldr	r1, [pc, #224]	; (8004394 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 80042b4:	4313      	orrs	r3, r2
 80042b6:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c
    }

    /*----------------- In Case of PLLI2S is selected as source clock for SPDIF-RX -------------------*/
    if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPDIFRX) == RCC_PERIPHCLK_SPDIFRX)
 80042ba:	687b      	ldr	r3, [r7, #4]
 80042bc:	681b      	ldr	r3, [r3, #0]
 80042be:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 80042c2:	2b00      	cmp	r3, #0
 80042c4:	d01d      	beq.n	8004302 <HAL_RCCEx_PeriphCLKConfig+0x63a>
    {
      /* check for Parameters */
      assert_param(IS_RCC_PLLI2SP_VALUE(PeriphClkInit->PLLI2S.PLLI2SP));

     /* Read PLLI2SR value from PLLI2SCFGR register (this value is not needed for SPDIF-RX configuration) */
      tmpreg0 = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SQ) >> RCC_PLLI2SCFGR_PLLI2SQ_Pos);
 80042c6:	4b33      	ldr	r3, [pc, #204]	; (8004394 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 80042c8:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 80042cc:	0e1b      	lsrs	r3, r3, #24
 80042ce:	f003 030f 	and.w	r3, r3, #15
 80042d2:	613b      	str	r3, [r7, #16]
      tmpreg1 = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SR) >> RCC_PLLI2SCFGR_PLLI2SR_Pos);
 80042d4:	4b2f      	ldr	r3, [pc, #188]	; (8004394 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 80042d6:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 80042da:	0f1b      	lsrs	r3, r3, #28
 80042dc:	f003 0307 	and.w	r3, r3, #7
 80042e0:	60fb      	str	r3, [r7, #12]
      /* Configure the PLLI2S division factors */
      /* PLLI2S_VCO = f(VCO clock) = f(PLLI2S clock input) x (PLLI2SN/PLLM) */
      /* SPDIFCLK = f(PLLI2S clock output) = f(VCO clock) / PLLI2SP */
      __HAL_RCC_PLLI2S_CONFIG(PeriphClkInit->PLLI2S.PLLI2SN , PeriphClkInit->PLLI2S.PLLI2SP, tmpreg0, tmpreg1);
 80042e2:	687b      	ldr	r3, [r7, #4]
 80042e4:	685b      	ldr	r3, [r3, #4]
 80042e6:	019a      	lsls	r2, r3, #6
 80042e8:	687b      	ldr	r3, [r7, #4]
 80042ea:	691b      	ldr	r3, [r3, #16]
 80042ec:	041b      	lsls	r3, r3, #16
 80042ee:	431a      	orrs	r2, r3
 80042f0:	693b      	ldr	r3, [r7, #16]
 80042f2:	061b      	lsls	r3, r3, #24
 80042f4:	431a      	orrs	r2, r3
 80042f6:	68fb      	ldr	r3, [r7, #12]
 80042f8:	071b      	lsls	r3, r3, #28
 80042fa:	4926      	ldr	r1, [pc, #152]	; (8004394 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 80042fc:	4313      	orrs	r3, r2
 80042fe:	f8c1 3084 	str.w	r3, [r1, #132]	; 0x84
    }

    /*----------------- In Case of PLLI2S is just selected  -----------------*/
    if((PeriphClkInit->PeriphClockSelection & RCC_PERIPHCLK_PLLI2S) == RCC_PERIPHCLK_PLLI2S)
 8004302:	687b      	ldr	r3, [r7, #4]
 8004304:	681b      	ldr	r3, [r3, #0]
 8004306:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800430a:	2b00      	cmp	r3, #0
 800430c:	d011      	beq.n	8004332 <HAL_RCCEx_PeriphCLKConfig+0x66a>
      assert_param(IS_RCC_PLLI2SQ_VALUE(PeriphClkInit->PLLI2S.PLLI2SQ));

      /* Configure the PLLI2S division factors */
      /* PLLI2S_VCO = f(VCO clock) = f(PLLI2S clock input) x (PLLI2SN/PLLI2SM) */
      /* SPDIFRXCLK = f(PLLI2S clock output) = f(VCO clock) / PLLI2SP */
      __HAL_RCC_PLLI2S_CONFIG(PeriphClkInit->PLLI2S.PLLI2SN , PeriphClkInit->PLLI2S.PLLI2SP, PeriphClkInit->PLLI2S.PLLI2SQ, PeriphClkInit->PLLI2S.PLLI2SR);
 800430e:	687b      	ldr	r3, [r7, #4]
 8004310:	685b      	ldr	r3, [r3, #4]
 8004312:	019a      	lsls	r2, r3, #6
 8004314:	687b      	ldr	r3, [r7, #4]
 8004316:	691b      	ldr	r3, [r3, #16]
 8004318:	041b      	lsls	r3, r3, #16
 800431a:	431a      	orrs	r2, r3
 800431c:	687b      	ldr	r3, [r7, #4]
 800431e:	68db      	ldr	r3, [r3, #12]
 8004320:	061b      	lsls	r3, r3, #24
 8004322:	431a      	orrs	r2, r3
 8004324:	687b      	ldr	r3, [r7, #4]
 8004326:	689b      	ldr	r3, [r3, #8]
 8004328:	071b      	lsls	r3, r3, #28
 800432a:	491a      	ldr	r1, [pc, #104]	; (8004394 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 800432c:	4313      	orrs	r3, r2
 800432e:	f8c1 3084 	str.w	r3, [r1, #132]	; 0x84
    }

    /* Enable the PLLI2S */
    __HAL_RCC_PLLI2S_ENABLE();
 8004332:	4b18      	ldr	r3, [pc, #96]	; (8004394 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 8004334:	681b      	ldr	r3, [r3, #0]
 8004336:	4a17      	ldr	r2, [pc, #92]	; (8004394 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 8004338:	f043 6380 	orr.w	r3, r3, #67108864	; 0x4000000
 800433c:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 800433e:	f7fd fc37 	bl	8001bb0 <HAL_GetTick>
 8004342:	6178      	str	r0, [r7, #20]

    /* Wait till PLLI2S is ready */
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  == RESET)
 8004344:	e008      	b.n	8004358 <HAL_RCCEx_PeriphCLKConfig+0x690>
    {
      if((HAL_GetTick() - tickstart) > PLLI2S_TIMEOUT_VALUE)
 8004346:	f7fd fc33 	bl	8001bb0 <HAL_GetTick>
 800434a:	4602      	mov	r2, r0
 800434c:	697b      	ldr	r3, [r7, #20]
 800434e:	1ad3      	subs	r3, r2, r3
 8004350:	2b64      	cmp	r3, #100	; 0x64
 8004352:	d901      	bls.n	8004358 <HAL_RCCEx_PeriphCLKConfig+0x690>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 8004354:	2303      	movs	r3, #3
 8004356:	e0d8      	b.n	800450a <HAL_RCCEx_PeriphCLKConfig+0x842>
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  == RESET)
 8004358:	4b0e      	ldr	r3, [pc, #56]	; (8004394 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 800435a:	681b      	ldr	r3, [r3, #0]
 800435c:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8004360:	2b00      	cmp	r3, #0
 8004362:	d0f0      	beq.n	8004346 <HAL_RCCEx_PeriphCLKConfig+0x67e>
    }
  }

  /*-------------------------------------- PLLSAI Configuration ---------------------------------*/
  /* PLLSAI is configured when a peripheral will use it as source clock : SAI1, SAI2, LTDC or CK48 */
  if(pllsaiused == 1)
 8004364:	69bb      	ldr	r3, [r7, #24]
 8004366:	2b01      	cmp	r3, #1
 8004368:	f040 80ce 	bne.w	8004508 <HAL_RCCEx_PeriphCLKConfig+0x840>
  {
    /* Disable PLLSAI Clock */
    __HAL_RCC_PLLSAI_DISABLE();
 800436c:	4b09      	ldr	r3, [pc, #36]	; (8004394 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 800436e:	681b      	ldr	r3, [r3, #0]
 8004370:	4a08      	ldr	r2, [pc, #32]	; (8004394 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 8004372:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8004376:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8004378:	f7fd fc1a 	bl	8001bb0 <HAL_GetTick>
 800437c:	6178      	str	r0, [r7, #20]

    /* Wait till PLLSAI is disabled */
    while(__HAL_RCC_PLLSAI_GET_FLAG() != RESET)
 800437e:	e00b      	b.n	8004398 <HAL_RCCEx_PeriphCLKConfig+0x6d0>
    {
      if((HAL_GetTick() - tickstart) > PLLSAI_TIMEOUT_VALUE)
 8004380:	f7fd fc16 	bl	8001bb0 <HAL_GetTick>
 8004384:	4602      	mov	r2, r0
 8004386:	697b      	ldr	r3, [r7, #20]
 8004388:	1ad3      	subs	r3, r2, r3
 800438a:	2b64      	cmp	r3, #100	; 0x64
 800438c:	d904      	bls.n	8004398 <HAL_RCCEx_PeriphCLKConfig+0x6d0>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 800438e:	2303      	movs	r3, #3
 8004390:	e0bb      	b.n	800450a <HAL_RCCEx_PeriphCLKConfig+0x842>
 8004392:	bf00      	nop
 8004394:	40023800 	.word	0x40023800
    while(__HAL_RCC_PLLSAI_GET_FLAG() != RESET)
 8004398:	4b5e      	ldr	r3, [pc, #376]	; (8004514 <HAL_RCCEx_PeriphCLKConfig+0x84c>)
 800439a:	681b      	ldr	r3, [r3, #0]
 800439c:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 80043a0:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 80043a4:	d0ec      	beq.n	8004380 <HAL_RCCEx_PeriphCLKConfig+0x6b8>

    /* Check the PLLSAI division factors */
    assert_param(IS_RCC_PLLSAIN_VALUE(PeriphClkInit->PLLSAI.PLLSAIN));

    /*----------------- In Case of PLLSAI is selected as source clock for SAI -------------------*/
    if(((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1) && (PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLSAI)) ||\
 80043a6:	687b      	ldr	r3, [r7, #4]
 80043a8:	681b      	ldr	r3, [r3, #0]
 80043aa:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 80043ae:	2b00      	cmp	r3, #0
 80043b0:	d003      	beq.n	80043ba <HAL_RCCEx_PeriphCLKConfig+0x6f2>
 80043b2:	687b      	ldr	r3, [r7, #4]
 80043b4:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80043b6:	2b00      	cmp	r3, #0
 80043b8:	d009      	beq.n	80043ce <HAL_RCCEx_PeriphCLKConfig+0x706>
       ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == RCC_PERIPHCLK_SAI2) && (PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLSAI)))
 80043ba:	687b      	ldr	r3, [r7, #4]
 80043bc:	681b      	ldr	r3, [r3, #0]
 80043be:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
    if(((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1) && (PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLSAI)) ||\
 80043c2:	2b00      	cmp	r3, #0
 80043c4:	d02e      	beq.n	8004424 <HAL_RCCEx_PeriphCLKConfig+0x75c>
       ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == RCC_PERIPHCLK_SAI2) && (PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLSAI)))
 80043c6:	687b      	ldr	r3, [r7, #4]
 80043c8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80043ca:	2b00      	cmp	r3, #0
 80043cc:	d12a      	bne.n	8004424 <HAL_RCCEx_PeriphCLKConfig+0x75c>
      assert_param(IS_RCC_PLLSAIQ_VALUE(PeriphClkInit->PLLSAI.PLLSAIQ));
      /* check for PLLSAI/DIVQ Parameter */
      assert_param(IS_RCC_PLLSAI_DIVQ_VALUE(PeriphClkInit->PLLSAIDivQ));

      /* Read PLLSAIP value from PLLSAICFGR register (this value is not needed for SAI configuration) */
      tmpreg0 = ((RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIP) >> RCC_PLLSAICFGR_PLLSAIP_Pos);
 80043ce:	4b51      	ldr	r3, [pc, #324]	; (8004514 <HAL_RCCEx_PeriphCLKConfig+0x84c>)
 80043d0:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80043d4:	0c1b      	lsrs	r3, r3, #16
 80043d6:	f003 0303 	and.w	r3, r3, #3
 80043da:	613b      	str	r3, [r7, #16]
      tmpreg1 = ((RCC->PLLSAICFGR & RCC_PLLI2SCFGR_PLLI2SR) >> RCC_PLLSAICFGR_PLLSAIR_Pos);
 80043dc:	4b4d      	ldr	r3, [pc, #308]	; (8004514 <HAL_RCCEx_PeriphCLKConfig+0x84c>)
 80043de:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80043e2:	0f1b      	lsrs	r3, r3, #28
 80043e4:	f003 0307 	and.w	r3, r3, #7
 80043e8:	60fb      	str	r3, [r7, #12]
      /* PLLSAI_VCO Input  = PLL_SOURCE/PLLM */
      /* PLLSAI_VCO Output = PLLSAI_VCO Input * PLLSAIN */
      /* SAI_CLK(first level) = PLLSAI_VCO Output/PLLSAIQ */
      __HAL_RCC_PLLSAI_CONFIG(PeriphClkInit->PLLSAI.PLLSAIN , tmpreg0, PeriphClkInit->PLLSAI.PLLSAIQ, tmpreg1);
 80043ea:	687b      	ldr	r3, [r7, #4]
 80043ec:	695b      	ldr	r3, [r3, #20]
 80043ee:	019a      	lsls	r2, r3, #6
 80043f0:	693b      	ldr	r3, [r7, #16]
 80043f2:	041b      	lsls	r3, r3, #16
 80043f4:	431a      	orrs	r2, r3
 80043f6:	687b      	ldr	r3, [r7, #4]
 80043f8:	699b      	ldr	r3, [r3, #24]
 80043fa:	061b      	lsls	r3, r3, #24
 80043fc:	431a      	orrs	r2, r3
 80043fe:	68fb      	ldr	r3, [r7, #12]
 8004400:	071b      	lsls	r3, r3, #28
 8004402:	4944      	ldr	r1, [pc, #272]	; (8004514 <HAL_RCCEx_PeriphCLKConfig+0x84c>)
 8004404:	4313      	orrs	r3, r2
 8004406:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

      /* SAI_CLK_x = SAI_CLK(first level)/PLLSAIDIVQ */
      __HAL_RCC_PLLSAI_PLLSAICLKDIVQ_CONFIG(PeriphClkInit->PLLSAIDivQ);
 800440a:	4b42      	ldr	r3, [pc, #264]	; (8004514 <HAL_RCCEx_PeriphCLKConfig+0x84c>)
 800440c:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8004410:	f423 52f8 	bic.w	r2, r3, #7936	; 0x1f00
 8004414:	687b      	ldr	r3, [r7, #4]
 8004416:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004418:	3b01      	subs	r3, #1
 800441a:	021b      	lsls	r3, r3, #8
 800441c:	493d      	ldr	r1, [pc, #244]	; (8004514 <HAL_RCCEx_PeriphCLKConfig+0x84c>)
 800441e:	4313      	orrs	r3, r2
 8004420:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c
    }

    /*----------------- In Case of PLLSAI is selected as source clock for CLK48 -------------------*/
    /* In Case of PLLI2S is selected as source clock for CK48 */
    if((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CLK48) == RCC_PERIPHCLK_CLK48) && (PeriphClkInit->Clk48ClockSelection == RCC_CLK48SOURCE_PLLSAIP))
 8004424:	687b      	ldr	r3, [r7, #4]
 8004426:	681b      	ldr	r3, [r3, #0]
 8004428:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 800442c:	2b00      	cmp	r3, #0
 800442e:	d022      	beq.n	8004476 <HAL_RCCEx_PeriphCLKConfig+0x7ae>
 8004430:	687b      	ldr	r3, [r7, #4]
 8004432:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8004434:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 8004438:	d11d      	bne.n	8004476 <HAL_RCCEx_PeriphCLKConfig+0x7ae>
    {
      /* check for Parameters */
      assert_param(IS_RCC_PLLSAIP_VALUE(PeriphClkInit->PLLSAI.PLLSAIP));
      /* Read PLLSAIQ and PLLSAIR value from PLLSAICFGR register (this value is not needed for CK48 configuration) */
      tmpreg0 = ((RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIQ) >> RCC_PLLSAICFGR_PLLSAIQ_Pos);
 800443a:	4b36      	ldr	r3, [pc, #216]	; (8004514 <HAL_RCCEx_PeriphCLKConfig+0x84c>)
 800443c:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8004440:	0e1b      	lsrs	r3, r3, #24
 8004442:	f003 030f 	and.w	r3, r3, #15
 8004446:	613b      	str	r3, [r7, #16]
      tmpreg1 = ((RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIR) >> RCC_PLLSAICFGR_PLLSAIR_Pos);
 8004448:	4b32      	ldr	r3, [pc, #200]	; (8004514 <HAL_RCCEx_PeriphCLKConfig+0x84c>)
 800444a:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800444e:	0f1b      	lsrs	r3, r3, #28
 8004450:	f003 0307 	and.w	r3, r3, #7
 8004454:	60fb      	str	r3, [r7, #12]

      /* Configure the PLLSAI division factors */
      /* PLLSAI_VCO = f(VCO clock) = f(PLLSAI clock input) x (PLLI2SN/PLLM) */
      /* 48CLK = f(PLLSAI clock output) = f(VCO clock) / PLLSAIP */
      __HAL_RCC_PLLSAI_CONFIG(PeriphClkInit->PLLSAI.PLLSAIN , PeriphClkInit->PLLSAI.PLLSAIP, tmpreg0, tmpreg1);
 8004456:	687b      	ldr	r3, [r7, #4]
 8004458:	695b      	ldr	r3, [r3, #20]
 800445a:	019a      	lsls	r2, r3, #6
 800445c:	687b      	ldr	r3, [r7, #4]
 800445e:	6a1b      	ldr	r3, [r3, #32]
 8004460:	041b      	lsls	r3, r3, #16
 8004462:	431a      	orrs	r2, r3
 8004464:	693b      	ldr	r3, [r7, #16]
 8004466:	061b      	lsls	r3, r3, #24
 8004468:	431a      	orrs	r2, r3
 800446a:	68fb      	ldr	r3, [r7, #12]
 800446c:	071b      	lsls	r3, r3, #28
 800446e:	4929      	ldr	r1, [pc, #164]	; (8004514 <HAL_RCCEx_PeriphCLKConfig+0x84c>)
 8004470:	4313      	orrs	r3, r2
 8004472:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
    }

#if defined(STM32F746xx) || defined(STM32F756xx) || defined (STM32F767xx) || defined (STM32F769xx) || defined (STM32F777xx) || defined (STM32F779xx) || defined (STM32F750xx)
    /*---------------------------- LTDC configuration -------------------------------*/
    if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LTDC) == (RCC_PERIPHCLK_LTDC))
 8004476:	687b      	ldr	r3, [r7, #4]
 8004478:	681b      	ldr	r3, [r3, #0]
 800447a:	f003 0308 	and.w	r3, r3, #8
 800447e:	2b00      	cmp	r3, #0
 8004480:	d028      	beq.n	80044d4 <HAL_RCCEx_PeriphCLKConfig+0x80c>
    {
      assert_param(IS_RCC_PLLSAIR_VALUE(PeriphClkInit->PLLSAI.PLLSAIR));
      assert_param(IS_RCC_PLLSAI_DIVR_VALUE(PeriphClkInit->PLLSAIDivR));

      /* Read PLLSAIP and PLLSAIQ value from PLLSAICFGR register (these value are not needed for LTDC configuration) */
      tmpreg0 = ((RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIQ) >> RCC_PLLSAICFGR_PLLSAIQ_Pos);
 8004482:	4b24      	ldr	r3, [pc, #144]	; (8004514 <HAL_RCCEx_PeriphCLKConfig+0x84c>)
 8004484:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8004488:	0e1b      	lsrs	r3, r3, #24
 800448a:	f003 030f 	and.w	r3, r3, #15
 800448e:	613b      	str	r3, [r7, #16]
      tmpreg1 = ((RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIP) >> RCC_PLLSAICFGR_PLLSAIP_Pos);
 8004490:	4b20      	ldr	r3, [pc, #128]	; (8004514 <HAL_RCCEx_PeriphCLKConfig+0x84c>)
 8004492:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8004496:	0c1b      	lsrs	r3, r3, #16
 8004498:	f003 0303 	and.w	r3, r3, #3
 800449c:	60fb      	str	r3, [r7, #12]

      /* PLLSAI_VCO Input  = PLL_SOURCE/PLLM */
      /* PLLSAI_VCO Output = PLLSAI_VCO Input * PLLSAIN */
      /* LTDC_CLK(first level) = PLLSAI_VCO Output/PLLSAIR */
      __HAL_RCC_PLLSAI_CONFIG(PeriphClkInit->PLLSAI.PLLSAIN , tmpreg1, tmpreg0, PeriphClkInit->PLLSAI.PLLSAIR);
 800449e:	687b      	ldr	r3, [r7, #4]
 80044a0:	695b      	ldr	r3, [r3, #20]
 80044a2:	019a      	lsls	r2, r3, #6
 80044a4:	68fb      	ldr	r3, [r7, #12]
 80044a6:	041b      	lsls	r3, r3, #16
 80044a8:	431a      	orrs	r2, r3
 80044aa:	693b      	ldr	r3, [r7, #16]
 80044ac:	061b      	lsls	r3, r3, #24
 80044ae:	431a      	orrs	r2, r3
 80044b0:	687b      	ldr	r3, [r7, #4]
 80044b2:	69db      	ldr	r3, [r3, #28]
 80044b4:	071b      	lsls	r3, r3, #28
 80044b6:	4917      	ldr	r1, [pc, #92]	; (8004514 <HAL_RCCEx_PeriphCLKConfig+0x84c>)
 80044b8:	4313      	orrs	r3, r2
 80044ba:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

      /* LTDC_CLK = LTDC_CLK(first level)/PLLSAIDIVR */
      __HAL_RCC_PLLSAI_PLLSAICLKDIVR_CONFIG(PeriphClkInit->PLLSAIDivR);
 80044be:	4b15      	ldr	r3, [pc, #84]	; (8004514 <HAL_RCCEx_PeriphCLKConfig+0x84c>)
 80044c0:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 80044c4:	f423 3240 	bic.w	r2, r3, #196608	; 0x30000
 80044c8:	687b      	ldr	r3, [r7, #4]
 80044ca:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80044cc:	4911      	ldr	r1, [pc, #68]	; (8004514 <HAL_RCCEx_PeriphCLKConfig+0x84c>)
 80044ce:	4313      	orrs	r3, r2
 80044d0:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c
    }
#endif /* STM32F746xx || STM32F756xx || STM32F767xx || STM32F769xx || STM32F777xx || STM32F779xx || STM32F750xx  */

    /* Enable PLLSAI Clock */
    __HAL_RCC_PLLSAI_ENABLE();
 80044d4:	4b0f      	ldr	r3, [pc, #60]	; (8004514 <HAL_RCCEx_PeriphCLKConfig+0x84c>)
 80044d6:	681b      	ldr	r3, [r3, #0]
 80044d8:	4a0e      	ldr	r2, [pc, #56]	; (8004514 <HAL_RCCEx_PeriphCLKConfig+0x84c>)
 80044da:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80044de:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 80044e0:	f7fd fb66 	bl	8001bb0 <HAL_GetTick>
 80044e4:	6178      	str	r0, [r7, #20]

    /* Wait till PLLSAI is ready */
    while(__HAL_RCC_PLLSAI_GET_FLAG() == RESET)
 80044e6:	e008      	b.n	80044fa <HAL_RCCEx_PeriphCLKConfig+0x832>
    {
      if((HAL_GetTick() - tickstart) > PLLSAI_TIMEOUT_VALUE)
 80044e8:	f7fd fb62 	bl	8001bb0 <HAL_GetTick>
 80044ec:	4602      	mov	r2, r0
 80044ee:	697b      	ldr	r3, [r7, #20]
 80044f0:	1ad3      	subs	r3, r2, r3
 80044f2:	2b64      	cmp	r3, #100	; 0x64
 80044f4:	d901      	bls.n	80044fa <HAL_RCCEx_PeriphCLKConfig+0x832>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 80044f6:	2303      	movs	r3, #3
 80044f8:	e007      	b.n	800450a <HAL_RCCEx_PeriphCLKConfig+0x842>
    while(__HAL_RCC_PLLSAI_GET_FLAG() == RESET)
 80044fa:	4b06      	ldr	r3, [pc, #24]	; (8004514 <HAL_RCCEx_PeriphCLKConfig+0x84c>)
 80044fc:	681b      	ldr	r3, [r3, #0]
 80044fe:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 8004502:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8004506:	d1ef      	bne.n	80044e8 <HAL_RCCEx_PeriphCLKConfig+0x820>
      }
    }
  }
  return HAL_OK;
 8004508:	2300      	movs	r3, #0
}
 800450a:	4618      	mov	r0, r3
 800450c:	3720      	adds	r7, #32
 800450e:	46bd      	mov	sp, r7
 8004510:	bd80      	pop	{r7, pc}
 8004512:	bf00      	nop
 8004514:	40023800 	.word	0x40023800

08004518 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 8004518:	b580      	push	{r7, lr}
 800451a:	b082      	sub	sp, #8
 800451c:	af00      	add	r7, sp, #0
 800451e:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8004520:	687b      	ldr	r3, [r7, #4]
 8004522:	2b00      	cmp	r3, #0
 8004524:	d101      	bne.n	800452a <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 8004526:	2301      	movs	r3, #1
 8004528:	e049      	b.n	80045be <HAL_TIM_Base_Init+0xa6>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 800452a:	687b      	ldr	r3, [r7, #4]
 800452c:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8004530:	b2db      	uxtb	r3, r3
 8004532:	2b00      	cmp	r3, #0
 8004534:	d106      	bne.n	8004544 <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8004536:	687b      	ldr	r3, [r7, #4]
 8004538:	2200      	movs	r2, #0
 800453a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 800453e:	6878      	ldr	r0, [r7, #4]
 8004540:	f000 f841 	bl	80045c6 <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8004544:	687b      	ldr	r3, [r7, #4]
 8004546:	2202      	movs	r2, #2
 8004548:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 800454c:	687b      	ldr	r3, [r7, #4]
 800454e:	681a      	ldr	r2, [r3, #0]
 8004550:	687b      	ldr	r3, [r7, #4]
 8004552:	3304      	adds	r3, #4
 8004554:	4619      	mov	r1, r3
 8004556:	4610      	mov	r0, r2
 8004558:	f000 fa00 	bl	800495c <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 800455c:	687b      	ldr	r3, [r7, #4]
 800455e:	2201      	movs	r2, #1
 8004560:	f883 2048 	strb.w	r2, [r3, #72]	; 0x48

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8004564:	687b      	ldr	r3, [r7, #4]
 8004566:	2201      	movs	r2, #1
 8004568:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 800456c:	687b      	ldr	r3, [r7, #4]
 800456e:	2201      	movs	r2, #1
 8004570:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8004574:	687b      	ldr	r3, [r7, #4]
 8004576:	2201      	movs	r2, #1
 8004578:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 800457c:	687b      	ldr	r3, [r7, #4]
 800457e:	2201      	movs	r2, #1
 8004580:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
 8004584:	687b      	ldr	r3, [r7, #4]
 8004586:	2201      	movs	r2, #1
 8004588:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 800458c:	687b      	ldr	r3, [r7, #4]
 800458e:	2201      	movs	r2, #1
 8004590:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8004594:	687b      	ldr	r3, [r7, #4]
 8004596:	2201      	movs	r2, #1
 8004598:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 800459c:	687b      	ldr	r3, [r7, #4]
 800459e:	2201      	movs	r2, #1
 80045a0:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 80045a4:	687b      	ldr	r3, [r7, #4]
 80045a6:	2201      	movs	r2, #1
 80045a8:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
 80045ac:	687b      	ldr	r3, [r7, #4]
 80045ae:	2201      	movs	r2, #1
 80045b0:	f883 2047 	strb.w	r2, [r3, #71]	; 0x47

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 80045b4:	687b      	ldr	r3, [r7, #4]
 80045b6:	2201      	movs	r2, #1
 80045b8:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 80045bc:	2300      	movs	r3, #0
}
 80045be:	4618      	mov	r0, r3
 80045c0:	3708      	adds	r7, #8
 80045c2:	46bd      	mov	sp, r7
 80045c4:	bd80      	pop	{r7, pc}

080045c6 <HAL_TIM_Base_MspInit>:
  * @brief  Initializes the TIM Base MSP.
  * @param  htim TIM Base handle
  * @retval None
  */
__weak void HAL_TIM_Base_MspInit(TIM_HandleTypeDef *htim)
{
 80045c6:	b480      	push	{r7}
 80045c8:	b083      	sub	sp, #12
 80045ca:	af00      	add	r7, sp, #0
 80045cc:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_Base_MspInit could be implemented in the user file
   */
}
 80045ce:	bf00      	nop
 80045d0:	370c      	adds	r7, #12
 80045d2:	46bd      	mov	sp, r7
 80045d4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80045d8:	4770      	bx	lr
	...

080045dc <HAL_TIM_Base_Start_IT>:
  * @brief  Starts the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start_IT(TIM_HandleTypeDef *htim)
{
 80045dc:	b480      	push	{r7}
 80045de:	b085      	sub	sp, #20
 80045e0:	af00      	add	r7, sp, #0
 80045e2:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 80045e4:	687b      	ldr	r3, [r7, #4]
 80045e6:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80045ea:	b2db      	uxtb	r3, r3
 80045ec:	2b01      	cmp	r3, #1
 80045ee:	d001      	beq.n	80045f4 <HAL_TIM_Base_Start_IT+0x18>
  {
    return HAL_ERROR;
 80045f0:	2301      	movs	r3, #1
 80045f2:	e054      	b.n	800469e <HAL_TIM_Base_Start_IT+0xc2>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 80045f4:	687b      	ldr	r3, [r7, #4]
 80045f6:	2202      	movs	r2, #2
 80045f8:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 80045fc:	687b      	ldr	r3, [r7, #4]
 80045fe:	681b      	ldr	r3, [r3, #0]
 8004600:	68da      	ldr	r2, [r3, #12]
 8004602:	687b      	ldr	r3, [r7, #4]
 8004604:	681b      	ldr	r3, [r3, #0]
 8004606:	f042 0201 	orr.w	r2, r2, #1
 800460a:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 800460c:	687b      	ldr	r3, [r7, #4]
 800460e:	681b      	ldr	r3, [r3, #0]
 8004610:	4a26      	ldr	r2, [pc, #152]	; (80046ac <HAL_TIM_Base_Start_IT+0xd0>)
 8004612:	4293      	cmp	r3, r2
 8004614:	d022      	beq.n	800465c <HAL_TIM_Base_Start_IT+0x80>
 8004616:	687b      	ldr	r3, [r7, #4]
 8004618:	681b      	ldr	r3, [r3, #0]
 800461a:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800461e:	d01d      	beq.n	800465c <HAL_TIM_Base_Start_IT+0x80>
 8004620:	687b      	ldr	r3, [r7, #4]
 8004622:	681b      	ldr	r3, [r3, #0]
 8004624:	4a22      	ldr	r2, [pc, #136]	; (80046b0 <HAL_TIM_Base_Start_IT+0xd4>)
 8004626:	4293      	cmp	r3, r2
 8004628:	d018      	beq.n	800465c <HAL_TIM_Base_Start_IT+0x80>
 800462a:	687b      	ldr	r3, [r7, #4]
 800462c:	681b      	ldr	r3, [r3, #0]
 800462e:	4a21      	ldr	r2, [pc, #132]	; (80046b4 <HAL_TIM_Base_Start_IT+0xd8>)
 8004630:	4293      	cmp	r3, r2
 8004632:	d013      	beq.n	800465c <HAL_TIM_Base_Start_IT+0x80>
 8004634:	687b      	ldr	r3, [r7, #4]
 8004636:	681b      	ldr	r3, [r3, #0]
 8004638:	4a1f      	ldr	r2, [pc, #124]	; (80046b8 <HAL_TIM_Base_Start_IT+0xdc>)
 800463a:	4293      	cmp	r3, r2
 800463c:	d00e      	beq.n	800465c <HAL_TIM_Base_Start_IT+0x80>
 800463e:	687b      	ldr	r3, [r7, #4]
 8004640:	681b      	ldr	r3, [r3, #0]
 8004642:	4a1e      	ldr	r2, [pc, #120]	; (80046bc <HAL_TIM_Base_Start_IT+0xe0>)
 8004644:	4293      	cmp	r3, r2
 8004646:	d009      	beq.n	800465c <HAL_TIM_Base_Start_IT+0x80>
 8004648:	687b      	ldr	r3, [r7, #4]
 800464a:	681b      	ldr	r3, [r3, #0]
 800464c:	4a1c      	ldr	r2, [pc, #112]	; (80046c0 <HAL_TIM_Base_Start_IT+0xe4>)
 800464e:	4293      	cmp	r3, r2
 8004650:	d004      	beq.n	800465c <HAL_TIM_Base_Start_IT+0x80>
 8004652:	687b      	ldr	r3, [r7, #4]
 8004654:	681b      	ldr	r3, [r3, #0]
 8004656:	4a1b      	ldr	r2, [pc, #108]	; (80046c4 <HAL_TIM_Base_Start_IT+0xe8>)
 8004658:	4293      	cmp	r3, r2
 800465a:	d115      	bne.n	8004688 <HAL_TIM_Base_Start_IT+0xac>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 800465c:	687b      	ldr	r3, [r7, #4]
 800465e:	681b      	ldr	r3, [r3, #0]
 8004660:	689a      	ldr	r2, [r3, #8]
 8004662:	4b19      	ldr	r3, [pc, #100]	; (80046c8 <HAL_TIM_Base_Start_IT+0xec>)
 8004664:	4013      	ands	r3, r2
 8004666:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8004668:	68fb      	ldr	r3, [r7, #12]
 800466a:	2b06      	cmp	r3, #6
 800466c:	d015      	beq.n	800469a <HAL_TIM_Base_Start_IT+0xbe>
 800466e:	68fb      	ldr	r3, [r7, #12]
 8004670:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8004674:	d011      	beq.n	800469a <HAL_TIM_Base_Start_IT+0xbe>
    {
      __HAL_TIM_ENABLE(htim);
 8004676:	687b      	ldr	r3, [r7, #4]
 8004678:	681b      	ldr	r3, [r3, #0]
 800467a:	681a      	ldr	r2, [r3, #0]
 800467c:	687b      	ldr	r3, [r7, #4]
 800467e:	681b      	ldr	r3, [r3, #0]
 8004680:	f042 0201 	orr.w	r2, r2, #1
 8004684:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8004686:	e008      	b.n	800469a <HAL_TIM_Base_Start_IT+0xbe>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 8004688:	687b      	ldr	r3, [r7, #4]
 800468a:	681b      	ldr	r3, [r3, #0]
 800468c:	681a      	ldr	r2, [r3, #0]
 800468e:	687b      	ldr	r3, [r7, #4]
 8004690:	681b      	ldr	r3, [r3, #0]
 8004692:	f042 0201 	orr.w	r2, r2, #1
 8004696:	601a      	str	r2, [r3, #0]
 8004698:	e000      	b.n	800469c <HAL_TIM_Base_Start_IT+0xc0>
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800469a:	bf00      	nop
  }

  /* Return function status */
  return HAL_OK;
 800469c:	2300      	movs	r3, #0
}
 800469e:	4618      	mov	r0, r3
 80046a0:	3714      	adds	r7, #20
 80046a2:	46bd      	mov	sp, r7
 80046a4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80046a8:	4770      	bx	lr
 80046aa:	bf00      	nop
 80046ac:	40010000 	.word	0x40010000
 80046b0:	40000400 	.word	0x40000400
 80046b4:	40000800 	.word	0x40000800
 80046b8:	40000c00 	.word	0x40000c00
 80046bc:	40010400 	.word	0x40010400
 80046c0:	40014000 	.word	0x40014000
 80046c4:	40001800 	.word	0x40001800
 80046c8:	00010007 	.word	0x00010007

080046cc <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 80046cc:	b580      	push	{r7, lr}
 80046ce:	b082      	sub	sp, #8
 80046d0:	af00      	add	r7, sp, #0
 80046d2:	6078      	str	r0, [r7, #4]
  /* Capture compare 1 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC1) != RESET)
 80046d4:	687b      	ldr	r3, [r7, #4]
 80046d6:	681b      	ldr	r3, [r3, #0]
 80046d8:	691b      	ldr	r3, [r3, #16]
 80046da:	f003 0302 	and.w	r3, r3, #2
 80046de:	2b02      	cmp	r3, #2
 80046e0:	d122      	bne.n	8004728 <HAL_TIM_IRQHandler+0x5c>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC1) != RESET)
 80046e2:	687b      	ldr	r3, [r7, #4]
 80046e4:	681b      	ldr	r3, [r3, #0]
 80046e6:	68db      	ldr	r3, [r3, #12]
 80046e8:	f003 0302 	and.w	r3, r3, #2
 80046ec:	2b02      	cmp	r3, #2
 80046ee:	d11b      	bne.n	8004728 <HAL_TIM_IRQHandler+0x5c>
    {
      {
        __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC1);
 80046f0:	687b      	ldr	r3, [r7, #4]
 80046f2:	681b      	ldr	r3, [r3, #0]
 80046f4:	f06f 0202 	mvn.w	r2, #2
 80046f8:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 80046fa:	687b      	ldr	r3, [r7, #4]
 80046fc:	2201      	movs	r2, #1
 80046fe:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 8004700:	687b      	ldr	r3, [r7, #4]
 8004702:	681b      	ldr	r3, [r3, #0]
 8004704:	699b      	ldr	r3, [r3, #24]
 8004706:	f003 0303 	and.w	r3, r3, #3
 800470a:	2b00      	cmp	r3, #0
 800470c:	d003      	beq.n	8004716 <HAL_TIM_IRQHandler+0x4a>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 800470e:	6878      	ldr	r0, [r7, #4]
 8004710:	f000 f905 	bl	800491e <HAL_TIM_IC_CaptureCallback>
 8004714:	e005      	b.n	8004722 <HAL_TIM_IRQHandler+0x56>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 8004716:	6878      	ldr	r0, [r7, #4]
 8004718:	f000 f8f7 	bl	800490a <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 800471c:	6878      	ldr	r0, [r7, #4]
 800471e:	f000 f908 	bl	8004932 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8004722:	687b      	ldr	r3, [r7, #4]
 8004724:	2200      	movs	r2, #0
 8004726:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC2) != RESET)
 8004728:	687b      	ldr	r3, [r7, #4]
 800472a:	681b      	ldr	r3, [r3, #0]
 800472c:	691b      	ldr	r3, [r3, #16]
 800472e:	f003 0304 	and.w	r3, r3, #4
 8004732:	2b04      	cmp	r3, #4
 8004734:	d122      	bne.n	800477c <HAL_TIM_IRQHandler+0xb0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC2) != RESET)
 8004736:	687b      	ldr	r3, [r7, #4]
 8004738:	681b      	ldr	r3, [r3, #0]
 800473a:	68db      	ldr	r3, [r3, #12]
 800473c:	f003 0304 	and.w	r3, r3, #4
 8004740:	2b04      	cmp	r3, #4
 8004742:	d11b      	bne.n	800477c <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC2);
 8004744:	687b      	ldr	r3, [r7, #4]
 8004746:	681b      	ldr	r3, [r3, #0]
 8004748:	f06f 0204 	mvn.w	r2, #4
 800474c:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 800474e:	687b      	ldr	r3, [r7, #4]
 8004750:	2202      	movs	r2, #2
 8004752:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 8004754:	687b      	ldr	r3, [r7, #4]
 8004756:	681b      	ldr	r3, [r3, #0]
 8004758:	699b      	ldr	r3, [r3, #24]
 800475a:	f403 7340 	and.w	r3, r3, #768	; 0x300
 800475e:	2b00      	cmp	r3, #0
 8004760:	d003      	beq.n	800476a <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8004762:	6878      	ldr	r0, [r7, #4]
 8004764:	f000 f8db 	bl	800491e <HAL_TIM_IC_CaptureCallback>
 8004768:	e005      	b.n	8004776 <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 800476a:	6878      	ldr	r0, [r7, #4]
 800476c:	f000 f8cd 	bl	800490a <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8004770:	6878      	ldr	r0, [r7, #4]
 8004772:	f000 f8de 	bl	8004932 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8004776:	687b      	ldr	r3, [r7, #4]
 8004778:	2200      	movs	r2, #0
 800477a:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC3) != RESET)
 800477c:	687b      	ldr	r3, [r7, #4]
 800477e:	681b      	ldr	r3, [r3, #0]
 8004780:	691b      	ldr	r3, [r3, #16]
 8004782:	f003 0308 	and.w	r3, r3, #8
 8004786:	2b08      	cmp	r3, #8
 8004788:	d122      	bne.n	80047d0 <HAL_TIM_IRQHandler+0x104>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC3) != RESET)
 800478a:	687b      	ldr	r3, [r7, #4]
 800478c:	681b      	ldr	r3, [r3, #0]
 800478e:	68db      	ldr	r3, [r3, #12]
 8004790:	f003 0308 	and.w	r3, r3, #8
 8004794:	2b08      	cmp	r3, #8
 8004796:	d11b      	bne.n	80047d0 <HAL_TIM_IRQHandler+0x104>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC3);
 8004798:	687b      	ldr	r3, [r7, #4]
 800479a:	681b      	ldr	r3, [r3, #0]
 800479c:	f06f 0208 	mvn.w	r2, #8
 80047a0:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 80047a2:	687b      	ldr	r3, [r7, #4]
 80047a4:	2204      	movs	r2, #4
 80047a6:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 80047a8:	687b      	ldr	r3, [r7, #4]
 80047aa:	681b      	ldr	r3, [r3, #0]
 80047ac:	69db      	ldr	r3, [r3, #28]
 80047ae:	f003 0303 	and.w	r3, r3, #3
 80047b2:	2b00      	cmp	r3, #0
 80047b4:	d003      	beq.n	80047be <HAL_TIM_IRQHandler+0xf2>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 80047b6:	6878      	ldr	r0, [r7, #4]
 80047b8:	f000 f8b1 	bl	800491e <HAL_TIM_IC_CaptureCallback>
 80047bc:	e005      	b.n	80047ca <HAL_TIM_IRQHandler+0xfe>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 80047be:	6878      	ldr	r0, [r7, #4]
 80047c0:	f000 f8a3 	bl	800490a <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 80047c4:	6878      	ldr	r0, [r7, #4]
 80047c6:	f000 f8b4 	bl	8004932 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80047ca:	687b      	ldr	r3, [r7, #4]
 80047cc:	2200      	movs	r2, #0
 80047ce:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC4) != RESET)
 80047d0:	687b      	ldr	r3, [r7, #4]
 80047d2:	681b      	ldr	r3, [r3, #0]
 80047d4:	691b      	ldr	r3, [r3, #16]
 80047d6:	f003 0310 	and.w	r3, r3, #16
 80047da:	2b10      	cmp	r3, #16
 80047dc:	d122      	bne.n	8004824 <HAL_TIM_IRQHandler+0x158>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC4) != RESET)
 80047de:	687b      	ldr	r3, [r7, #4]
 80047e0:	681b      	ldr	r3, [r3, #0]
 80047e2:	68db      	ldr	r3, [r3, #12]
 80047e4:	f003 0310 	and.w	r3, r3, #16
 80047e8:	2b10      	cmp	r3, #16
 80047ea:	d11b      	bne.n	8004824 <HAL_TIM_IRQHandler+0x158>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC4);
 80047ec:	687b      	ldr	r3, [r7, #4]
 80047ee:	681b      	ldr	r3, [r3, #0]
 80047f0:	f06f 0210 	mvn.w	r2, #16
 80047f4:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 80047f6:	687b      	ldr	r3, [r7, #4]
 80047f8:	2208      	movs	r2, #8
 80047fa:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 80047fc:	687b      	ldr	r3, [r7, #4]
 80047fe:	681b      	ldr	r3, [r3, #0]
 8004800:	69db      	ldr	r3, [r3, #28]
 8004802:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8004806:	2b00      	cmp	r3, #0
 8004808:	d003      	beq.n	8004812 <HAL_TIM_IRQHandler+0x146>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 800480a:	6878      	ldr	r0, [r7, #4]
 800480c:	f000 f887 	bl	800491e <HAL_TIM_IC_CaptureCallback>
 8004810:	e005      	b.n	800481e <HAL_TIM_IRQHandler+0x152>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8004812:	6878      	ldr	r0, [r7, #4]
 8004814:	f000 f879 	bl	800490a <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8004818:	6878      	ldr	r0, [r7, #4]
 800481a:	f000 f88a 	bl	8004932 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800481e:	687b      	ldr	r3, [r7, #4]
 8004820:	2200      	movs	r2, #0
 8004822:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_UPDATE) != RESET)
 8004824:	687b      	ldr	r3, [r7, #4]
 8004826:	681b      	ldr	r3, [r3, #0]
 8004828:	691b      	ldr	r3, [r3, #16]
 800482a:	f003 0301 	and.w	r3, r3, #1
 800482e:	2b01      	cmp	r3, #1
 8004830:	d10e      	bne.n	8004850 <HAL_TIM_IRQHandler+0x184>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_UPDATE) != RESET)
 8004832:	687b      	ldr	r3, [r7, #4]
 8004834:	681b      	ldr	r3, [r3, #0]
 8004836:	68db      	ldr	r3, [r3, #12]
 8004838:	f003 0301 	and.w	r3, r3, #1
 800483c:	2b01      	cmp	r3, #1
 800483e:	d107      	bne.n	8004850 <HAL_TIM_IRQHandler+0x184>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_UPDATE);
 8004840:	687b      	ldr	r3, [r7, #4]
 8004842:	681b      	ldr	r3, [r3, #0]
 8004844:	f06f 0201 	mvn.w	r2, #1
 8004848:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 800484a:	6878      	ldr	r0, [r7, #4]
 800484c:	f7fc ff80 	bl	8001750 <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK) != RESET)
 8004850:	687b      	ldr	r3, [r7, #4]
 8004852:	681b      	ldr	r3, [r3, #0]
 8004854:	691b      	ldr	r3, [r3, #16]
 8004856:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800485a:	2b80      	cmp	r3, #128	; 0x80
 800485c:	d10e      	bne.n	800487c <HAL_TIM_IRQHandler+0x1b0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 800485e:	687b      	ldr	r3, [r7, #4]
 8004860:	681b      	ldr	r3, [r3, #0]
 8004862:	68db      	ldr	r3, [r3, #12]
 8004864:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8004868:	2b80      	cmp	r3, #128	; 0x80
 800486a:	d107      	bne.n	800487c <HAL_TIM_IRQHandler+0x1b0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_BREAK);
 800486c:	687b      	ldr	r3, [r7, #4]
 800486e:	681b      	ldr	r3, [r3, #0]
 8004870:	f06f 0280 	mvn.w	r2, #128	; 0x80
 8004874:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 8004876:	6878      	ldr	r0, [r7, #4]
 8004878:	f000 f91a 	bl	8004ab0 <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break2 input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK2) != RESET)
 800487c:	687b      	ldr	r3, [r7, #4]
 800487e:	681b      	ldr	r3, [r3, #0]
 8004880:	691b      	ldr	r3, [r3, #16]
 8004882:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8004886:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 800488a:	d10e      	bne.n	80048aa <HAL_TIM_IRQHandler+0x1de>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 800488c:	687b      	ldr	r3, [r7, #4]
 800488e:	681b      	ldr	r3, [r3, #0]
 8004890:	68db      	ldr	r3, [r3, #12]
 8004892:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8004896:	2b80      	cmp	r3, #128	; 0x80
 8004898:	d107      	bne.n	80048aa <HAL_TIM_IRQHandler+0x1de>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_BREAK2);
 800489a:	687b      	ldr	r3, [r7, #4]
 800489c:	681b      	ldr	r3, [r3, #0]
 800489e:	f46f 7280 	mvn.w	r2, #256	; 0x100
 80048a2:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->Break2Callback(htim);
#else
      HAL_TIMEx_Break2Callback(htim);
 80048a4:	6878      	ldr	r0, [r7, #4]
 80048a6:	f000 f90d 	bl	8004ac4 <HAL_TIMEx_Break2Callback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_TRIGGER) != RESET)
 80048aa:	687b      	ldr	r3, [r7, #4]
 80048ac:	681b      	ldr	r3, [r3, #0]
 80048ae:	691b      	ldr	r3, [r3, #16]
 80048b0:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80048b4:	2b40      	cmp	r3, #64	; 0x40
 80048b6:	d10e      	bne.n	80048d6 <HAL_TIM_IRQHandler+0x20a>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_TRIGGER) != RESET)
 80048b8:	687b      	ldr	r3, [r7, #4]
 80048ba:	681b      	ldr	r3, [r3, #0]
 80048bc:	68db      	ldr	r3, [r3, #12]
 80048be:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80048c2:	2b40      	cmp	r3, #64	; 0x40
 80048c4:	d107      	bne.n	80048d6 <HAL_TIM_IRQHandler+0x20a>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_TRIGGER);
 80048c6:	687b      	ldr	r3, [r7, #4]
 80048c8:	681b      	ldr	r3, [r3, #0]
 80048ca:	f06f 0240 	mvn.w	r2, #64	; 0x40
 80048ce:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 80048d0:	6878      	ldr	r0, [r7, #4]
 80048d2:	f000 f838 	bl	8004946 <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_COM) != RESET)
 80048d6:	687b      	ldr	r3, [r7, #4]
 80048d8:	681b      	ldr	r3, [r3, #0]
 80048da:	691b      	ldr	r3, [r3, #16]
 80048dc:	f003 0320 	and.w	r3, r3, #32
 80048e0:	2b20      	cmp	r3, #32
 80048e2:	d10e      	bne.n	8004902 <HAL_TIM_IRQHandler+0x236>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_COM) != RESET)
 80048e4:	687b      	ldr	r3, [r7, #4]
 80048e6:	681b      	ldr	r3, [r3, #0]
 80048e8:	68db      	ldr	r3, [r3, #12]
 80048ea:	f003 0320 	and.w	r3, r3, #32
 80048ee:	2b20      	cmp	r3, #32
 80048f0:	d107      	bne.n	8004902 <HAL_TIM_IRQHandler+0x236>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_COM);
 80048f2:	687b      	ldr	r3, [r7, #4]
 80048f4:	681b      	ldr	r3, [r3, #0]
 80048f6:	f06f 0220 	mvn.w	r2, #32
 80048fa:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 80048fc:	6878      	ldr	r0, [r7, #4]
 80048fe:	f000 f8cd 	bl	8004a9c <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 8004902:	bf00      	nop
 8004904:	3708      	adds	r7, #8
 8004906:	46bd      	mov	sp, r7
 8004908:	bd80      	pop	{r7, pc}

0800490a <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 800490a:	b480      	push	{r7}
 800490c:	b083      	sub	sp, #12
 800490e:	af00      	add	r7, sp, #0
 8004910:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 8004912:	bf00      	nop
 8004914:	370c      	adds	r7, #12
 8004916:	46bd      	mov	sp, r7
 8004918:	f85d 7b04 	ldr.w	r7, [sp], #4
 800491c:	4770      	bx	lr

0800491e <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 800491e:	b480      	push	{r7}
 8004920:	b083      	sub	sp, #12
 8004922:	af00      	add	r7, sp, #0
 8004924:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 8004926:	bf00      	nop
 8004928:	370c      	adds	r7, #12
 800492a:	46bd      	mov	sp, r7
 800492c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004930:	4770      	bx	lr

08004932 <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 8004932:	b480      	push	{r7}
 8004934:	b083      	sub	sp, #12
 8004936:	af00      	add	r7, sp, #0
 8004938:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 800493a:	bf00      	nop
 800493c:	370c      	adds	r7, #12
 800493e:	46bd      	mov	sp, r7
 8004940:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004944:	4770      	bx	lr

08004946 <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 8004946:	b480      	push	{r7}
 8004948:	b083      	sub	sp, #12
 800494a:	af00      	add	r7, sp, #0
 800494c:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 800494e:	bf00      	nop
 8004950:	370c      	adds	r7, #12
 8004952:	46bd      	mov	sp, r7
 8004954:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004958:	4770      	bx	lr
	...

0800495c <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, const TIM_Base_InitTypeDef *Structure)
{
 800495c:	b480      	push	{r7}
 800495e:	b085      	sub	sp, #20
 8004960:	af00      	add	r7, sp, #0
 8004962:	6078      	str	r0, [r7, #4]
 8004964:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 8004966:	687b      	ldr	r3, [r7, #4]
 8004968:	681b      	ldr	r3, [r3, #0]
 800496a:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 800496c:	687b      	ldr	r3, [r7, #4]
 800496e:	4a40      	ldr	r2, [pc, #256]	; (8004a70 <TIM_Base_SetConfig+0x114>)
 8004970:	4293      	cmp	r3, r2
 8004972:	d013      	beq.n	800499c <TIM_Base_SetConfig+0x40>
 8004974:	687b      	ldr	r3, [r7, #4]
 8004976:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800497a:	d00f      	beq.n	800499c <TIM_Base_SetConfig+0x40>
 800497c:	687b      	ldr	r3, [r7, #4]
 800497e:	4a3d      	ldr	r2, [pc, #244]	; (8004a74 <TIM_Base_SetConfig+0x118>)
 8004980:	4293      	cmp	r3, r2
 8004982:	d00b      	beq.n	800499c <TIM_Base_SetConfig+0x40>
 8004984:	687b      	ldr	r3, [r7, #4]
 8004986:	4a3c      	ldr	r2, [pc, #240]	; (8004a78 <TIM_Base_SetConfig+0x11c>)
 8004988:	4293      	cmp	r3, r2
 800498a:	d007      	beq.n	800499c <TIM_Base_SetConfig+0x40>
 800498c:	687b      	ldr	r3, [r7, #4]
 800498e:	4a3b      	ldr	r2, [pc, #236]	; (8004a7c <TIM_Base_SetConfig+0x120>)
 8004990:	4293      	cmp	r3, r2
 8004992:	d003      	beq.n	800499c <TIM_Base_SetConfig+0x40>
 8004994:	687b      	ldr	r3, [r7, #4]
 8004996:	4a3a      	ldr	r2, [pc, #232]	; (8004a80 <TIM_Base_SetConfig+0x124>)
 8004998:	4293      	cmp	r3, r2
 800499a:	d108      	bne.n	80049ae <TIM_Base_SetConfig+0x52>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 800499c:	68fb      	ldr	r3, [r7, #12]
 800499e:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80049a2:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 80049a4:	683b      	ldr	r3, [r7, #0]
 80049a6:	685b      	ldr	r3, [r3, #4]
 80049a8:	68fa      	ldr	r2, [r7, #12]
 80049aa:	4313      	orrs	r3, r2
 80049ac:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 80049ae:	687b      	ldr	r3, [r7, #4]
 80049b0:	4a2f      	ldr	r2, [pc, #188]	; (8004a70 <TIM_Base_SetConfig+0x114>)
 80049b2:	4293      	cmp	r3, r2
 80049b4:	d02b      	beq.n	8004a0e <TIM_Base_SetConfig+0xb2>
 80049b6:	687b      	ldr	r3, [r7, #4]
 80049b8:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80049bc:	d027      	beq.n	8004a0e <TIM_Base_SetConfig+0xb2>
 80049be:	687b      	ldr	r3, [r7, #4]
 80049c0:	4a2c      	ldr	r2, [pc, #176]	; (8004a74 <TIM_Base_SetConfig+0x118>)
 80049c2:	4293      	cmp	r3, r2
 80049c4:	d023      	beq.n	8004a0e <TIM_Base_SetConfig+0xb2>
 80049c6:	687b      	ldr	r3, [r7, #4]
 80049c8:	4a2b      	ldr	r2, [pc, #172]	; (8004a78 <TIM_Base_SetConfig+0x11c>)
 80049ca:	4293      	cmp	r3, r2
 80049cc:	d01f      	beq.n	8004a0e <TIM_Base_SetConfig+0xb2>
 80049ce:	687b      	ldr	r3, [r7, #4]
 80049d0:	4a2a      	ldr	r2, [pc, #168]	; (8004a7c <TIM_Base_SetConfig+0x120>)
 80049d2:	4293      	cmp	r3, r2
 80049d4:	d01b      	beq.n	8004a0e <TIM_Base_SetConfig+0xb2>
 80049d6:	687b      	ldr	r3, [r7, #4]
 80049d8:	4a29      	ldr	r2, [pc, #164]	; (8004a80 <TIM_Base_SetConfig+0x124>)
 80049da:	4293      	cmp	r3, r2
 80049dc:	d017      	beq.n	8004a0e <TIM_Base_SetConfig+0xb2>
 80049de:	687b      	ldr	r3, [r7, #4]
 80049e0:	4a28      	ldr	r2, [pc, #160]	; (8004a84 <TIM_Base_SetConfig+0x128>)
 80049e2:	4293      	cmp	r3, r2
 80049e4:	d013      	beq.n	8004a0e <TIM_Base_SetConfig+0xb2>
 80049e6:	687b      	ldr	r3, [r7, #4]
 80049e8:	4a27      	ldr	r2, [pc, #156]	; (8004a88 <TIM_Base_SetConfig+0x12c>)
 80049ea:	4293      	cmp	r3, r2
 80049ec:	d00f      	beq.n	8004a0e <TIM_Base_SetConfig+0xb2>
 80049ee:	687b      	ldr	r3, [r7, #4]
 80049f0:	4a26      	ldr	r2, [pc, #152]	; (8004a8c <TIM_Base_SetConfig+0x130>)
 80049f2:	4293      	cmp	r3, r2
 80049f4:	d00b      	beq.n	8004a0e <TIM_Base_SetConfig+0xb2>
 80049f6:	687b      	ldr	r3, [r7, #4]
 80049f8:	4a25      	ldr	r2, [pc, #148]	; (8004a90 <TIM_Base_SetConfig+0x134>)
 80049fa:	4293      	cmp	r3, r2
 80049fc:	d007      	beq.n	8004a0e <TIM_Base_SetConfig+0xb2>
 80049fe:	687b      	ldr	r3, [r7, #4]
 8004a00:	4a24      	ldr	r2, [pc, #144]	; (8004a94 <TIM_Base_SetConfig+0x138>)
 8004a02:	4293      	cmp	r3, r2
 8004a04:	d003      	beq.n	8004a0e <TIM_Base_SetConfig+0xb2>
 8004a06:	687b      	ldr	r3, [r7, #4]
 8004a08:	4a23      	ldr	r2, [pc, #140]	; (8004a98 <TIM_Base_SetConfig+0x13c>)
 8004a0a:	4293      	cmp	r3, r2
 8004a0c:	d108      	bne.n	8004a20 <TIM_Base_SetConfig+0xc4>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 8004a0e:	68fb      	ldr	r3, [r7, #12]
 8004a10:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8004a14:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 8004a16:	683b      	ldr	r3, [r7, #0]
 8004a18:	68db      	ldr	r3, [r3, #12]
 8004a1a:	68fa      	ldr	r2, [r7, #12]
 8004a1c:	4313      	orrs	r3, r2
 8004a1e:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8004a20:	68fb      	ldr	r3, [r7, #12]
 8004a22:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 8004a26:	683b      	ldr	r3, [r7, #0]
 8004a28:	695b      	ldr	r3, [r3, #20]
 8004a2a:	4313      	orrs	r3, r2
 8004a2c:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 8004a2e:	687b      	ldr	r3, [r7, #4]
 8004a30:	68fa      	ldr	r2, [r7, #12]
 8004a32:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 8004a34:	683b      	ldr	r3, [r7, #0]
 8004a36:	689a      	ldr	r2, [r3, #8]
 8004a38:	687b      	ldr	r3, [r7, #4]
 8004a3a:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 8004a3c:	683b      	ldr	r3, [r7, #0]
 8004a3e:	681a      	ldr	r2, [r3, #0]
 8004a40:	687b      	ldr	r3, [r7, #4]
 8004a42:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 8004a44:	687b      	ldr	r3, [r7, #4]
 8004a46:	4a0a      	ldr	r2, [pc, #40]	; (8004a70 <TIM_Base_SetConfig+0x114>)
 8004a48:	4293      	cmp	r3, r2
 8004a4a:	d003      	beq.n	8004a54 <TIM_Base_SetConfig+0xf8>
 8004a4c:	687b      	ldr	r3, [r7, #4]
 8004a4e:	4a0c      	ldr	r2, [pc, #48]	; (8004a80 <TIM_Base_SetConfig+0x124>)
 8004a50:	4293      	cmp	r3, r2
 8004a52:	d103      	bne.n	8004a5c <TIM_Base_SetConfig+0x100>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 8004a54:	683b      	ldr	r3, [r7, #0]
 8004a56:	691a      	ldr	r2, [r3, #16]
 8004a58:	687b      	ldr	r3, [r7, #4]
 8004a5a:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 8004a5c:	687b      	ldr	r3, [r7, #4]
 8004a5e:	2201      	movs	r2, #1
 8004a60:	615a      	str	r2, [r3, #20]
}
 8004a62:	bf00      	nop
 8004a64:	3714      	adds	r7, #20
 8004a66:	46bd      	mov	sp, r7
 8004a68:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004a6c:	4770      	bx	lr
 8004a6e:	bf00      	nop
 8004a70:	40010000 	.word	0x40010000
 8004a74:	40000400 	.word	0x40000400
 8004a78:	40000800 	.word	0x40000800
 8004a7c:	40000c00 	.word	0x40000c00
 8004a80:	40010400 	.word	0x40010400
 8004a84:	40014000 	.word	0x40014000
 8004a88:	40014400 	.word	0x40014400
 8004a8c:	40014800 	.word	0x40014800
 8004a90:	40001800 	.word	0x40001800
 8004a94:	40001c00 	.word	0x40001c00
 8004a98:	40002000 	.word	0x40002000

08004a9c <HAL_TIMEx_CommutCallback>:
  * @brief  Hall commutation changed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 8004a9c:	b480      	push	{r7}
 8004a9e:	b083      	sub	sp, #12
 8004aa0:	af00      	add	r7, sp, #0
 8004aa2:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 8004aa4:	bf00      	nop
 8004aa6:	370c      	adds	r7, #12
 8004aa8:	46bd      	mov	sp, r7
 8004aaa:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004aae:	4770      	bx	lr

08004ab0 <HAL_TIMEx_BreakCallback>:
  * @brief  Hall Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 8004ab0:	b480      	push	{r7}
 8004ab2:	b083      	sub	sp, #12
 8004ab4:	af00      	add	r7, sp, #0
 8004ab6:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 8004ab8:	bf00      	nop
 8004aba:	370c      	adds	r7, #12
 8004abc:	46bd      	mov	sp, r7
 8004abe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004ac2:	4770      	bx	lr

08004ac4 <HAL_TIMEx_Break2Callback>:
  * @brief  Hall Break2 detection callback in non blocking mode
  * @param  htim: TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_Break2Callback(TIM_HandleTypeDef *htim)
{
 8004ac4:	b480      	push	{r7}
 8004ac6:	b083      	sub	sp, #12
 8004ac8:	af00      	add	r7, sp, #0
 8004aca:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_TIMEx_Break2Callback could be implemented in the user file
   */
}
 8004acc:	bf00      	nop
 8004ace:	370c      	adds	r7, #12
 8004ad0:	46bd      	mov	sp, r7
 8004ad2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004ad6:	4770      	bx	lr

08004ad8 <HAL_UART_Init>:
  *        parameters in the UART_InitTypeDef and initialize the associated handle.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8004ad8:	b580      	push	{r7, lr}
 8004ada:	b082      	sub	sp, #8
 8004adc:	af00      	add	r7, sp, #0
 8004ade:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8004ae0:	687b      	ldr	r3, [r7, #4]
 8004ae2:	2b00      	cmp	r3, #0
 8004ae4:	d101      	bne.n	8004aea <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 8004ae6:	2301      	movs	r3, #1
 8004ae8:	e040      	b.n	8004b6c <HAL_UART_Init+0x94>
  {
    /* Check the parameters */
    assert_param(IS_UART_INSTANCE(huart->Instance));
  }

  if (huart->gState == HAL_UART_STATE_RESET)
 8004aea:	687b      	ldr	r3, [r7, #4]
 8004aec:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8004aee:	2b00      	cmp	r3, #0
 8004af0:	d106      	bne.n	8004b00 <HAL_UART_Init+0x28>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 8004af2:	687b      	ldr	r3, [r7, #4]
 8004af4:	2200      	movs	r2, #0
 8004af6:	f883 2078 	strb.w	r2, [r3, #120]	; 0x78

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 8004afa:	6878      	ldr	r0, [r7, #4]
 8004afc:	f7fc ffae 	bl	8001a5c <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8004b00:	687b      	ldr	r3, [r7, #4]
 8004b02:	2224      	movs	r2, #36	; 0x24
 8004b04:	67da      	str	r2, [r3, #124]	; 0x7c

  __HAL_UART_DISABLE(huart);
 8004b06:	687b      	ldr	r3, [r7, #4]
 8004b08:	681b      	ldr	r3, [r3, #0]
 8004b0a:	681a      	ldr	r2, [r3, #0]
 8004b0c:	687b      	ldr	r3, [r7, #4]
 8004b0e:	681b      	ldr	r3, [r3, #0]
 8004b10:	f022 0201 	bic.w	r2, r2, #1
 8004b14:	601a      	str	r2, [r3, #0]

  /* Set the UART Communication parameters */
  if (UART_SetConfig(huart) == HAL_ERROR)
 8004b16:	6878      	ldr	r0, [r7, #4]
 8004b18:	f000 f82c 	bl	8004b74 <UART_SetConfig>
 8004b1c:	4603      	mov	r3, r0
 8004b1e:	2b01      	cmp	r3, #1
 8004b20:	d101      	bne.n	8004b26 <HAL_UART_Init+0x4e>
  {
    return HAL_ERROR;
 8004b22:	2301      	movs	r3, #1
 8004b24:	e022      	b.n	8004b6c <HAL_UART_Init+0x94>
  }

  if (huart->AdvancedInit.AdvFeatureInit != UART_ADVFEATURE_NO_INIT)
 8004b26:	687b      	ldr	r3, [r7, #4]
 8004b28:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004b2a:	2b00      	cmp	r3, #0
 8004b2c:	d002      	beq.n	8004b34 <HAL_UART_Init+0x5c>
  {
    UART_AdvFeatureConfig(huart);
 8004b2e:	6878      	ldr	r0, [r7, #4]
 8004b30:	f000 fa84 	bl	800503c <UART_AdvFeatureConfig>
  }

  /* In asynchronous mode, the following bits must be kept cleared:
  - LINEN and CLKEN bits in the USART_CR2 register,
  - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8004b34:	687b      	ldr	r3, [r7, #4]
 8004b36:	681b      	ldr	r3, [r3, #0]
 8004b38:	685a      	ldr	r2, [r3, #4]
 8004b3a:	687b      	ldr	r3, [r7, #4]
 8004b3c:	681b      	ldr	r3, [r3, #0]
 8004b3e:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 8004b42:	605a      	str	r2, [r3, #4]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8004b44:	687b      	ldr	r3, [r7, #4]
 8004b46:	681b      	ldr	r3, [r3, #0]
 8004b48:	689a      	ldr	r2, [r3, #8]
 8004b4a:	687b      	ldr	r3, [r7, #4]
 8004b4c:	681b      	ldr	r3, [r3, #0]
 8004b4e:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 8004b52:	609a      	str	r2, [r3, #8]

  __HAL_UART_ENABLE(huart);
 8004b54:	687b      	ldr	r3, [r7, #4]
 8004b56:	681b      	ldr	r3, [r3, #0]
 8004b58:	681a      	ldr	r2, [r3, #0]
 8004b5a:	687b      	ldr	r3, [r7, #4]
 8004b5c:	681b      	ldr	r3, [r3, #0]
 8004b5e:	f042 0201 	orr.w	r2, r2, #1
 8004b62:	601a      	str	r2, [r3, #0]

  /* TEACK and/or REACK to check before moving huart->gState and huart->RxState to Ready */
  return (UART_CheckIdleState(huart));
 8004b64:	6878      	ldr	r0, [r7, #4]
 8004b66:	f000 fb0b 	bl	8005180 <UART_CheckIdleState>
 8004b6a:	4603      	mov	r3, r0
}
 8004b6c:	4618      	mov	r0, r3
 8004b6e:	3708      	adds	r7, #8
 8004b70:	46bd      	mov	sp, r7
 8004b72:	bd80      	pop	{r7, pc}

08004b74 <UART_SetConfig>:
  * @brief Configure the UART peripheral.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_SetConfig(UART_HandleTypeDef *huart)
{
 8004b74:	b580      	push	{r7, lr}
 8004b76:	b088      	sub	sp, #32
 8004b78:	af00      	add	r7, sp, #0
 8004b7a:	6078      	str	r0, [r7, #4]
  uint32_t tmpreg;
  uint16_t brrtemp;
  UART_ClockSourceTypeDef clocksource;
  uint32_t usartdiv;
  HAL_StatusTypeDef ret               = HAL_OK;
 8004b7c:	2300      	movs	r3, #0
 8004b7e:	77bb      	strb	r3, [r7, #30]
  *  the UART Word Length, Parity, Mode and oversampling:
  *  set the M bits according to huart->Init.WordLength value
  *  set PCE and PS bits according to huart->Init.Parity value
  *  set TE and RE bits according to huart->Init.Mode value
  *  set OVER8 bit according to huart->Init.OverSampling value */
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 8004b80:	687b      	ldr	r3, [r7, #4]
 8004b82:	689a      	ldr	r2, [r3, #8]
 8004b84:	687b      	ldr	r3, [r7, #4]
 8004b86:	691b      	ldr	r3, [r3, #16]
 8004b88:	431a      	orrs	r2, r3
 8004b8a:	687b      	ldr	r3, [r7, #4]
 8004b8c:	695b      	ldr	r3, [r3, #20]
 8004b8e:	431a      	orrs	r2, r3
 8004b90:	687b      	ldr	r3, [r7, #4]
 8004b92:	69db      	ldr	r3, [r3, #28]
 8004b94:	4313      	orrs	r3, r2
 8004b96:	617b      	str	r3, [r7, #20]
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 8004b98:	687b      	ldr	r3, [r7, #4]
 8004b9a:	681b      	ldr	r3, [r3, #0]
 8004b9c:	681a      	ldr	r2, [r3, #0]
 8004b9e:	4ba6      	ldr	r3, [pc, #664]	; (8004e38 <UART_SetConfig+0x2c4>)
 8004ba0:	4013      	ands	r3, r2
 8004ba2:	687a      	ldr	r2, [r7, #4]
 8004ba4:	6812      	ldr	r2, [r2, #0]
 8004ba6:	6979      	ldr	r1, [r7, #20]
 8004ba8:	430b      	orrs	r3, r1
 8004baa:	6013      	str	r3, [r2, #0]

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits according
  * to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8004bac:	687b      	ldr	r3, [r7, #4]
 8004bae:	681b      	ldr	r3, [r3, #0]
 8004bb0:	685b      	ldr	r3, [r3, #4]
 8004bb2:	f423 5140 	bic.w	r1, r3, #12288	; 0x3000
 8004bb6:	687b      	ldr	r3, [r7, #4]
 8004bb8:	68da      	ldr	r2, [r3, #12]
 8004bba:	687b      	ldr	r3, [r7, #4]
 8004bbc:	681b      	ldr	r3, [r3, #0]
 8004bbe:	430a      	orrs	r2, r1
 8004bc0:	605a      	str	r2, [r3, #4]
  /* Configure
  * - UART HardWare Flow Control: set CTSE and RTSE bits according
  *   to huart->Init.HwFlowCtl value
  * - one-bit sampling method versus three samples' majority rule according
  *   to huart->Init.OneBitSampling (not applicable to LPUART) */
  tmpreg = (uint32_t)huart->Init.HwFlowCtl;
 8004bc2:	687b      	ldr	r3, [r7, #4]
 8004bc4:	699b      	ldr	r3, [r3, #24]
 8004bc6:	617b      	str	r3, [r7, #20]

  tmpreg |= huart->Init.OneBitSampling;
 8004bc8:	687b      	ldr	r3, [r7, #4]
 8004bca:	6a1b      	ldr	r3, [r3, #32]
 8004bcc:	697a      	ldr	r2, [r7, #20]
 8004bce:	4313      	orrs	r3, r2
 8004bd0:	617b      	str	r3, [r7, #20]
  MODIFY_REG(huart->Instance->CR3, USART_CR3_FIELDS, tmpreg);
 8004bd2:	687b      	ldr	r3, [r7, #4]
 8004bd4:	681b      	ldr	r3, [r3, #0]
 8004bd6:	689b      	ldr	r3, [r3, #8]
 8004bd8:	f423 6130 	bic.w	r1, r3, #2816	; 0xb00
 8004bdc:	687b      	ldr	r3, [r7, #4]
 8004bde:	681b      	ldr	r3, [r3, #0]
 8004be0:	697a      	ldr	r2, [r7, #20]
 8004be2:	430a      	orrs	r2, r1
 8004be4:	609a      	str	r2, [r3, #8]


  /*-------------------------- USART BRR Configuration -----------------------*/
  UART_GETCLOCKSOURCE(huart, clocksource);
 8004be6:	687b      	ldr	r3, [r7, #4]
 8004be8:	681b      	ldr	r3, [r3, #0]
 8004bea:	4a94      	ldr	r2, [pc, #592]	; (8004e3c <UART_SetConfig+0x2c8>)
 8004bec:	4293      	cmp	r3, r2
 8004bee:	d120      	bne.n	8004c32 <UART_SetConfig+0xbe>
 8004bf0:	4b93      	ldr	r3, [pc, #588]	; (8004e40 <UART_SetConfig+0x2cc>)
 8004bf2:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8004bf6:	f003 0303 	and.w	r3, r3, #3
 8004bfa:	2b03      	cmp	r3, #3
 8004bfc:	d816      	bhi.n	8004c2c <UART_SetConfig+0xb8>
 8004bfe:	a201      	add	r2, pc, #4	; (adr r2, 8004c04 <UART_SetConfig+0x90>)
 8004c00:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8004c04:	08004c15 	.word	0x08004c15
 8004c08:	08004c21 	.word	0x08004c21
 8004c0c:	08004c1b 	.word	0x08004c1b
 8004c10:	08004c27 	.word	0x08004c27
 8004c14:	2301      	movs	r3, #1
 8004c16:	77fb      	strb	r3, [r7, #31]
 8004c18:	e150      	b.n	8004ebc <UART_SetConfig+0x348>
 8004c1a:	2302      	movs	r3, #2
 8004c1c:	77fb      	strb	r3, [r7, #31]
 8004c1e:	e14d      	b.n	8004ebc <UART_SetConfig+0x348>
 8004c20:	2304      	movs	r3, #4
 8004c22:	77fb      	strb	r3, [r7, #31]
 8004c24:	e14a      	b.n	8004ebc <UART_SetConfig+0x348>
 8004c26:	2308      	movs	r3, #8
 8004c28:	77fb      	strb	r3, [r7, #31]
 8004c2a:	e147      	b.n	8004ebc <UART_SetConfig+0x348>
 8004c2c:	2310      	movs	r3, #16
 8004c2e:	77fb      	strb	r3, [r7, #31]
 8004c30:	e144      	b.n	8004ebc <UART_SetConfig+0x348>
 8004c32:	687b      	ldr	r3, [r7, #4]
 8004c34:	681b      	ldr	r3, [r3, #0]
 8004c36:	4a83      	ldr	r2, [pc, #524]	; (8004e44 <UART_SetConfig+0x2d0>)
 8004c38:	4293      	cmp	r3, r2
 8004c3a:	d132      	bne.n	8004ca2 <UART_SetConfig+0x12e>
 8004c3c:	4b80      	ldr	r3, [pc, #512]	; (8004e40 <UART_SetConfig+0x2cc>)
 8004c3e:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8004c42:	f003 030c 	and.w	r3, r3, #12
 8004c46:	2b0c      	cmp	r3, #12
 8004c48:	d828      	bhi.n	8004c9c <UART_SetConfig+0x128>
 8004c4a:	a201      	add	r2, pc, #4	; (adr r2, 8004c50 <UART_SetConfig+0xdc>)
 8004c4c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8004c50:	08004c85 	.word	0x08004c85
 8004c54:	08004c9d 	.word	0x08004c9d
 8004c58:	08004c9d 	.word	0x08004c9d
 8004c5c:	08004c9d 	.word	0x08004c9d
 8004c60:	08004c91 	.word	0x08004c91
 8004c64:	08004c9d 	.word	0x08004c9d
 8004c68:	08004c9d 	.word	0x08004c9d
 8004c6c:	08004c9d 	.word	0x08004c9d
 8004c70:	08004c8b 	.word	0x08004c8b
 8004c74:	08004c9d 	.word	0x08004c9d
 8004c78:	08004c9d 	.word	0x08004c9d
 8004c7c:	08004c9d 	.word	0x08004c9d
 8004c80:	08004c97 	.word	0x08004c97
 8004c84:	2300      	movs	r3, #0
 8004c86:	77fb      	strb	r3, [r7, #31]
 8004c88:	e118      	b.n	8004ebc <UART_SetConfig+0x348>
 8004c8a:	2302      	movs	r3, #2
 8004c8c:	77fb      	strb	r3, [r7, #31]
 8004c8e:	e115      	b.n	8004ebc <UART_SetConfig+0x348>
 8004c90:	2304      	movs	r3, #4
 8004c92:	77fb      	strb	r3, [r7, #31]
 8004c94:	e112      	b.n	8004ebc <UART_SetConfig+0x348>
 8004c96:	2308      	movs	r3, #8
 8004c98:	77fb      	strb	r3, [r7, #31]
 8004c9a:	e10f      	b.n	8004ebc <UART_SetConfig+0x348>
 8004c9c:	2310      	movs	r3, #16
 8004c9e:	77fb      	strb	r3, [r7, #31]
 8004ca0:	e10c      	b.n	8004ebc <UART_SetConfig+0x348>
 8004ca2:	687b      	ldr	r3, [r7, #4]
 8004ca4:	681b      	ldr	r3, [r3, #0]
 8004ca6:	4a68      	ldr	r2, [pc, #416]	; (8004e48 <UART_SetConfig+0x2d4>)
 8004ca8:	4293      	cmp	r3, r2
 8004caa:	d120      	bne.n	8004cee <UART_SetConfig+0x17a>
 8004cac:	4b64      	ldr	r3, [pc, #400]	; (8004e40 <UART_SetConfig+0x2cc>)
 8004cae:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8004cb2:	f003 0330 	and.w	r3, r3, #48	; 0x30
 8004cb6:	2b30      	cmp	r3, #48	; 0x30
 8004cb8:	d013      	beq.n	8004ce2 <UART_SetConfig+0x16e>
 8004cba:	2b30      	cmp	r3, #48	; 0x30
 8004cbc:	d814      	bhi.n	8004ce8 <UART_SetConfig+0x174>
 8004cbe:	2b20      	cmp	r3, #32
 8004cc0:	d009      	beq.n	8004cd6 <UART_SetConfig+0x162>
 8004cc2:	2b20      	cmp	r3, #32
 8004cc4:	d810      	bhi.n	8004ce8 <UART_SetConfig+0x174>
 8004cc6:	2b00      	cmp	r3, #0
 8004cc8:	d002      	beq.n	8004cd0 <UART_SetConfig+0x15c>
 8004cca:	2b10      	cmp	r3, #16
 8004ccc:	d006      	beq.n	8004cdc <UART_SetConfig+0x168>
 8004cce:	e00b      	b.n	8004ce8 <UART_SetConfig+0x174>
 8004cd0:	2300      	movs	r3, #0
 8004cd2:	77fb      	strb	r3, [r7, #31]
 8004cd4:	e0f2      	b.n	8004ebc <UART_SetConfig+0x348>
 8004cd6:	2302      	movs	r3, #2
 8004cd8:	77fb      	strb	r3, [r7, #31]
 8004cda:	e0ef      	b.n	8004ebc <UART_SetConfig+0x348>
 8004cdc:	2304      	movs	r3, #4
 8004cde:	77fb      	strb	r3, [r7, #31]
 8004ce0:	e0ec      	b.n	8004ebc <UART_SetConfig+0x348>
 8004ce2:	2308      	movs	r3, #8
 8004ce4:	77fb      	strb	r3, [r7, #31]
 8004ce6:	e0e9      	b.n	8004ebc <UART_SetConfig+0x348>
 8004ce8:	2310      	movs	r3, #16
 8004cea:	77fb      	strb	r3, [r7, #31]
 8004cec:	e0e6      	b.n	8004ebc <UART_SetConfig+0x348>
 8004cee:	687b      	ldr	r3, [r7, #4]
 8004cf0:	681b      	ldr	r3, [r3, #0]
 8004cf2:	4a56      	ldr	r2, [pc, #344]	; (8004e4c <UART_SetConfig+0x2d8>)
 8004cf4:	4293      	cmp	r3, r2
 8004cf6:	d120      	bne.n	8004d3a <UART_SetConfig+0x1c6>
 8004cf8:	4b51      	ldr	r3, [pc, #324]	; (8004e40 <UART_SetConfig+0x2cc>)
 8004cfa:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8004cfe:	f003 03c0 	and.w	r3, r3, #192	; 0xc0
 8004d02:	2bc0      	cmp	r3, #192	; 0xc0
 8004d04:	d013      	beq.n	8004d2e <UART_SetConfig+0x1ba>
 8004d06:	2bc0      	cmp	r3, #192	; 0xc0
 8004d08:	d814      	bhi.n	8004d34 <UART_SetConfig+0x1c0>
 8004d0a:	2b80      	cmp	r3, #128	; 0x80
 8004d0c:	d009      	beq.n	8004d22 <UART_SetConfig+0x1ae>
 8004d0e:	2b80      	cmp	r3, #128	; 0x80
 8004d10:	d810      	bhi.n	8004d34 <UART_SetConfig+0x1c0>
 8004d12:	2b00      	cmp	r3, #0
 8004d14:	d002      	beq.n	8004d1c <UART_SetConfig+0x1a8>
 8004d16:	2b40      	cmp	r3, #64	; 0x40
 8004d18:	d006      	beq.n	8004d28 <UART_SetConfig+0x1b4>
 8004d1a:	e00b      	b.n	8004d34 <UART_SetConfig+0x1c0>
 8004d1c:	2300      	movs	r3, #0
 8004d1e:	77fb      	strb	r3, [r7, #31]
 8004d20:	e0cc      	b.n	8004ebc <UART_SetConfig+0x348>
 8004d22:	2302      	movs	r3, #2
 8004d24:	77fb      	strb	r3, [r7, #31]
 8004d26:	e0c9      	b.n	8004ebc <UART_SetConfig+0x348>
 8004d28:	2304      	movs	r3, #4
 8004d2a:	77fb      	strb	r3, [r7, #31]
 8004d2c:	e0c6      	b.n	8004ebc <UART_SetConfig+0x348>
 8004d2e:	2308      	movs	r3, #8
 8004d30:	77fb      	strb	r3, [r7, #31]
 8004d32:	e0c3      	b.n	8004ebc <UART_SetConfig+0x348>
 8004d34:	2310      	movs	r3, #16
 8004d36:	77fb      	strb	r3, [r7, #31]
 8004d38:	e0c0      	b.n	8004ebc <UART_SetConfig+0x348>
 8004d3a:	687b      	ldr	r3, [r7, #4]
 8004d3c:	681b      	ldr	r3, [r3, #0]
 8004d3e:	4a44      	ldr	r2, [pc, #272]	; (8004e50 <UART_SetConfig+0x2dc>)
 8004d40:	4293      	cmp	r3, r2
 8004d42:	d125      	bne.n	8004d90 <UART_SetConfig+0x21c>
 8004d44:	4b3e      	ldr	r3, [pc, #248]	; (8004e40 <UART_SetConfig+0x2cc>)
 8004d46:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8004d4a:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8004d4e:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 8004d52:	d017      	beq.n	8004d84 <UART_SetConfig+0x210>
 8004d54:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 8004d58:	d817      	bhi.n	8004d8a <UART_SetConfig+0x216>
 8004d5a:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8004d5e:	d00b      	beq.n	8004d78 <UART_SetConfig+0x204>
 8004d60:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8004d64:	d811      	bhi.n	8004d8a <UART_SetConfig+0x216>
 8004d66:	2b00      	cmp	r3, #0
 8004d68:	d003      	beq.n	8004d72 <UART_SetConfig+0x1fe>
 8004d6a:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8004d6e:	d006      	beq.n	8004d7e <UART_SetConfig+0x20a>
 8004d70:	e00b      	b.n	8004d8a <UART_SetConfig+0x216>
 8004d72:	2300      	movs	r3, #0
 8004d74:	77fb      	strb	r3, [r7, #31]
 8004d76:	e0a1      	b.n	8004ebc <UART_SetConfig+0x348>
 8004d78:	2302      	movs	r3, #2
 8004d7a:	77fb      	strb	r3, [r7, #31]
 8004d7c:	e09e      	b.n	8004ebc <UART_SetConfig+0x348>
 8004d7e:	2304      	movs	r3, #4
 8004d80:	77fb      	strb	r3, [r7, #31]
 8004d82:	e09b      	b.n	8004ebc <UART_SetConfig+0x348>
 8004d84:	2308      	movs	r3, #8
 8004d86:	77fb      	strb	r3, [r7, #31]
 8004d88:	e098      	b.n	8004ebc <UART_SetConfig+0x348>
 8004d8a:	2310      	movs	r3, #16
 8004d8c:	77fb      	strb	r3, [r7, #31]
 8004d8e:	e095      	b.n	8004ebc <UART_SetConfig+0x348>
 8004d90:	687b      	ldr	r3, [r7, #4]
 8004d92:	681b      	ldr	r3, [r3, #0]
 8004d94:	4a2f      	ldr	r2, [pc, #188]	; (8004e54 <UART_SetConfig+0x2e0>)
 8004d96:	4293      	cmp	r3, r2
 8004d98:	d125      	bne.n	8004de6 <UART_SetConfig+0x272>
 8004d9a:	4b29      	ldr	r3, [pc, #164]	; (8004e40 <UART_SetConfig+0x2cc>)
 8004d9c:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8004da0:	f403 6340 	and.w	r3, r3, #3072	; 0xc00
 8004da4:	f5b3 6f40 	cmp.w	r3, #3072	; 0xc00
 8004da8:	d017      	beq.n	8004dda <UART_SetConfig+0x266>
 8004daa:	f5b3 6f40 	cmp.w	r3, #3072	; 0xc00
 8004dae:	d817      	bhi.n	8004de0 <UART_SetConfig+0x26c>
 8004db0:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8004db4:	d00b      	beq.n	8004dce <UART_SetConfig+0x25a>
 8004db6:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8004dba:	d811      	bhi.n	8004de0 <UART_SetConfig+0x26c>
 8004dbc:	2b00      	cmp	r3, #0
 8004dbe:	d003      	beq.n	8004dc8 <UART_SetConfig+0x254>
 8004dc0:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8004dc4:	d006      	beq.n	8004dd4 <UART_SetConfig+0x260>
 8004dc6:	e00b      	b.n	8004de0 <UART_SetConfig+0x26c>
 8004dc8:	2301      	movs	r3, #1
 8004dca:	77fb      	strb	r3, [r7, #31]
 8004dcc:	e076      	b.n	8004ebc <UART_SetConfig+0x348>
 8004dce:	2302      	movs	r3, #2
 8004dd0:	77fb      	strb	r3, [r7, #31]
 8004dd2:	e073      	b.n	8004ebc <UART_SetConfig+0x348>
 8004dd4:	2304      	movs	r3, #4
 8004dd6:	77fb      	strb	r3, [r7, #31]
 8004dd8:	e070      	b.n	8004ebc <UART_SetConfig+0x348>
 8004dda:	2308      	movs	r3, #8
 8004ddc:	77fb      	strb	r3, [r7, #31]
 8004dde:	e06d      	b.n	8004ebc <UART_SetConfig+0x348>
 8004de0:	2310      	movs	r3, #16
 8004de2:	77fb      	strb	r3, [r7, #31]
 8004de4:	e06a      	b.n	8004ebc <UART_SetConfig+0x348>
 8004de6:	687b      	ldr	r3, [r7, #4]
 8004de8:	681b      	ldr	r3, [r3, #0]
 8004dea:	4a1b      	ldr	r2, [pc, #108]	; (8004e58 <UART_SetConfig+0x2e4>)
 8004dec:	4293      	cmp	r3, r2
 8004dee:	d138      	bne.n	8004e62 <UART_SetConfig+0x2ee>
 8004df0:	4b13      	ldr	r3, [pc, #76]	; (8004e40 <UART_SetConfig+0x2cc>)
 8004df2:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8004df6:	f403 5340 	and.w	r3, r3, #12288	; 0x3000
 8004dfa:	f5b3 5f40 	cmp.w	r3, #12288	; 0x3000
 8004dfe:	d017      	beq.n	8004e30 <UART_SetConfig+0x2bc>
 8004e00:	f5b3 5f40 	cmp.w	r3, #12288	; 0x3000
 8004e04:	d82a      	bhi.n	8004e5c <UART_SetConfig+0x2e8>
 8004e06:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8004e0a:	d00b      	beq.n	8004e24 <UART_SetConfig+0x2b0>
 8004e0c:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8004e10:	d824      	bhi.n	8004e5c <UART_SetConfig+0x2e8>
 8004e12:	2b00      	cmp	r3, #0
 8004e14:	d003      	beq.n	8004e1e <UART_SetConfig+0x2aa>
 8004e16:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8004e1a:	d006      	beq.n	8004e2a <UART_SetConfig+0x2b6>
 8004e1c:	e01e      	b.n	8004e5c <UART_SetConfig+0x2e8>
 8004e1e:	2300      	movs	r3, #0
 8004e20:	77fb      	strb	r3, [r7, #31]
 8004e22:	e04b      	b.n	8004ebc <UART_SetConfig+0x348>
 8004e24:	2302      	movs	r3, #2
 8004e26:	77fb      	strb	r3, [r7, #31]
 8004e28:	e048      	b.n	8004ebc <UART_SetConfig+0x348>
 8004e2a:	2304      	movs	r3, #4
 8004e2c:	77fb      	strb	r3, [r7, #31]
 8004e2e:	e045      	b.n	8004ebc <UART_SetConfig+0x348>
 8004e30:	2308      	movs	r3, #8
 8004e32:	77fb      	strb	r3, [r7, #31]
 8004e34:	e042      	b.n	8004ebc <UART_SetConfig+0x348>
 8004e36:	bf00      	nop
 8004e38:	efff69f3 	.word	0xefff69f3
 8004e3c:	40011000 	.word	0x40011000
 8004e40:	40023800 	.word	0x40023800
 8004e44:	40004400 	.word	0x40004400
 8004e48:	40004800 	.word	0x40004800
 8004e4c:	40004c00 	.word	0x40004c00
 8004e50:	40005000 	.word	0x40005000
 8004e54:	40011400 	.word	0x40011400
 8004e58:	40007800 	.word	0x40007800
 8004e5c:	2310      	movs	r3, #16
 8004e5e:	77fb      	strb	r3, [r7, #31]
 8004e60:	e02c      	b.n	8004ebc <UART_SetConfig+0x348>
 8004e62:	687b      	ldr	r3, [r7, #4]
 8004e64:	681b      	ldr	r3, [r3, #0]
 8004e66:	4a72      	ldr	r2, [pc, #456]	; (8005030 <UART_SetConfig+0x4bc>)
 8004e68:	4293      	cmp	r3, r2
 8004e6a:	d125      	bne.n	8004eb8 <UART_SetConfig+0x344>
 8004e6c:	4b71      	ldr	r3, [pc, #452]	; (8005034 <UART_SetConfig+0x4c0>)
 8004e6e:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8004e72:	f403 4340 	and.w	r3, r3, #49152	; 0xc000
 8004e76:	f5b3 4f40 	cmp.w	r3, #49152	; 0xc000
 8004e7a:	d017      	beq.n	8004eac <UART_SetConfig+0x338>
 8004e7c:	f5b3 4f40 	cmp.w	r3, #49152	; 0xc000
 8004e80:	d817      	bhi.n	8004eb2 <UART_SetConfig+0x33e>
 8004e82:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8004e86:	d00b      	beq.n	8004ea0 <UART_SetConfig+0x32c>
 8004e88:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8004e8c:	d811      	bhi.n	8004eb2 <UART_SetConfig+0x33e>
 8004e8e:	2b00      	cmp	r3, #0
 8004e90:	d003      	beq.n	8004e9a <UART_SetConfig+0x326>
 8004e92:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 8004e96:	d006      	beq.n	8004ea6 <UART_SetConfig+0x332>
 8004e98:	e00b      	b.n	8004eb2 <UART_SetConfig+0x33e>
 8004e9a:	2300      	movs	r3, #0
 8004e9c:	77fb      	strb	r3, [r7, #31]
 8004e9e:	e00d      	b.n	8004ebc <UART_SetConfig+0x348>
 8004ea0:	2302      	movs	r3, #2
 8004ea2:	77fb      	strb	r3, [r7, #31]
 8004ea4:	e00a      	b.n	8004ebc <UART_SetConfig+0x348>
 8004ea6:	2304      	movs	r3, #4
 8004ea8:	77fb      	strb	r3, [r7, #31]
 8004eaa:	e007      	b.n	8004ebc <UART_SetConfig+0x348>
 8004eac:	2308      	movs	r3, #8
 8004eae:	77fb      	strb	r3, [r7, #31]
 8004eb0:	e004      	b.n	8004ebc <UART_SetConfig+0x348>
 8004eb2:	2310      	movs	r3, #16
 8004eb4:	77fb      	strb	r3, [r7, #31]
 8004eb6:	e001      	b.n	8004ebc <UART_SetConfig+0x348>
 8004eb8:	2310      	movs	r3, #16
 8004eba:	77fb      	strb	r3, [r7, #31]

  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 8004ebc:	687b      	ldr	r3, [r7, #4]
 8004ebe:	69db      	ldr	r3, [r3, #28]
 8004ec0:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8004ec4:	d15b      	bne.n	8004f7e <UART_SetConfig+0x40a>
  {
    switch (clocksource)
 8004ec6:	7ffb      	ldrb	r3, [r7, #31]
 8004ec8:	2b08      	cmp	r3, #8
 8004eca:	d828      	bhi.n	8004f1e <UART_SetConfig+0x3aa>
 8004ecc:	a201      	add	r2, pc, #4	; (adr r2, 8004ed4 <UART_SetConfig+0x360>)
 8004ece:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8004ed2:	bf00      	nop
 8004ed4:	08004ef9 	.word	0x08004ef9
 8004ed8:	08004f01 	.word	0x08004f01
 8004edc:	08004f09 	.word	0x08004f09
 8004ee0:	08004f1f 	.word	0x08004f1f
 8004ee4:	08004f0f 	.word	0x08004f0f
 8004ee8:	08004f1f 	.word	0x08004f1f
 8004eec:	08004f1f 	.word	0x08004f1f
 8004ef0:	08004f1f 	.word	0x08004f1f
 8004ef4:	08004f17 	.word	0x08004f17
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8004ef8:	f7fe fe8c 	bl	8003c14 <HAL_RCC_GetPCLK1Freq>
 8004efc:	61b8      	str	r0, [r7, #24]
        break;
 8004efe:	e013      	b.n	8004f28 <UART_SetConfig+0x3b4>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 8004f00:	f7fe fe9c 	bl	8003c3c <HAL_RCC_GetPCLK2Freq>
 8004f04:	61b8      	str	r0, [r7, #24]
        break;
 8004f06:	e00f      	b.n	8004f28 <UART_SetConfig+0x3b4>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 8004f08:	4b4b      	ldr	r3, [pc, #300]	; (8005038 <UART_SetConfig+0x4c4>)
 8004f0a:	61bb      	str	r3, [r7, #24]
        break;
 8004f0c:	e00c      	b.n	8004f28 <UART_SetConfig+0x3b4>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 8004f0e:	f7fe fd6f 	bl	80039f0 <HAL_RCC_GetSysClockFreq>
 8004f12:	61b8      	str	r0, [r7, #24]
        break;
 8004f14:	e008      	b.n	8004f28 <UART_SetConfig+0x3b4>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8004f16:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8004f1a:	61bb      	str	r3, [r7, #24]
        break;
 8004f1c:	e004      	b.n	8004f28 <UART_SetConfig+0x3b4>
      default:
        pclk = 0U;
 8004f1e:	2300      	movs	r3, #0
 8004f20:	61bb      	str	r3, [r7, #24]
        ret = HAL_ERROR;
 8004f22:	2301      	movs	r3, #1
 8004f24:	77bb      	strb	r3, [r7, #30]
        break;
 8004f26:	bf00      	nop
    }

    /* USARTDIV must be greater than or equal to 0d16 */
    if (pclk != 0U)
 8004f28:	69bb      	ldr	r3, [r7, #24]
 8004f2a:	2b00      	cmp	r3, #0
 8004f2c:	d074      	beq.n	8005018 <UART_SetConfig+0x4a4>
    {
      usartdiv = (uint32_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate));
 8004f2e:	69bb      	ldr	r3, [r7, #24]
 8004f30:	005a      	lsls	r2, r3, #1
 8004f32:	687b      	ldr	r3, [r7, #4]
 8004f34:	685b      	ldr	r3, [r3, #4]
 8004f36:	085b      	lsrs	r3, r3, #1
 8004f38:	441a      	add	r2, r3
 8004f3a:	687b      	ldr	r3, [r7, #4]
 8004f3c:	685b      	ldr	r3, [r3, #4]
 8004f3e:	fbb2 f3f3 	udiv	r3, r2, r3
 8004f42:	613b      	str	r3, [r7, #16]
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 8004f44:	693b      	ldr	r3, [r7, #16]
 8004f46:	2b0f      	cmp	r3, #15
 8004f48:	d916      	bls.n	8004f78 <UART_SetConfig+0x404>
 8004f4a:	693b      	ldr	r3, [r7, #16]
 8004f4c:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8004f50:	d212      	bcs.n	8004f78 <UART_SetConfig+0x404>
      {
        brrtemp = (uint16_t)(usartdiv & 0xFFF0U);
 8004f52:	693b      	ldr	r3, [r7, #16]
 8004f54:	b29b      	uxth	r3, r3
 8004f56:	f023 030f 	bic.w	r3, r3, #15
 8004f5a:	81fb      	strh	r3, [r7, #14]
        brrtemp |= (uint16_t)((usartdiv & (uint16_t)0x000FU) >> 1U);
 8004f5c:	693b      	ldr	r3, [r7, #16]
 8004f5e:	085b      	lsrs	r3, r3, #1
 8004f60:	b29b      	uxth	r3, r3
 8004f62:	f003 0307 	and.w	r3, r3, #7
 8004f66:	b29a      	uxth	r2, r3
 8004f68:	89fb      	ldrh	r3, [r7, #14]
 8004f6a:	4313      	orrs	r3, r2
 8004f6c:	81fb      	strh	r3, [r7, #14]
        huart->Instance->BRR = brrtemp;
 8004f6e:	687b      	ldr	r3, [r7, #4]
 8004f70:	681b      	ldr	r3, [r3, #0]
 8004f72:	89fa      	ldrh	r2, [r7, #14]
 8004f74:	60da      	str	r2, [r3, #12]
 8004f76:	e04f      	b.n	8005018 <UART_SetConfig+0x4a4>
      }
      else
      {
        ret = HAL_ERROR;
 8004f78:	2301      	movs	r3, #1
 8004f7a:	77bb      	strb	r3, [r7, #30]
 8004f7c:	e04c      	b.n	8005018 <UART_SetConfig+0x4a4>
      }
    }
  }
  else
  {
    switch (clocksource)
 8004f7e:	7ffb      	ldrb	r3, [r7, #31]
 8004f80:	2b08      	cmp	r3, #8
 8004f82:	d828      	bhi.n	8004fd6 <UART_SetConfig+0x462>
 8004f84:	a201      	add	r2, pc, #4	; (adr r2, 8004f8c <UART_SetConfig+0x418>)
 8004f86:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8004f8a:	bf00      	nop
 8004f8c:	08004fb1 	.word	0x08004fb1
 8004f90:	08004fb9 	.word	0x08004fb9
 8004f94:	08004fc1 	.word	0x08004fc1
 8004f98:	08004fd7 	.word	0x08004fd7
 8004f9c:	08004fc7 	.word	0x08004fc7
 8004fa0:	08004fd7 	.word	0x08004fd7
 8004fa4:	08004fd7 	.word	0x08004fd7
 8004fa8:	08004fd7 	.word	0x08004fd7
 8004fac:	08004fcf 	.word	0x08004fcf
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8004fb0:	f7fe fe30 	bl	8003c14 <HAL_RCC_GetPCLK1Freq>
 8004fb4:	61b8      	str	r0, [r7, #24]
        break;
 8004fb6:	e013      	b.n	8004fe0 <UART_SetConfig+0x46c>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 8004fb8:	f7fe fe40 	bl	8003c3c <HAL_RCC_GetPCLK2Freq>
 8004fbc:	61b8      	str	r0, [r7, #24]
        break;
 8004fbe:	e00f      	b.n	8004fe0 <UART_SetConfig+0x46c>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 8004fc0:	4b1d      	ldr	r3, [pc, #116]	; (8005038 <UART_SetConfig+0x4c4>)
 8004fc2:	61bb      	str	r3, [r7, #24]
        break;
 8004fc4:	e00c      	b.n	8004fe0 <UART_SetConfig+0x46c>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 8004fc6:	f7fe fd13 	bl	80039f0 <HAL_RCC_GetSysClockFreq>
 8004fca:	61b8      	str	r0, [r7, #24]
        break;
 8004fcc:	e008      	b.n	8004fe0 <UART_SetConfig+0x46c>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8004fce:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8004fd2:	61bb      	str	r3, [r7, #24]
        break;
 8004fd4:	e004      	b.n	8004fe0 <UART_SetConfig+0x46c>
      default:
        pclk = 0U;
 8004fd6:	2300      	movs	r3, #0
 8004fd8:	61bb      	str	r3, [r7, #24]
        ret = HAL_ERROR;
 8004fda:	2301      	movs	r3, #1
 8004fdc:	77bb      	strb	r3, [r7, #30]
        break;
 8004fde:	bf00      	nop
    }

    if (pclk != 0U)
 8004fe0:	69bb      	ldr	r3, [r7, #24]
 8004fe2:	2b00      	cmp	r3, #0
 8004fe4:	d018      	beq.n	8005018 <UART_SetConfig+0x4a4>
    {
      /* USARTDIV must be greater than or equal to 0d16 */
      usartdiv = (uint32_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate));
 8004fe6:	687b      	ldr	r3, [r7, #4]
 8004fe8:	685b      	ldr	r3, [r3, #4]
 8004fea:	085a      	lsrs	r2, r3, #1
 8004fec:	69bb      	ldr	r3, [r7, #24]
 8004fee:	441a      	add	r2, r3
 8004ff0:	687b      	ldr	r3, [r7, #4]
 8004ff2:	685b      	ldr	r3, [r3, #4]
 8004ff4:	fbb2 f3f3 	udiv	r3, r2, r3
 8004ff8:	613b      	str	r3, [r7, #16]
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 8004ffa:	693b      	ldr	r3, [r7, #16]
 8004ffc:	2b0f      	cmp	r3, #15
 8004ffe:	d909      	bls.n	8005014 <UART_SetConfig+0x4a0>
 8005000:	693b      	ldr	r3, [r7, #16]
 8005002:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8005006:	d205      	bcs.n	8005014 <UART_SetConfig+0x4a0>
      {
        huart->Instance->BRR = (uint16_t)usartdiv;
 8005008:	693b      	ldr	r3, [r7, #16]
 800500a:	b29a      	uxth	r2, r3
 800500c:	687b      	ldr	r3, [r7, #4]
 800500e:	681b      	ldr	r3, [r3, #0]
 8005010:	60da      	str	r2, [r3, #12]
 8005012:	e001      	b.n	8005018 <UART_SetConfig+0x4a4>
      }
      else
      {
        ret = HAL_ERROR;
 8005014:	2301      	movs	r3, #1
 8005016:	77bb      	strb	r3, [r7, #30]
    }
  }


  /* Clear ISR function pointers */
  huart->RxISR = NULL;
 8005018:	687b      	ldr	r3, [r7, #4]
 800501a:	2200      	movs	r2, #0
 800501c:	669a      	str	r2, [r3, #104]	; 0x68
  huart->TxISR = NULL;
 800501e:	687b      	ldr	r3, [r7, #4]
 8005020:	2200      	movs	r2, #0
 8005022:	66da      	str	r2, [r3, #108]	; 0x6c

  return ret;
 8005024:	7fbb      	ldrb	r3, [r7, #30]
}
 8005026:	4618      	mov	r0, r3
 8005028:	3720      	adds	r7, #32
 800502a:	46bd      	mov	sp, r7
 800502c:	bd80      	pop	{r7, pc}
 800502e:	bf00      	nop
 8005030:	40007c00 	.word	0x40007c00
 8005034:	40023800 	.word	0x40023800
 8005038:	00f42400 	.word	0x00f42400

0800503c <UART_AdvFeatureConfig>:
  * @brief Configure the UART peripheral advanced features.
  * @param huart UART handle.
  * @retval None
  */
void UART_AdvFeatureConfig(UART_HandleTypeDef *huart)
{
 800503c:	b480      	push	{r7}
 800503e:	b083      	sub	sp, #12
 8005040:	af00      	add	r7, sp, #0
 8005042:	6078      	str	r0, [r7, #4]
  /* Check whether the set of advanced features to configure is properly set */
  assert_param(IS_UART_ADVFEATURE_INIT(huart->AdvancedInit.AdvFeatureInit));

  /* if required, configure TX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_TXINVERT_INIT))
 8005044:	687b      	ldr	r3, [r7, #4]
 8005046:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005048:	f003 0301 	and.w	r3, r3, #1
 800504c:	2b00      	cmp	r3, #0
 800504e:	d00a      	beq.n	8005066 <UART_AdvFeatureConfig+0x2a>
  {
    assert_param(IS_UART_ADVFEATURE_TXINV(huart->AdvancedInit.TxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_TXINV, huart->AdvancedInit.TxPinLevelInvert);
 8005050:	687b      	ldr	r3, [r7, #4]
 8005052:	681b      	ldr	r3, [r3, #0]
 8005054:	685b      	ldr	r3, [r3, #4]
 8005056:	f423 3100 	bic.w	r1, r3, #131072	; 0x20000
 800505a:	687b      	ldr	r3, [r7, #4]
 800505c:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 800505e:	687b      	ldr	r3, [r7, #4]
 8005060:	681b      	ldr	r3, [r3, #0]
 8005062:	430a      	orrs	r2, r1
 8005064:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXINVERT_INIT))
 8005066:	687b      	ldr	r3, [r7, #4]
 8005068:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800506a:	f003 0302 	and.w	r3, r3, #2
 800506e:	2b00      	cmp	r3, #0
 8005070:	d00a      	beq.n	8005088 <UART_AdvFeatureConfig+0x4c>
  {
    assert_param(IS_UART_ADVFEATURE_RXINV(huart->AdvancedInit.RxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_RXINV, huart->AdvancedInit.RxPinLevelInvert);
 8005072:	687b      	ldr	r3, [r7, #4]
 8005074:	681b      	ldr	r3, [r3, #0]
 8005076:	685b      	ldr	r3, [r3, #4]
 8005078:	f423 3180 	bic.w	r1, r3, #65536	; 0x10000
 800507c:	687b      	ldr	r3, [r7, #4]
 800507e:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8005080:	687b      	ldr	r3, [r7, #4]
 8005082:	681b      	ldr	r3, [r3, #0]
 8005084:	430a      	orrs	r2, r1
 8005086:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure data inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DATAINVERT_INIT))
 8005088:	687b      	ldr	r3, [r7, #4]
 800508a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800508c:	f003 0304 	and.w	r3, r3, #4
 8005090:	2b00      	cmp	r3, #0
 8005092:	d00a      	beq.n	80050aa <UART_AdvFeatureConfig+0x6e>
  {
    assert_param(IS_UART_ADVFEATURE_DATAINV(huart->AdvancedInit.DataInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_DATAINV, huart->AdvancedInit.DataInvert);
 8005094:	687b      	ldr	r3, [r7, #4]
 8005096:	681b      	ldr	r3, [r3, #0]
 8005098:	685b      	ldr	r3, [r3, #4]
 800509a:	f423 2180 	bic.w	r1, r3, #262144	; 0x40000
 800509e:	687b      	ldr	r3, [r7, #4]
 80050a0:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 80050a2:	687b      	ldr	r3, [r7, #4]
 80050a4:	681b      	ldr	r3, [r3, #0]
 80050a6:	430a      	orrs	r2, r1
 80050a8:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX/TX pins swap */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_SWAP_INIT))
 80050aa:	687b      	ldr	r3, [r7, #4]
 80050ac:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80050ae:	f003 0308 	and.w	r3, r3, #8
 80050b2:	2b00      	cmp	r3, #0
 80050b4:	d00a      	beq.n	80050cc <UART_AdvFeatureConfig+0x90>
  {
    assert_param(IS_UART_ADVFEATURE_SWAP(huart->AdvancedInit.Swap));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_SWAP, huart->AdvancedInit.Swap);
 80050b6:	687b      	ldr	r3, [r7, #4]
 80050b8:	681b      	ldr	r3, [r3, #0]
 80050ba:	685b      	ldr	r3, [r3, #4]
 80050bc:	f423 4100 	bic.w	r1, r3, #32768	; 0x8000
 80050c0:	687b      	ldr	r3, [r7, #4]
 80050c2:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 80050c4:	687b      	ldr	r3, [r7, #4]
 80050c6:	681b      	ldr	r3, [r3, #0]
 80050c8:	430a      	orrs	r2, r1
 80050ca:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX overrun detection disabling */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXOVERRUNDISABLE_INIT))
 80050cc:	687b      	ldr	r3, [r7, #4]
 80050ce:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80050d0:	f003 0310 	and.w	r3, r3, #16
 80050d4:	2b00      	cmp	r3, #0
 80050d6:	d00a      	beq.n	80050ee <UART_AdvFeatureConfig+0xb2>
  {
    assert_param(IS_UART_OVERRUN(huart->AdvancedInit.OverrunDisable));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_OVRDIS, huart->AdvancedInit.OverrunDisable);
 80050d8:	687b      	ldr	r3, [r7, #4]
 80050da:	681b      	ldr	r3, [r3, #0]
 80050dc:	689b      	ldr	r3, [r3, #8]
 80050de:	f423 5180 	bic.w	r1, r3, #4096	; 0x1000
 80050e2:	687b      	ldr	r3, [r7, #4]
 80050e4:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 80050e6:	687b      	ldr	r3, [r7, #4]
 80050e8:	681b      	ldr	r3, [r3, #0]
 80050ea:	430a      	orrs	r2, r1
 80050ec:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure DMA disabling on reception error */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DMADISABLEONERROR_INIT))
 80050ee:	687b      	ldr	r3, [r7, #4]
 80050f0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80050f2:	f003 0320 	and.w	r3, r3, #32
 80050f6:	2b00      	cmp	r3, #0
 80050f8:	d00a      	beq.n	8005110 <UART_AdvFeatureConfig+0xd4>
  {
    assert_param(IS_UART_ADVFEATURE_DMAONRXERROR(huart->AdvancedInit.DMADisableonRxError));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_DDRE, huart->AdvancedInit.DMADisableonRxError);
 80050fa:	687b      	ldr	r3, [r7, #4]
 80050fc:	681b      	ldr	r3, [r3, #0]
 80050fe:	689b      	ldr	r3, [r3, #8]
 8005100:	f423 5100 	bic.w	r1, r3, #8192	; 0x2000
 8005104:	687b      	ldr	r3, [r7, #4]
 8005106:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8005108:	687b      	ldr	r3, [r7, #4]
 800510a:	681b      	ldr	r3, [r3, #0]
 800510c:	430a      	orrs	r2, r1
 800510e:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure auto Baud rate detection scheme */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_AUTOBAUDRATE_INIT))
 8005110:	687b      	ldr	r3, [r7, #4]
 8005112:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005114:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8005118:	2b00      	cmp	r3, #0
 800511a:	d01a      	beq.n	8005152 <UART_AdvFeatureConfig+0x116>
  {
    assert_param(IS_USART_AUTOBAUDRATE_DETECTION_INSTANCE(huart->Instance));
    assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATE(huart->AdvancedInit.AutoBaudRateEnable));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_ABREN, huart->AdvancedInit.AutoBaudRateEnable);
 800511c:	687b      	ldr	r3, [r7, #4]
 800511e:	681b      	ldr	r3, [r3, #0]
 8005120:	685b      	ldr	r3, [r3, #4]
 8005122:	f423 1180 	bic.w	r1, r3, #1048576	; 0x100000
 8005126:	687b      	ldr	r3, [r7, #4]
 8005128:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 800512a:	687b      	ldr	r3, [r7, #4]
 800512c:	681b      	ldr	r3, [r3, #0]
 800512e:	430a      	orrs	r2, r1
 8005130:	605a      	str	r2, [r3, #4]
    /* set auto Baudrate detection parameters if detection is enabled */
    if (huart->AdvancedInit.AutoBaudRateEnable == UART_ADVFEATURE_AUTOBAUDRATE_ENABLE)
 8005132:	687b      	ldr	r3, [r7, #4]
 8005134:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005136:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 800513a:	d10a      	bne.n	8005152 <UART_AdvFeatureConfig+0x116>
    {
      assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATEMODE(huart->AdvancedInit.AutoBaudRateMode));
      MODIFY_REG(huart->Instance->CR2, USART_CR2_ABRMODE, huart->AdvancedInit.AutoBaudRateMode);
 800513c:	687b      	ldr	r3, [r7, #4]
 800513e:	681b      	ldr	r3, [r3, #0]
 8005140:	685b      	ldr	r3, [r3, #4]
 8005142:	f423 01c0 	bic.w	r1, r3, #6291456	; 0x600000
 8005146:	687b      	ldr	r3, [r7, #4]
 8005148:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 800514a:	687b      	ldr	r3, [r7, #4]
 800514c:	681b      	ldr	r3, [r3, #0]
 800514e:	430a      	orrs	r2, r1
 8005150:	605a      	str	r2, [r3, #4]
    }
  }

  /* if required, configure MSB first on communication line */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_MSBFIRST_INIT))
 8005152:	687b      	ldr	r3, [r7, #4]
 8005154:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005156:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800515a:	2b00      	cmp	r3, #0
 800515c:	d00a      	beq.n	8005174 <UART_AdvFeatureConfig+0x138>
  {
    assert_param(IS_UART_ADVFEATURE_MSBFIRST(huart->AdvancedInit.MSBFirst));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_MSBFIRST, huart->AdvancedInit.MSBFirst);
 800515e:	687b      	ldr	r3, [r7, #4]
 8005160:	681b      	ldr	r3, [r3, #0]
 8005162:	685b      	ldr	r3, [r3, #4]
 8005164:	f423 2100 	bic.w	r1, r3, #524288	; 0x80000
 8005168:	687b      	ldr	r3, [r7, #4]
 800516a:	6c9a      	ldr	r2, [r3, #72]	; 0x48
 800516c:	687b      	ldr	r3, [r7, #4]
 800516e:	681b      	ldr	r3, [r3, #0]
 8005170:	430a      	orrs	r2, r1
 8005172:	605a      	str	r2, [r3, #4]
  }
}
 8005174:	bf00      	nop
 8005176:	370c      	adds	r7, #12
 8005178:	46bd      	mov	sp, r7
 800517a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800517e:	4770      	bx	lr

08005180 <UART_CheckIdleState>:
  * @brief Check the UART Idle State.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_CheckIdleState(UART_HandleTypeDef *huart)
{
 8005180:	b580      	push	{r7, lr}
 8005182:	b086      	sub	sp, #24
 8005184:	af02      	add	r7, sp, #8
 8005186:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Initialize the UART ErrorCode */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8005188:	687b      	ldr	r3, [r7, #4]
 800518a:	2200      	movs	r2, #0
 800518c:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

  /* Init tickstart for timeout management */
  tickstart = HAL_GetTick();
 8005190:	f7fc fd0e 	bl	8001bb0 <HAL_GetTick>
 8005194:	60f8      	str	r0, [r7, #12]

  /* Check if the Transmitter is enabled */
  if ((huart->Instance->CR1 & USART_CR1_TE) == USART_CR1_TE)
 8005196:	687b      	ldr	r3, [r7, #4]
 8005198:	681b      	ldr	r3, [r3, #0]
 800519a:	681b      	ldr	r3, [r3, #0]
 800519c:	f003 0308 	and.w	r3, r3, #8
 80051a0:	2b08      	cmp	r3, #8
 80051a2:	d10e      	bne.n	80051c2 <UART_CheckIdleState+0x42>
  {
    /* Wait until TEACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_TEACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 80051a4:	f06f 437e 	mvn.w	r3, #4261412864	; 0xfe000000
 80051a8:	9300      	str	r3, [sp, #0]
 80051aa:	68fb      	ldr	r3, [r7, #12]
 80051ac:	2200      	movs	r2, #0
 80051ae:	f44f 1100 	mov.w	r1, #2097152	; 0x200000
 80051b2:	6878      	ldr	r0, [r7, #4]
 80051b4:	f000 f831 	bl	800521a <UART_WaitOnFlagUntilTimeout>
 80051b8:	4603      	mov	r3, r0
 80051ba:	2b00      	cmp	r3, #0
 80051bc:	d001      	beq.n	80051c2 <UART_CheckIdleState+0x42>
    {
      /* Timeout occurred */
      return HAL_TIMEOUT;
 80051be:	2303      	movs	r3, #3
 80051c0:	e027      	b.n	8005212 <UART_CheckIdleState+0x92>
    }
  }
#if defined(USART_ISR_REACK)

  /* Check if the Receiver is enabled */
  if ((huart->Instance->CR1 & USART_CR1_RE) == USART_CR1_RE)
 80051c2:	687b      	ldr	r3, [r7, #4]
 80051c4:	681b      	ldr	r3, [r3, #0]
 80051c6:	681b      	ldr	r3, [r3, #0]
 80051c8:	f003 0304 	and.w	r3, r3, #4
 80051cc:	2b04      	cmp	r3, #4
 80051ce:	d10e      	bne.n	80051ee <UART_CheckIdleState+0x6e>
  {
    /* Wait until REACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_REACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 80051d0:	f06f 437e 	mvn.w	r3, #4261412864	; 0xfe000000
 80051d4:	9300      	str	r3, [sp, #0]
 80051d6:	68fb      	ldr	r3, [r7, #12]
 80051d8:	2200      	movs	r2, #0
 80051da:	f44f 0180 	mov.w	r1, #4194304	; 0x400000
 80051de:	6878      	ldr	r0, [r7, #4]
 80051e0:	f000 f81b 	bl	800521a <UART_WaitOnFlagUntilTimeout>
 80051e4:	4603      	mov	r3, r0
 80051e6:	2b00      	cmp	r3, #0
 80051e8:	d001      	beq.n	80051ee <UART_CheckIdleState+0x6e>
    {
      /* Timeout occurred */
      return HAL_TIMEOUT;
 80051ea:	2303      	movs	r3, #3
 80051ec:	e011      	b.n	8005212 <UART_CheckIdleState+0x92>
    }
  }
#endif /* USART_ISR_REACK */

  /* Initialize the UART State */
  huart->gState = HAL_UART_STATE_READY;
 80051ee:	687b      	ldr	r3, [r7, #4]
 80051f0:	2220      	movs	r2, #32
 80051f2:	67da      	str	r2, [r3, #124]	; 0x7c
  huart->RxState = HAL_UART_STATE_READY;
 80051f4:	687b      	ldr	r3, [r7, #4]
 80051f6:	2220      	movs	r2, #32
 80051f8:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 80051fc:	687b      	ldr	r3, [r7, #4]
 80051fe:	2200      	movs	r2, #0
 8005200:	661a      	str	r2, [r3, #96]	; 0x60
  huart->RxEventType = HAL_UART_RXEVENT_TC;
 8005202:	687b      	ldr	r3, [r7, #4]
 8005204:	2200      	movs	r2, #0
 8005206:	665a      	str	r2, [r3, #100]	; 0x64

  __HAL_UNLOCK(huart);
 8005208:	687b      	ldr	r3, [r7, #4]
 800520a:	2200      	movs	r2, #0
 800520c:	f883 2078 	strb.w	r2, [r3, #120]	; 0x78

  return HAL_OK;
 8005210:	2300      	movs	r3, #0
}
 8005212:	4618      	mov	r0, r3
 8005214:	3710      	adds	r7, #16
 8005216:	46bd      	mov	sp, r7
 8005218:	bd80      	pop	{r7, pc}

0800521a <UART_WaitOnFlagUntilTimeout>:
  * @param Timeout   Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                              uint32_t Tickstart, uint32_t Timeout)
{
 800521a:	b580      	push	{r7, lr}
 800521c:	b09c      	sub	sp, #112	; 0x70
 800521e:	af00      	add	r7, sp, #0
 8005220:	60f8      	str	r0, [r7, #12]
 8005222:	60b9      	str	r1, [r7, #8]
 8005224:	603b      	str	r3, [r7, #0]
 8005226:	4613      	mov	r3, r2
 8005228:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 800522a:	e0a7      	b.n	800537c <UART_WaitOnFlagUntilTimeout+0x162>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 800522c:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 800522e:	f1b3 3fff 	cmp.w	r3, #4294967295
 8005232:	f000 80a3 	beq.w	800537c <UART_WaitOnFlagUntilTimeout+0x162>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8005236:	f7fc fcbb 	bl	8001bb0 <HAL_GetTick>
 800523a:	4602      	mov	r2, r0
 800523c:	683b      	ldr	r3, [r7, #0]
 800523e:	1ad3      	subs	r3, r2, r3
 8005240:	6fba      	ldr	r2, [r7, #120]	; 0x78
 8005242:	429a      	cmp	r2, r3
 8005244:	d302      	bcc.n	800524c <UART_WaitOnFlagUntilTimeout+0x32>
 8005246:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8005248:	2b00      	cmp	r3, #0
 800524a:	d13f      	bne.n	80052cc <UART_WaitOnFlagUntilTimeout+0xb2>
      {
        /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error)
           interrupts for the interrupt process */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 800524c:	68fb      	ldr	r3, [r7, #12]
 800524e:	681b      	ldr	r3, [r3, #0]
 8005250:	653b      	str	r3, [r7, #80]	; 0x50
 */
__STATIC_FORCEINLINE uint32_t __LDREXW(volatile uint32_t *addr)
{
    uint32_t result;

   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005252:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8005254:	e853 3f00 	ldrex	r3, [r3]
 8005258:	64fb      	str	r3, [r7, #76]	; 0x4c
   return(result);
 800525a:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800525c:	f423 73d0 	bic.w	r3, r3, #416	; 0x1a0
 8005260:	667b      	str	r3, [r7, #100]	; 0x64
 8005262:	68fb      	ldr	r3, [r7, #12]
 8005264:	681b      	ldr	r3, [r3, #0]
 8005266:	461a      	mov	r2, r3
 8005268:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 800526a:	65fb      	str	r3, [r7, #92]	; 0x5c
 800526c:	65ba      	str	r2, [r7, #88]	; 0x58
 */
__STATIC_FORCEINLINE uint32_t __STREXW(uint32_t value, volatile uint32_t *addr)
{
   uint32_t result;

   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800526e:	6db9      	ldr	r1, [r7, #88]	; 0x58
 8005270:	6dfa      	ldr	r2, [r7, #92]	; 0x5c
 8005272:	e841 2300 	strex	r3, r2, [r1]
 8005276:	657b      	str	r3, [r7, #84]	; 0x54
   return(result);
 8005278:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 800527a:	2b00      	cmp	r3, #0
 800527c:	d1e6      	bne.n	800524c <UART_WaitOnFlagUntilTimeout+0x32>
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800527e:	68fb      	ldr	r3, [r7, #12]
 8005280:	681b      	ldr	r3, [r3, #0]
 8005282:	3308      	adds	r3, #8
 8005284:	63fb      	str	r3, [r7, #60]	; 0x3c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005286:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8005288:	e853 3f00 	ldrex	r3, [r3]
 800528c:	63bb      	str	r3, [r7, #56]	; 0x38
   return(result);
 800528e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8005290:	f023 0301 	bic.w	r3, r3, #1
 8005294:	663b      	str	r3, [r7, #96]	; 0x60
 8005296:	68fb      	ldr	r3, [r7, #12]
 8005298:	681b      	ldr	r3, [r3, #0]
 800529a:	3308      	adds	r3, #8
 800529c:	6e3a      	ldr	r2, [r7, #96]	; 0x60
 800529e:	64ba      	str	r2, [r7, #72]	; 0x48
 80052a0:	647b      	str	r3, [r7, #68]	; 0x44
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80052a2:	6c79      	ldr	r1, [r7, #68]	; 0x44
 80052a4:	6cba      	ldr	r2, [r7, #72]	; 0x48
 80052a6:	e841 2300 	strex	r3, r2, [r1]
 80052aa:	643b      	str	r3, [r7, #64]	; 0x40
   return(result);
 80052ac:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 80052ae:	2b00      	cmp	r3, #0
 80052b0:	d1e5      	bne.n	800527e <UART_WaitOnFlagUntilTimeout+0x64>

        huart->gState = HAL_UART_STATE_READY;
 80052b2:	68fb      	ldr	r3, [r7, #12]
 80052b4:	2220      	movs	r2, #32
 80052b6:	67da      	str	r2, [r3, #124]	; 0x7c
        huart->RxState = HAL_UART_STATE_READY;
 80052b8:	68fb      	ldr	r3, [r7, #12]
 80052ba:	2220      	movs	r2, #32
 80052bc:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80

        __HAL_UNLOCK(huart);
 80052c0:	68fb      	ldr	r3, [r7, #12]
 80052c2:	2200      	movs	r2, #0
 80052c4:	f883 2078 	strb.w	r2, [r3, #120]	; 0x78

        return HAL_TIMEOUT;
 80052c8:	2303      	movs	r3, #3
 80052ca:	e068      	b.n	800539e <UART_WaitOnFlagUntilTimeout+0x184>
      }

      if (READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U)
 80052cc:	68fb      	ldr	r3, [r7, #12]
 80052ce:	681b      	ldr	r3, [r3, #0]
 80052d0:	681b      	ldr	r3, [r3, #0]
 80052d2:	f003 0304 	and.w	r3, r3, #4
 80052d6:	2b00      	cmp	r3, #0
 80052d8:	d050      	beq.n	800537c <UART_WaitOnFlagUntilTimeout+0x162>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_RTOF) == SET)
 80052da:	68fb      	ldr	r3, [r7, #12]
 80052dc:	681b      	ldr	r3, [r3, #0]
 80052de:	69db      	ldr	r3, [r3, #28]
 80052e0:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 80052e4:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 80052e8:	d148      	bne.n	800537c <UART_WaitOnFlagUntilTimeout+0x162>
        {
          /* Clear Receiver Timeout flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 80052ea:	68fb      	ldr	r3, [r7, #12]
 80052ec:	681b      	ldr	r3, [r3, #0]
 80052ee:	f44f 6200 	mov.w	r2, #2048	; 0x800
 80052f2:	621a      	str	r2, [r3, #32]

          /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error)
             interrupts for the interrupt process */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 80052f4:	68fb      	ldr	r3, [r7, #12]
 80052f6:	681b      	ldr	r3, [r3, #0]
 80052f8:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80052fa:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80052fc:	e853 3f00 	ldrex	r3, [r3]
 8005300:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 8005302:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005304:	f423 73d0 	bic.w	r3, r3, #416	; 0x1a0
 8005308:	66fb      	str	r3, [r7, #108]	; 0x6c
 800530a:	68fb      	ldr	r3, [r7, #12]
 800530c:	681b      	ldr	r3, [r3, #0]
 800530e:	461a      	mov	r2, r3
 8005310:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8005312:	637b      	str	r3, [r7, #52]	; 0x34
 8005314:	633a      	str	r2, [r7, #48]	; 0x30
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005316:	6b39      	ldr	r1, [r7, #48]	; 0x30
 8005318:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 800531a:	e841 2300 	strex	r3, r2, [r1]
 800531e:	62fb      	str	r3, [r7, #44]	; 0x2c
   return(result);
 8005320:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8005322:	2b00      	cmp	r3, #0
 8005324:	d1e6      	bne.n	80052f4 <UART_WaitOnFlagUntilTimeout+0xda>
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8005326:	68fb      	ldr	r3, [r7, #12]
 8005328:	681b      	ldr	r3, [r3, #0]
 800532a:	3308      	adds	r3, #8
 800532c:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800532e:	697b      	ldr	r3, [r7, #20]
 8005330:	e853 3f00 	ldrex	r3, [r3]
 8005334:	613b      	str	r3, [r7, #16]
   return(result);
 8005336:	693b      	ldr	r3, [r7, #16]
 8005338:	f023 0301 	bic.w	r3, r3, #1
 800533c:	66bb      	str	r3, [r7, #104]	; 0x68
 800533e:	68fb      	ldr	r3, [r7, #12]
 8005340:	681b      	ldr	r3, [r3, #0]
 8005342:	3308      	adds	r3, #8
 8005344:	6eba      	ldr	r2, [r7, #104]	; 0x68
 8005346:	623a      	str	r2, [r7, #32]
 8005348:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800534a:	69f9      	ldr	r1, [r7, #28]
 800534c:	6a3a      	ldr	r2, [r7, #32]
 800534e:	e841 2300 	strex	r3, r2, [r1]
 8005352:	61bb      	str	r3, [r7, #24]
   return(result);
 8005354:	69bb      	ldr	r3, [r7, #24]
 8005356:	2b00      	cmp	r3, #0
 8005358:	d1e5      	bne.n	8005326 <UART_WaitOnFlagUntilTimeout+0x10c>

          huart->gState = HAL_UART_STATE_READY;
 800535a:	68fb      	ldr	r3, [r7, #12]
 800535c:	2220      	movs	r2, #32
 800535e:	67da      	str	r2, [r3, #124]	; 0x7c
          huart->RxState = HAL_UART_STATE_READY;
 8005360:	68fb      	ldr	r3, [r7, #12]
 8005362:	2220      	movs	r2, #32
 8005364:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
          huart->ErrorCode = HAL_UART_ERROR_RTO;
 8005368:	68fb      	ldr	r3, [r7, #12]
 800536a:	2220      	movs	r2, #32
 800536c:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 8005370:	68fb      	ldr	r3, [r7, #12]
 8005372:	2200      	movs	r2, #0
 8005374:	f883 2078 	strb.w	r2, [r3, #120]	; 0x78

          return HAL_TIMEOUT;
 8005378:	2303      	movs	r3, #3
 800537a:	e010      	b.n	800539e <UART_WaitOnFlagUntilTimeout+0x184>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 800537c:	68fb      	ldr	r3, [r7, #12]
 800537e:	681b      	ldr	r3, [r3, #0]
 8005380:	69da      	ldr	r2, [r3, #28]
 8005382:	68bb      	ldr	r3, [r7, #8]
 8005384:	4013      	ands	r3, r2
 8005386:	68ba      	ldr	r2, [r7, #8]
 8005388:	429a      	cmp	r2, r3
 800538a:	bf0c      	ite	eq
 800538c:	2301      	moveq	r3, #1
 800538e:	2300      	movne	r3, #0
 8005390:	b2db      	uxtb	r3, r3
 8005392:	461a      	mov	r2, r3
 8005394:	79fb      	ldrb	r3, [r7, #7]
 8005396:	429a      	cmp	r2, r3
 8005398:	f43f af48 	beq.w	800522c <UART_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 800539c:	2300      	movs	r3, #0
}
 800539e:	4618      	mov	r0, r3
 80053a0:	3770      	adds	r7, #112	; 0x70
 80053a2:	46bd      	mov	sp, r7
 80053a4:	bd80      	pop	{r7, pc}

080053a6 <SVC_Setup>:
#endif /* SysTick */

/*
  Setup SVC to reset value.
*/
__STATIC_INLINE void SVC_Setup (void) {
 80053a6:	b480      	push	{r7}
 80053a8:	af00      	add	r7, sp, #0
  * The issue was logged under:https://github.com/ARM-software/CMSIS-FreeRTOS/issues/35
  * until it is correctly fixed, the code below is commented
  */
/*    NVIC_SetPriority (SVCall_IRQn, 0U); */
#endif
}
 80053aa:	bf00      	nop
 80053ac:	46bd      	mov	sp, r7
 80053ae:	f85d 7b04 	ldr.w	r7, [sp], #4
 80053b2:	4770      	bx	lr

080053b4 <osKernelInitialize>:

/*---------------------------------------------------------------------------*/

osStatus_t osKernelInitialize (void) {
 80053b4:	b480      	push	{r7}
 80053b6:	b085      	sub	sp, #20
 80053b8:	af00      	add	r7, sp, #0
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 80053ba:	f3ef 8305 	mrs	r3, IPSR
 80053be:	60bb      	str	r3, [r7, #8]
  return(result);
 80053c0:	68bb      	ldr	r3, [r7, #8]
  osStatus_t stat;

  if (IS_IRQ()) {
 80053c2:	2b00      	cmp	r3, #0
 80053c4:	d10f      	bne.n	80053e6 <osKernelInitialize+0x32>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 80053c6:	f3ef 8310 	mrs	r3, PRIMASK
 80053ca:	607b      	str	r3, [r7, #4]
  return(result);
 80053cc:	687b      	ldr	r3, [r7, #4]
 80053ce:	2b00      	cmp	r3, #0
 80053d0:	d105      	bne.n	80053de <osKernelInitialize+0x2a>
  __ASM volatile ("MRS %0, basepri" : "=r" (result) );
 80053d2:	f3ef 8311 	mrs	r3, BASEPRI
 80053d6:	603b      	str	r3, [r7, #0]
  return(result);
 80053d8:	683b      	ldr	r3, [r7, #0]
 80053da:	2b00      	cmp	r3, #0
 80053dc:	d007      	beq.n	80053ee <osKernelInitialize+0x3a>
 80053de:	4b0e      	ldr	r3, [pc, #56]	; (8005418 <osKernelInitialize+0x64>)
 80053e0:	681b      	ldr	r3, [r3, #0]
 80053e2:	2b02      	cmp	r3, #2
 80053e4:	d103      	bne.n	80053ee <osKernelInitialize+0x3a>
    stat = osErrorISR;
 80053e6:	f06f 0305 	mvn.w	r3, #5
 80053ea:	60fb      	str	r3, [r7, #12]
 80053ec:	e00c      	b.n	8005408 <osKernelInitialize+0x54>
  }
  else {
    if (KernelState == osKernelInactive) {
 80053ee:	4b0a      	ldr	r3, [pc, #40]	; (8005418 <osKernelInitialize+0x64>)
 80053f0:	681b      	ldr	r3, [r3, #0]
 80053f2:	2b00      	cmp	r3, #0
 80053f4:	d105      	bne.n	8005402 <osKernelInitialize+0x4e>
      #if defined(USE_FREERTOS_HEAP_5) && (HEAP_5_REGION_SETUP == 1)
        vPortDefineHeapRegions (configHEAP_5_REGIONS);
      #endif
      KernelState = osKernelReady;
 80053f6:	4b08      	ldr	r3, [pc, #32]	; (8005418 <osKernelInitialize+0x64>)
 80053f8:	2201      	movs	r2, #1
 80053fa:	601a      	str	r2, [r3, #0]
      stat = osOK;
 80053fc:	2300      	movs	r3, #0
 80053fe:	60fb      	str	r3, [r7, #12]
 8005400:	e002      	b.n	8005408 <osKernelInitialize+0x54>
    } else {
      stat = osError;
 8005402:	f04f 33ff 	mov.w	r3, #4294967295
 8005406:	60fb      	str	r3, [r7, #12]
    }
  }

  return (stat);
 8005408:	68fb      	ldr	r3, [r7, #12]
}
 800540a:	4618      	mov	r0, r3
 800540c:	3714      	adds	r7, #20
 800540e:	46bd      	mov	sp, r7
 8005410:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005414:	4770      	bx	lr
 8005416:	bf00      	nop
 8005418:	200014f4 	.word	0x200014f4

0800541c <osKernelStart>:
  }

  return (state);
}

osStatus_t osKernelStart (void) {
 800541c:	b580      	push	{r7, lr}
 800541e:	b084      	sub	sp, #16
 8005420:	af00      	add	r7, sp, #0
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 8005422:	f3ef 8305 	mrs	r3, IPSR
 8005426:	60bb      	str	r3, [r7, #8]
  return(result);
 8005428:	68bb      	ldr	r3, [r7, #8]
  osStatus_t stat;

  if (IS_IRQ()) {
 800542a:	2b00      	cmp	r3, #0
 800542c:	d10f      	bne.n	800544e <osKernelStart+0x32>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 800542e:	f3ef 8310 	mrs	r3, PRIMASK
 8005432:	607b      	str	r3, [r7, #4]
  return(result);
 8005434:	687b      	ldr	r3, [r7, #4]
 8005436:	2b00      	cmp	r3, #0
 8005438:	d105      	bne.n	8005446 <osKernelStart+0x2a>
  __ASM volatile ("MRS %0, basepri" : "=r" (result) );
 800543a:	f3ef 8311 	mrs	r3, BASEPRI
 800543e:	603b      	str	r3, [r7, #0]
  return(result);
 8005440:	683b      	ldr	r3, [r7, #0]
 8005442:	2b00      	cmp	r3, #0
 8005444:	d007      	beq.n	8005456 <osKernelStart+0x3a>
 8005446:	4b0f      	ldr	r3, [pc, #60]	; (8005484 <osKernelStart+0x68>)
 8005448:	681b      	ldr	r3, [r3, #0]
 800544a:	2b02      	cmp	r3, #2
 800544c:	d103      	bne.n	8005456 <osKernelStart+0x3a>
    stat = osErrorISR;
 800544e:	f06f 0305 	mvn.w	r3, #5
 8005452:	60fb      	str	r3, [r7, #12]
 8005454:	e010      	b.n	8005478 <osKernelStart+0x5c>
  }
  else {
    if (KernelState == osKernelReady) {
 8005456:	4b0b      	ldr	r3, [pc, #44]	; (8005484 <osKernelStart+0x68>)
 8005458:	681b      	ldr	r3, [r3, #0]
 800545a:	2b01      	cmp	r3, #1
 800545c:	d109      	bne.n	8005472 <osKernelStart+0x56>
      /* Ensure SVC priority is at the reset value */
      SVC_Setup();
 800545e:	f7ff ffa2 	bl	80053a6 <SVC_Setup>
      /* Change state to enable IRQ masking check */
      KernelState = osKernelRunning;
 8005462:	4b08      	ldr	r3, [pc, #32]	; (8005484 <osKernelStart+0x68>)
 8005464:	2202      	movs	r2, #2
 8005466:	601a      	str	r2, [r3, #0]
      /* Start the kernel scheduler */
      vTaskStartScheduler();
 8005468:	f001 fb96 	bl	8006b98 <vTaskStartScheduler>
      stat = osOK;
 800546c:	2300      	movs	r3, #0
 800546e:	60fb      	str	r3, [r7, #12]
 8005470:	e002      	b.n	8005478 <osKernelStart+0x5c>
    } else {
      stat = osError;
 8005472:	f04f 33ff 	mov.w	r3, #4294967295
 8005476:	60fb      	str	r3, [r7, #12]
    }
  }

  return (stat);
 8005478:	68fb      	ldr	r3, [r7, #12]
}
 800547a:	4618      	mov	r0, r3
 800547c:	3710      	adds	r7, #16
 800547e:	46bd      	mov	sp, r7
 8005480:	bd80      	pop	{r7, pc}
 8005482:	bf00      	nop
 8005484:	200014f4 	.word	0x200014f4

08005488 <osThreadNew>:
  return (configCPU_CLOCK_HZ);
}

/*---------------------------------------------------------------------------*/

osThreadId_t osThreadNew (osThreadFunc_t func, void *argument, const osThreadAttr_t *attr) {
 8005488:	b580      	push	{r7, lr}
 800548a:	b090      	sub	sp, #64	; 0x40
 800548c:	af04      	add	r7, sp, #16
 800548e:	60f8      	str	r0, [r7, #12]
 8005490:	60b9      	str	r1, [r7, #8]
 8005492:	607a      	str	r2, [r7, #4]
  uint32_t stack;
  TaskHandle_t hTask;
  UBaseType_t prio;
  int32_t mem;

  hTask = NULL;
 8005494:	2300      	movs	r3, #0
 8005496:	613b      	str	r3, [r7, #16]
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 8005498:	f3ef 8305 	mrs	r3, IPSR
 800549c:	61fb      	str	r3, [r7, #28]
  return(result);
 800549e:	69fb      	ldr	r3, [r7, #28]

  if (!IS_IRQ() && (func != NULL)) {
 80054a0:	2b00      	cmp	r3, #0
 80054a2:	f040 8090 	bne.w	80055c6 <osThreadNew+0x13e>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 80054a6:	f3ef 8310 	mrs	r3, PRIMASK
 80054aa:	61bb      	str	r3, [r7, #24]
  return(result);
 80054ac:	69bb      	ldr	r3, [r7, #24]
 80054ae:	2b00      	cmp	r3, #0
 80054b0:	d105      	bne.n	80054be <osThreadNew+0x36>
  __ASM volatile ("MRS %0, basepri" : "=r" (result) );
 80054b2:	f3ef 8311 	mrs	r3, BASEPRI
 80054b6:	617b      	str	r3, [r7, #20]
  return(result);
 80054b8:	697b      	ldr	r3, [r7, #20]
 80054ba:	2b00      	cmp	r3, #0
 80054bc:	d003      	beq.n	80054c6 <osThreadNew+0x3e>
 80054be:	4b44      	ldr	r3, [pc, #272]	; (80055d0 <osThreadNew+0x148>)
 80054c0:	681b      	ldr	r3, [r3, #0]
 80054c2:	2b02      	cmp	r3, #2
 80054c4:	d07f      	beq.n	80055c6 <osThreadNew+0x13e>
 80054c6:	68fb      	ldr	r3, [r7, #12]
 80054c8:	2b00      	cmp	r3, #0
 80054ca:	d07c      	beq.n	80055c6 <osThreadNew+0x13e>
    stack = configMINIMAL_STACK_SIZE;
 80054cc:	f44f 7300 	mov.w	r3, #512	; 0x200
 80054d0:	62bb      	str	r3, [r7, #40]	; 0x28
    prio  = (UBaseType_t)osPriorityNormal;
 80054d2:	2318      	movs	r3, #24
 80054d4:	627b      	str	r3, [r7, #36]	; 0x24

    name = NULL;
 80054d6:	2300      	movs	r3, #0
 80054d8:	62fb      	str	r3, [r7, #44]	; 0x2c
    mem  = -1;
 80054da:	f04f 33ff 	mov.w	r3, #4294967295
 80054de:	623b      	str	r3, [r7, #32]

    if (attr != NULL) {
 80054e0:	687b      	ldr	r3, [r7, #4]
 80054e2:	2b00      	cmp	r3, #0
 80054e4:	d045      	beq.n	8005572 <osThreadNew+0xea>
      if (attr->name != NULL) {
 80054e6:	687b      	ldr	r3, [r7, #4]
 80054e8:	681b      	ldr	r3, [r3, #0]
 80054ea:	2b00      	cmp	r3, #0
 80054ec:	d002      	beq.n	80054f4 <osThreadNew+0x6c>
        name = attr->name;
 80054ee:	687b      	ldr	r3, [r7, #4]
 80054f0:	681b      	ldr	r3, [r3, #0]
 80054f2:	62fb      	str	r3, [r7, #44]	; 0x2c
      }
      if (attr->priority != osPriorityNone) {
 80054f4:	687b      	ldr	r3, [r7, #4]
 80054f6:	699b      	ldr	r3, [r3, #24]
 80054f8:	2b00      	cmp	r3, #0
 80054fa:	d002      	beq.n	8005502 <osThreadNew+0x7a>
        prio = (UBaseType_t)attr->priority;
 80054fc:	687b      	ldr	r3, [r7, #4]
 80054fe:	699b      	ldr	r3, [r3, #24]
 8005500:	627b      	str	r3, [r7, #36]	; 0x24
      }

      if ((prio < osPriorityIdle) || (prio > osPriorityISR) || ((attr->attr_bits & osThreadJoinable) == osThreadJoinable)) {
 8005502:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005504:	2b00      	cmp	r3, #0
 8005506:	d008      	beq.n	800551a <osThreadNew+0x92>
 8005508:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800550a:	2b38      	cmp	r3, #56	; 0x38
 800550c:	d805      	bhi.n	800551a <osThreadNew+0x92>
 800550e:	687b      	ldr	r3, [r7, #4]
 8005510:	685b      	ldr	r3, [r3, #4]
 8005512:	f003 0301 	and.w	r3, r3, #1
 8005516:	2b00      	cmp	r3, #0
 8005518:	d001      	beq.n	800551e <osThreadNew+0x96>
        return (NULL);
 800551a:	2300      	movs	r3, #0
 800551c:	e054      	b.n	80055c8 <osThreadNew+0x140>
      }

      if (attr->stack_size > 0U) {
 800551e:	687b      	ldr	r3, [r7, #4]
 8005520:	695b      	ldr	r3, [r3, #20]
 8005522:	2b00      	cmp	r3, #0
 8005524:	d003      	beq.n	800552e <osThreadNew+0xa6>
        /* In FreeRTOS stack is not in bytes, but in sizeof(StackType_t) which is 4 on ARM ports.       */
        /* Stack size should be therefore 4 byte aligned in order to avoid division caused side effects */
        stack = attr->stack_size / sizeof(StackType_t);
 8005526:	687b      	ldr	r3, [r7, #4]
 8005528:	695b      	ldr	r3, [r3, #20]
 800552a:	089b      	lsrs	r3, r3, #2
 800552c:	62bb      	str	r3, [r7, #40]	; 0x28
      }

      if ((attr->cb_mem    != NULL) && (attr->cb_size    >= sizeof(StaticTask_t)) &&
 800552e:	687b      	ldr	r3, [r7, #4]
 8005530:	689b      	ldr	r3, [r3, #8]
 8005532:	2b00      	cmp	r3, #0
 8005534:	d00e      	beq.n	8005554 <osThreadNew+0xcc>
 8005536:	687b      	ldr	r3, [r7, #4]
 8005538:	68db      	ldr	r3, [r3, #12]
 800553a:	2ba7      	cmp	r3, #167	; 0xa7
 800553c:	d90a      	bls.n	8005554 <osThreadNew+0xcc>
          (attr->stack_mem != NULL) && (attr->stack_size >  0U)) {
 800553e:	687b      	ldr	r3, [r7, #4]
 8005540:	691b      	ldr	r3, [r3, #16]
      if ((attr->cb_mem    != NULL) && (attr->cb_size    >= sizeof(StaticTask_t)) &&
 8005542:	2b00      	cmp	r3, #0
 8005544:	d006      	beq.n	8005554 <osThreadNew+0xcc>
          (attr->stack_mem != NULL) && (attr->stack_size >  0U)) {
 8005546:	687b      	ldr	r3, [r7, #4]
 8005548:	695b      	ldr	r3, [r3, #20]
 800554a:	2b00      	cmp	r3, #0
 800554c:	d002      	beq.n	8005554 <osThreadNew+0xcc>
        mem = 1;
 800554e:	2301      	movs	r3, #1
 8005550:	623b      	str	r3, [r7, #32]
 8005552:	e010      	b.n	8005576 <osThreadNew+0xee>
      }
      else {
        if ((attr->cb_mem == NULL) && (attr->cb_size == 0U) && (attr->stack_mem == NULL)) {
 8005554:	687b      	ldr	r3, [r7, #4]
 8005556:	689b      	ldr	r3, [r3, #8]
 8005558:	2b00      	cmp	r3, #0
 800555a:	d10c      	bne.n	8005576 <osThreadNew+0xee>
 800555c:	687b      	ldr	r3, [r7, #4]
 800555e:	68db      	ldr	r3, [r3, #12]
 8005560:	2b00      	cmp	r3, #0
 8005562:	d108      	bne.n	8005576 <osThreadNew+0xee>
 8005564:	687b      	ldr	r3, [r7, #4]
 8005566:	691b      	ldr	r3, [r3, #16]
 8005568:	2b00      	cmp	r3, #0
 800556a:	d104      	bne.n	8005576 <osThreadNew+0xee>
          mem = 0;
 800556c:	2300      	movs	r3, #0
 800556e:	623b      	str	r3, [r7, #32]
 8005570:	e001      	b.n	8005576 <osThreadNew+0xee>
        }
      }
    }
    else {
      mem = 0;
 8005572:	2300      	movs	r3, #0
 8005574:	623b      	str	r3, [r7, #32]
    }

    if (mem == 1) {
 8005576:	6a3b      	ldr	r3, [r7, #32]
 8005578:	2b01      	cmp	r3, #1
 800557a:	d110      	bne.n	800559e <osThreadNew+0x116>
      hTask = xTaskCreateStatic ((TaskFunction_t)func, name, stack, argument, prio, (StackType_t  *)attr->stack_mem,
 800557c:	687b      	ldr	r3, [r7, #4]
 800557e:	691b      	ldr	r3, [r3, #16]
                                                                                    (StaticTask_t *)attr->cb_mem);
 8005580:	687a      	ldr	r2, [r7, #4]
 8005582:	6892      	ldr	r2, [r2, #8]
      hTask = xTaskCreateStatic ((TaskFunction_t)func, name, stack, argument, prio, (StackType_t  *)attr->stack_mem,
 8005584:	9202      	str	r2, [sp, #8]
 8005586:	9301      	str	r3, [sp, #4]
 8005588:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800558a:	9300      	str	r3, [sp, #0]
 800558c:	68bb      	ldr	r3, [r7, #8]
 800558e:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8005590:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 8005592:	68f8      	ldr	r0, [r7, #12]
 8005594:	f001 f90a 	bl	80067ac <xTaskCreateStatic>
 8005598:	4603      	mov	r3, r0
 800559a:	613b      	str	r3, [r7, #16]
 800559c:	e013      	b.n	80055c6 <osThreadNew+0x13e>
    }
    else {
      if (mem == 0) {
 800559e:	6a3b      	ldr	r3, [r7, #32]
 80055a0:	2b00      	cmp	r3, #0
 80055a2:	d110      	bne.n	80055c6 <osThreadNew+0x13e>
        if (xTaskCreate ((TaskFunction_t)func, name, (uint16_t)stack, argument, prio, &hTask) != pdPASS) {
 80055a4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80055a6:	b29a      	uxth	r2, r3
 80055a8:	f107 0310 	add.w	r3, r7, #16
 80055ac:	9301      	str	r3, [sp, #4]
 80055ae:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80055b0:	9300      	str	r3, [sp, #0]
 80055b2:	68bb      	ldr	r3, [r7, #8]
 80055b4:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 80055b6:	68f8      	ldr	r0, [r7, #12]
 80055b8:	f001 f95b 	bl	8006872 <xTaskCreate>
 80055bc:	4603      	mov	r3, r0
 80055be:	2b01      	cmp	r3, #1
 80055c0:	d001      	beq.n	80055c6 <osThreadNew+0x13e>
          hTask = NULL;
 80055c2:	2300      	movs	r3, #0
 80055c4:	613b      	str	r3, [r7, #16]
        }
      }
    }
  }

  return ((osThreadId_t)hTask);
 80055c6:	693b      	ldr	r3, [r7, #16]
}
 80055c8:	4618      	mov	r0, r3
 80055ca:	3730      	adds	r7, #48	; 0x30
 80055cc:	46bd      	mov	sp, r7
 80055ce:	bd80      	pop	{r7, pc}
 80055d0:	200014f4 	.word	0x200014f4

080055d4 <osDelay>:

  /* Return flags before clearing */
  return (rflags);
}

osStatus_t osDelay (uint32_t ticks) {
 80055d4:	b580      	push	{r7, lr}
 80055d6:	b086      	sub	sp, #24
 80055d8:	af00      	add	r7, sp, #0
 80055da:	6078      	str	r0, [r7, #4]
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 80055dc:	f3ef 8305 	mrs	r3, IPSR
 80055e0:	613b      	str	r3, [r7, #16]
  return(result);
 80055e2:	693b      	ldr	r3, [r7, #16]
  osStatus_t stat;

  if (IS_IRQ()) {
 80055e4:	2b00      	cmp	r3, #0
 80055e6:	d10f      	bne.n	8005608 <osDelay+0x34>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 80055e8:	f3ef 8310 	mrs	r3, PRIMASK
 80055ec:	60fb      	str	r3, [r7, #12]
  return(result);
 80055ee:	68fb      	ldr	r3, [r7, #12]
 80055f0:	2b00      	cmp	r3, #0
 80055f2:	d105      	bne.n	8005600 <osDelay+0x2c>
  __ASM volatile ("MRS %0, basepri" : "=r" (result) );
 80055f4:	f3ef 8311 	mrs	r3, BASEPRI
 80055f8:	60bb      	str	r3, [r7, #8]
  return(result);
 80055fa:	68bb      	ldr	r3, [r7, #8]
 80055fc:	2b00      	cmp	r3, #0
 80055fe:	d007      	beq.n	8005610 <osDelay+0x3c>
 8005600:	4b0a      	ldr	r3, [pc, #40]	; (800562c <osDelay+0x58>)
 8005602:	681b      	ldr	r3, [r3, #0]
 8005604:	2b02      	cmp	r3, #2
 8005606:	d103      	bne.n	8005610 <osDelay+0x3c>
    stat = osErrorISR;
 8005608:	f06f 0305 	mvn.w	r3, #5
 800560c:	617b      	str	r3, [r7, #20]
 800560e:	e007      	b.n	8005620 <osDelay+0x4c>
  }
  else {
    stat = osOK;
 8005610:	2300      	movs	r3, #0
 8005612:	617b      	str	r3, [r7, #20]

    if (ticks != 0U) {
 8005614:	687b      	ldr	r3, [r7, #4]
 8005616:	2b00      	cmp	r3, #0
 8005618:	d002      	beq.n	8005620 <osDelay+0x4c>
      vTaskDelay(ticks);
 800561a:	6878      	ldr	r0, [r7, #4]
 800561c:	f001 fa86 	bl	8006b2c <vTaskDelay>
    }
  }

  return (stat);
 8005620:	697b      	ldr	r3, [r7, #20]
}
 8005622:	4618      	mov	r0, r3
 8005624:	3718      	adds	r7, #24
 8005626:	46bd      	mov	sp, r7
 8005628:	bd80      	pop	{r7, pc}
 800562a:	bf00      	nop
 800562c:	200014f4 	.word	0x200014f4

08005630 <osSemaphoreNew>:
  return (stat);
}

/*---------------------------------------------------------------------------*/

osSemaphoreId_t osSemaphoreNew (uint32_t max_count, uint32_t initial_count, const osSemaphoreAttr_t *attr) {
 8005630:	b580      	push	{r7, lr}
 8005632:	b08c      	sub	sp, #48	; 0x30
 8005634:	af02      	add	r7, sp, #8
 8005636:	60f8      	str	r0, [r7, #12]
 8005638:	60b9      	str	r1, [r7, #8]
 800563a:	607a      	str	r2, [r7, #4]
  int32_t mem;
  #if (configQUEUE_REGISTRY_SIZE > 0)
  const char *name;
  #endif

  hSemaphore = NULL;
 800563c:	2300      	movs	r3, #0
 800563e:	627b      	str	r3, [r7, #36]	; 0x24
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 8005640:	f3ef 8305 	mrs	r3, IPSR
 8005644:	61bb      	str	r3, [r7, #24]
  return(result);
 8005646:	69bb      	ldr	r3, [r7, #24]

  if (!IS_IRQ() && (max_count > 0U) && (initial_count <= max_count)) {
 8005648:	2b00      	cmp	r3, #0
 800564a:	f040 8086 	bne.w	800575a <osSemaphoreNew+0x12a>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 800564e:	f3ef 8310 	mrs	r3, PRIMASK
 8005652:	617b      	str	r3, [r7, #20]
  return(result);
 8005654:	697b      	ldr	r3, [r7, #20]
 8005656:	2b00      	cmp	r3, #0
 8005658:	d105      	bne.n	8005666 <osSemaphoreNew+0x36>
  __ASM volatile ("MRS %0, basepri" : "=r" (result) );
 800565a:	f3ef 8311 	mrs	r3, BASEPRI
 800565e:	613b      	str	r3, [r7, #16]
  return(result);
 8005660:	693b      	ldr	r3, [r7, #16]
 8005662:	2b00      	cmp	r3, #0
 8005664:	d003      	beq.n	800566e <osSemaphoreNew+0x3e>
 8005666:	4b3f      	ldr	r3, [pc, #252]	; (8005764 <osSemaphoreNew+0x134>)
 8005668:	681b      	ldr	r3, [r3, #0]
 800566a:	2b02      	cmp	r3, #2
 800566c:	d075      	beq.n	800575a <osSemaphoreNew+0x12a>
 800566e:	68fb      	ldr	r3, [r7, #12]
 8005670:	2b00      	cmp	r3, #0
 8005672:	d072      	beq.n	800575a <osSemaphoreNew+0x12a>
 8005674:	68ba      	ldr	r2, [r7, #8]
 8005676:	68fb      	ldr	r3, [r7, #12]
 8005678:	429a      	cmp	r2, r3
 800567a:	d86e      	bhi.n	800575a <osSemaphoreNew+0x12a>
    mem = -1;
 800567c:	f04f 33ff 	mov.w	r3, #4294967295
 8005680:	623b      	str	r3, [r7, #32]

    if (attr != NULL) {
 8005682:	687b      	ldr	r3, [r7, #4]
 8005684:	2b00      	cmp	r3, #0
 8005686:	d015      	beq.n	80056b4 <osSemaphoreNew+0x84>
      if ((attr->cb_mem != NULL) && (attr->cb_size >= sizeof(StaticSemaphore_t))) {
 8005688:	687b      	ldr	r3, [r7, #4]
 800568a:	689b      	ldr	r3, [r3, #8]
 800568c:	2b00      	cmp	r3, #0
 800568e:	d006      	beq.n	800569e <osSemaphoreNew+0x6e>
 8005690:	687b      	ldr	r3, [r7, #4]
 8005692:	68db      	ldr	r3, [r3, #12]
 8005694:	2b4f      	cmp	r3, #79	; 0x4f
 8005696:	d902      	bls.n	800569e <osSemaphoreNew+0x6e>
        mem = 1;
 8005698:	2301      	movs	r3, #1
 800569a:	623b      	str	r3, [r7, #32]
 800569c:	e00c      	b.n	80056b8 <osSemaphoreNew+0x88>
      }
      else {
        if ((attr->cb_mem == NULL) && (attr->cb_size == 0U)) {
 800569e:	687b      	ldr	r3, [r7, #4]
 80056a0:	689b      	ldr	r3, [r3, #8]
 80056a2:	2b00      	cmp	r3, #0
 80056a4:	d108      	bne.n	80056b8 <osSemaphoreNew+0x88>
 80056a6:	687b      	ldr	r3, [r7, #4]
 80056a8:	68db      	ldr	r3, [r3, #12]
 80056aa:	2b00      	cmp	r3, #0
 80056ac:	d104      	bne.n	80056b8 <osSemaphoreNew+0x88>
          mem = 0;
 80056ae:	2300      	movs	r3, #0
 80056b0:	623b      	str	r3, [r7, #32]
 80056b2:	e001      	b.n	80056b8 <osSemaphoreNew+0x88>
        }
      }
    }
    else {
      mem = 0;
 80056b4:	2300      	movs	r3, #0
 80056b6:	623b      	str	r3, [r7, #32]
    }

    if (mem != -1) {
 80056b8:	6a3b      	ldr	r3, [r7, #32]
 80056ba:	f1b3 3fff 	cmp.w	r3, #4294967295
 80056be:	d04c      	beq.n	800575a <osSemaphoreNew+0x12a>
      if (max_count == 1U) {
 80056c0:	68fb      	ldr	r3, [r7, #12]
 80056c2:	2b01      	cmp	r3, #1
 80056c4:	d128      	bne.n	8005718 <osSemaphoreNew+0xe8>
        if (mem == 1) {
 80056c6:	6a3b      	ldr	r3, [r7, #32]
 80056c8:	2b01      	cmp	r3, #1
 80056ca:	d10a      	bne.n	80056e2 <osSemaphoreNew+0xb2>
          hSemaphore = xSemaphoreCreateBinaryStatic ((StaticSemaphore_t *)attr->cb_mem);
 80056cc:	687b      	ldr	r3, [r7, #4]
 80056ce:	689b      	ldr	r3, [r3, #8]
 80056d0:	2203      	movs	r2, #3
 80056d2:	9200      	str	r2, [sp, #0]
 80056d4:	2200      	movs	r2, #0
 80056d6:	2100      	movs	r1, #0
 80056d8:	2001      	movs	r0, #1
 80056da:	f000 f997 	bl	8005a0c <xQueueGenericCreateStatic>
 80056de:	6278      	str	r0, [r7, #36]	; 0x24
 80056e0:	e005      	b.n	80056ee <osSemaphoreNew+0xbe>
        }
        else {
          hSemaphore = xSemaphoreCreateBinary();
 80056e2:	2203      	movs	r2, #3
 80056e4:	2100      	movs	r1, #0
 80056e6:	2001      	movs	r0, #1
 80056e8:	f000 fa12 	bl	8005b10 <xQueueGenericCreate>
 80056ec:	6278      	str	r0, [r7, #36]	; 0x24
        }

        if ((hSemaphore != NULL) && (initial_count != 0U)) {
 80056ee:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80056f0:	2b00      	cmp	r3, #0
 80056f2:	d022      	beq.n	800573a <osSemaphoreNew+0x10a>
 80056f4:	68bb      	ldr	r3, [r7, #8]
 80056f6:	2b00      	cmp	r3, #0
 80056f8:	d01f      	beq.n	800573a <osSemaphoreNew+0x10a>
          if (xSemaphoreGive (hSemaphore) != pdPASS) {
 80056fa:	2300      	movs	r3, #0
 80056fc:	2200      	movs	r2, #0
 80056fe:	2100      	movs	r1, #0
 8005700:	6a78      	ldr	r0, [r7, #36]	; 0x24
 8005702:	f000 fadd 	bl	8005cc0 <xQueueGenericSend>
 8005706:	4603      	mov	r3, r0
 8005708:	2b01      	cmp	r3, #1
 800570a:	d016      	beq.n	800573a <osSemaphoreNew+0x10a>
            vSemaphoreDelete (hSemaphore);
 800570c:	6a78      	ldr	r0, [r7, #36]	; 0x24
 800570e:	f000 fe77 	bl	8006400 <vQueueDelete>
            hSemaphore = NULL;
 8005712:	2300      	movs	r3, #0
 8005714:	627b      	str	r3, [r7, #36]	; 0x24
 8005716:	e010      	b.n	800573a <osSemaphoreNew+0x10a>
          }
        }
      }
      else {
        if (mem == 1) {
 8005718:	6a3b      	ldr	r3, [r7, #32]
 800571a:	2b01      	cmp	r3, #1
 800571c:	d108      	bne.n	8005730 <osSemaphoreNew+0x100>
          hSemaphore = xSemaphoreCreateCountingStatic (max_count, initial_count, (StaticSemaphore_t *)attr->cb_mem);
 800571e:	687b      	ldr	r3, [r7, #4]
 8005720:	689b      	ldr	r3, [r3, #8]
 8005722:	461a      	mov	r2, r3
 8005724:	68b9      	ldr	r1, [r7, #8]
 8005726:	68f8      	ldr	r0, [r7, #12]
 8005728:	f000 fa57 	bl	8005bda <xQueueCreateCountingSemaphoreStatic>
 800572c:	6278      	str	r0, [r7, #36]	; 0x24
 800572e:	e004      	b.n	800573a <osSemaphoreNew+0x10a>
        }
        else {
          hSemaphore = xSemaphoreCreateCounting (max_count, initial_count);
 8005730:	68b9      	ldr	r1, [r7, #8]
 8005732:	68f8      	ldr	r0, [r7, #12]
 8005734:	f000 fa8c 	bl	8005c50 <xQueueCreateCountingSemaphore>
 8005738:	6278      	str	r0, [r7, #36]	; 0x24
        }
      }
      
      #if (configQUEUE_REGISTRY_SIZE > 0)
      if (hSemaphore != NULL) {
 800573a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800573c:	2b00      	cmp	r3, #0
 800573e:	d00c      	beq.n	800575a <osSemaphoreNew+0x12a>
        if (attr != NULL) {
 8005740:	687b      	ldr	r3, [r7, #4]
 8005742:	2b00      	cmp	r3, #0
 8005744:	d003      	beq.n	800574e <osSemaphoreNew+0x11e>
          name = attr->name;
 8005746:	687b      	ldr	r3, [r7, #4]
 8005748:	681b      	ldr	r3, [r3, #0]
 800574a:	61fb      	str	r3, [r7, #28]
 800574c:	e001      	b.n	8005752 <osSemaphoreNew+0x122>
        } else {
          name = NULL;
 800574e:	2300      	movs	r3, #0
 8005750:	61fb      	str	r3, [r7, #28]
        }
        vQueueAddToRegistry (hSemaphore, name);
 8005752:	69f9      	ldr	r1, [r7, #28]
 8005754:	6a78      	ldr	r0, [r7, #36]	; 0x24
 8005756:	f000 ffa1 	bl	800669c <vQueueAddToRegistry>
      }
      #endif
    }
  }

  return ((osSemaphoreId_t)hSemaphore);
 800575a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
}
 800575c:	4618      	mov	r0, r3
 800575e:	3728      	adds	r7, #40	; 0x28
 8005760:	46bd      	mov	sp, r7
 8005762:	bd80      	pop	{r7, pc}
 8005764:	200014f4 	.word	0x200014f4

08005768 <vApplicationGetIdleTaskMemory>:

/*
  vApplicationGetIdleTaskMemory gets called when configSUPPORT_STATIC_ALLOCATION
  equals to 1 and is required for static memory allocation support.
*/
void vApplicationGetIdleTaskMemory (StaticTask_t **ppxIdleTaskTCBBuffer, StackType_t **ppxIdleTaskStackBuffer, uint32_t *pulIdleTaskStackSize) {
 8005768:	b480      	push	{r7}
 800576a:	b085      	sub	sp, #20
 800576c:	af00      	add	r7, sp, #0
 800576e:	60f8      	str	r0, [r7, #12]
 8005770:	60b9      	str	r1, [r7, #8]
 8005772:	607a      	str	r2, [r7, #4]
  *ppxIdleTaskTCBBuffer   = &Idle_TCB;
 8005774:	68fb      	ldr	r3, [r7, #12]
 8005776:	4a07      	ldr	r2, [pc, #28]	; (8005794 <vApplicationGetIdleTaskMemory+0x2c>)
 8005778:	601a      	str	r2, [r3, #0]
  *ppxIdleTaskStackBuffer = &Idle_Stack[0];
 800577a:	68bb      	ldr	r3, [r7, #8]
 800577c:	4a06      	ldr	r2, [pc, #24]	; (8005798 <vApplicationGetIdleTaskMemory+0x30>)
 800577e:	601a      	str	r2, [r3, #0]
  *pulIdleTaskStackSize   = (uint32_t)configMINIMAL_STACK_SIZE;
 8005780:	687b      	ldr	r3, [r7, #4]
 8005782:	f44f 7200 	mov.w	r2, #512	; 0x200
 8005786:	601a      	str	r2, [r3, #0]
}
 8005788:	bf00      	nop
 800578a:	3714      	adds	r7, #20
 800578c:	46bd      	mov	sp, r7
 800578e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005792:	4770      	bx	lr
 8005794:	200014f8 	.word	0x200014f8
 8005798:	200015a0 	.word	0x200015a0

0800579c <vApplicationGetTimerTaskMemory>:

/*
  vApplicationGetTimerTaskMemory gets called when configSUPPORT_STATIC_ALLOCATION
  equals to 1 and is required for static memory allocation support.
*/
void vApplicationGetTimerTaskMemory (StaticTask_t **ppxTimerTaskTCBBuffer, StackType_t **ppxTimerTaskStackBuffer, uint32_t *pulTimerTaskStackSize) {
 800579c:	b480      	push	{r7}
 800579e:	b085      	sub	sp, #20
 80057a0:	af00      	add	r7, sp, #0
 80057a2:	60f8      	str	r0, [r7, #12]
 80057a4:	60b9      	str	r1, [r7, #8]
 80057a6:	607a      	str	r2, [r7, #4]
  *ppxTimerTaskTCBBuffer   = &Timer_TCB;
 80057a8:	68fb      	ldr	r3, [r7, #12]
 80057aa:	4a07      	ldr	r2, [pc, #28]	; (80057c8 <vApplicationGetTimerTaskMemory+0x2c>)
 80057ac:	601a      	str	r2, [r3, #0]
  *ppxTimerTaskStackBuffer = &Timer_Stack[0];
 80057ae:	68bb      	ldr	r3, [r7, #8]
 80057b0:	4a06      	ldr	r2, [pc, #24]	; (80057cc <vApplicationGetTimerTaskMemory+0x30>)
 80057b2:	601a      	str	r2, [r3, #0]
  *pulTimerTaskStackSize   = (uint32_t)configTIMER_TASK_STACK_DEPTH;
 80057b4:	687b      	ldr	r3, [r7, #4]
 80057b6:	f44f 6280 	mov.w	r2, #1024	; 0x400
 80057ba:	601a      	str	r2, [r3, #0]
}
 80057bc:	bf00      	nop
 80057be:	3714      	adds	r7, #20
 80057c0:	46bd      	mov	sp, r7
 80057c2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80057c6:	4770      	bx	lr
 80057c8:	20001da0 	.word	0x20001da0
 80057cc:	20001e48 	.word	0x20001e48

080057d0 <vListInitialise>:
/*-----------------------------------------------------------
 * PUBLIC LIST API documented in list.h
 *----------------------------------------------------------*/

void vListInitialise( List_t * const pxList )
{
 80057d0:	b480      	push	{r7}
 80057d2:	b083      	sub	sp, #12
 80057d4:	af00      	add	r7, sp, #0
 80057d6:	6078      	str	r0, [r7, #4]
	/* The list structure contains a list item which is used to mark the
	end of the list.  To initialise the list the list end is inserted
	as the only list entry. */
	pxList->pxIndex = ( ListItem_t * ) &( pxList->xListEnd );			/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 80057d8:	687b      	ldr	r3, [r7, #4]
 80057da:	f103 0208 	add.w	r2, r3, #8
 80057de:	687b      	ldr	r3, [r7, #4]
 80057e0:	605a      	str	r2, [r3, #4]

	/* The list end value is the highest possible value in the list to
	ensure it remains at the end of the list. */
	pxList->xListEnd.xItemValue = portMAX_DELAY;
 80057e2:	687b      	ldr	r3, [r7, #4]
 80057e4:	f04f 32ff 	mov.w	r2, #4294967295
 80057e8:	609a      	str	r2, [r3, #8]

	/* The list end next and previous pointers point to itself so we know
	when the list is empty. */
	pxList->xListEnd.pxNext = ( ListItem_t * ) &( pxList->xListEnd );	/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 80057ea:	687b      	ldr	r3, [r7, #4]
 80057ec:	f103 0208 	add.w	r2, r3, #8
 80057f0:	687b      	ldr	r3, [r7, #4]
 80057f2:	60da      	str	r2, [r3, #12]
	pxList->xListEnd.pxPrevious = ( ListItem_t * ) &( pxList->xListEnd );/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 80057f4:	687b      	ldr	r3, [r7, #4]
 80057f6:	f103 0208 	add.w	r2, r3, #8
 80057fa:	687b      	ldr	r3, [r7, #4]
 80057fc:	611a      	str	r2, [r3, #16]

	pxList->uxNumberOfItems = ( UBaseType_t ) 0U;
 80057fe:	687b      	ldr	r3, [r7, #4]
 8005800:	2200      	movs	r2, #0
 8005802:	601a      	str	r2, [r3, #0]

	/* Write known values into the list if
	configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
	listSET_LIST_INTEGRITY_CHECK_1_VALUE( pxList );
	listSET_LIST_INTEGRITY_CHECK_2_VALUE( pxList );
}
 8005804:	bf00      	nop
 8005806:	370c      	adds	r7, #12
 8005808:	46bd      	mov	sp, r7
 800580a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800580e:	4770      	bx	lr

08005810 <vListInitialiseItem>:
/*-----------------------------------------------------------*/

void vListInitialiseItem( ListItem_t * const pxItem )
{
 8005810:	b480      	push	{r7}
 8005812:	b083      	sub	sp, #12
 8005814:	af00      	add	r7, sp, #0
 8005816:	6078      	str	r0, [r7, #4]
	/* Make sure the list item is not recorded as being on a list. */
	pxItem->pxContainer = NULL;
 8005818:	687b      	ldr	r3, [r7, #4]
 800581a:	2200      	movs	r2, #0
 800581c:	611a      	str	r2, [r3, #16]

	/* Write known values into the list item if
	configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
	listSET_FIRST_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
	listSET_SECOND_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
}
 800581e:	bf00      	nop
 8005820:	370c      	adds	r7, #12
 8005822:	46bd      	mov	sp, r7
 8005824:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005828:	4770      	bx	lr

0800582a <vListInsertEnd>:
/*-----------------------------------------------------------*/

void vListInsertEnd( List_t * const pxList, ListItem_t * const pxNewListItem )
{
 800582a:	b480      	push	{r7}
 800582c:	b085      	sub	sp, #20
 800582e:	af00      	add	r7, sp, #0
 8005830:	6078      	str	r0, [r7, #4]
 8005832:	6039      	str	r1, [r7, #0]
ListItem_t * const pxIndex = pxList->pxIndex;
 8005834:	687b      	ldr	r3, [r7, #4]
 8005836:	685b      	ldr	r3, [r3, #4]
 8005838:	60fb      	str	r3, [r7, #12]
	listTEST_LIST_ITEM_INTEGRITY( pxNewListItem );

	/* Insert a new list item into pxList, but rather than sort the list,
	makes the new list item the last item to be removed by a call to
	listGET_OWNER_OF_NEXT_ENTRY(). */
	pxNewListItem->pxNext = pxIndex;
 800583a:	683b      	ldr	r3, [r7, #0]
 800583c:	68fa      	ldr	r2, [r7, #12]
 800583e:	605a      	str	r2, [r3, #4]
	pxNewListItem->pxPrevious = pxIndex->pxPrevious;
 8005840:	68fb      	ldr	r3, [r7, #12]
 8005842:	689a      	ldr	r2, [r3, #8]
 8005844:	683b      	ldr	r3, [r7, #0]
 8005846:	609a      	str	r2, [r3, #8]

	/* Only used during decision coverage testing. */
	mtCOVERAGE_TEST_DELAY();

	pxIndex->pxPrevious->pxNext = pxNewListItem;
 8005848:	68fb      	ldr	r3, [r7, #12]
 800584a:	689b      	ldr	r3, [r3, #8]
 800584c:	683a      	ldr	r2, [r7, #0]
 800584e:	605a      	str	r2, [r3, #4]
	pxIndex->pxPrevious = pxNewListItem;
 8005850:	68fb      	ldr	r3, [r7, #12]
 8005852:	683a      	ldr	r2, [r7, #0]
 8005854:	609a      	str	r2, [r3, #8]

	/* Remember which list the item is in. */
	pxNewListItem->pxContainer = pxList;
 8005856:	683b      	ldr	r3, [r7, #0]
 8005858:	687a      	ldr	r2, [r7, #4]
 800585a:	611a      	str	r2, [r3, #16]

	( pxList->uxNumberOfItems )++;
 800585c:	687b      	ldr	r3, [r7, #4]
 800585e:	681b      	ldr	r3, [r3, #0]
 8005860:	1c5a      	adds	r2, r3, #1
 8005862:	687b      	ldr	r3, [r7, #4]
 8005864:	601a      	str	r2, [r3, #0]
}
 8005866:	bf00      	nop
 8005868:	3714      	adds	r7, #20
 800586a:	46bd      	mov	sp, r7
 800586c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005870:	4770      	bx	lr

08005872 <vListInsert>:
/*-----------------------------------------------------------*/

void vListInsert( List_t * const pxList, ListItem_t * const pxNewListItem )
{
 8005872:	b480      	push	{r7}
 8005874:	b085      	sub	sp, #20
 8005876:	af00      	add	r7, sp, #0
 8005878:	6078      	str	r0, [r7, #4]
 800587a:	6039      	str	r1, [r7, #0]
ListItem_t *pxIterator;
const TickType_t xValueOfInsertion = pxNewListItem->xItemValue;
 800587c:	683b      	ldr	r3, [r7, #0]
 800587e:	681b      	ldr	r3, [r3, #0]
 8005880:	60bb      	str	r3, [r7, #8]
	new list item should be placed after it.  This ensures that TCBs which are
	stored in ready lists (all of which have the same xItemValue value) get a
	share of the CPU.  However, if the xItemValue is the same as the back marker
	the iteration loop below will not end.  Therefore the value is checked
	first, and the algorithm slightly modified if necessary. */
	if( xValueOfInsertion == portMAX_DELAY )
 8005882:	68bb      	ldr	r3, [r7, #8]
 8005884:	f1b3 3fff 	cmp.w	r3, #4294967295
 8005888:	d103      	bne.n	8005892 <vListInsert+0x20>
	{
		pxIterator = pxList->xListEnd.pxPrevious;
 800588a:	687b      	ldr	r3, [r7, #4]
 800588c:	691b      	ldr	r3, [r3, #16]
 800588e:	60fb      	str	r3, [r7, #12]
 8005890:	e00c      	b.n	80058ac <vListInsert+0x3a>
			4) Using a queue or semaphore before it has been initialised or
			   before the scheduler has been started (are interrupts firing
			   before vTaskStartScheduler() has been called?).
		**********************************************************************/

		for( pxIterator = ( ListItem_t * ) &( pxList->xListEnd ); pxIterator->pxNext->xItemValue <= xValueOfInsertion; pxIterator = pxIterator->pxNext ) /*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. *//*lint !e440 The iterator moves to a different value, not xValueOfInsertion. */
 8005892:	687b      	ldr	r3, [r7, #4]
 8005894:	3308      	adds	r3, #8
 8005896:	60fb      	str	r3, [r7, #12]
 8005898:	e002      	b.n	80058a0 <vListInsert+0x2e>
 800589a:	68fb      	ldr	r3, [r7, #12]
 800589c:	685b      	ldr	r3, [r3, #4]
 800589e:	60fb      	str	r3, [r7, #12]
 80058a0:	68fb      	ldr	r3, [r7, #12]
 80058a2:	685b      	ldr	r3, [r3, #4]
 80058a4:	681b      	ldr	r3, [r3, #0]
 80058a6:	68ba      	ldr	r2, [r7, #8]
 80058a8:	429a      	cmp	r2, r3
 80058aa:	d2f6      	bcs.n	800589a <vListInsert+0x28>
			/* There is nothing to do here, just iterating to the wanted
			insertion position. */
		}
	}

	pxNewListItem->pxNext = pxIterator->pxNext;
 80058ac:	68fb      	ldr	r3, [r7, #12]
 80058ae:	685a      	ldr	r2, [r3, #4]
 80058b0:	683b      	ldr	r3, [r7, #0]
 80058b2:	605a      	str	r2, [r3, #4]
	pxNewListItem->pxNext->pxPrevious = pxNewListItem;
 80058b4:	683b      	ldr	r3, [r7, #0]
 80058b6:	685b      	ldr	r3, [r3, #4]
 80058b8:	683a      	ldr	r2, [r7, #0]
 80058ba:	609a      	str	r2, [r3, #8]
	pxNewListItem->pxPrevious = pxIterator;
 80058bc:	683b      	ldr	r3, [r7, #0]
 80058be:	68fa      	ldr	r2, [r7, #12]
 80058c0:	609a      	str	r2, [r3, #8]
	pxIterator->pxNext = pxNewListItem;
 80058c2:	68fb      	ldr	r3, [r7, #12]
 80058c4:	683a      	ldr	r2, [r7, #0]
 80058c6:	605a      	str	r2, [r3, #4]

	/* Remember which list the item is in.  This allows fast removal of the
	item later. */
	pxNewListItem->pxContainer = pxList;
 80058c8:	683b      	ldr	r3, [r7, #0]
 80058ca:	687a      	ldr	r2, [r7, #4]
 80058cc:	611a      	str	r2, [r3, #16]

	( pxList->uxNumberOfItems )++;
 80058ce:	687b      	ldr	r3, [r7, #4]
 80058d0:	681b      	ldr	r3, [r3, #0]
 80058d2:	1c5a      	adds	r2, r3, #1
 80058d4:	687b      	ldr	r3, [r7, #4]
 80058d6:	601a      	str	r2, [r3, #0]
}
 80058d8:	bf00      	nop
 80058da:	3714      	adds	r7, #20
 80058dc:	46bd      	mov	sp, r7
 80058de:	f85d 7b04 	ldr.w	r7, [sp], #4
 80058e2:	4770      	bx	lr

080058e4 <uxListRemove>:
/*-----------------------------------------------------------*/

UBaseType_t uxListRemove( ListItem_t * const pxItemToRemove )
{
 80058e4:	b480      	push	{r7}
 80058e6:	b085      	sub	sp, #20
 80058e8:	af00      	add	r7, sp, #0
 80058ea:	6078      	str	r0, [r7, #4]
/* The list item knows which list it is in.  Obtain the list from the list
item. */
List_t * const pxList = pxItemToRemove->pxContainer;
 80058ec:	687b      	ldr	r3, [r7, #4]
 80058ee:	691b      	ldr	r3, [r3, #16]
 80058f0:	60fb      	str	r3, [r7, #12]

	pxItemToRemove->pxNext->pxPrevious = pxItemToRemove->pxPrevious;
 80058f2:	687b      	ldr	r3, [r7, #4]
 80058f4:	685b      	ldr	r3, [r3, #4]
 80058f6:	687a      	ldr	r2, [r7, #4]
 80058f8:	6892      	ldr	r2, [r2, #8]
 80058fa:	609a      	str	r2, [r3, #8]
	pxItemToRemove->pxPrevious->pxNext = pxItemToRemove->pxNext;
 80058fc:	687b      	ldr	r3, [r7, #4]
 80058fe:	689b      	ldr	r3, [r3, #8]
 8005900:	687a      	ldr	r2, [r7, #4]
 8005902:	6852      	ldr	r2, [r2, #4]
 8005904:	605a      	str	r2, [r3, #4]

	/* Only used during decision coverage testing. */
	mtCOVERAGE_TEST_DELAY();

	/* Make sure the index is left pointing to a valid item. */
	if( pxList->pxIndex == pxItemToRemove )
 8005906:	68fb      	ldr	r3, [r7, #12]
 8005908:	685b      	ldr	r3, [r3, #4]
 800590a:	687a      	ldr	r2, [r7, #4]
 800590c:	429a      	cmp	r2, r3
 800590e:	d103      	bne.n	8005918 <uxListRemove+0x34>
	{
		pxList->pxIndex = pxItemToRemove->pxPrevious;
 8005910:	687b      	ldr	r3, [r7, #4]
 8005912:	689a      	ldr	r2, [r3, #8]
 8005914:	68fb      	ldr	r3, [r7, #12]
 8005916:	605a      	str	r2, [r3, #4]
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	pxItemToRemove->pxContainer = NULL;
 8005918:	687b      	ldr	r3, [r7, #4]
 800591a:	2200      	movs	r2, #0
 800591c:	611a      	str	r2, [r3, #16]
	( pxList->uxNumberOfItems )--;
 800591e:	68fb      	ldr	r3, [r7, #12]
 8005920:	681b      	ldr	r3, [r3, #0]
 8005922:	1e5a      	subs	r2, r3, #1
 8005924:	68fb      	ldr	r3, [r7, #12]
 8005926:	601a      	str	r2, [r3, #0]

	return pxList->uxNumberOfItems;
 8005928:	68fb      	ldr	r3, [r7, #12]
 800592a:	681b      	ldr	r3, [r3, #0]
}
 800592c:	4618      	mov	r0, r3
 800592e:	3714      	adds	r7, #20
 8005930:	46bd      	mov	sp, r7
 8005932:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005936:	4770      	bx	lr

08005938 <xQueueGenericReset>:
	}														\
	taskEXIT_CRITICAL()
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericReset( QueueHandle_t xQueue, BaseType_t xNewQueue )
{
 8005938:	b580      	push	{r7, lr}
 800593a:	b084      	sub	sp, #16
 800593c:	af00      	add	r7, sp, #0
 800593e:	6078      	str	r0, [r7, #4]
 8005940:	6039      	str	r1, [r7, #0]
Queue_t * const pxQueue = xQueue;
 8005942:	687b      	ldr	r3, [r7, #4]
 8005944:	60fb      	str	r3, [r7, #12]

	configASSERT( pxQueue );
 8005946:	68fb      	ldr	r3, [r7, #12]
 8005948:	2b00      	cmp	r3, #0
 800594a:	d10c      	bne.n	8005966 <xQueueGenericReset+0x2e>

portFORCE_INLINE static void vPortRaiseBASEPRI( void )
{
uint32_t ulNewBASEPRI;

	__asm volatile
 800594c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005950:	b672      	cpsid	i
 8005952:	f383 8811 	msr	BASEPRI, r3
 8005956:	f3bf 8f6f 	isb	sy
 800595a:	f3bf 8f4f 	dsb	sy
 800595e:	b662      	cpsie	i
 8005960:	60bb      	str	r3, [r7, #8]
		"	isb														\n" \
		"	dsb														\n" \
		"	cpsie i													\n" \
		:"=r" (ulNewBASEPRI) : "i" ( configMAX_SYSCALL_INTERRUPT_PRIORITY ) : "memory"
	);
}
 8005962:	bf00      	nop
 8005964:	e7fe      	b.n	8005964 <xQueueGenericReset+0x2c>

	taskENTER_CRITICAL();
 8005966:	f002 fc01 	bl	800816c <vPortEnterCritical>
	{
		pxQueue->u.xQueue.pcTail = pxQueue->pcHead + ( pxQueue->uxLength * pxQueue->uxItemSize ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 800596a:	68fb      	ldr	r3, [r7, #12]
 800596c:	681a      	ldr	r2, [r3, #0]
 800596e:	68fb      	ldr	r3, [r7, #12]
 8005970:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8005972:	68f9      	ldr	r1, [r7, #12]
 8005974:	6c09      	ldr	r1, [r1, #64]	; 0x40
 8005976:	fb01 f303 	mul.w	r3, r1, r3
 800597a:	441a      	add	r2, r3
 800597c:	68fb      	ldr	r3, [r7, #12]
 800597e:	609a      	str	r2, [r3, #8]
		pxQueue->uxMessagesWaiting = ( UBaseType_t ) 0U;
 8005980:	68fb      	ldr	r3, [r7, #12]
 8005982:	2200      	movs	r2, #0
 8005984:	639a      	str	r2, [r3, #56]	; 0x38
		pxQueue->pcWriteTo = pxQueue->pcHead;
 8005986:	68fb      	ldr	r3, [r7, #12]
 8005988:	681a      	ldr	r2, [r3, #0]
 800598a:	68fb      	ldr	r3, [r7, #12]
 800598c:	605a      	str	r2, [r3, #4]
		pxQueue->u.xQueue.pcReadFrom = pxQueue->pcHead + ( ( pxQueue->uxLength - 1U ) * pxQueue->uxItemSize ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 800598e:	68fb      	ldr	r3, [r7, #12]
 8005990:	681a      	ldr	r2, [r3, #0]
 8005992:	68fb      	ldr	r3, [r7, #12]
 8005994:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8005996:	3b01      	subs	r3, #1
 8005998:	68f9      	ldr	r1, [r7, #12]
 800599a:	6c09      	ldr	r1, [r1, #64]	; 0x40
 800599c:	fb01 f303 	mul.w	r3, r1, r3
 80059a0:	441a      	add	r2, r3
 80059a2:	68fb      	ldr	r3, [r7, #12]
 80059a4:	60da      	str	r2, [r3, #12]
		pxQueue->cRxLock = queueUNLOCKED;
 80059a6:	68fb      	ldr	r3, [r7, #12]
 80059a8:	22ff      	movs	r2, #255	; 0xff
 80059aa:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
		pxQueue->cTxLock = queueUNLOCKED;
 80059ae:	68fb      	ldr	r3, [r7, #12]
 80059b0:	22ff      	movs	r2, #255	; 0xff
 80059b2:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

		if( xNewQueue == pdFALSE )
 80059b6:	683b      	ldr	r3, [r7, #0]
 80059b8:	2b00      	cmp	r3, #0
 80059ba:	d114      	bne.n	80059e6 <xQueueGenericReset+0xae>
			/* If there are tasks blocked waiting to read from the queue, then
			the tasks will remain blocked as after this function exits the queue
			will still be empty.  If there are tasks blocked waiting to write to
			the queue, then one should be unblocked as after this function exits
			it will be possible to write to it. */
			if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 80059bc:	68fb      	ldr	r3, [r7, #12]
 80059be:	691b      	ldr	r3, [r3, #16]
 80059c0:	2b00      	cmp	r3, #0
 80059c2:	d01a      	beq.n	80059fa <xQueueGenericReset+0xc2>
			{
				if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 80059c4:	68fb      	ldr	r3, [r7, #12]
 80059c6:	3310      	adds	r3, #16
 80059c8:	4618      	mov	r0, r3
 80059ca:	f001 fbb3 	bl	8007134 <xTaskRemoveFromEventList>
 80059ce:	4603      	mov	r3, r0
 80059d0:	2b00      	cmp	r3, #0
 80059d2:	d012      	beq.n	80059fa <xQueueGenericReset+0xc2>
				{
					queueYIELD_IF_USING_PREEMPTION();
 80059d4:	4b0c      	ldr	r3, [pc, #48]	; (8005a08 <xQueueGenericReset+0xd0>)
 80059d6:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 80059da:	601a      	str	r2, [r3, #0]
 80059dc:	f3bf 8f4f 	dsb	sy
 80059e0:	f3bf 8f6f 	isb	sy
 80059e4:	e009      	b.n	80059fa <xQueueGenericReset+0xc2>
			}
		}
		else
		{
			/* Ensure the event queues start in the correct state. */
			vListInitialise( &( pxQueue->xTasksWaitingToSend ) );
 80059e6:	68fb      	ldr	r3, [r7, #12]
 80059e8:	3310      	adds	r3, #16
 80059ea:	4618      	mov	r0, r3
 80059ec:	f7ff fef0 	bl	80057d0 <vListInitialise>
			vListInitialise( &( pxQueue->xTasksWaitingToReceive ) );
 80059f0:	68fb      	ldr	r3, [r7, #12]
 80059f2:	3324      	adds	r3, #36	; 0x24
 80059f4:	4618      	mov	r0, r3
 80059f6:	f7ff feeb 	bl	80057d0 <vListInitialise>
		}
	}
	taskEXIT_CRITICAL();
 80059fa:	f002 fbeb 	bl	80081d4 <vPortExitCritical>

	/* A value is returned for calling semantic consistency with previous
	versions. */
	return pdPASS;
 80059fe:	2301      	movs	r3, #1
}
 8005a00:	4618      	mov	r0, r3
 8005a02:	3710      	adds	r7, #16
 8005a04:	46bd      	mov	sp, r7
 8005a06:	bd80      	pop	{r7, pc}
 8005a08:	e000ed04 	.word	0xe000ed04

08005a0c <xQueueGenericCreateStatic>:
/*-----------------------------------------------------------*/

#if( configSUPPORT_STATIC_ALLOCATION == 1 )

	QueueHandle_t xQueueGenericCreateStatic( const UBaseType_t uxQueueLength, const UBaseType_t uxItemSize, uint8_t *pucQueueStorage, StaticQueue_t *pxStaticQueue, const uint8_t ucQueueType )
	{
 8005a0c:	b580      	push	{r7, lr}
 8005a0e:	b08e      	sub	sp, #56	; 0x38
 8005a10:	af02      	add	r7, sp, #8
 8005a12:	60f8      	str	r0, [r7, #12]
 8005a14:	60b9      	str	r1, [r7, #8]
 8005a16:	607a      	str	r2, [r7, #4]
 8005a18:	603b      	str	r3, [r7, #0]
	Queue_t *pxNewQueue;

		configASSERT( uxQueueLength > ( UBaseType_t ) 0 );
 8005a1a:	68fb      	ldr	r3, [r7, #12]
 8005a1c:	2b00      	cmp	r3, #0
 8005a1e:	d10c      	bne.n	8005a3a <xQueueGenericCreateStatic+0x2e>
	__asm volatile
 8005a20:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005a24:	b672      	cpsid	i
 8005a26:	f383 8811 	msr	BASEPRI, r3
 8005a2a:	f3bf 8f6f 	isb	sy
 8005a2e:	f3bf 8f4f 	dsb	sy
 8005a32:	b662      	cpsie	i
 8005a34:	62bb      	str	r3, [r7, #40]	; 0x28
}
 8005a36:	bf00      	nop
 8005a38:	e7fe      	b.n	8005a38 <xQueueGenericCreateStatic+0x2c>

		/* The StaticQueue_t structure and the queue storage area must be
		supplied. */
		configASSERT( pxStaticQueue != NULL );
 8005a3a:	683b      	ldr	r3, [r7, #0]
 8005a3c:	2b00      	cmp	r3, #0
 8005a3e:	d10c      	bne.n	8005a5a <xQueueGenericCreateStatic+0x4e>
	__asm volatile
 8005a40:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005a44:	b672      	cpsid	i
 8005a46:	f383 8811 	msr	BASEPRI, r3
 8005a4a:	f3bf 8f6f 	isb	sy
 8005a4e:	f3bf 8f4f 	dsb	sy
 8005a52:	b662      	cpsie	i
 8005a54:	627b      	str	r3, [r7, #36]	; 0x24
}
 8005a56:	bf00      	nop
 8005a58:	e7fe      	b.n	8005a58 <xQueueGenericCreateStatic+0x4c>

		/* A queue storage area should be provided if the item size is not 0, and
		should not be provided if the item size is 0. */
		configASSERT( !( ( pucQueueStorage != NULL ) && ( uxItemSize == 0 ) ) );
 8005a5a:	687b      	ldr	r3, [r7, #4]
 8005a5c:	2b00      	cmp	r3, #0
 8005a5e:	d002      	beq.n	8005a66 <xQueueGenericCreateStatic+0x5a>
 8005a60:	68bb      	ldr	r3, [r7, #8]
 8005a62:	2b00      	cmp	r3, #0
 8005a64:	d001      	beq.n	8005a6a <xQueueGenericCreateStatic+0x5e>
 8005a66:	2301      	movs	r3, #1
 8005a68:	e000      	b.n	8005a6c <xQueueGenericCreateStatic+0x60>
 8005a6a:	2300      	movs	r3, #0
 8005a6c:	2b00      	cmp	r3, #0
 8005a6e:	d10c      	bne.n	8005a8a <xQueueGenericCreateStatic+0x7e>
	__asm volatile
 8005a70:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005a74:	b672      	cpsid	i
 8005a76:	f383 8811 	msr	BASEPRI, r3
 8005a7a:	f3bf 8f6f 	isb	sy
 8005a7e:	f3bf 8f4f 	dsb	sy
 8005a82:	b662      	cpsie	i
 8005a84:	623b      	str	r3, [r7, #32]
}
 8005a86:	bf00      	nop
 8005a88:	e7fe      	b.n	8005a88 <xQueueGenericCreateStatic+0x7c>
		configASSERT( !( ( pucQueueStorage == NULL ) && ( uxItemSize != 0 ) ) );
 8005a8a:	687b      	ldr	r3, [r7, #4]
 8005a8c:	2b00      	cmp	r3, #0
 8005a8e:	d102      	bne.n	8005a96 <xQueueGenericCreateStatic+0x8a>
 8005a90:	68bb      	ldr	r3, [r7, #8]
 8005a92:	2b00      	cmp	r3, #0
 8005a94:	d101      	bne.n	8005a9a <xQueueGenericCreateStatic+0x8e>
 8005a96:	2301      	movs	r3, #1
 8005a98:	e000      	b.n	8005a9c <xQueueGenericCreateStatic+0x90>
 8005a9a:	2300      	movs	r3, #0
 8005a9c:	2b00      	cmp	r3, #0
 8005a9e:	d10c      	bne.n	8005aba <xQueueGenericCreateStatic+0xae>
	__asm volatile
 8005aa0:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005aa4:	b672      	cpsid	i
 8005aa6:	f383 8811 	msr	BASEPRI, r3
 8005aaa:	f3bf 8f6f 	isb	sy
 8005aae:	f3bf 8f4f 	dsb	sy
 8005ab2:	b662      	cpsie	i
 8005ab4:	61fb      	str	r3, [r7, #28]
}
 8005ab6:	bf00      	nop
 8005ab8:	e7fe      	b.n	8005ab8 <xQueueGenericCreateStatic+0xac>
		#if( configASSERT_DEFINED == 1 )
		{
			/* Sanity check that the size of the structure used to declare a
			variable of type StaticQueue_t or StaticSemaphore_t equals the size of
			the real queue and semaphore structures. */
			volatile size_t xSize = sizeof( StaticQueue_t );
 8005aba:	2350      	movs	r3, #80	; 0x50
 8005abc:	617b      	str	r3, [r7, #20]
			configASSERT( xSize == sizeof( Queue_t ) );
 8005abe:	697b      	ldr	r3, [r7, #20]
 8005ac0:	2b50      	cmp	r3, #80	; 0x50
 8005ac2:	d00c      	beq.n	8005ade <xQueueGenericCreateStatic+0xd2>
	__asm volatile
 8005ac4:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005ac8:	b672      	cpsid	i
 8005aca:	f383 8811 	msr	BASEPRI, r3
 8005ace:	f3bf 8f6f 	isb	sy
 8005ad2:	f3bf 8f4f 	dsb	sy
 8005ad6:	b662      	cpsie	i
 8005ad8:	61bb      	str	r3, [r7, #24]
}
 8005ada:	bf00      	nop
 8005adc:	e7fe      	b.n	8005adc <xQueueGenericCreateStatic+0xd0>
			( void ) xSize; /* Keeps lint quiet when configASSERT() is not defined. */
 8005ade:	697b      	ldr	r3, [r7, #20]
		#endif /* configASSERT_DEFINED */

		/* The address of a statically allocated queue was passed in, use it.
		The address of a statically allocated storage area was also passed in
		but is already set. */
		pxNewQueue = ( Queue_t * ) pxStaticQueue; /*lint !e740 !e9087 Unusual cast is ok as the structures are designed to have the same alignment, and the size is checked by an assert. */
 8005ae0:	683b      	ldr	r3, [r7, #0]
 8005ae2:	62fb      	str	r3, [r7, #44]	; 0x2c

		if( pxNewQueue != NULL )
 8005ae4:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8005ae6:	2b00      	cmp	r3, #0
 8005ae8:	d00d      	beq.n	8005b06 <xQueueGenericCreateStatic+0xfa>
			#if( configSUPPORT_DYNAMIC_ALLOCATION == 1 )
			{
				/* Queues can be allocated wither statically or dynamically, so
				note this queue was allocated statically in case the queue is
				later deleted. */
				pxNewQueue->ucStaticallyAllocated = pdTRUE;
 8005aea:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8005aec:	2201      	movs	r2, #1
 8005aee:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
			}
			#endif /* configSUPPORT_DYNAMIC_ALLOCATION */

			prvInitialiseNewQueue( uxQueueLength, uxItemSize, pucQueueStorage, ucQueueType, pxNewQueue );
 8005af2:	f897 2038 	ldrb.w	r2, [r7, #56]	; 0x38
 8005af6:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8005af8:	9300      	str	r3, [sp, #0]
 8005afa:	4613      	mov	r3, r2
 8005afc:	687a      	ldr	r2, [r7, #4]
 8005afe:	68b9      	ldr	r1, [r7, #8]
 8005b00:	68f8      	ldr	r0, [r7, #12]
 8005b02:	f000 f847 	bl	8005b94 <prvInitialiseNewQueue>
		{
			traceQUEUE_CREATE_FAILED( ucQueueType );
			mtCOVERAGE_TEST_MARKER();
		}

		return pxNewQueue;
 8005b06:	6afb      	ldr	r3, [r7, #44]	; 0x2c
	}
 8005b08:	4618      	mov	r0, r3
 8005b0a:	3730      	adds	r7, #48	; 0x30
 8005b0c:	46bd      	mov	sp, r7
 8005b0e:	bd80      	pop	{r7, pc}

08005b10 <xQueueGenericCreate>:
/*-----------------------------------------------------------*/

#if( configSUPPORT_DYNAMIC_ALLOCATION == 1 )

	QueueHandle_t xQueueGenericCreate( const UBaseType_t uxQueueLength, const UBaseType_t uxItemSize, const uint8_t ucQueueType )
	{
 8005b10:	b580      	push	{r7, lr}
 8005b12:	b08a      	sub	sp, #40	; 0x28
 8005b14:	af02      	add	r7, sp, #8
 8005b16:	60f8      	str	r0, [r7, #12]
 8005b18:	60b9      	str	r1, [r7, #8]
 8005b1a:	4613      	mov	r3, r2
 8005b1c:	71fb      	strb	r3, [r7, #7]
	Queue_t *pxNewQueue;
	size_t xQueueSizeInBytes;
	uint8_t *pucQueueStorage;

		configASSERT( uxQueueLength > ( UBaseType_t ) 0 );
 8005b1e:	68fb      	ldr	r3, [r7, #12]
 8005b20:	2b00      	cmp	r3, #0
 8005b22:	d10c      	bne.n	8005b3e <xQueueGenericCreate+0x2e>
	__asm volatile
 8005b24:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005b28:	b672      	cpsid	i
 8005b2a:	f383 8811 	msr	BASEPRI, r3
 8005b2e:	f3bf 8f6f 	isb	sy
 8005b32:	f3bf 8f4f 	dsb	sy
 8005b36:	b662      	cpsie	i
 8005b38:	613b      	str	r3, [r7, #16]
}
 8005b3a:	bf00      	nop
 8005b3c:	e7fe      	b.n	8005b3c <xQueueGenericCreate+0x2c>

		if( uxItemSize == ( UBaseType_t ) 0 )
 8005b3e:	68bb      	ldr	r3, [r7, #8]
 8005b40:	2b00      	cmp	r3, #0
 8005b42:	d102      	bne.n	8005b4a <xQueueGenericCreate+0x3a>
		{
			/* There is not going to be a queue storage area. */
			xQueueSizeInBytes = ( size_t ) 0;
 8005b44:	2300      	movs	r3, #0
 8005b46:	61fb      	str	r3, [r7, #28]
 8005b48:	e004      	b.n	8005b54 <xQueueGenericCreate+0x44>
		}
		else
		{
			/* Allocate enough space to hold the maximum number of items that
			can be in the queue at any time. */
			xQueueSizeInBytes = ( size_t ) ( uxQueueLength * uxItemSize ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8005b4a:	68fb      	ldr	r3, [r7, #12]
 8005b4c:	68ba      	ldr	r2, [r7, #8]
 8005b4e:	fb02 f303 	mul.w	r3, r2, r3
 8005b52:	61fb      	str	r3, [r7, #28]
		alignment requirements of the Queue_t structure - which in this case
		is an int8_t *.  Therefore, whenever the stack alignment requirements
		are greater than or equal to the pointer to char requirements the cast
		is safe.  In other cases alignment requirements are not strict (one or
		two bytes). */
		pxNewQueue = ( Queue_t * ) pvPortMalloc( sizeof( Queue_t ) + xQueueSizeInBytes ); /*lint !e9087 !e9079 see comment above. */
 8005b54:	69fb      	ldr	r3, [r7, #28]
 8005b56:	3350      	adds	r3, #80	; 0x50
 8005b58:	4618      	mov	r0, r3
 8005b5a:	f002 fc33 	bl	80083c4 <pvPortMalloc>
 8005b5e:	61b8      	str	r0, [r7, #24]

		if( pxNewQueue != NULL )
 8005b60:	69bb      	ldr	r3, [r7, #24]
 8005b62:	2b00      	cmp	r3, #0
 8005b64:	d011      	beq.n	8005b8a <xQueueGenericCreate+0x7a>
		{
			/* Jump past the queue structure to find the location of the queue
			storage area. */
			pucQueueStorage = ( uint8_t * ) pxNewQueue;
 8005b66:	69bb      	ldr	r3, [r7, #24]
 8005b68:	617b      	str	r3, [r7, #20]
			pucQueueStorage += sizeof( Queue_t ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 8005b6a:	697b      	ldr	r3, [r7, #20]
 8005b6c:	3350      	adds	r3, #80	; 0x50
 8005b6e:	617b      	str	r3, [r7, #20]
			#if( configSUPPORT_STATIC_ALLOCATION == 1 )
			{
				/* Queues can be created either statically or dynamically, so
				note this task was created dynamically in case it is later
				deleted. */
				pxNewQueue->ucStaticallyAllocated = pdFALSE;
 8005b70:	69bb      	ldr	r3, [r7, #24]
 8005b72:	2200      	movs	r2, #0
 8005b74:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
			}
			#endif /* configSUPPORT_STATIC_ALLOCATION */

			prvInitialiseNewQueue( uxQueueLength, uxItemSize, pucQueueStorage, ucQueueType, pxNewQueue );
 8005b78:	79fa      	ldrb	r2, [r7, #7]
 8005b7a:	69bb      	ldr	r3, [r7, #24]
 8005b7c:	9300      	str	r3, [sp, #0]
 8005b7e:	4613      	mov	r3, r2
 8005b80:	697a      	ldr	r2, [r7, #20]
 8005b82:	68b9      	ldr	r1, [r7, #8]
 8005b84:	68f8      	ldr	r0, [r7, #12]
 8005b86:	f000 f805 	bl	8005b94 <prvInitialiseNewQueue>
		{
			traceQUEUE_CREATE_FAILED( ucQueueType );
			mtCOVERAGE_TEST_MARKER();
		}

		return pxNewQueue;
 8005b8a:	69bb      	ldr	r3, [r7, #24]
	}
 8005b8c:	4618      	mov	r0, r3
 8005b8e:	3720      	adds	r7, #32
 8005b90:	46bd      	mov	sp, r7
 8005b92:	bd80      	pop	{r7, pc}

08005b94 <prvInitialiseNewQueue>:

#endif /* configSUPPORT_STATIC_ALLOCATION */
/*-----------------------------------------------------------*/

static void prvInitialiseNewQueue( const UBaseType_t uxQueueLength, const UBaseType_t uxItemSize, uint8_t *pucQueueStorage, const uint8_t ucQueueType, Queue_t *pxNewQueue )
{
 8005b94:	b580      	push	{r7, lr}
 8005b96:	b084      	sub	sp, #16
 8005b98:	af00      	add	r7, sp, #0
 8005b9a:	60f8      	str	r0, [r7, #12]
 8005b9c:	60b9      	str	r1, [r7, #8]
 8005b9e:	607a      	str	r2, [r7, #4]
 8005ba0:	70fb      	strb	r3, [r7, #3]
	/* Remove compiler warnings about unused parameters should
	configUSE_TRACE_FACILITY not be set to 1. */
	( void ) ucQueueType;

	if( uxItemSize == ( UBaseType_t ) 0 )
 8005ba2:	68bb      	ldr	r3, [r7, #8]
 8005ba4:	2b00      	cmp	r3, #0
 8005ba6:	d103      	bne.n	8005bb0 <prvInitialiseNewQueue+0x1c>
	{
		/* No RAM was allocated for the queue storage area, but PC head cannot
		be set to NULL because NULL is used as a key to say the queue is used as
		a mutex.  Therefore just set pcHead to point to the queue as a benign
		value that is known to be within the memory map. */
		pxNewQueue->pcHead = ( int8_t * ) pxNewQueue;
 8005ba8:	69bb      	ldr	r3, [r7, #24]
 8005baa:	69ba      	ldr	r2, [r7, #24]
 8005bac:	601a      	str	r2, [r3, #0]
 8005bae:	e002      	b.n	8005bb6 <prvInitialiseNewQueue+0x22>
	}
	else
	{
		/* Set the head to the start of the queue storage area. */
		pxNewQueue->pcHead = ( int8_t * ) pucQueueStorage;
 8005bb0:	69bb      	ldr	r3, [r7, #24]
 8005bb2:	687a      	ldr	r2, [r7, #4]
 8005bb4:	601a      	str	r2, [r3, #0]
	}

	/* Initialise the queue members as described where the queue type is
	defined. */
	pxNewQueue->uxLength = uxQueueLength;
 8005bb6:	69bb      	ldr	r3, [r7, #24]
 8005bb8:	68fa      	ldr	r2, [r7, #12]
 8005bba:	63da      	str	r2, [r3, #60]	; 0x3c
	pxNewQueue->uxItemSize = uxItemSize;
 8005bbc:	69bb      	ldr	r3, [r7, #24]
 8005bbe:	68ba      	ldr	r2, [r7, #8]
 8005bc0:	641a      	str	r2, [r3, #64]	; 0x40
	( void ) xQueueGenericReset( pxNewQueue, pdTRUE );
 8005bc2:	2101      	movs	r1, #1
 8005bc4:	69b8      	ldr	r0, [r7, #24]
 8005bc6:	f7ff feb7 	bl	8005938 <xQueueGenericReset>

	#if ( configUSE_TRACE_FACILITY == 1 )
	{
		pxNewQueue->ucQueueType = ucQueueType;
 8005bca:	69bb      	ldr	r3, [r7, #24]
 8005bcc:	78fa      	ldrb	r2, [r7, #3]
 8005bce:	f883 204c 	strb.w	r2, [r3, #76]	; 0x4c
		pxNewQueue->pxQueueSetContainer = NULL;
	}
	#endif /* configUSE_QUEUE_SETS */

	traceQUEUE_CREATE( pxNewQueue );
}
 8005bd2:	bf00      	nop
 8005bd4:	3710      	adds	r7, #16
 8005bd6:	46bd      	mov	sp, r7
 8005bd8:	bd80      	pop	{r7, pc}

08005bda <xQueueCreateCountingSemaphoreStatic>:
/*-----------------------------------------------------------*/

#if( ( configUSE_COUNTING_SEMAPHORES == 1 ) && ( configSUPPORT_STATIC_ALLOCATION == 1 ) )

	QueueHandle_t xQueueCreateCountingSemaphoreStatic( const UBaseType_t uxMaxCount, const UBaseType_t uxInitialCount, StaticQueue_t *pxStaticQueue )
	{
 8005bda:	b580      	push	{r7, lr}
 8005bdc:	b08a      	sub	sp, #40	; 0x28
 8005bde:	af02      	add	r7, sp, #8
 8005be0:	60f8      	str	r0, [r7, #12]
 8005be2:	60b9      	str	r1, [r7, #8]
 8005be4:	607a      	str	r2, [r7, #4]
	QueueHandle_t xHandle;

		configASSERT( uxMaxCount != 0 );
 8005be6:	68fb      	ldr	r3, [r7, #12]
 8005be8:	2b00      	cmp	r3, #0
 8005bea:	d10c      	bne.n	8005c06 <xQueueCreateCountingSemaphoreStatic+0x2c>
	__asm volatile
 8005bec:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005bf0:	b672      	cpsid	i
 8005bf2:	f383 8811 	msr	BASEPRI, r3
 8005bf6:	f3bf 8f6f 	isb	sy
 8005bfa:	f3bf 8f4f 	dsb	sy
 8005bfe:	b662      	cpsie	i
 8005c00:	61bb      	str	r3, [r7, #24]
}
 8005c02:	bf00      	nop
 8005c04:	e7fe      	b.n	8005c04 <xQueueCreateCountingSemaphoreStatic+0x2a>
		configASSERT( uxInitialCount <= uxMaxCount );
 8005c06:	68ba      	ldr	r2, [r7, #8]
 8005c08:	68fb      	ldr	r3, [r7, #12]
 8005c0a:	429a      	cmp	r2, r3
 8005c0c:	d90c      	bls.n	8005c28 <xQueueCreateCountingSemaphoreStatic+0x4e>
	__asm volatile
 8005c0e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005c12:	b672      	cpsid	i
 8005c14:	f383 8811 	msr	BASEPRI, r3
 8005c18:	f3bf 8f6f 	isb	sy
 8005c1c:	f3bf 8f4f 	dsb	sy
 8005c20:	b662      	cpsie	i
 8005c22:	617b      	str	r3, [r7, #20]
}
 8005c24:	bf00      	nop
 8005c26:	e7fe      	b.n	8005c26 <xQueueCreateCountingSemaphoreStatic+0x4c>

		xHandle = xQueueGenericCreateStatic( uxMaxCount, queueSEMAPHORE_QUEUE_ITEM_LENGTH, NULL, pxStaticQueue, queueQUEUE_TYPE_COUNTING_SEMAPHORE );
 8005c28:	2302      	movs	r3, #2
 8005c2a:	9300      	str	r3, [sp, #0]
 8005c2c:	687b      	ldr	r3, [r7, #4]
 8005c2e:	2200      	movs	r2, #0
 8005c30:	2100      	movs	r1, #0
 8005c32:	68f8      	ldr	r0, [r7, #12]
 8005c34:	f7ff feea 	bl	8005a0c <xQueueGenericCreateStatic>
 8005c38:	61f8      	str	r0, [r7, #28]

		if( xHandle != NULL )
 8005c3a:	69fb      	ldr	r3, [r7, #28]
 8005c3c:	2b00      	cmp	r3, #0
 8005c3e:	d002      	beq.n	8005c46 <xQueueCreateCountingSemaphoreStatic+0x6c>
		{
			( ( Queue_t * ) xHandle )->uxMessagesWaiting = uxInitialCount;
 8005c40:	69fb      	ldr	r3, [r7, #28]
 8005c42:	68ba      	ldr	r2, [r7, #8]
 8005c44:	639a      	str	r2, [r3, #56]	; 0x38
		else
		{
			traceCREATE_COUNTING_SEMAPHORE_FAILED();
		}

		return xHandle;
 8005c46:	69fb      	ldr	r3, [r7, #28]
	}
 8005c48:	4618      	mov	r0, r3
 8005c4a:	3720      	adds	r7, #32
 8005c4c:	46bd      	mov	sp, r7
 8005c4e:	bd80      	pop	{r7, pc}

08005c50 <xQueueCreateCountingSemaphore>:
/*-----------------------------------------------------------*/

#if( ( configUSE_COUNTING_SEMAPHORES == 1 ) && ( configSUPPORT_DYNAMIC_ALLOCATION == 1 ) )

	QueueHandle_t xQueueCreateCountingSemaphore( const UBaseType_t uxMaxCount, const UBaseType_t uxInitialCount )
	{
 8005c50:	b580      	push	{r7, lr}
 8005c52:	b086      	sub	sp, #24
 8005c54:	af00      	add	r7, sp, #0
 8005c56:	6078      	str	r0, [r7, #4]
 8005c58:	6039      	str	r1, [r7, #0]
	QueueHandle_t xHandle;

		configASSERT( uxMaxCount != 0 );
 8005c5a:	687b      	ldr	r3, [r7, #4]
 8005c5c:	2b00      	cmp	r3, #0
 8005c5e:	d10c      	bne.n	8005c7a <xQueueCreateCountingSemaphore+0x2a>
	__asm volatile
 8005c60:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005c64:	b672      	cpsid	i
 8005c66:	f383 8811 	msr	BASEPRI, r3
 8005c6a:	f3bf 8f6f 	isb	sy
 8005c6e:	f3bf 8f4f 	dsb	sy
 8005c72:	b662      	cpsie	i
 8005c74:	613b      	str	r3, [r7, #16]
}
 8005c76:	bf00      	nop
 8005c78:	e7fe      	b.n	8005c78 <xQueueCreateCountingSemaphore+0x28>
		configASSERT( uxInitialCount <= uxMaxCount );
 8005c7a:	683a      	ldr	r2, [r7, #0]
 8005c7c:	687b      	ldr	r3, [r7, #4]
 8005c7e:	429a      	cmp	r2, r3
 8005c80:	d90c      	bls.n	8005c9c <xQueueCreateCountingSemaphore+0x4c>
	__asm volatile
 8005c82:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005c86:	b672      	cpsid	i
 8005c88:	f383 8811 	msr	BASEPRI, r3
 8005c8c:	f3bf 8f6f 	isb	sy
 8005c90:	f3bf 8f4f 	dsb	sy
 8005c94:	b662      	cpsie	i
 8005c96:	60fb      	str	r3, [r7, #12]
}
 8005c98:	bf00      	nop
 8005c9a:	e7fe      	b.n	8005c9a <xQueueCreateCountingSemaphore+0x4a>

		xHandle = xQueueGenericCreate( uxMaxCount, queueSEMAPHORE_QUEUE_ITEM_LENGTH, queueQUEUE_TYPE_COUNTING_SEMAPHORE );
 8005c9c:	2202      	movs	r2, #2
 8005c9e:	2100      	movs	r1, #0
 8005ca0:	6878      	ldr	r0, [r7, #4]
 8005ca2:	f7ff ff35 	bl	8005b10 <xQueueGenericCreate>
 8005ca6:	6178      	str	r0, [r7, #20]

		if( xHandle != NULL )
 8005ca8:	697b      	ldr	r3, [r7, #20]
 8005caa:	2b00      	cmp	r3, #0
 8005cac:	d002      	beq.n	8005cb4 <xQueueCreateCountingSemaphore+0x64>
		{
			( ( Queue_t * ) xHandle )->uxMessagesWaiting = uxInitialCount;
 8005cae:	697b      	ldr	r3, [r7, #20]
 8005cb0:	683a      	ldr	r2, [r7, #0]
 8005cb2:	639a      	str	r2, [r3, #56]	; 0x38
		else
		{
			traceCREATE_COUNTING_SEMAPHORE_FAILED();
		}

		return xHandle;
 8005cb4:	697b      	ldr	r3, [r7, #20]
	}
 8005cb6:	4618      	mov	r0, r3
 8005cb8:	3718      	adds	r7, #24
 8005cba:	46bd      	mov	sp, r7
 8005cbc:	bd80      	pop	{r7, pc}
	...

08005cc0 <xQueueGenericSend>:

#endif /* ( ( configUSE_COUNTING_SEMAPHORES == 1 ) && ( configSUPPORT_DYNAMIC_ALLOCATION == 1 ) ) */
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericSend( QueueHandle_t xQueue, const void * const pvItemToQueue, TickType_t xTicksToWait, const BaseType_t xCopyPosition )
{
 8005cc0:	b580      	push	{r7, lr}
 8005cc2:	b08e      	sub	sp, #56	; 0x38
 8005cc4:	af00      	add	r7, sp, #0
 8005cc6:	60f8      	str	r0, [r7, #12]
 8005cc8:	60b9      	str	r1, [r7, #8]
 8005cca:	607a      	str	r2, [r7, #4]
 8005ccc:	603b      	str	r3, [r7, #0]
BaseType_t xEntryTimeSet = pdFALSE, xYieldRequired;
 8005cce:	2300      	movs	r3, #0
 8005cd0:	637b      	str	r3, [r7, #52]	; 0x34
TimeOut_t xTimeOut;
Queue_t * const pxQueue = xQueue;
 8005cd2:	68fb      	ldr	r3, [r7, #12]
 8005cd4:	633b      	str	r3, [r7, #48]	; 0x30

	configASSERT( pxQueue );
 8005cd6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005cd8:	2b00      	cmp	r3, #0
 8005cda:	d10c      	bne.n	8005cf6 <xQueueGenericSend+0x36>
	__asm volatile
 8005cdc:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005ce0:	b672      	cpsid	i
 8005ce2:	f383 8811 	msr	BASEPRI, r3
 8005ce6:	f3bf 8f6f 	isb	sy
 8005cea:	f3bf 8f4f 	dsb	sy
 8005cee:	b662      	cpsie	i
 8005cf0:	62bb      	str	r3, [r7, #40]	; 0x28
}
 8005cf2:	bf00      	nop
 8005cf4:	e7fe      	b.n	8005cf4 <xQueueGenericSend+0x34>
	configASSERT( !( ( pvItemToQueue == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 8005cf6:	68bb      	ldr	r3, [r7, #8]
 8005cf8:	2b00      	cmp	r3, #0
 8005cfa:	d103      	bne.n	8005d04 <xQueueGenericSend+0x44>
 8005cfc:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005cfe:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005d00:	2b00      	cmp	r3, #0
 8005d02:	d101      	bne.n	8005d08 <xQueueGenericSend+0x48>
 8005d04:	2301      	movs	r3, #1
 8005d06:	e000      	b.n	8005d0a <xQueueGenericSend+0x4a>
 8005d08:	2300      	movs	r3, #0
 8005d0a:	2b00      	cmp	r3, #0
 8005d0c:	d10c      	bne.n	8005d28 <xQueueGenericSend+0x68>
	__asm volatile
 8005d0e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005d12:	b672      	cpsid	i
 8005d14:	f383 8811 	msr	BASEPRI, r3
 8005d18:	f3bf 8f6f 	isb	sy
 8005d1c:	f3bf 8f4f 	dsb	sy
 8005d20:	b662      	cpsie	i
 8005d22:	627b      	str	r3, [r7, #36]	; 0x24
}
 8005d24:	bf00      	nop
 8005d26:	e7fe      	b.n	8005d26 <xQueueGenericSend+0x66>
	configASSERT( !( ( xCopyPosition == queueOVERWRITE ) && ( pxQueue->uxLength != 1 ) ) );
 8005d28:	683b      	ldr	r3, [r7, #0]
 8005d2a:	2b02      	cmp	r3, #2
 8005d2c:	d103      	bne.n	8005d36 <xQueueGenericSend+0x76>
 8005d2e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005d30:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8005d32:	2b01      	cmp	r3, #1
 8005d34:	d101      	bne.n	8005d3a <xQueueGenericSend+0x7a>
 8005d36:	2301      	movs	r3, #1
 8005d38:	e000      	b.n	8005d3c <xQueueGenericSend+0x7c>
 8005d3a:	2300      	movs	r3, #0
 8005d3c:	2b00      	cmp	r3, #0
 8005d3e:	d10c      	bne.n	8005d5a <xQueueGenericSend+0x9a>
	__asm volatile
 8005d40:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005d44:	b672      	cpsid	i
 8005d46:	f383 8811 	msr	BASEPRI, r3
 8005d4a:	f3bf 8f6f 	isb	sy
 8005d4e:	f3bf 8f4f 	dsb	sy
 8005d52:	b662      	cpsie	i
 8005d54:	623b      	str	r3, [r7, #32]
}
 8005d56:	bf00      	nop
 8005d58:	e7fe      	b.n	8005d58 <xQueueGenericSend+0x98>
	#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )
	{
		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 8005d5a:	f001 fbb7 	bl	80074cc <xTaskGetSchedulerState>
 8005d5e:	4603      	mov	r3, r0
 8005d60:	2b00      	cmp	r3, #0
 8005d62:	d102      	bne.n	8005d6a <xQueueGenericSend+0xaa>
 8005d64:	687b      	ldr	r3, [r7, #4]
 8005d66:	2b00      	cmp	r3, #0
 8005d68:	d101      	bne.n	8005d6e <xQueueGenericSend+0xae>
 8005d6a:	2301      	movs	r3, #1
 8005d6c:	e000      	b.n	8005d70 <xQueueGenericSend+0xb0>
 8005d6e:	2300      	movs	r3, #0
 8005d70:	2b00      	cmp	r3, #0
 8005d72:	d10c      	bne.n	8005d8e <xQueueGenericSend+0xce>
	__asm volatile
 8005d74:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005d78:	b672      	cpsid	i
 8005d7a:	f383 8811 	msr	BASEPRI, r3
 8005d7e:	f3bf 8f6f 	isb	sy
 8005d82:	f3bf 8f4f 	dsb	sy
 8005d86:	b662      	cpsie	i
 8005d88:	61fb      	str	r3, [r7, #28]
}
 8005d8a:	bf00      	nop
 8005d8c:	e7fe      	b.n	8005d8c <xQueueGenericSend+0xcc>
	/*lint -save -e904 This function relaxes the coding standard somewhat to
	allow return statements within the function itself.  This is done in the
	interest of execution time efficiency. */
	for( ;; )
	{
		taskENTER_CRITICAL();
 8005d8e:	f002 f9ed 	bl	800816c <vPortEnterCritical>
		{
			/* Is there room on the queue now?  The running task must be the
			highest priority task wanting to access the queue.  If the head item
			in the queue is to be overwritten then it does not matter if the
			queue is full. */
			if( ( pxQueue->uxMessagesWaiting < pxQueue->uxLength ) || ( xCopyPosition == queueOVERWRITE ) )
 8005d92:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005d94:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8005d96:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005d98:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8005d9a:	429a      	cmp	r2, r3
 8005d9c:	d302      	bcc.n	8005da4 <xQueueGenericSend+0xe4>
 8005d9e:	683b      	ldr	r3, [r7, #0]
 8005da0:	2b02      	cmp	r3, #2
 8005da2:	d129      	bne.n	8005df8 <xQueueGenericSend+0x138>
						}
					}
				}
				#else /* configUSE_QUEUE_SETS */
				{
					xYieldRequired = prvCopyDataToQueue( pxQueue, pvItemToQueue, xCopyPosition );
 8005da4:	683a      	ldr	r2, [r7, #0]
 8005da6:	68b9      	ldr	r1, [r7, #8]
 8005da8:	6b38      	ldr	r0, [r7, #48]	; 0x30
 8005daa:	f000 fb66 	bl	800647a <prvCopyDataToQueue>
 8005dae:	62f8      	str	r0, [r7, #44]	; 0x2c

					/* If there was a task waiting for data to arrive on the
					queue then unblock it now. */
					if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 8005db0:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005db2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005db4:	2b00      	cmp	r3, #0
 8005db6:	d010      	beq.n	8005dda <xQueueGenericSend+0x11a>
					{
						if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 8005db8:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005dba:	3324      	adds	r3, #36	; 0x24
 8005dbc:	4618      	mov	r0, r3
 8005dbe:	f001 f9b9 	bl	8007134 <xTaskRemoveFromEventList>
 8005dc2:	4603      	mov	r3, r0
 8005dc4:	2b00      	cmp	r3, #0
 8005dc6:	d013      	beq.n	8005df0 <xQueueGenericSend+0x130>
						{
							/* The unblocked task has a priority higher than
							our own so yield immediately.  Yes it is ok to do
							this from within the critical section - the kernel
							takes care of that. */
							queueYIELD_IF_USING_PREEMPTION();
 8005dc8:	4b3f      	ldr	r3, [pc, #252]	; (8005ec8 <xQueueGenericSend+0x208>)
 8005dca:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8005dce:	601a      	str	r2, [r3, #0]
 8005dd0:	f3bf 8f4f 	dsb	sy
 8005dd4:	f3bf 8f6f 	isb	sy
 8005dd8:	e00a      	b.n	8005df0 <xQueueGenericSend+0x130>
						else
						{
							mtCOVERAGE_TEST_MARKER();
						}
					}
					else if( xYieldRequired != pdFALSE )
 8005dda:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8005ddc:	2b00      	cmp	r3, #0
 8005dde:	d007      	beq.n	8005df0 <xQueueGenericSend+0x130>
					{
						/* This path is a special case that will only get
						executed if the task was holding multiple mutexes and
						the mutexes were given back in an order that is
						different to that in which they were taken. */
						queueYIELD_IF_USING_PREEMPTION();
 8005de0:	4b39      	ldr	r3, [pc, #228]	; (8005ec8 <xQueueGenericSend+0x208>)
 8005de2:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8005de6:	601a      	str	r2, [r3, #0]
 8005de8:	f3bf 8f4f 	dsb	sy
 8005dec:	f3bf 8f6f 	isb	sy
						mtCOVERAGE_TEST_MARKER();
					}
				}
				#endif /* configUSE_QUEUE_SETS */

				taskEXIT_CRITICAL();
 8005df0:	f002 f9f0 	bl	80081d4 <vPortExitCritical>
				return pdPASS;
 8005df4:	2301      	movs	r3, #1
 8005df6:	e063      	b.n	8005ec0 <xQueueGenericSend+0x200>
			}
			else
			{
				if( xTicksToWait == ( TickType_t ) 0 )
 8005df8:	687b      	ldr	r3, [r7, #4]
 8005dfa:	2b00      	cmp	r3, #0
 8005dfc:	d103      	bne.n	8005e06 <xQueueGenericSend+0x146>
				{
					/* The queue was full and no block time is specified (or
					the block time has expired) so leave now. */
					taskEXIT_CRITICAL();
 8005dfe:	f002 f9e9 	bl	80081d4 <vPortExitCritical>

					/* Return to the original privilege level before exiting
					the function. */
					traceQUEUE_SEND_FAILED( pxQueue );
					return errQUEUE_FULL;
 8005e02:	2300      	movs	r3, #0
 8005e04:	e05c      	b.n	8005ec0 <xQueueGenericSend+0x200>
				}
				else if( xEntryTimeSet == pdFALSE )
 8005e06:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8005e08:	2b00      	cmp	r3, #0
 8005e0a:	d106      	bne.n	8005e1a <xQueueGenericSend+0x15a>
				{
					/* The queue was full and a block time was specified so
					configure the timeout structure. */
					vTaskInternalSetTimeOutState( &xTimeOut );
 8005e0c:	f107 0314 	add.w	r3, r7, #20
 8005e10:	4618      	mov	r0, r3
 8005e12:	f001 f9f5 	bl	8007200 <vTaskInternalSetTimeOutState>
					xEntryTimeSet = pdTRUE;
 8005e16:	2301      	movs	r3, #1
 8005e18:	637b      	str	r3, [r7, #52]	; 0x34
					/* Entry time was already set. */
					mtCOVERAGE_TEST_MARKER();
				}
			}
		}
		taskEXIT_CRITICAL();
 8005e1a:	f002 f9db 	bl	80081d4 <vPortExitCritical>

		/* Interrupts and other tasks can send to and receive from the queue
		now the critical section has been exited. */

		vTaskSuspendAll();
 8005e1e:	f000 ff2f 	bl	8006c80 <vTaskSuspendAll>
		prvLockQueue( pxQueue );
 8005e22:	f002 f9a3 	bl	800816c <vPortEnterCritical>
 8005e26:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005e28:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 8005e2c:	b25b      	sxtb	r3, r3
 8005e2e:	f1b3 3fff 	cmp.w	r3, #4294967295
 8005e32:	d103      	bne.n	8005e3c <xQueueGenericSend+0x17c>
 8005e34:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005e36:	2200      	movs	r2, #0
 8005e38:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8005e3c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005e3e:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 8005e42:	b25b      	sxtb	r3, r3
 8005e44:	f1b3 3fff 	cmp.w	r3, #4294967295
 8005e48:	d103      	bne.n	8005e52 <xQueueGenericSend+0x192>
 8005e4a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005e4c:	2200      	movs	r2, #0
 8005e4e:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 8005e52:	f002 f9bf 	bl	80081d4 <vPortExitCritical>

		/* Update the timeout state to see if it has expired yet. */
		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 8005e56:	1d3a      	adds	r2, r7, #4
 8005e58:	f107 0314 	add.w	r3, r7, #20
 8005e5c:	4611      	mov	r1, r2
 8005e5e:	4618      	mov	r0, r3
 8005e60:	f001 f9e4 	bl	800722c <xTaskCheckForTimeOut>
 8005e64:	4603      	mov	r3, r0
 8005e66:	2b00      	cmp	r3, #0
 8005e68:	d124      	bne.n	8005eb4 <xQueueGenericSend+0x1f4>
		{
			if( prvIsQueueFull( pxQueue ) != pdFALSE )
 8005e6a:	6b38      	ldr	r0, [r7, #48]	; 0x30
 8005e6c:	f000 fbfd 	bl	800666a <prvIsQueueFull>
 8005e70:	4603      	mov	r3, r0
 8005e72:	2b00      	cmp	r3, #0
 8005e74:	d018      	beq.n	8005ea8 <xQueueGenericSend+0x1e8>
			{
				traceBLOCKING_ON_QUEUE_SEND( pxQueue );
				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToSend ), xTicksToWait );
 8005e76:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005e78:	3310      	adds	r3, #16
 8005e7a:	687a      	ldr	r2, [r7, #4]
 8005e7c:	4611      	mov	r1, r2
 8005e7e:	4618      	mov	r0, r3
 8005e80:	f001 f904 	bl	800708c <vTaskPlaceOnEventList>
				/* Unlocking the queue means queue events can effect the
				event list.  It is possible that interrupts occurring now
				remove this task from the event list again - but as the
				scheduler is suspended the task will go onto the pending
				ready last instead of the actual ready list. */
				prvUnlockQueue( pxQueue );
 8005e84:	6b38      	ldr	r0, [r7, #48]	; 0x30
 8005e86:	f000 fb88 	bl	800659a <prvUnlockQueue>
				/* Resuming the scheduler will move tasks from the pending
				ready list into the ready list - so it is feasible that this
				task is already in a ready list before it yields - in which
				case the yield will not cause a context switch unless there
				is also a higher priority task in the pending ready list. */
				if( xTaskResumeAll() == pdFALSE )
 8005e8a:	f000 ff07 	bl	8006c9c <xTaskResumeAll>
 8005e8e:	4603      	mov	r3, r0
 8005e90:	2b00      	cmp	r3, #0
 8005e92:	f47f af7c 	bne.w	8005d8e <xQueueGenericSend+0xce>
				{
					portYIELD_WITHIN_API();
 8005e96:	4b0c      	ldr	r3, [pc, #48]	; (8005ec8 <xQueueGenericSend+0x208>)
 8005e98:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8005e9c:	601a      	str	r2, [r3, #0]
 8005e9e:	f3bf 8f4f 	dsb	sy
 8005ea2:	f3bf 8f6f 	isb	sy
 8005ea6:	e772      	b.n	8005d8e <xQueueGenericSend+0xce>
				}
			}
			else
			{
				/* Try again. */
				prvUnlockQueue( pxQueue );
 8005ea8:	6b38      	ldr	r0, [r7, #48]	; 0x30
 8005eaa:	f000 fb76 	bl	800659a <prvUnlockQueue>
				( void ) xTaskResumeAll();
 8005eae:	f000 fef5 	bl	8006c9c <xTaskResumeAll>
 8005eb2:	e76c      	b.n	8005d8e <xQueueGenericSend+0xce>
			}
		}
		else
		{
			/* The timeout has expired. */
			prvUnlockQueue( pxQueue );
 8005eb4:	6b38      	ldr	r0, [r7, #48]	; 0x30
 8005eb6:	f000 fb70 	bl	800659a <prvUnlockQueue>
			( void ) xTaskResumeAll();
 8005eba:	f000 feef 	bl	8006c9c <xTaskResumeAll>

			traceQUEUE_SEND_FAILED( pxQueue );
			return errQUEUE_FULL;
 8005ebe:	2300      	movs	r3, #0
		}
	} /*lint -restore */
}
 8005ec0:	4618      	mov	r0, r3
 8005ec2:	3738      	adds	r7, #56	; 0x38
 8005ec4:	46bd      	mov	sp, r7
 8005ec6:	bd80      	pop	{r7, pc}
 8005ec8:	e000ed04 	.word	0xe000ed04

08005ecc <xQueueGenericSendFromISR>:
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericSendFromISR( QueueHandle_t xQueue, const void * const pvItemToQueue, BaseType_t * const pxHigherPriorityTaskWoken, const BaseType_t xCopyPosition )
{
 8005ecc:	b580      	push	{r7, lr}
 8005ece:	b08e      	sub	sp, #56	; 0x38
 8005ed0:	af00      	add	r7, sp, #0
 8005ed2:	60f8      	str	r0, [r7, #12]
 8005ed4:	60b9      	str	r1, [r7, #8]
 8005ed6:	607a      	str	r2, [r7, #4]
 8005ed8:	603b      	str	r3, [r7, #0]
BaseType_t xReturn;
UBaseType_t uxSavedInterruptStatus;
Queue_t * const pxQueue = xQueue;
 8005eda:	68fb      	ldr	r3, [r7, #12]
 8005edc:	633b      	str	r3, [r7, #48]	; 0x30

	configASSERT( pxQueue );
 8005ede:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005ee0:	2b00      	cmp	r3, #0
 8005ee2:	d10c      	bne.n	8005efe <xQueueGenericSendFromISR+0x32>
	__asm volatile
 8005ee4:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005ee8:	b672      	cpsid	i
 8005eea:	f383 8811 	msr	BASEPRI, r3
 8005eee:	f3bf 8f6f 	isb	sy
 8005ef2:	f3bf 8f4f 	dsb	sy
 8005ef6:	b662      	cpsie	i
 8005ef8:	627b      	str	r3, [r7, #36]	; 0x24
}
 8005efa:	bf00      	nop
 8005efc:	e7fe      	b.n	8005efc <xQueueGenericSendFromISR+0x30>
	configASSERT( !( ( pvItemToQueue == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 8005efe:	68bb      	ldr	r3, [r7, #8]
 8005f00:	2b00      	cmp	r3, #0
 8005f02:	d103      	bne.n	8005f0c <xQueueGenericSendFromISR+0x40>
 8005f04:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005f06:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005f08:	2b00      	cmp	r3, #0
 8005f0a:	d101      	bne.n	8005f10 <xQueueGenericSendFromISR+0x44>
 8005f0c:	2301      	movs	r3, #1
 8005f0e:	e000      	b.n	8005f12 <xQueueGenericSendFromISR+0x46>
 8005f10:	2300      	movs	r3, #0
 8005f12:	2b00      	cmp	r3, #0
 8005f14:	d10c      	bne.n	8005f30 <xQueueGenericSendFromISR+0x64>
	__asm volatile
 8005f16:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005f1a:	b672      	cpsid	i
 8005f1c:	f383 8811 	msr	BASEPRI, r3
 8005f20:	f3bf 8f6f 	isb	sy
 8005f24:	f3bf 8f4f 	dsb	sy
 8005f28:	b662      	cpsie	i
 8005f2a:	623b      	str	r3, [r7, #32]
}
 8005f2c:	bf00      	nop
 8005f2e:	e7fe      	b.n	8005f2e <xQueueGenericSendFromISR+0x62>
	configASSERT( !( ( xCopyPosition == queueOVERWRITE ) && ( pxQueue->uxLength != 1 ) ) );
 8005f30:	683b      	ldr	r3, [r7, #0]
 8005f32:	2b02      	cmp	r3, #2
 8005f34:	d103      	bne.n	8005f3e <xQueueGenericSendFromISR+0x72>
 8005f36:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005f38:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8005f3a:	2b01      	cmp	r3, #1
 8005f3c:	d101      	bne.n	8005f42 <xQueueGenericSendFromISR+0x76>
 8005f3e:	2301      	movs	r3, #1
 8005f40:	e000      	b.n	8005f44 <xQueueGenericSendFromISR+0x78>
 8005f42:	2300      	movs	r3, #0
 8005f44:	2b00      	cmp	r3, #0
 8005f46:	d10c      	bne.n	8005f62 <xQueueGenericSendFromISR+0x96>
	__asm volatile
 8005f48:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005f4c:	b672      	cpsid	i
 8005f4e:	f383 8811 	msr	BASEPRI, r3
 8005f52:	f3bf 8f6f 	isb	sy
 8005f56:	f3bf 8f4f 	dsb	sy
 8005f5a:	b662      	cpsie	i
 8005f5c:	61fb      	str	r3, [r7, #28]
}
 8005f5e:	bf00      	nop
 8005f60:	e7fe      	b.n	8005f60 <xQueueGenericSendFromISR+0x94>
	that have been assigned a priority at or (logically) below the maximum
	system call	interrupt priority.  FreeRTOS maintains a separate interrupt
	safe API to ensure interrupt entry is as fast and as simple as possible.
	More information (albeit Cortex-M specific) is provided on the following
	link: http://www.freertos.org/RTOS-Cortex-M3-M4.html */
	portASSERT_IF_INTERRUPT_PRIORITY_INVALID();
 8005f62:	f002 f9eb 	bl	800833c <vPortValidateInterruptPriority>

portFORCE_INLINE static uint32_t ulPortRaiseBASEPRI( void )
{
uint32_t ulOriginalBASEPRI, ulNewBASEPRI;

	__asm volatile
 8005f66:	f3ef 8211 	mrs	r2, BASEPRI
 8005f6a:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005f6e:	b672      	cpsid	i
 8005f70:	f383 8811 	msr	BASEPRI, r3
 8005f74:	f3bf 8f6f 	isb	sy
 8005f78:	f3bf 8f4f 	dsb	sy
 8005f7c:	b662      	cpsie	i
 8005f7e:	61ba      	str	r2, [r7, #24]
 8005f80:	617b      	str	r3, [r7, #20]
		:"=r" (ulOriginalBASEPRI), "=r" (ulNewBASEPRI) : "i" ( configMAX_SYSCALL_INTERRUPT_PRIORITY ) : "memory"
	);

	/* This return will not be reached but is necessary to prevent compiler
	warnings. */
	return ulOriginalBASEPRI;
 8005f82:	69bb      	ldr	r3, [r7, #24]
	/* Similar to xQueueGenericSend, except without blocking if there is no room
	in the queue.  Also don't directly wake a task that was blocked on a queue
	read, instead return a flag to say whether a context switch is required or
	not (i.e. has a task with a higher priority than us been woken by this
	post). */
	uxSavedInterruptStatus = portSET_INTERRUPT_MASK_FROM_ISR();
 8005f84:	62fb      	str	r3, [r7, #44]	; 0x2c
	{
		if( ( pxQueue->uxMessagesWaiting < pxQueue->uxLength ) || ( xCopyPosition == queueOVERWRITE ) )
 8005f86:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005f88:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8005f8a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005f8c:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8005f8e:	429a      	cmp	r2, r3
 8005f90:	d302      	bcc.n	8005f98 <xQueueGenericSendFromISR+0xcc>
 8005f92:	683b      	ldr	r3, [r7, #0]
 8005f94:	2b02      	cmp	r3, #2
 8005f96:	d12c      	bne.n	8005ff2 <xQueueGenericSendFromISR+0x126>
		{
			const int8_t cTxLock = pxQueue->cTxLock;
 8005f98:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005f9a:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 8005f9e:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
			/* Semaphores use xQueueGiveFromISR(), so pxQueue will not be a
			semaphore or mutex.  That means prvCopyDataToQueue() cannot result
			in a task disinheriting a priority and prvCopyDataToQueue() can be
			called here even though the disinherit function does not check if
			the scheduler is suspended before accessing the ready lists. */
			( void ) prvCopyDataToQueue( pxQueue, pvItemToQueue, xCopyPosition );
 8005fa2:	683a      	ldr	r2, [r7, #0]
 8005fa4:	68b9      	ldr	r1, [r7, #8]
 8005fa6:	6b38      	ldr	r0, [r7, #48]	; 0x30
 8005fa8:	f000 fa67 	bl	800647a <prvCopyDataToQueue>

			/* The event list is not altered if the queue is locked.  This will
			be done when the queue is unlocked later. */
			if( cTxLock == queueUNLOCKED )
 8005fac:	f997 302b 	ldrsb.w	r3, [r7, #43]	; 0x2b
 8005fb0:	f1b3 3fff 	cmp.w	r3, #4294967295
 8005fb4:	d112      	bne.n	8005fdc <xQueueGenericSendFromISR+0x110>
						}
					}
				}
				#else /* configUSE_QUEUE_SETS */
				{
					if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 8005fb6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005fb8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005fba:	2b00      	cmp	r3, #0
 8005fbc:	d016      	beq.n	8005fec <xQueueGenericSendFromISR+0x120>
					{
						if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 8005fbe:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005fc0:	3324      	adds	r3, #36	; 0x24
 8005fc2:	4618      	mov	r0, r3
 8005fc4:	f001 f8b6 	bl	8007134 <xTaskRemoveFromEventList>
 8005fc8:	4603      	mov	r3, r0
 8005fca:	2b00      	cmp	r3, #0
 8005fcc:	d00e      	beq.n	8005fec <xQueueGenericSendFromISR+0x120>
						{
							/* The task waiting has a higher priority so record that a
							context	switch is required. */
							if( pxHigherPriorityTaskWoken != NULL )
 8005fce:	687b      	ldr	r3, [r7, #4]
 8005fd0:	2b00      	cmp	r3, #0
 8005fd2:	d00b      	beq.n	8005fec <xQueueGenericSendFromISR+0x120>
							{
								*pxHigherPriorityTaskWoken = pdTRUE;
 8005fd4:	687b      	ldr	r3, [r7, #4]
 8005fd6:	2201      	movs	r2, #1
 8005fd8:	601a      	str	r2, [r3, #0]
 8005fda:	e007      	b.n	8005fec <xQueueGenericSendFromISR+0x120>
			}
			else
			{
				/* Increment the lock count so the task that unlocks the queue
				knows that data was posted while it was locked. */
				pxQueue->cTxLock = ( int8_t ) ( cTxLock + 1 );
 8005fdc:	f897 302b 	ldrb.w	r3, [r7, #43]	; 0x2b
 8005fe0:	3301      	adds	r3, #1
 8005fe2:	b2db      	uxtb	r3, r3
 8005fe4:	b25a      	sxtb	r2, r3
 8005fe6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005fe8:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
			}

			xReturn = pdPASS;
 8005fec:	2301      	movs	r3, #1
 8005fee:	637b      	str	r3, [r7, #52]	; 0x34
		{
 8005ff0:	e001      	b.n	8005ff6 <xQueueGenericSendFromISR+0x12a>
		}
		else
		{
			traceQUEUE_SEND_FROM_ISR_FAILED( pxQueue );
			xReturn = errQUEUE_FULL;
 8005ff2:	2300      	movs	r3, #0
 8005ff4:	637b      	str	r3, [r7, #52]	; 0x34
 8005ff6:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8005ff8:	613b      	str	r3, [r7, #16]
}
/*-----------------------------------------------------------*/

portFORCE_INLINE static void vPortSetBASEPRI( uint32_t ulNewMaskValue )
{
	__asm volatile
 8005ffa:	693b      	ldr	r3, [r7, #16]
 8005ffc:	f383 8811 	msr	BASEPRI, r3
	(
		"	msr basepri, %0	" :: "r" ( ulNewMaskValue ) : "memory"
	);
}
 8006000:	bf00      	nop
		}
	}
	portCLEAR_INTERRUPT_MASK_FROM_ISR( uxSavedInterruptStatus );

	return xReturn;
 8006002:	6b7b      	ldr	r3, [r7, #52]	; 0x34
}
 8006004:	4618      	mov	r0, r3
 8006006:	3738      	adds	r7, #56	; 0x38
 8006008:	46bd      	mov	sp, r7
 800600a:	bd80      	pop	{r7, pc}

0800600c <xQueueReceive>:
	return xReturn;
}
/*-----------------------------------------------------------*/

BaseType_t xQueueReceive( QueueHandle_t xQueue, void * const pvBuffer, TickType_t xTicksToWait )
{
 800600c:	b580      	push	{r7, lr}
 800600e:	b08c      	sub	sp, #48	; 0x30
 8006010:	af00      	add	r7, sp, #0
 8006012:	60f8      	str	r0, [r7, #12]
 8006014:	60b9      	str	r1, [r7, #8]
 8006016:	607a      	str	r2, [r7, #4]
BaseType_t xEntryTimeSet = pdFALSE;
 8006018:	2300      	movs	r3, #0
 800601a:	62fb      	str	r3, [r7, #44]	; 0x2c
TimeOut_t xTimeOut;
Queue_t * const pxQueue = xQueue;
 800601c:	68fb      	ldr	r3, [r7, #12]
 800601e:	62bb      	str	r3, [r7, #40]	; 0x28

	/* Check the pointer is not NULL. */
	configASSERT( ( pxQueue ) );
 8006020:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006022:	2b00      	cmp	r3, #0
 8006024:	d10c      	bne.n	8006040 <xQueueReceive+0x34>
	__asm volatile
 8006026:	f04f 0350 	mov.w	r3, #80	; 0x50
 800602a:	b672      	cpsid	i
 800602c:	f383 8811 	msr	BASEPRI, r3
 8006030:	f3bf 8f6f 	isb	sy
 8006034:	f3bf 8f4f 	dsb	sy
 8006038:	b662      	cpsie	i
 800603a:	623b      	str	r3, [r7, #32]
}
 800603c:	bf00      	nop
 800603e:	e7fe      	b.n	800603e <xQueueReceive+0x32>

	/* The buffer into which data is received can only be NULL if the data size
	is zero (so no data is copied into the buffer. */
	configASSERT( !( ( ( pvBuffer ) == NULL ) && ( ( pxQueue )->uxItemSize != ( UBaseType_t ) 0U ) ) );
 8006040:	68bb      	ldr	r3, [r7, #8]
 8006042:	2b00      	cmp	r3, #0
 8006044:	d103      	bne.n	800604e <xQueueReceive+0x42>
 8006046:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006048:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800604a:	2b00      	cmp	r3, #0
 800604c:	d101      	bne.n	8006052 <xQueueReceive+0x46>
 800604e:	2301      	movs	r3, #1
 8006050:	e000      	b.n	8006054 <xQueueReceive+0x48>
 8006052:	2300      	movs	r3, #0
 8006054:	2b00      	cmp	r3, #0
 8006056:	d10c      	bne.n	8006072 <xQueueReceive+0x66>
	__asm volatile
 8006058:	f04f 0350 	mov.w	r3, #80	; 0x50
 800605c:	b672      	cpsid	i
 800605e:	f383 8811 	msr	BASEPRI, r3
 8006062:	f3bf 8f6f 	isb	sy
 8006066:	f3bf 8f4f 	dsb	sy
 800606a:	b662      	cpsie	i
 800606c:	61fb      	str	r3, [r7, #28]
}
 800606e:	bf00      	nop
 8006070:	e7fe      	b.n	8006070 <xQueueReceive+0x64>

	/* Cannot block if the scheduler is suspended. */
	#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )
	{
		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 8006072:	f001 fa2b 	bl	80074cc <xTaskGetSchedulerState>
 8006076:	4603      	mov	r3, r0
 8006078:	2b00      	cmp	r3, #0
 800607a:	d102      	bne.n	8006082 <xQueueReceive+0x76>
 800607c:	687b      	ldr	r3, [r7, #4]
 800607e:	2b00      	cmp	r3, #0
 8006080:	d101      	bne.n	8006086 <xQueueReceive+0x7a>
 8006082:	2301      	movs	r3, #1
 8006084:	e000      	b.n	8006088 <xQueueReceive+0x7c>
 8006086:	2300      	movs	r3, #0
 8006088:	2b00      	cmp	r3, #0
 800608a:	d10c      	bne.n	80060a6 <xQueueReceive+0x9a>
	__asm volatile
 800608c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006090:	b672      	cpsid	i
 8006092:	f383 8811 	msr	BASEPRI, r3
 8006096:	f3bf 8f6f 	isb	sy
 800609a:	f3bf 8f4f 	dsb	sy
 800609e:	b662      	cpsie	i
 80060a0:	61bb      	str	r3, [r7, #24]
}
 80060a2:	bf00      	nop
 80060a4:	e7fe      	b.n	80060a4 <xQueueReceive+0x98>
	/*lint -save -e904  This function relaxes the coding standard somewhat to
	allow return statements within the function itself.  This is done in the
	interest of execution time efficiency. */
	for( ;; )
	{
		taskENTER_CRITICAL();
 80060a6:	f002 f861 	bl	800816c <vPortEnterCritical>
		{
			const UBaseType_t uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 80060aa:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80060ac:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80060ae:	627b      	str	r3, [r7, #36]	; 0x24

			/* Is there data in the queue now?  To be running the calling task
			must be the highest priority task wanting to access the queue. */
			if( uxMessagesWaiting > ( UBaseType_t ) 0 )
 80060b0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80060b2:	2b00      	cmp	r3, #0
 80060b4:	d01f      	beq.n	80060f6 <xQueueReceive+0xea>
			{
				/* Data available, remove one item. */
				prvCopyDataFromQueue( pxQueue, pvBuffer );
 80060b6:	68b9      	ldr	r1, [r7, #8]
 80060b8:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 80060ba:	f000 fa48 	bl	800654e <prvCopyDataFromQueue>
				traceQUEUE_RECEIVE( pxQueue );
				pxQueue->uxMessagesWaiting = uxMessagesWaiting - ( UBaseType_t ) 1;
 80060be:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80060c0:	1e5a      	subs	r2, r3, #1
 80060c2:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80060c4:	639a      	str	r2, [r3, #56]	; 0x38

				/* There is now space in the queue, were any tasks waiting to
				post to the queue?  If so, unblock the highest priority waiting
				task. */
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 80060c6:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80060c8:	691b      	ldr	r3, [r3, #16]
 80060ca:	2b00      	cmp	r3, #0
 80060cc:	d00f      	beq.n	80060ee <xQueueReceive+0xe2>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 80060ce:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80060d0:	3310      	adds	r3, #16
 80060d2:	4618      	mov	r0, r3
 80060d4:	f001 f82e 	bl	8007134 <xTaskRemoveFromEventList>
 80060d8:	4603      	mov	r3, r0
 80060da:	2b00      	cmp	r3, #0
 80060dc:	d007      	beq.n	80060ee <xQueueReceive+0xe2>
					{
						queueYIELD_IF_USING_PREEMPTION();
 80060de:	4b3d      	ldr	r3, [pc, #244]	; (80061d4 <xQueueReceive+0x1c8>)
 80060e0:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 80060e4:	601a      	str	r2, [r3, #0]
 80060e6:	f3bf 8f4f 	dsb	sy
 80060ea:	f3bf 8f6f 	isb	sy
				else
				{
					mtCOVERAGE_TEST_MARKER();
				}

				taskEXIT_CRITICAL();
 80060ee:	f002 f871 	bl	80081d4 <vPortExitCritical>
				return pdPASS;
 80060f2:	2301      	movs	r3, #1
 80060f4:	e069      	b.n	80061ca <xQueueReceive+0x1be>
			}
			else
			{
				if( xTicksToWait == ( TickType_t ) 0 )
 80060f6:	687b      	ldr	r3, [r7, #4]
 80060f8:	2b00      	cmp	r3, #0
 80060fa:	d103      	bne.n	8006104 <xQueueReceive+0xf8>
				{
					/* The queue was empty and no block time is specified (or
					the block time has expired) so leave now. */
					taskEXIT_CRITICAL();
 80060fc:	f002 f86a 	bl	80081d4 <vPortExitCritical>
					traceQUEUE_RECEIVE_FAILED( pxQueue );
					return errQUEUE_EMPTY;
 8006100:	2300      	movs	r3, #0
 8006102:	e062      	b.n	80061ca <xQueueReceive+0x1be>
				}
				else if( xEntryTimeSet == pdFALSE )
 8006104:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8006106:	2b00      	cmp	r3, #0
 8006108:	d106      	bne.n	8006118 <xQueueReceive+0x10c>
				{
					/* The queue was empty and a block time was specified so
					configure the timeout structure. */
					vTaskInternalSetTimeOutState( &xTimeOut );
 800610a:	f107 0310 	add.w	r3, r7, #16
 800610e:	4618      	mov	r0, r3
 8006110:	f001 f876 	bl	8007200 <vTaskInternalSetTimeOutState>
					xEntryTimeSet = pdTRUE;
 8006114:	2301      	movs	r3, #1
 8006116:	62fb      	str	r3, [r7, #44]	; 0x2c
					/* Entry time was already set. */
					mtCOVERAGE_TEST_MARKER();
				}
			}
		}
		taskEXIT_CRITICAL();
 8006118:	f002 f85c 	bl	80081d4 <vPortExitCritical>

		/* Interrupts and other tasks can send to and receive from the queue
		now the critical section has been exited. */

		vTaskSuspendAll();
 800611c:	f000 fdb0 	bl	8006c80 <vTaskSuspendAll>
		prvLockQueue( pxQueue );
 8006120:	f002 f824 	bl	800816c <vPortEnterCritical>
 8006124:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006126:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 800612a:	b25b      	sxtb	r3, r3
 800612c:	f1b3 3fff 	cmp.w	r3, #4294967295
 8006130:	d103      	bne.n	800613a <xQueueReceive+0x12e>
 8006132:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006134:	2200      	movs	r2, #0
 8006136:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 800613a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800613c:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 8006140:	b25b      	sxtb	r3, r3
 8006142:	f1b3 3fff 	cmp.w	r3, #4294967295
 8006146:	d103      	bne.n	8006150 <xQueueReceive+0x144>
 8006148:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800614a:	2200      	movs	r2, #0
 800614c:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 8006150:	f002 f840 	bl	80081d4 <vPortExitCritical>

		/* Update the timeout state to see if it has expired yet. */
		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 8006154:	1d3a      	adds	r2, r7, #4
 8006156:	f107 0310 	add.w	r3, r7, #16
 800615a:	4611      	mov	r1, r2
 800615c:	4618      	mov	r0, r3
 800615e:	f001 f865 	bl	800722c <xTaskCheckForTimeOut>
 8006162:	4603      	mov	r3, r0
 8006164:	2b00      	cmp	r3, #0
 8006166:	d123      	bne.n	80061b0 <xQueueReceive+0x1a4>
		{
			/* The timeout has not expired.  If the queue is still empty place
			the task on the list of tasks waiting to receive from the queue. */
			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 8006168:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 800616a:	f000 fa68 	bl	800663e <prvIsQueueEmpty>
 800616e:	4603      	mov	r3, r0
 8006170:	2b00      	cmp	r3, #0
 8006172:	d017      	beq.n	80061a4 <xQueueReceive+0x198>
			{
				traceBLOCKING_ON_QUEUE_RECEIVE( pxQueue );
				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait );
 8006174:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006176:	3324      	adds	r3, #36	; 0x24
 8006178:	687a      	ldr	r2, [r7, #4]
 800617a:	4611      	mov	r1, r2
 800617c:	4618      	mov	r0, r3
 800617e:	f000 ff85 	bl	800708c <vTaskPlaceOnEventList>
				prvUnlockQueue( pxQueue );
 8006182:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8006184:	f000 fa09 	bl	800659a <prvUnlockQueue>
				if( xTaskResumeAll() == pdFALSE )
 8006188:	f000 fd88 	bl	8006c9c <xTaskResumeAll>
 800618c:	4603      	mov	r3, r0
 800618e:	2b00      	cmp	r3, #0
 8006190:	d189      	bne.n	80060a6 <xQueueReceive+0x9a>
				{
					portYIELD_WITHIN_API();
 8006192:	4b10      	ldr	r3, [pc, #64]	; (80061d4 <xQueueReceive+0x1c8>)
 8006194:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8006198:	601a      	str	r2, [r3, #0]
 800619a:	f3bf 8f4f 	dsb	sy
 800619e:	f3bf 8f6f 	isb	sy
 80061a2:	e780      	b.n	80060a6 <xQueueReceive+0x9a>
			}
			else
			{
				/* The queue contains data again.  Loop back to try and read the
				data. */
				prvUnlockQueue( pxQueue );
 80061a4:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 80061a6:	f000 f9f8 	bl	800659a <prvUnlockQueue>
				( void ) xTaskResumeAll();
 80061aa:	f000 fd77 	bl	8006c9c <xTaskResumeAll>
 80061ae:	e77a      	b.n	80060a6 <xQueueReceive+0x9a>
		}
		else
		{
			/* Timed out.  If there is no data in the queue exit, otherwise loop
			back and attempt to read the data. */
			prvUnlockQueue( pxQueue );
 80061b0:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 80061b2:	f000 f9f2 	bl	800659a <prvUnlockQueue>
			( void ) xTaskResumeAll();
 80061b6:	f000 fd71 	bl	8006c9c <xTaskResumeAll>

			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 80061ba:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 80061bc:	f000 fa3f 	bl	800663e <prvIsQueueEmpty>
 80061c0:	4603      	mov	r3, r0
 80061c2:	2b00      	cmp	r3, #0
 80061c4:	f43f af6f 	beq.w	80060a6 <xQueueReceive+0x9a>
			{
				traceQUEUE_RECEIVE_FAILED( pxQueue );
				return errQUEUE_EMPTY;
 80061c8:	2300      	movs	r3, #0
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}
	} /*lint -restore */
}
 80061ca:	4618      	mov	r0, r3
 80061cc:	3730      	adds	r7, #48	; 0x30
 80061ce:	46bd      	mov	sp, r7
 80061d0:	bd80      	pop	{r7, pc}
 80061d2:	bf00      	nop
 80061d4:	e000ed04 	.word	0xe000ed04

080061d8 <xQueueSemaphoreTake>:
/*-----------------------------------------------------------*/

BaseType_t xQueueSemaphoreTake( QueueHandle_t xQueue, TickType_t xTicksToWait )
{
 80061d8:	b580      	push	{r7, lr}
 80061da:	b08e      	sub	sp, #56	; 0x38
 80061dc:	af00      	add	r7, sp, #0
 80061de:	6078      	str	r0, [r7, #4]
 80061e0:	6039      	str	r1, [r7, #0]
BaseType_t xEntryTimeSet = pdFALSE;
 80061e2:	2300      	movs	r3, #0
 80061e4:	637b      	str	r3, [r7, #52]	; 0x34
TimeOut_t xTimeOut;
Queue_t * const pxQueue = xQueue;
 80061e6:	687b      	ldr	r3, [r7, #4]
 80061e8:	62fb      	str	r3, [r7, #44]	; 0x2c

#if( configUSE_MUTEXES == 1 )
	BaseType_t xInheritanceOccurred = pdFALSE;
 80061ea:	2300      	movs	r3, #0
 80061ec:	633b      	str	r3, [r7, #48]	; 0x30
#endif

	/* Check the queue pointer is not NULL. */
	configASSERT( ( pxQueue ) );
 80061ee:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80061f0:	2b00      	cmp	r3, #0
 80061f2:	d10c      	bne.n	800620e <xQueueSemaphoreTake+0x36>
	__asm volatile
 80061f4:	f04f 0350 	mov.w	r3, #80	; 0x50
 80061f8:	b672      	cpsid	i
 80061fa:	f383 8811 	msr	BASEPRI, r3
 80061fe:	f3bf 8f6f 	isb	sy
 8006202:	f3bf 8f4f 	dsb	sy
 8006206:	b662      	cpsie	i
 8006208:	623b      	str	r3, [r7, #32]
}
 800620a:	bf00      	nop
 800620c:	e7fe      	b.n	800620c <xQueueSemaphoreTake+0x34>

	/* Check this really is a semaphore, in which case the item size will be
	0. */
	configASSERT( pxQueue->uxItemSize == 0 );
 800620e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8006210:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006212:	2b00      	cmp	r3, #0
 8006214:	d00c      	beq.n	8006230 <xQueueSemaphoreTake+0x58>
	__asm volatile
 8006216:	f04f 0350 	mov.w	r3, #80	; 0x50
 800621a:	b672      	cpsid	i
 800621c:	f383 8811 	msr	BASEPRI, r3
 8006220:	f3bf 8f6f 	isb	sy
 8006224:	f3bf 8f4f 	dsb	sy
 8006228:	b662      	cpsie	i
 800622a:	61fb      	str	r3, [r7, #28]
}
 800622c:	bf00      	nop
 800622e:	e7fe      	b.n	800622e <xQueueSemaphoreTake+0x56>

	/* Cannot block if the scheduler is suspended. */
	#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )
	{
		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 8006230:	f001 f94c 	bl	80074cc <xTaskGetSchedulerState>
 8006234:	4603      	mov	r3, r0
 8006236:	2b00      	cmp	r3, #0
 8006238:	d102      	bne.n	8006240 <xQueueSemaphoreTake+0x68>
 800623a:	683b      	ldr	r3, [r7, #0]
 800623c:	2b00      	cmp	r3, #0
 800623e:	d101      	bne.n	8006244 <xQueueSemaphoreTake+0x6c>
 8006240:	2301      	movs	r3, #1
 8006242:	e000      	b.n	8006246 <xQueueSemaphoreTake+0x6e>
 8006244:	2300      	movs	r3, #0
 8006246:	2b00      	cmp	r3, #0
 8006248:	d10c      	bne.n	8006264 <xQueueSemaphoreTake+0x8c>
	__asm volatile
 800624a:	f04f 0350 	mov.w	r3, #80	; 0x50
 800624e:	b672      	cpsid	i
 8006250:	f383 8811 	msr	BASEPRI, r3
 8006254:	f3bf 8f6f 	isb	sy
 8006258:	f3bf 8f4f 	dsb	sy
 800625c:	b662      	cpsie	i
 800625e:	61bb      	str	r3, [r7, #24]
}
 8006260:	bf00      	nop
 8006262:	e7fe      	b.n	8006262 <xQueueSemaphoreTake+0x8a>
	/*lint -save -e904 This function relaxes the coding standard somewhat to allow return
	statements within the function itself.  This is done in the interest
	of execution time efficiency. */
	for( ;; )
	{
		taskENTER_CRITICAL();
 8006264:	f001 ff82 	bl	800816c <vPortEnterCritical>
		{
			/* Semaphores are queues with an item size of 0, and where the
			number of messages in the queue is the semaphore's count value. */
			const UBaseType_t uxSemaphoreCount = pxQueue->uxMessagesWaiting;
 8006268:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800626a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800626c:	62bb      	str	r3, [r7, #40]	; 0x28

			/* Is there data in the queue now?  To be running the calling task
			must be the highest priority task wanting to access the queue. */
			if( uxSemaphoreCount > ( UBaseType_t ) 0 )
 800626e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006270:	2b00      	cmp	r3, #0
 8006272:	d024      	beq.n	80062be <xQueueSemaphoreTake+0xe6>
			{
				traceQUEUE_RECEIVE( pxQueue );

				/* Semaphores are queues with a data size of zero and where the
				messages waiting is the semaphore's count.  Reduce the count. */
				pxQueue->uxMessagesWaiting = uxSemaphoreCount - ( UBaseType_t ) 1;
 8006274:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006276:	1e5a      	subs	r2, r3, #1
 8006278:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800627a:	639a      	str	r2, [r3, #56]	; 0x38

				#if ( configUSE_MUTEXES == 1 )
				{
					if( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX )
 800627c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800627e:	681b      	ldr	r3, [r3, #0]
 8006280:	2b00      	cmp	r3, #0
 8006282:	d104      	bne.n	800628e <xQueueSemaphoreTake+0xb6>
					{
						/* Record the information required to implement
						priority inheritance should it become necessary. */
						pxQueue->u.xSemaphore.xMutexHolder = pvTaskIncrementMutexHeldCount();
 8006284:	f001 faa0 	bl	80077c8 <pvTaskIncrementMutexHeldCount>
 8006288:	4602      	mov	r2, r0
 800628a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800628c:	609a      	str	r2, [r3, #8]
				}
				#endif /* configUSE_MUTEXES */

				/* Check to see if other tasks are blocked waiting to give the
				semaphore, and if so, unblock the highest priority such task. */
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 800628e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8006290:	691b      	ldr	r3, [r3, #16]
 8006292:	2b00      	cmp	r3, #0
 8006294:	d00f      	beq.n	80062b6 <xQueueSemaphoreTake+0xde>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 8006296:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8006298:	3310      	adds	r3, #16
 800629a:	4618      	mov	r0, r3
 800629c:	f000 ff4a 	bl	8007134 <xTaskRemoveFromEventList>
 80062a0:	4603      	mov	r3, r0
 80062a2:	2b00      	cmp	r3, #0
 80062a4:	d007      	beq.n	80062b6 <xQueueSemaphoreTake+0xde>
					{
						queueYIELD_IF_USING_PREEMPTION();
 80062a6:	4b55      	ldr	r3, [pc, #340]	; (80063fc <xQueueSemaphoreTake+0x224>)
 80062a8:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 80062ac:	601a      	str	r2, [r3, #0]
 80062ae:	f3bf 8f4f 	dsb	sy
 80062b2:	f3bf 8f6f 	isb	sy
				else
				{
					mtCOVERAGE_TEST_MARKER();
				}

				taskEXIT_CRITICAL();
 80062b6:	f001 ff8d 	bl	80081d4 <vPortExitCritical>
				return pdPASS;
 80062ba:	2301      	movs	r3, #1
 80062bc:	e099      	b.n	80063f2 <xQueueSemaphoreTake+0x21a>
			}
			else
			{
				if( xTicksToWait == ( TickType_t ) 0 )
 80062be:	683b      	ldr	r3, [r7, #0]
 80062c0:	2b00      	cmp	r3, #0
 80062c2:	d113      	bne.n	80062ec <xQueueSemaphoreTake+0x114>
					/* For inheritance to have occurred there must have been an
					initial timeout, and an adjusted timeout cannot become 0, as
					if it were 0 the function would have exited. */
					#if( configUSE_MUTEXES == 1 )
					{
						configASSERT( xInheritanceOccurred == pdFALSE );
 80062c4:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80062c6:	2b00      	cmp	r3, #0
 80062c8:	d00c      	beq.n	80062e4 <xQueueSemaphoreTake+0x10c>
	__asm volatile
 80062ca:	f04f 0350 	mov.w	r3, #80	; 0x50
 80062ce:	b672      	cpsid	i
 80062d0:	f383 8811 	msr	BASEPRI, r3
 80062d4:	f3bf 8f6f 	isb	sy
 80062d8:	f3bf 8f4f 	dsb	sy
 80062dc:	b662      	cpsie	i
 80062de:	617b      	str	r3, [r7, #20]
}
 80062e0:	bf00      	nop
 80062e2:	e7fe      	b.n	80062e2 <xQueueSemaphoreTake+0x10a>
					}
					#endif /* configUSE_MUTEXES */

					/* The semaphore count was 0 and no block time is specified
					(or the block time has expired) so exit now. */
					taskEXIT_CRITICAL();
 80062e4:	f001 ff76 	bl	80081d4 <vPortExitCritical>
					traceQUEUE_RECEIVE_FAILED( pxQueue );
					return errQUEUE_EMPTY;
 80062e8:	2300      	movs	r3, #0
 80062ea:	e082      	b.n	80063f2 <xQueueSemaphoreTake+0x21a>
				}
				else if( xEntryTimeSet == pdFALSE )
 80062ec:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80062ee:	2b00      	cmp	r3, #0
 80062f0:	d106      	bne.n	8006300 <xQueueSemaphoreTake+0x128>
				{
					/* The semaphore count was 0 and a block time was specified
					so configure the timeout structure ready to block. */
					vTaskInternalSetTimeOutState( &xTimeOut );
 80062f2:	f107 030c 	add.w	r3, r7, #12
 80062f6:	4618      	mov	r0, r3
 80062f8:	f000 ff82 	bl	8007200 <vTaskInternalSetTimeOutState>
					xEntryTimeSet = pdTRUE;
 80062fc:	2301      	movs	r3, #1
 80062fe:	637b      	str	r3, [r7, #52]	; 0x34
					/* Entry time was already set. */
					mtCOVERAGE_TEST_MARKER();
				}
			}
		}
		taskEXIT_CRITICAL();
 8006300:	f001 ff68 	bl	80081d4 <vPortExitCritical>

		/* Interrupts and other tasks can give to and take from the semaphore
		now the critical section has been exited. */

		vTaskSuspendAll();
 8006304:	f000 fcbc 	bl	8006c80 <vTaskSuspendAll>
		prvLockQueue( pxQueue );
 8006308:	f001 ff30 	bl	800816c <vPortEnterCritical>
 800630c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800630e:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 8006312:	b25b      	sxtb	r3, r3
 8006314:	f1b3 3fff 	cmp.w	r3, #4294967295
 8006318:	d103      	bne.n	8006322 <xQueueSemaphoreTake+0x14a>
 800631a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800631c:	2200      	movs	r2, #0
 800631e:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8006322:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8006324:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 8006328:	b25b      	sxtb	r3, r3
 800632a:	f1b3 3fff 	cmp.w	r3, #4294967295
 800632e:	d103      	bne.n	8006338 <xQueueSemaphoreTake+0x160>
 8006330:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8006332:	2200      	movs	r2, #0
 8006334:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 8006338:	f001 ff4c 	bl	80081d4 <vPortExitCritical>

		/* Update the timeout state to see if it has expired yet. */
		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 800633c:	463a      	mov	r2, r7
 800633e:	f107 030c 	add.w	r3, r7, #12
 8006342:	4611      	mov	r1, r2
 8006344:	4618      	mov	r0, r3
 8006346:	f000 ff71 	bl	800722c <xTaskCheckForTimeOut>
 800634a:	4603      	mov	r3, r0
 800634c:	2b00      	cmp	r3, #0
 800634e:	d132      	bne.n	80063b6 <xQueueSemaphoreTake+0x1de>
		{
			/* A block time is specified and not expired.  If the semaphore
			count is 0 then enter the Blocked state to wait for a semaphore to
			become available.  As semaphores are implemented with queues the
			queue being empty is equivalent to the semaphore count being 0. */
			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 8006350:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 8006352:	f000 f974 	bl	800663e <prvIsQueueEmpty>
 8006356:	4603      	mov	r3, r0
 8006358:	2b00      	cmp	r3, #0
 800635a:	d026      	beq.n	80063aa <xQueueSemaphoreTake+0x1d2>
			{
				traceBLOCKING_ON_QUEUE_RECEIVE( pxQueue );

				#if ( configUSE_MUTEXES == 1 )
				{
					if( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX )
 800635c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800635e:	681b      	ldr	r3, [r3, #0]
 8006360:	2b00      	cmp	r3, #0
 8006362:	d109      	bne.n	8006378 <xQueueSemaphoreTake+0x1a0>
					{
						taskENTER_CRITICAL();
 8006364:	f001 ff02 	bl	800816c <vPortEnterCritical>
						{
							xInheritanceOccurred = xTaskPriorityInherit( pxQueue->u.xSemaphore.xMutexHolder );
 8006368:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800636a:	689b      	ldr	r3, [r3, #8]
 800636c:	4618      	mov	r0, r3
 800636e:	f001 f8cb 	bl	8007508 <xTaskPriorityInherit>
 8006372:	6338      	str	r0, [r7, #48]	; 0x30
						}
						taskEXIT_CRITICAL();
 8006374:	f001 ff2e 	bl	80081d4 <vPortExitCritical>
						mtCOVERAGE_TEST_MARKER();
					}
				}
				#endif

				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait );
 8006378:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800637a:	3324      	adds	r3, #36	; 0x24
 800637c:	683a      	ldr	r2, [r7, #0]
 800637e:	4611      	mov	r1, r2
 8006380:	4618      	mov	r0, r3
 8006382:	f000 fe83 	bl	800708c <vTaskPlaceOnEventList>
				prvUnlockQueue( pxQueue );
 8006386:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 8006388:	f000 f907 	bl	800659a <prvUnlockQueue>
				if( xTaskResumeAll() == pdFALSE )
 800638c:	f000 fc86 	bl	8006c9c <xTaskResumeAll>
 8006390:	4603      	mov	r3, r0
 8006392:	2b00      	cmp	r3, #0
 8006394:	f47f af66 	bne.w	8006264 <xQueueSemaphoreTake+0x8c>
				{
					portYIELD_WITHIN_API();
 8006398:	4b18      	ldr	r3, [pc, #96]	; (80063fc <xQueueSemaphoreTake+0x224>)
 800639a:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800639e:	601a      	str	r2, [r3, #0]
 80063a0:	f3bf 8f4f 	dsb	sy
 80063a4:	f3bf 8f6f 	isb	sy
 80063a8:	e75c      	b.n	8006264 <xQueueSemaphoreTake+0x8c>
			}
			else
			{
				/* There was no timeout and the semaphore count was not 0, so
				attempt to take the semaphore again. */
				prvUnlockQueue( pxQueue );
 80063aa:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 80063ac:	f000 f8f5 	bl	800659a <prvUnlockQueue>
				( void ) xTaskResumeAll();
 80063b0:	f000 fc74 	bl	8006c9c <xTaskResumeAll>
 80063b4:	e756      	b.n	8006264 <xQueueSemaphoreTake+0x8c>
			}
		}
		else
		{
			/* Timed out. */
			prvUnlockQueue( pxQueue );
 80063b6:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 80063b8:	f000 f8ef 	bl	800659a <prvUnlockQueue>
			( void ) xTaskResumeAll();
 80063bc:	f000 fc6e 	bl	8006c9c <xTaskResumeAll>

			/* If the semaphore count is 0 exit now as the timeout has
			expired.  Otherwise return to attempt to take the semaphore that is
			known to be available.  As semaphores are implemented by queues the
			queue being empty is equivalent to the semaphore count being 0. */
			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 80063c0:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 80063c2:	f000 f93c 	bl	800663e <prvIsQueueEmpty>
 80063c6:	4603      	mov	r3, r0
 80063c8:	2b00      	cmp	r3, #0
 80063ca:	f43f af4b 	beq.w	8006264 <xQueueSemaphoreTake+0x8c>
				#if ( configUSE_MUTEXES == 1 )
				{
					/* xInheritanceOccurred could only have be set if
					pxQueue->uxQueueType == queueQUEUE_IS_MUTEX so no need to
					test the mutex type again to check it is actually a mutex. */
					if( xInheritanceOccurred != pdFALSE )
 80063ce:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80063d0:	2b00      	cmp	r3, #0
 80063d2:	d00d      	beq.n	80063f0 <xQueueSemaphoreTake+0x218>
					{
						taskENTER_CRITICAL();
 80063d4:	f001 feca 	bl	800816c <vPortEnterCritical>
							/* This task blocking on the mutex caused another
							task to inherit this task's priority.  Now this task
							has timed out the priority should be disinherited
							again, but only as low as the next highest priority
							task that is waiting for the same mutex. */
							uxHighestWaitingPriority = prvGetDisinheritPriorityAfterTimeout( pxQueue );
 80063d8:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 80063da:	f000 f836 	bl	800644a <prvGetDisinheritPriorityAfterTimeout>
 80063de:	6278      	str	r0, [r7, #36]	; 0x24
							vTaskPriorityDisinheritAfterTimeout( pxQueue->u.xSemaphore.xMutexHolder, uxHighestWaitingPriority );
 80063e0:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80063e2:	689b      	ldr	r3, [r3, #8]
 80063e4:	6a79      	ldr	r1, [r7, #36]	; 0x24
 80063e6:	4618      	mov	r0, r3
 80063e8:	f001 f968 	bl	80076bc <vTaskPriorityDisinheritAfterTimeout>
						}
						taskEXIT_CRITICAL();
 80063ec:	f001 fef2 	bl	80081d4 <vPortExitCritical>
					}
				}
				#endif /* configUSE_MUTEXES */

				traceQUEUE_RECEIVE_FAILED( pxQueue );
				return errQUEUE_EMPTY;
 80063f0:	2300      	movs	r3, #0
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}
	} /*lint -restore */
}
 80063f2:	4618      	mov	r0, r3
 80063f4:	3738      	adds	r7, #56	; 0x38
 80063f6:	46bd      	mov	sp, r7
 80063f8:	bd80      	pop	{r7, pc}
 80063fa:	bf00      	nop
 80063fc:	e000ed04 	.word	0xe000ed04

08006400 <vQueueDelete>:
	return uxReturn;
} /*lint !e818 Pointer cannot be declared const as xQueue is a typedef not pointer. */
/*-----------------------------------------------------------*/

void vQueueDelete( QueueHandle_t xQueue )
{
 8006400:	b580      	push	{r7, lr}
 8006402:	b084      	sub	sp, #16
 8006404:	af00      	add	r7, sp, #0
 8006406:	6078      	str	r0, [r7, #4]
Queue_t * const pxQueue = xQueue;
 8006408:	687b      	ldr	r3, [r7, #4]
 800640a:	60fb      	str	r3, [r7, #12]

	configASSERT( pxQueue );
 800640c:	68fb      	ldr	r3, [r7, #12]
 800640e:	2b00      	cmp	r3, #0
 8006410:	d10c      	bne.n	800642c <vQueueDelete+0x2c>
	__asm volatile
 8006412:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006416:	b672      	cpsid	i
 8006418:	f383 8811 	msr	BASEPRI, r3
 800641c:	f3bf 8f6f 	isb	sy
 8006420:	f3bf 8f4f 	dsb	sy
 8006424:	b662      	cpsie	i
 8006426:	60bb      	str	r3, [r7, #8]
}
 8006428:	bf00      	nop
 800642a:	e7fe      	b.n	800642a <vQueueDelete+0x2a>
	traceQUEUE_DELETE( pxQueue );

	#if ( configQUEUE_REGISTRY_SIZE > 0 )
	{
		vQueueUnregisterQueue( pxQueue );
 800642c:	68f8      	ldr	r0, [r7, #12]
 800642e:	f000 f95f 	bl	80066f0 <vQueueUnregisterQueue>
	}
	#elif( ( configSUPPORT_DYNAMIC_ALLOCATION == 1 ) && ( configSUPPORT_STATIC_ALLOCATION == 1 ) )
	{
		/* The queue could have been allocated statically or dynamically, so
		check before attempting to free the memory. */
		if( pxQueue->ucStaticallyAllocated == ( uint8_t ) pdFALSE )
 8006432:	68fb      	ldr	r3, [r7, #12]
 8006434:	f893 3046 	ldrb.w	r3, [r3, #70]	; 0x46
 8006438:	2b00      	cmp	r3, #0
 800643a:	d102      	bne.n	8006442 <vQueueDelete+0x42>
		{
			vPortFree( pxQueue );
 800643c:	68f8      	ldr	r0, [r7, #12]
 800643e:	f002 f88b 	bl	8008558 <vPortFree>
		/* The queue must have been statically allocated, so is not going to be
		deleted.  Avoid compiler warnings about the unused parameter. */
		( void ) pxQueue;
	}
	#endif /* configSUPPORT_DYNAMIC_ALLOCATION */
}
 8006442:	bf00      	nop
 8006444:	3710      	adds	r7, #16
 8006446:	46bd      	mov	sp, r7
 8006448:	bd80      	pop	{r7, pc}

0800644a <prvGetDisinheritPriorityAfterTimeout>:
/*-----------------------------------------------------------*/

#if( configUSE_MUTEXES == 1 )

	static UBaseType_t prvGetDisinheritPriorityAfterTimeout( const Queue_t * const pxQueue )
	{
 800644a:	b480      	push	{r7}
 800644c:	b085      	sub	sp, #20
 800644e:	af00      	add	r7, sp, #0
 8006450:	6078      	str	r0, [r7, #4]
		priority, but the waiting task times out, then the holder should
		disinherit the priority - but only down to the highest priority of any
		other tasks that are waiting for the same mutex.  For this purpose,
		return the priority of the highest priority task that is waiting for the
		mutex. */
		if( listCURRENT_LIST_LENGTH( &( pxQueue->xTasksWaitingToReceive ) ) > 0U )
 8006452:	687b      	ldr	r3, [r7, #4]
 8006454:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006456:	2b00      	cmp	r3, #0
 8006458:	d006      	beq.n	8006468 <prvGetDisinheritPriorityAfterTimeout+0x1e>
		{
			uxHighestPriorityOfWaitingTasks = ( UBaseType_t ) configMAX_PRIORITIES - ( UBaseType_t ) listGET_ITEM_VALUE_OF_HEAD_ENTRY( &( pxQueue->xTasksWaitingToReceive ) );
 800645a:	687b      	ldr	r3, [r7, #4]
 800645c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800645e:	681b      	ldr	r3, [r3, #0]
 8006460:	f1c3 0338 	rsb	r3, r3, #56	; 0x38
 8006464:	60fb      	str	r3, [r7, #12]
 8006466:	e001      	b.n	800646c <prvGetDisinheritPriorityAfterTimeout+0x22>
		}
		else
		{
			uxHighestPriorityOfWaitingTasks = tskIDLE_PRIORITY;
 8006468:	2300      	movs	r3, #0
 800646a:	60fb      	str	r3, [r7, #12]
		}

		return uxHighestPriorityOfWaitingTasks;
 800646c:	68fb      	ldr	r3, [r7, #12]
	}
 800646e:	4618      	mov	r0, r3
 8006470:	3714      	adds	r7, #20
 8006472:	46bd      	mov	sp, r7
 8006474:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006478:	4770      	bx	lr

0800647a <prvCopyDataToQueue>:

#endif /* configUSE_MUTEXES */
/*-----------------------------------------------------------*/

static BaseType_t prvCopyDataToQueue( Queue_t * const pxQueue, const void *pvItemToQueue, const BaseType_t xPosition )
{
 800647a:	b580      	push	{r7, lr}
 800647c:	b086      	sub	sp, #24
 800647e:	af00      	add	r7, sp, #0
 8006480:	60f8      	str	r0, [r7, #12]
 8006482:	60b9      	str	r1, [r7, #8]
 8006484:	607a      	str	r2, [r7, #4]
BaseType_t xReturn = pdFALSE;
 8006486:	2300      	movs	r3, #0
 8006488:	617b      	str	r3, [r7, #20]
UBaseType_t uxMessagesWaiting;

	/* This function is called from a critical section. */

	uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 800648a:	68fb      	ldr	r3, [r7, #12]
 800648c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800648e:	613b      	str	r3, [r7, #16]

	if( pxQueue->uxItemSize == ( UBaseType_t ) 0 )
 8006490:	68fb      	ldr	r3, [r7, #12]
 8006492:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006494:	2b00      	cmp	r3, #0
 8006496:	d10d      	bne.n	80064b4 <prvCopyDataToQueue+0x3a>
	{
		#if ( configUSE_MUTEXES == 1 )
		{
			if( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX )
 8006498:	68fb      	ldr	r3, [r7, #12]
 800649a:	681b      	ldr	r3, [r3, #0]
 800649c:	2b00      	cmp	r3, #0
 800649e:	d14d      	bne.n	800653c <prvCopyDataToQueue+0xc2>
			{
				/* The mutex is no longer being held. */
				xReturn = xTaskPriorityDisinherit( pxQueue->u.xSemaphore.xMutexHolder );
 80064a0:	68fb      	ldr	r3, [r7, #12]
 80064a2:	689b      	ldr	r3, [r3, #8]
 80064a4:	4618      	mov	r0, r3
 80064a6:	f001 f897 	bl	80075d8 <xTaskPriorityDisinherit>
 80064aa:	6178      	str	r0, [r7, #20]
				pxQueue->u.xSemaphore.xMutexHolder = NULL;
 80064ac:	68fb      	ldr	r3, [r7, #12]
 80064ae:	2200      	movs	r2, #0
 80064b0:	609a      	str	r2, [r3, #8]
 80064b2:	e043      	b.n	800653c <prvCopyDataToQueue+0xc2>
				mtCOVERAGE_TEST_MARKER();
			}
		}
		#endif /* configUSE_MUTEXES */
	}
	else if( xPosition == queueSEND_TO_BACK )
 80064b4:	687b      	ldr	r3, [r7, #4]
 80064b6:	2b00      	cmp	r3, #0
 80064b8:	d119      	bne.n	80064ee <prvCopyDataToQueue+0x74>
	{
		( void ) memcpy( ( void * ) pxQueue->pcWriteTo, pvItemToQueue, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e418 !e9087 MISRA exception as the casts are only redundant for some ports, plus previous logic ensures a null pointer can only be passed to memcpy() if the copy size is 0.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes. */
 80064ba:	68fb      	ldr	r3, [r7, #12]
 80064bc:	6858      	ldr	r0, [r3, #4]
 80064be:	68fb      	ldr	r3, [r7, #12]
 80064c0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80064c2:	461a      	mov	r2, r3
 80064c4:	68b9      	ldr	r1, [r7, #8]
 80064c6:	f002 f9e5 	bl	8008894 <memcpy>
		pxQueue->pcWriteTo += pxQueue->uxItemSize; /*lint !e9016 Pointer arithmetic on char types ok, especially in this use case where it is the clearest way of conveying intent. */
 80064ca:	68fb      	ldr	r3, [r7, #12]
 80064cc:	685a      	ldr	r2, [r3, #4]
 80064ce:	68fb      	ldr	r3, [r7, #12]
 80064d0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80064d2:	441a      	add	r2, r3
 80064d4:	68fb      	ldr	r3, [r7, #12]
 80064d6:	605a      	str	r2, [r3, #4]
		if( pxQueue->pcWriteTo >= pxQueue->u.xQueue.pcTail ) /*lint !e946 MISRA exception justified as comparison of pointers is the cleanest solution. */
 80064d8:	68fb      	ldr	r3, [r7, #12]
 80064da:	685a      	ldr	r2, [r3, #4]
 80064dc:	68fb      	ldr	r3, [r7, #12]
 80064de:	689b      	ldr	r3, [r3, #8]
 80064e0:	429a      	cmp	r2, r3
 80064e2:	d32b      	bcc.n	800653c <prvCopyDataToQueue+0xc2>
		{
			pxQueue->pcWriteTo = pxQueue->pcHead;
 80064e4:	68fb      	ldr	r3, [r7, #12]
 80064e6:	681a      	ldr	r2, [r3, #0]
 80064e8:	68fb      	ldr	r3, [r7, #12]
 80064ea:	605a      	str	r2, [r3, #4]
 80064ec:	e026      	b.n	800653c <prvCopyDataToQueue+0xc2>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	else
	{
		( void ) memcpy( ( void * ) pxQueue->u.xQueue.pcReadFrom, pvItemToQueue, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e9087 !e418 MISRA exception as the casts are only redundant for some ports.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes.  Assert checks null pointer only used when length is 0. */
 80064ee:	68fb      	ldr	r3, [r7, #12]
 80064f0:	68d8      	ldr	r0, [r3, #12]
 80064f2:	68fb      	ldr	r3, [r7, #12]
 80064f4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80064f6:	461a      	mov	r2, r3
 80064f8:	68b9      	ldr	r1, [r7, #8]
 80064fa:	f002 f9cb 	bl	8008894 <memcpy>
		pxQueue->u.xQueue.pcReadFrom -= pxQueue->uxItemSize;
 80064fe:	68fb      	ldr	r3, [r7, #12]
 8006500:	68da      	ldr	r2, [r3, #12]
 8006502:	68fb      	ldr	r3, [r7, #12]
 8006504:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006506:	425b      	negs	r3, r3
 8006508:	441a      	add	r2, r3
 800650a:	68fb      	ldr	r3, [r7, #12]
 800650c:	60da      	str	r2, [r3, #12]
		if( pxQueue->u.xQueue.pcReadFrom < pxQueue->pcHead ) /*lint !e946 MISRA exception justified as comparison of pointers is the cleanest solution. */
 800650e:	68fb      	ldr	r3, [r7, #12]
 8006510:	68da      	ldr	r2, [r3, #12]
 8006512:	68fb      	ldr	r3, [r7, #12]
 8006514:	681b      	ldr	r3, [r3, #0]
 8006516:	429a      	cmp	r2, r3
 8006518:	d207      	bcs.n	800652a <prvCopyDataToQueue+0xb0>
		{
			pxQueue->u.xQueue.pcReadFrom = ( pxQueue->u.xQueue.pcTail - pxQueue->uxItemSize );
 800651a:	68fb      	ldr	r3, [r7, #12]
 800651c:	689a      	ldr	r2, [r3, #8]
 800651e:	68fb      	ldr	r3, [r7, #12]
 8006520:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006522:	425b      	negs	r3, r3
 8006524:	441a      	add	r2, r3
 8006526:	68fb      	ldr	r3, [r7, #12]
 8006528:	60da      	str	r2, [r3, #12]
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}

		if( xPosition == queueOVERWRITE )
 800652a:	687b      	ldr	r3, [r7, #4]
 800652c:	2b02      	cmp	r3, #2
 800652e:	d105      	bne.n	800653c <prvCopyDataToQueue+0xc2>
		{
			if( uxMessagesWaiting > ( UBaseType_t ) 0 )
 8006530:	693b      	ldr	r3, [r7, #16]
 8006532:	2b00      	cmp	r3, #0
 8006534:	d002      	beq.n	800653c <prvCopyDataToQueue+0xc2>
			{
				/* An item is not being added but overwritten, so subtract
				one from the recorded number of items in the queue so when
				one is added again below the number of recorded items remains
				correct. */
				--uxMessagesWaiting;
 8006536:	693b      	ldr	r3, [r7, #16]
 8006538:	3b01      	subs	r3, #1
 800653a:	613b      	str	r3, [r7, #16]
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}

	pxQueue->uxMessagesWaiting = uxMessagesWaiting + ( UBaseType_t ) 1;
 800653c:	693b      	ldr	r3, [r7, #16]
 800653e:	1c5a      	adds	r2, r3, #1
 8006540:	68fb      	ldr	r3, [r7, #12]
 8006542:	639a      	str	r2, [r3, #56]	; 0x38

	return xReturn;
 8006544:	697b      	ldr	r3, [r7, #20]
}
 8006546:	4618      	mov	r0, r3
 8006548:	3718      	adds	r7, #24
 800654a:	46bd      	mov	sp, r7
 800654c:	bd80      	pop	{r7, pc}

0800654e <prvCopyDataFromQueue>:
/*-----------------------------------------------------------*/

static void prvCopyDataFromQueue( Queue_t * const pxQueue, void * const pvBuffer )
{
 800654e:	b580      	push	{r7, lr}
 8006550:	b082      	sub	sp, #8
 8006552:	af00      	add	r7, sp, #0
 8006554:	6078      	str	r0, [r7, #4]
 8006556:	6039      	str	r1, [r7, #0]
	if( pxQueue->uxItemSize != ( UBaseType_t ) 0 )
 8006558:	687b      	ldr	r3, [r7, #4]
 800655a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800655c:	2b00      	cmp	r3, #0
 800655e:	d018      	beq.n	8006592 <prvCopyDataFromQueue+0x44>
	{
		pxQueue->u.xQueue.pcReadFrom += pxQueue->uxItemSize; /*lint !e9016 Pointer arithmetic on char types ok, especially in this use case where it is the clearest way of conveying intent. */
 8006560:	687b      	ldr	r3, [r7, #4]
 8006562:	68da      	ldr	r2, [r3, #12]
 8006564:	687b      	ldr	r3, [r7, #4]
 8006566:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006568:	441a      	add	r2, r3
 800656a:	687b      	ldr	r3, [r7, #4]
 800656c:	60da      	str	r2, [r3, #12]
		if( pxQueue->u.xQueue.pcReadFrom >= pxQueue->u.xQueue.pcTail ) /*lint !e946 MISRA exception justified as use of the relational operator is the cleanest solutions. */
 800656e:	687b      	ldr	r3, [r7, #4]
 8006570:	68da      	ldr	r2, [r3, #12]
 8006572:	687b      	ldr	r3, [r7, #4]
 8006574:	689b      	ldr	r3, [r3, #8]
 8006576:	429a      	cmp	r2, r3
 8006578:	d303      	bcc.n	8006582 <prvCopyDataFromQueue+0x34>
		{
			pxQueue->u.xQueue.pcReadFrom = pxQueue->pcHead;
 800657a:	687b      	ldr	r3, [r7, #4]
 800657c:	681a      	ldr	r2, [r3, #0]
 800657e:	687b      	ldr	r3, [r7, #4]
 8006580:	60da      	str	r2, [r3, #12]
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
		( void ) memcpy( ( void * ) pvBuffer, ( void * ) pxQueue->u.xQueue.pcReadFrom, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e418 !e9087 MISRA exception as the casts are only redundant for some ports.  Also previous logic ensures a null pointer can only be passed to memcpy() when the count is 0.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes. */
 8006582:	687b      	ldr	r3, [r7, #4]
 8006584:	68d9      	ldr	r1, [r3, #12]
 8006586:	687b      	ldr	r3, [r7, #4]
 8006588:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800658a:	461a      	mov	r2, r3
 800658c:	6838      	ldr	r0, [r7, #0]
 800658e:	f002 f981 	bl	8008894 <memcpy>
	}
}
 8006592:	bf00      	nop
 8006594:	3708      	adds	r7, #8
 8006596:	46bd      	mov	sp, r7
 8006598:	bd80      	pop	{r7, pc}

0800659a <prvUnlockQueue>:
/*-----------------------------------------------------------*/

static void prvUnlockQueue( Queue_t * const pxQueue )
{
 800659a:	b580      	push	{r7, lr}
 800659c:	b084      	sub	sp, #16
 800659e:	af00      	add	r7, sp, #0
 80065a0:	6078      	str	r0, [r7, #4]

	/* The lock counts contains the number of extra data items placed or
	removed from the queue while the queue was locked.  When a queue is
	locked items can be added or removed, but the event lists cannot be
	updated. */
	taskENTER_CRITICAL();
 80065a2:	f001 fde3 	bl	800816c <vPortEnterCritical>
	{
		int8_t cTxLock = pxQueue->cTxLock;
 80065a6:	687b      	ldr	r3, [r7, #4]
 80065a8:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 80065ac:	73fb      	strb	r3, [r7, #15]

		/* See if data was added to the queue while it was locked. */
		while( cTxLock > queueLOCKED_UNMODIFIED )
 80065ae:	e011      	b.n	80065d4 <prvUnlockQueue+0x3a>
			}
			#else /* configUSE_QUEUE_SETS */
			{
				/* Tasks that are removed from the event list will get added to
				the pending ready list as the scheduler is still suspended. */
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 80065b0:	687b      	ldr	r3, [r7, #4]
 80065b2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80065b4:	2b00      	cmp	r3, #0
 80065b6:	d012      	beq.n	80065de <prvUnlockQueue+0x44>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 80065b8:	687b      	ldr	r3, [r7, #4]
 80065ba:	3324      	adds	r3, #36	; 0x24
 80065bc:	4618      	mov	r0, r3
 80065be:	f000 fdb9 	bl	8007134 <xTaskRemoveFromEventList>
 80065c2:	4603      	mov	r3, r0
 80065c4:	2b00      	cmp	r3, #0
 80065c6:	d001      	beq.n	80065cc <prvUnlockQueue+0x32>
					{
						/* The task waiting has a higher priority so record that
						a context switch is required. */
						vTaskMissedYield();
 80065c8:	f000 fe96 	bl	80072f8 <vTaskMissedYield>
					break;
				}
			}
			#endif /* configUSE_QUEUE_SETS */

			--cTxLock;
 80065cc:	7bfb      	ldrb	r3, [r7, #15]
 80065ce:	3b01      	subs	r3, #1
 80065d0:	b2db      	uxtb	r3, r3
 80065d2:	73fb      	strb	r3, [r7, #15]
		while( cTxLock > queueLOCKED_UNMODIFIED )
 80065d4:	f997 300f 	ldrsb.w	r3, [r7, #15]
 80065d8:	2b00      	cmp	r3, #0
 80065da:	dce9      	bgt.n	80065b0 <prvUnlockQueue+0x16>
 80065dc:	e000      	b.n	80065e0 <prvUnlockQueue+0x46>
					break;
 80065de:	bf00      	nop
		}

		pxQueue->cTxLock = queueUNLOCKED;
 80065e0:	687b      	ldr	r3, [r7, #4]
 80065e2:	22ff      	movs	r2, #255	; 0xff
 80065e4:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
	}
	taskEXIT_CRITICAL();
 80065e8:	f001 fdf4 	bl	80081d4 <vPortExitCritical>

	/* Do the same for the Rx lock. */
	taskENTER_CRITICAL();
 80065ec:	f001 fdbe 	bl	800816c <vPortEnterCritical>
	{
		int8_t cRxLock = pxQueue->cRxLock;
 80065f0:	687b      	ldr	r3, [r7, #4]
 80065f2:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 80065f6:	73bb      	strb	r3, [r7, #14]

		while( cRxLock > queueLOCKED_UNMODIFIED )
 80065f8:	e011      	b.n	800661e <prvUnlockQueue+0x84>
		{
			if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 80065fa:	687b      	ldr	r3, [r7, #4]
 80065fc:	691b      	ldr	r3, [r3, #16]
 80065fe:	2b00      	cmp	r3, #0
 8006600:	d012      	beq.n	8006628 <prvUnlockQueue+0x8e>
			{
				if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 8006602:	687b      	ldr	r3, [r7, #4]
 8006604:	3310      	adds	r3, #16
 8006606:	4618      	mov	r0, r3
 8006608:	f000 fd94 	bl	8007134 <xTaskRemoveFromEventList>
 800660c:	4603      	mov	r3, r0
 800660e:	2b00      	cmp	r3, #0
 8006610:	d001      	beq.n	8006616 <prvUnlockQueue+0x7c>
				{
					vTaskMissedYield();
 8006612:	f000 fe71 	bl	80072f8 <vTaskMissedYield>
				else
				{
					mtCOVERAGE_TEST_MARKER();
				}

				--cRxLock;
 8006616:	7bbb      	ldrb	r3, [r7, #14]
 8006618:	3b01      	subs	r3, #1
 800661a:	b2db      	uxtb	r3, r3
 800661c:	73bb      	strb	r3, [r7, #14]
		while( cRxLock > queueLOCKED_UNMODIFIED )
 800661e:	f997 300e 	ldrsb.w	r3, [r7, #14]
 8006622:	2b00      	cmp	r3, #0
 8006624:	dce9      	bgt.n	80065fa <prvUnlockQueue+0x60>
 8006626:	e000      	b.n	800662a <prvUnlockQueue+0x90>
			}
			else
			{
				break;
 8006628:	bf00      	nop
			}
		}

		pxQueue->cRxLock = queueUNLOCKED;
 800662a:	687b      	ldr	r3, [r7, #4]
 800662c:	22ff      	movs	r2, #255	; 0xff
 800662e:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
	}
	taskEXIT_CRITICAL();
 8006632:	f001 fdcf 	bl	80081d4 <vPortExitCritical>
}
 8006636:	bf00      	nop
 8006638:	3710      	adds	r7, #16
 800663a:	46bd      	mov	sp, r7
 800663c:	bd80      	pop	{r7, pc}

0800663e <prvIsQueueEmpty>:
/*-----------------------------------------------------------*/

static BaseType_t prvIsQueueEmpty( const Queue_t *pxQueue )
{
 800663e:	b580      	push	{r7, lr}
 8006640:	b084      	sub	sp, #16
 8006642:	af00      	add	r7, sp, #0
 8006644:	6078      	str	r0, [r7, #4]
BaseType_t xReturn;

	taskENTER_CRITICAL();
 8006646:	f001 fd91 	bl	800816c <vPortEnterCritical>
	{
		if( pxQueue->uxMessagesWaiting == ( UBaseType_t )  0 )
 800664a:	687b      	ldr	r3, [r7, #4]
 800664c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800664e:	2b00      	cmp	r3, #0
 8006650:	d102      	bne.n	8006658 <prvIsQueueEmpty+0x1a>
		{
			xReturn = pdTRUE;
 8006652:	2301      	movs	r3, #1
 8006654:	60fb      	str	r3, [r7, #12]
 8006656:	e001      	b.n	800665c <prvIsQueueEmpty+0x1e>
		}
		else
		{
			xReturn = pdFALSE;
 8006658:	2300      	movs	r3, #0
 800665a:	60fb      	str	r3, [r7, #12]
		}
	}
	taskEXIT_CRITICAL();
 800665c:	f001 fdba 	bl	80081d4 <vPortExitCritical>

	return xReturn;
 8006660:	68fb      	ldr	r3, [r7, #12]
}
 8006662:	4618      	mov	r0, r3
 8006664:	3710      	adds	r7, #16
 8006666:	46bd      	mov	sp, r7
 8006668:	bd80      	pop	{r7, pc}

0800666a <prvIsQueueFull>:
	return xReturn;
} /*lint !e818 xQueue could not be pointer to const because it is a typedef. */
/*-----------------------------------------------------------*/

static BaseType_t prvIsQueueFull( const Queue_t *pxQueue )
{
 800666a:	b580      	push	{r7, lr}
 800666c:	b084      	sub	sp, #16
 800666e:	af00      	add	r7, sp, #0
 8006670:	6078      	str	r0, [r7, #4]
BaseType_t xReturn;

	taskENTER_CRITICAL();
 8006672:	f001 fd7b 	bl	800816c <vPortEnterCritical>
	{
		if( pxQueue->uxMessagesWaiting == pxQueue->uxLength )
 8006676:	687b      	ldr	r3, [r7, #4]
 8006678:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 800667a:	687b      	ldr	r3, [r7, #4]
 800667c:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800667e:	429a      	cmp	r2, r3
 8006680:	d102      	bne.n	8006688 <prvIsQueueFull+0x1e>
		{
			xReturn = pdTRUE;
 8006682:	2301      	movs	r3, #1
 8006684:	60fb      	str	r3, [r7, #12]
 8006686:	e001      	b.n	800668c <prvIsQueueFull+0x22>
		}
		else
		{
			xReturn = pdFALSE;
 8006688:	2300      	movs	r3, #0
 800668a:	60fb      	str	r3, [r7, #12]
		}
	}
	taskEXIT_CRITICAL();
 800668c:	f001 fda2 	bl	80081d4 <vPortExitCritical>

	return xReturn;
 8006690:	68fb      	ldr	r3, [r7, #12]
}
 8006692:	4618      	mov	r0, r3
 8006694:	3710      	adds	r7, #16
 8006696:	46bd      	mov	sp, r7
 8006698:	bd80      	pop	{r7, pc}
	...

0800669c <vQueueAddToRegistry>:
/*-----------------------------------------------------------*/

#if ( configQUEUE_REGISTRY_SIZE > 0 )

	void vQueueAddToRegistry( QueueHandle_t xQueue, const char *pcQueueName ) /*lint !e971 Unqualified char types are allowed for strings and single characters only. */
	{
 800669c:	b480      	push	{r7}
 800669e:	b085      	sub	sp, #20
 80066a0:	af00      	add	r7, sp, #0
 80066a2:	6078      	str	r0, [r7, #4]
 80066a4:	6039      	str	r1, [r7, #0]
	UBaseType_t ux;

		/* See if there is an empty space in the registry.  A NULL name denotes
		a free slot. */
		for( ux = ( UBaseType_t ) 0U; ux < ( UBaseType_t ) configQUEUE_REGISTRY_SIZE; ux++ )
 80066a6:	2300      	movs	r3, #0
 80066a8:	60fb      	str	r3, [r7, #12]
 80066aa:	e014      	b.n	80066d6 <vQueueAddToRegistry+0x3a>
		{
			if( xQueueRegistry[ ux ].pcQueueName == NULL )
 80066ac:	4a0f      	ldr	r2, [pc, #60]	; (80066ec <vQueueAddToRegistry+0x50>)
 80066ae:	68fb      	ldr	r3, [r7, #12]
 80066b0:	f852 3033 	ldr.w	r3, [r2, r3, lsl #3]
 80066b4:	2b00      	cmp	r3, #0
 80066b6:	d10b      	bne.n	80066d0 <vQueueAddToRegistry+0x34>
			{
				/* Store the information on this queue. */
				xQueueRegistry[ ux ].pcQueueName = pcQueueName;
 80066b8:	490c      	ldr	r1, [pc, #48]	; (80066ec <vQueueAddToRegistry+0x50>)
 80066ba:	68fb      	ldr	r3, [r7, #12]
 80066bc:	683a      	ldr	r2, [r7, #0]
 80066be:	f841 2033 	str.w	r2, [r1, r3, lsl #3]
				xQueueRegistry[ ux ].xHandle = xQueue;
 80066c2:	4a0a      	ldr	r2, [pc, #40]	; (80066ec <vQueueAddToRegistry+0x50>)
 80066c4:	68fb      	ldr	r3, [r7, #12]
 80066c6:	00db      	lsls	r3, r3, #3
 80066c8:	4413      	add	r3, r2
 80066ca:	687a      	ldr	r2, [r7, #4]
 80066cc:	605a      	str	r2, [r3, #4]

				traceQUEUE_REGISTRY_ADD( xQueue, pcQueueName );
				break;
 80066ce:	e006      	b.n	80066de <vQueueAddToRegistry+0x42>
		for( ux = ( UBaseType_t ) 0U; ux < ( UBaseType_t ) configQUEUE_REGISTRY_SIZE; ux++ )
 80066d0:	68fb      	ldr	r3, [r7, #12]
 80066d2:	3301      	adds	r3, #1
 80066d4:	60fb      	str	r3, [r7, #12]
 80066d6:	68fb      	ldr	r3, [r7, #12]
 80066d8:	2b07      	cmp	r3, #7
 80066da:	d9e7      	bls.n	80066ac <vQueueAddToRegistry+0x10>
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}
	}
 80066dc:	bf00      	nop
 80066de:	bf00      	nop
 80066e0:	3714      	adds	r7, #20
 80066e2:	46bd      	mov	sp, r7
 80066e4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80066e8:	4770      	bx	lr
 80066ea:	bf00      	nop
 80066ec:	20002e48 	.word	0x20002e48

080066f0 <vQueueUnregisterQueue>:
/*-----------------------------------------------------------*/

#if ( configQUEUE_REGISTRY_SIZE > 0 )

	void vQueueUnregisterQueue( QueueHandle_t xQueue )
	{
 80066f0:	b480      	push	{r7}
 80066f2:	b085      	sub	sp, #20
 80066f4:	af00      	add	r7, sp, #0
 80066f6:	6078      	str	r0, [r7, #4]
	UBaseType_t ux;

		/* See if the handle of the queue being unregistered in actually in the
		registry. */
		for( ux = ( UBaseType_t ) 0U; ux < ( UBaseType_t ) configQUEUE_REGISTRY_SIZE; ux++ )
 80066f8:	2300      	movs	r3, #0
 80066fa:	60fb      	str	r3, [r7, #12]
 80066fc:	e016      	b.n	800672c <vQueueUnregisterQueue+0x3c>
		{
			if( xQueueRegistry[ ux ].xHandle == xQueue )
 80066fe:	4a10      	ldr	r2, [pc, #64]	; (8006740 <vQueueUnregisterQueue+0x50>)
 8006700:	68fb      	ldr	r3, [r7, #12]
 8006702:	00db      	lsls	r3, r3, #3
 8006704:	4413      	add	r3, r2
 8006706:	685b      	ldr	r3, [r3, #4]
 8006708:	687a      	ldr	r2, [r7, #4]
 800670a:	429a      	cmp	r2, r3
 800670c:	d10b      	bne.n	8006726 <vQueueUnregisterQueue+0x36>
			{
				/* Set the name to NULL to show that this slot if free again. */
				xQueueRegistry[ ux ].pcQueueName = NULL;
 800670e:	4a0c      	ldr	r2, [pc, #48]	; (8006740 <vQueueUnregisterQueue+0x50>)
 8006710:	68fb      	ldr	r3, [r7, #12]
 8006712:	2100      	movs	r1, #0
 8006714:	f842 1033 	str.w	r1, [r2, r3, lsl #3]

				/* Set the handle to NULL to ensure the same queue handle cannot
				appear in the registry twice if it is added, removed, then
				added again. */
				xQueueRegistry[ ux ].xHandle = ( QueueHandle_t ) 0;
 8006718:	4a09      	ldr	r2, [pc, #36]	; (8006740 <vQueueUnregisterQueue+0x50>)
 800671a:	68fb      	ldr	r3, [r7, #12]
 800671c:	00db      	lsls	r3, r3, #3
 800671e:	4413      	add	r3, r2
 8006720:	2200      	movs	r2, #0
 8006722:	605a      	str	r2, [r3, #4]
				break;
 8006724:	e006      	b.n	8006734 <vQueueUnregisterQueue+0x44>
		for( ux = ( UBaseType_t ) 0U; ux < ( UBaseType_t ) configQUEUE_REGISTRY_SIZE; ux++ )
 8006726:	68fb      	ldr	r3, [r7, #12]
 8006728:	3301      	adds	r3, #1
 800672a:	60fb      	str	r3, [r7, #12]
 800672c:	68fb      	ldr	r3, [r7, #12]
 800672e:	2b07      	cmp	r3, #7
 8006730:	d9e5      	bls.n	80066fe <vQueueUnregisterQueue+0xe>
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}

	} /*lint !e818 xQueue could not be pointer to const because it is a typedef. */
 8006732:	bf00      	nop
 8006734:	bf00      	nop
 8006736:	3714      	adds	r7, #20
 8006738:	46bd      	mov	sp, r7
 800673a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800673e:	4770      	bx	lr
 8006740:	20002e48 	.word	0x20002e48

08006744 <vQueueWaitForMessageRestricted>:
/*-----------------------------------------------------------*/

#if ( configUSE_TIMERS == 1 )

	void vQueueWaitForMessageRestricted( QueueHandle_t xQueue, TickType_t xTicksToWait, const BaseType_t xWaitIndefinitely )
	{
 8006744:	b580      	push	{r7, lr}
 8006746:	b086      	sub	sp, #24
 8006748:	af00      	add	r7, sp, #0
 800674a:	60f8      	str	r0, [r7, #12]
 800674c:	60b9      	str	r1, [r7, #8]
 800674e:	607a      	str	r2, [r7, #4]
	Queue_t * const pxQueue = xQueue;
 8006750:	68fb      	ldr	r3, [r7, #12]
 8006752:	617b      	str	r3, [r7, #20]
		will not actually cause the task to block, just place it on a blocked
		list.  It will not block until the scheduler is unlocked - at which
		time a yield will be performed.  If an item is added to the queue while
		the queue is locked, and the calling task blocks on the queue, then the
		calling task will be immediately unblocked when the queue is unlocked. */
		prvLockQueue( pxQueue );
 8006754:	f001 fd0a 	bl	800816c <vPortEnterCritical>
 8006758:	697b      	ldr	r3, [r7, #20]
 800675a:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 800675e:	b25b      	sxtb	r3, r3
 8006760:	f1b3 3fff 	cmp.w	r3, #4294967295
 8006764:	d103      	bne.n	800676e <vQueueWaitForMessageRestricted+0x2a>
 8006766:	697b      	ldr	r3, [r7, #20]
 8006768:	2200      	movs	r2, #0
 800676a:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 800676e:	697b      	ldr	r3, [r7, #20]
 8006770:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 8006774:	b25b      	sxtb	r3, r3
 8006776:	f1b3 3fff 	cmp.w	r3, #4294967295
 800677a:	d103      	bne.n	8006784 <vQueueWaitForMessageRestricted+0x40>
 800677c:	697b      	ldr	r3, [r7, #20]
 800677e:	2200      	movs	r2, #0
 8006780:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 8006784:	f001 fd26 	bl	80081d4 <vPortExitCritical>
		if( pxQueue->uxMessagesWaiting == ( UBaseType_t ) 0U )
 8006788:	697b      	ldr	r3, [r7, #20]
 800678a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800678c:	2b00      	cmp	r3, #0
 800678e:	d106      	bne.n	800679e <vQueueWaitForMessageRestricted+0x5a>
		{
			/* There is nothing in the queue, block for the specified period. */
			vTaskPlaceOnEventListRestricted( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait, xWaitIndefinitely );
 8006790:	697b      	ldr	r3, [r7, #20]
 8006792:	3324      	adds	r3, #36	; 0x24
 8006794:	687a      	ldr	r2, [r7, #4]
 8006796:	68b9      	ldr	r1, [r7, #8]
 8006798:	4618      	mov	r0, r3
 800679a:	f000 fc9d 	bl	80070d8 <vTaskPlaceOnEventListRestricted>
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
		prvUnlockQueue( pxQueue );
 800679e:	6978      	ldr	r0, [r7, #20]
 80067a0:	f7ff fefb 	bl	800659a <prvUnlockQueue>
	}
 80067a4:	bf00      	nop
 80067a6:	3718      	adds	r7, #24
 80067a8:	46bd      	mov	sp, r7
 80067aa:	bd80      	pop	{r7, pc}

080067ac <xTaskCreateStatic>:
									const uint32_t ulStackDepth,
									void * const pvParameters,
									UBaseType_t uxPriority,
									StackType_t * const puxStackBuffer,
									StaticTask_t * const pxTaskBuffer )
	{
 80067ac:	b580      	push	{r7, lr}
 80067ae:	b08e      	sub	sp, #56	; 0x38
 80067b0:	af04      	add	r7, sp, #16
 80067b2:	60f8      	str	r0, [r7, #12]
 80067b4:	60b9      	str	r1, [r7, #8]
 80067b6:	607a      	str	r2, [r7, #4]
 80067b8:	603b      	str	r3, [r7, #0]
	TCB_t *pxNewTCB;
	TaskHandle_t xReturn;

		configASSERT( puxStackBuffer != NULL );
 80067ba:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80067bc:	2b00      	cmp	r3, #0
 80067be:	d10c      	bne.n	80067da <xTaskCreateStatic+0x2e>
	__asm volatile
 80067c0:	f04f 0350 	mov.w	r3, #80	; 0x50
 80067c4:	b672      	cpsid	i
 80067c6:	f383 8811 	msr	BASEPRI, r3
 80067ca:	f3bf 8f6f 	isb	sy
 80067ce:	f3bf 8f4f 	dsb	sy
 80067d2:	b662      	cpsie	i
 80067d4:	623b      	str	r3, [r7, #32]
}
 80067d6:	bf00      	nop
 80067d8:	e7fe      	b.n	80067d8 <xTaskCreateStatic+0x2c>
		configASSERT( pxTaskBuffer != NULL );
 80067da:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80067dc:	2b00      	cmp	r3, #0
 80067de:	d10c      	bne.n	80067fa <xTaskCreateStatic+0x4e>
	__asm volatile
 80067e0:	f04f 0350 	mov.w	r3, #80	; 0x50
 80067e4:	b672      	cpsid	i
 80067e6:	f383 8811 	msr	BASEPRI, r3
 80067ea:	f3bf 8f6f 	isb	sy
 80067ee:	f3bf 8f4f 	dsb	sy
 80067f2:	b662      	cpsie	i
 80067f4:	61fb      	str	r3, [r7, #28]
}
 80067f6:	bf00      	nop
 80067f8:	e7fe      	b.n	80067f8 <xTaskCreateStatic+0x4c>
		#if( configASSERT_DEFINED == 1 )
		{
			/* Sanity check that the size of the structure used to declare a
			variable of type StaticTask_t equals the size of the real task
			structure. */
			volatile size_t xSize = sizeof( StaticTask_t );
 80067fa:	23a8      	movs	r3, #168	; 0xa8
 80067fc:	613b      	str	r3, [r7, #16]
			configASSERT( xSize == sizeof( TCB_t ) );
 80067fe:	693b      	ldr	r3, [r7, #16]
 8006800:	2ba8      	cmp	r3, #168	; 0xa8
 8006802:	d00c      	beq.n	800681e <xTaskCreateStatic+0x72>
	__asm volatile
 8006804:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006808:	b672      	cpsid	i
 800680a:	f383 8811 	msr	BASEPRI, r3
 800680e:	f3bf 8f6f 	isb	sy
 8006812:	f3bf 8f4f 	dsb	sy
 8006816:	b662      	cpsie	i
 8006818:	61bb      	str	r3, [r7, #24]
}
 800681a:	bf00      	nop
 800681c:	e7fe      	b.n	800681c <xTaskCreateStatic+0x70>
			( void ) xSize; /* Prevent lint warning when configASSERT() is not used. */
 800681e:	693b      	ldr	r3, [r7, #16]
		}
		#endif /* configASSERT_DEFINED */


		if( ( pxTaskBuffer != NULL ) && ( puxStackBuffer != NULL ) )
 8006820:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8006822:	2b00      	cmp	r3, #0
 8006824:	d01e      	beq.n	8006864 <xTaskCreateStatic+0xb8>
 8006826:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8006828:	2b00      	cmp	r3, #0
 800682a:	d01b      	beq.n	8006864 <xTaskCreateStatic+0xb8>
		{
			/* The memory used for the task's TCB and stack are passed into this
			function - use them. */
			pxNewTCB = ( TCB_t * ) pxTaskBuffer; /*lint !e740 !e9087 Unusual cast is ok as the structures are designed to have the same alignment, and the size is checked by an assert. */
 800682c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800682e:	627b      	str	r3, [r7, #36]	; 0x24
			pxNewTCB->pxStack = ( StackType_t * ) puxStackBuffer;
 8006830:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006832:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8006834:	631a      	str	r2, [r3, #48]	; 0x30

			#if( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e731 !e9029 Macro has been consolidated for readability reasons. */
			{
				/* Tasks can be created statically or dynamically, so note this
				task was created statically in case the task is later deleted. */
				pxNewTCB->ucStaticallyAllocated = tskSTATICALLY_ALLOCATED_STACK_AND_TCB;
 8006836:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006838:	2202      	movs	r2, #2
 800683a:	f883 20a5 	strb.w	r2, [r3, #165]	; 0xa5
			}
			#endif /* tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE */

			prvInitialiseNewTask( pxTaskCode, pcName, ulStackDepth, pvParameters, uxPriority, &xReturn, pxNewTCB, NULL );
 800683e:	2300      	movs	r3, #0
 8006840:	9303      	str	r3, [sp, #12]
 8006842:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006844:	9302      	str	r3, [sp, #8]
 8006846:	f107 0314 	add.w	r3, r7, #20
 800684a:	9301      	str	r3, [sp, #4]
 800684c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800684e:	9300      	str	r3, [sp, #0]
 8006850:	683b      	ldr	r3, [r7, #0]
 8006852:	687a      	ldr	r2, [r7, #4]
 8006854:	68b9      	ldr	r1, [r7, #8]
 8006856:	68f8      	ldr	r0, [r7, #12]
 8006858:	f000 f850 	bl	80068fc <prvInitialiseNewTask>
			prvAddNewTaskToReadyList( pxNewTCB );
 800685c:	6a78      	ldr	r0, [r7, #36]	; 0x24
 800685e:	f000 f8f5 	bl	8006a4c <prvAddNewTaskToReadyList>
 8006862:	e001      	b.n	8006868 <xTaskCreateStatic+0xbc>
		}
		else
		{
			xReturn = NULL;
 8006864:	2300      	movs	r3, #0
 8006866:	617b      	str	r3, [r7, #20]
		}

		return xReturn;
 8006868:	697b      	ldr	r3, [r7, #20]
	}
 800686a:	4618      	mov	r0, r3
 800686c:	3728      	adds	r7, #40	; 0x28
 800686e:	46bd      	mov	sp, r7
 8006870:	bd80      	pop	{r7, pc}

08006872 <xTaskCreate>:
							const char * const pcName,		/*lint !e971 Unqualified char types are allowed for strings and single characters only. */
							const configSTACK_DEPTH_TYPE usStackDepth,
							void * const pvParameters,
							UBaseType_t uxPriority,
							TaskHandle_t * const pxCreatedTask )
	{
 8006872:	b580      	push	{r7, lr}
 8006874:	b08c      	sub	sp, #48	; 0x30
 8006876:	af04      	add	r7, sp, #16
 8006878:	60f8      	str	r0, [r7, #12]
 800687a:	60b9      	str	r1, [r7, #8]
 800687c:	603b      	str	r3, [r7, #0]
 800687e:	4613      	mov	r3, r2
 8006880:	80fb      	strh	r3, [r7, #6]
		#else /* portSTACK_GROWTH */
		{
		StackType_t *pxStack;

			/* Allocate space for the stack used by the task being created. */
			pxStack = pvPortMalloc( ( ( ( size_t ) usStackDepth ) * sizeof( StackType_t ) ) ); /*lint !e9079 All values returned by pvPortMalloc() have at least the alignment required by the MCU's stack and this allocation is the stack. */
 8006882:	88fb      	ldrh	r3, [r7, #6]
 8006884:	009b      	lsls	r3, r3, #2
 8006886:	4618      	mov	r0, r3
 8006888:	f001 fd9c 	bl	80083c4 <pvPortMalloc>
 800688c:	6178      	str	r0, [r7, #20]

			if( pxStack != NULL )
 800688e:	697b      	ldr	r3, [r7, #20]
 8006890:	2b00      	cmp	r3, #0
 8006892:	d00e      	beq.n	80068b2 <xTaskCreate+0x40>
			{
				/* Allocate space for the TCB. */
				pxNewTCB = ( TCB_t * ) pvPortMalloc( sizeof( TCB_t ) ); /*lint !e9087 !e9079 All values returned by pvPortMalloc() have at least the alignment required by the MCU's stack, and the first member of TCB_t is always a pointer to the task's stack. */
 8006894:	20a8      	movs	r0, #168	; 0xa8
 8006896:	f001 fd95 	bl	80083c4 <pvPortMalloc>
 800689a:	61f8      	str	r0, [r7, #28]

				if( pxNewTCB != NULL )
 800689c:	69fb      	ldr	r3, [r7, #28]
 800689e:	2b00      	cmp	r3, #0
 80068a0:	d003      	beq.n	80068aa <xTaskCreate+0x38>
				{
					/* Store the stack location in the TCB. */
					pxNewTCB->pxStack = pxStack;
 80068a2:	69fb      	ldr	r3, [r7, #28]
 80068a4:	697a      	ldr	r2, [r7, #20]
 80068a6:	631a      	str	r2, [r3, #48]	; 0x30
 80068a8:	e005      	b.n	80068b6 <xTaskCreate+0x44>
				}
				else
				{
					/* The stack cannot be used as the TCB was not created.  Free
					it again. */
					vPortFree( pxStack );
 80068aa:	6978      	ldr	r0, [r7, #20]
 80068ac:	f001 fe54 	bl	8008558 <vPortFree>
 80068b0:	e001      	b.n	80068b6 <xTaskCreate+0x44>
				}
			}
			else
			{
				pxNewTCB = NULL;
 80068b2:	2300      	movs	r3, #0
 80068b4:	61fb      	str	r3, [r7, #28]
			}
		}
		#endif /* portSTACK_GROWTH */

		if( pxNewTCB != NULL )
 80068b6:	69fb      	ldr	r3, [r7, #28]
 80068b8:	2b00      	cmp	r3, #0
 80068ba:	d017      	beq.n	80068ec <xTaskCreate+0x7a>
		{
			#if( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e9029 !e731 Macro has been consolidated for readability reasons. */
			{
				/* Tasks can be created statically or dynamically, so note this
				task was created dynamically in case it is later deleted. */
				pxNewTCB->ucStaticallyAllocated = tskDYNAMICALLY_ALLOCATED_STACK_AND_TCB;
 80068bc:	69fb      	ldr	r3, [r7, #28]
 80068be:	2200      	movs	r2, #0
 80068c0:	f883 20a5 	strb.w	r2, [r3, #165]	; 0xa5
			}
			#endif /* tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE */

			prvInitialiseNewTask( pxTaskCode, pcName, ( uint32_t ) usStackDepth, pvParameters, uxPriority, pxCreatedTask, pxNewTCB, NULL );
 80068c4:	88fa      	ldrh	r2, [r7, #6]
 80068c6:	2300      	movs	r3, #0
 80068c8:	9303      	str	r3, [sp, #12]
 80068ca:	69fb      	ldr	r3, [r7, #28]
 80068cc:	9302      	str	r3, [sp, #8]
 80068ce:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80068d0:	9301      	str	r3, [sp, #4]
 80068d2:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80068d4:	9300      	str	r3, [sp, #0]
 80068d6:	683b      	ldr	r3, [r7, #0]
 80068d8:	68b9      	ldr	r1, [r7, #8]
 80068da:	68f8      	ldr	r0, [r7, #12]
 80068dc:	f000 f80e 	bl	80068fc <prvInitialiseNewTask>
			prvAddNewTaskToReadyList( pxNewTCB );
 80068e0:	69f8      	ldr	r0, [r7, #28]
 80068e2:	f000 f8b3 	bl	8006a4c <prvAddNewTaskToReadyList>
			xReturn = pdPASS;
 80068e6:	2301      	movs	r3, #1
 80068e8:	61bb      	str	r3, [r7, #24]
 80068ea:	e002      	b.n	80068f2 <xTaskCreate+0x80>
		}
		else
		{
			xReturn = errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY;
 80068ec:	f04f 33ff 	mov.w	r3, #4294967295
 80068f0:	61bb      	str	r3, [r7, #24]
		}

		return xReturn;
 80068f2:	69bb      	ldr	r3, [r7, #24]
	}
 80068f4:	4618      	mov	r0, r3
 80068f6:	3720      	adds	r7, #32
 80068f8:	46bd      	mov	sp, r7
 80068fa:	bd80      	pop	{r7, pc}

080068fc <prvInitialiseNewTask>:
									void * const pvParameters,
									UBaseType_t uxPriority,
									TaskHandle_t * const pxCreatedTask,
									TCB_t *pxNewTCB,
									const MemoryRegion_t * const xRegions )
{
 80068fc:	b580      	push	{r7, lr}
 80068fe:	b088      	sub	sp, #32
 8006900:	af00      	add	r7, sp, #0
 8006902:	60f8      	str	r0, [r7, #12]
 8006904:	60b9      	str	r1, [r7, #8]
 8006906:	607a      	str	r2, [r7, #4]
 8006908:	603b      	str	r3, [r7, #0]

	/* Avoid dependency on memset() if it is not required. */
	#if( tskSET_NEW_STACKS_TO_KNOWN_VALUE == 1 )
	{
		/* Fill the stack with a known value to assist debugging. */
		( void ) memset( pxNewTCB->pxStack, ( int ) tskSTACK_FILL_BYTE, ( size_t ) ulStackDepth * sizeof( StackType_t ) );
 800690a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800690c:	6b18      	ldr	r0, [r3, #48]	; 0x30
 800690e:	687b      	ldr	r3, [r7, #4]
 8006910:	009b      	lsls	r3, r3, #2
 8006912:	461a      	mov	r2, r3
 8006914:	21a5      	movs	r1, #165	; 0xa5
 8006916:	f001 ff39 	bl	800878c <memset>
	grows from high memory to low (as per the 80x86) or vice versa.
	portSTACK_GROWTH is used to make the result positive or negative as required
	by the port. */
	#if( portSTACK_GROWTH < 0 )
	{
		pxTopOfStack = &( pxNewTCB->pxStack[ ulStackDepth - ( uint32_t ) 1 ] );
 800691a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800691c:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 800691e:	6879      	ldr	r1, [r7, #4]
 8006920:	f06f 4340 	mvn.w	r3, #3221225472	; 0xc0000000
 8006924:	440b      	add	r3, r1
 8006926:	009b      	lsls	r3, r3, #2
 8006928:	4413      	add	r3, r2
 800692a:	61bb      	str	r3, [r7, #24]
		pxTopOfStack = ( StackType_t * ) ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack ) & ( ~( ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) ) ); /*lint !e923 !e9033 !e9078 MISRA exception.  Avoiding casts between pointers and integers is not practical.  Size differences accounted for using portPOINTER_SIZE_TYPE type.  Checked by assert(). */
 800692c:	69bb      	ldr	r3, [r7, #24]
 800692e:	f023 0307 	bic.w	r3, r3, #7
 8006932:	61bb      	str	r3, [r7, #24]

		/* Check the alignment of the calculated top of stack is correct. */
		configASSERT( ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack & ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) == 0UL ) );
 8006934:	69bb      	ldr	r3, [r7, #24]
 8006936:	f003 0307 	and.w	r3, r3, #7
 800693a:	2b00      	cmp	r3, #0
 800693c:	d00c      	beq.n	8006958 <prvInitialiseNewTask+0x5c>
	__asm volatile
 800693e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006942:	b672      	cpsid	i
 8006944:	f383 8811 	msr	BASEPRI, r3
 8006948:	f3bf 8f6f 	isb	sy
 800694c:	f3bf 8f4f 	dsb	sy
 8006950:	b662      	cpsie	i
 8006952:	617b      	str	r3, [r7, #20]
}
 8006954:	bf00      	nop
 8006956:	e7fe      	b.n	8006956 <prvInitialiseNewTask+0x5a>
		pxNewTCB->pxEndOfStack = pxNewTCB->pxStack + ( ulStackDepth - ( uint32_t ) 1 );
	}
	#endif /* portSTACK_GROWTH */

	/* Store the task name in the TCB. */
	if( pcName != NULL )
 8006958:	68bb      	ldr	r3, [r7, #8]
 800695a:	2b00      	cmp	r3, #0
 800695c:	d01f      	beq.n	800699e <prvInitialiseNewTask+0xa2>
	{
		for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 800695e:	2300      	movs	r3, #0
 8006960:	61fb      	str	r3, [r7, #28]
 8006962:	e012      	b.n	800698a <prvInitialiseNewTask+0x8e>
		{
			pxNewTCB->pcTaskName[ x ] = pcName[ x ];
 8006964:	68ba      	ldr	r2, [r7, #8]
 8006966:	69fb      	ldr	r3, [r7, #28]
 8006968:	4413      	add	r3, r2
 800696a:	7819      	ldrb	r1, [r3, #0]
 800696c:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800696e:	69fb      	ldr	r3, [r7, #28]
 8006970:	4413      	add	r3, r2
 8006972:	3334      	adds	r3, #52	; 0x34
 8006974:	460a      	mov	r2, r1
 8006976:	701a      	strb	r2, [r3, #0]

			/* Don't copy all configMAX_TASK_NAME_LEN if the string is shorter than
			configMAX_TASK_NAME_LEN characters just in case the memory after the
			string is not accessible (extremely unlikely). */
			if( pcName[ x ] == ( char ) 0x00 )
 8006978:	68ba      	ldr	r2, [r7, #8]
 800697a:	69fb      	ldr	r3, [r7, #28]
 800697c:	4413      	add	r3, r2
 800697e:	781b      	ldrb	r3, [r3, #0]
 8006980:	2b00      	cmp	r3, #0
 8006982:	d006      	beq.n	8006992 <prvInitialiseNewTask+0x96>
		for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 8006984:	69fb      	ldr	r3, [r7, #28]
 8006986:	3301      	adds	r3, #1
 8006988:	61fb      	str	r3, [r7, #28]
 800698a:	69fb      	ldr	r3, [r7, #28]
 800698c:	2b0f      	cmp	r3, #15
 800698e:	d9e9      	bls.n	8006964 <prvInitialiseNewTask+0x68>
 8006990:	e000      	b.n	8006994 <prvInitialiseNewTask+0x98>
			{
				break;
 8006992:	bf00      	nop
			}
		}

		/* Ensure the name string is terminated in the case that the string length
		was greater or equal to configMAX_TASK_NAME_LEN. */
		pxNewTCB->pcTaskName[ configMAX_TASK_NAME_LEN - 1 ] = '\0';
 8006994:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006996:	2200      	movs	r2, #0
 8006998:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 800699c:	e003      	b.n	80069a6 <prvInitialiseNewTask+0xaa>
	}
	else
	{
		/* The task has not been given a name, so just ensure there is a NULL
		terminator when it is read out. */
		pxNewTCB->pcTaskName[ 0 ] = 0x00;
 800699e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80069a0:	2200      	movs	r2, #0
 80069a2:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
	}

	/* This is used as an array index so must ensure it's not too large.  First
	remove the privilege bit if one is present. */
	if( uxPriority >= ( UBaseType_t ) configMAX_PRIORITIES )
 80069a6:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80069a8:	2b37      	cmp	r3, #55	; 0x37
 80069aa:	d901      	bls.n	80069b0 <prvInitialiseNewTask+0xb4>
	{
		uxPriority = ( UBaseType_t ) configMAX_PRIORITIES - ( UBaseType_t ) 1U;
 80069ac:	2337      	movs	r3, #55	; 0x37
 80069ae:	62bb      	str	r3, [r7, #40]	; 0x28
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	pxNewTCB->uxPriority = uxPriority;
 80069b0:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80069b2:	6aba      	ldr	r2, [r7, #40]	; 0x28
 80069b4:	62da      	str	r2, [r3, #44]	; 0x2c
	#if ( configUSE_MUTEXES == 1 )
	{
		pxNewTCB->uxBasePriority = uxPriority;
 80069b6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80069b8:	6aba      	ldr	r2, [r7, #40]	; 0x28
 80069ba:	64da      	str	r2, [r3, #76]	; 0x4c
		pxNewTCB->uxMutexesHeld = 0;
 80069bc:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80069be:	2200      	movs	r2, #0
 80069c0:	651a      	str	r2, [r3, #80]	; 0x50
	}
	#endif /* configUSE_MUTEXES */

	vListInitialiseItem( &( pxNewTCB->xStateListItem ) );
 80069c2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80069c4:	3304      	adds	r3, #4
 80069c6:	4618      	mov	r0, r3
 80069c8:	f7fe ff22 	bl	8005810 <vListInitialiseItem>
	vListInitialiseItem( &( pxNewTCB->xEventListItem ) );
 80069cc:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80069ce:	3318      	adds	r3, #24
 80069d0:	4618      	mov	r0, r3
 80069d2:	f7fe ff1d 	bl	8005810 <vListInitialiseItem>

	/* Set the pxNewTCB as a link back from the ListItem_t.  This is so we can get
	back to	the containing TCB from a generic item in a list. */
	listSET_LIST_ITEM_OWNER( &( pxNewTCB->xStateListItem ), pxNewTCB );
 80069d6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80069d8:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 80069da:	611a      	str	r2, [r3, #16]

	/* Event lists are always in priority order. */
	listSET_LIST_ITEM_VALUE( &( pxNewTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 80069dc:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80069de:	f1c3 0238 	rsb	r2, r3, #56	; 0x38
 80069e2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80069e4:	619a      	str	r2, [r3, #24]
	listSET_LIST_ITEM_OWNER( &( pxNewTCB->xEventListItem ), pxNewTCB );
 80069e6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80069e8:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 80069ea:	625a      	str	r2, [r3, #36]	; 0x24
	}
	#endif

	#if ( configUSE_TASK_NOTIFICATIONS == 1 )
	{
		pxNewTCB->ulNotifiedValue = 0;
 80069ec:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80069ee:	2200      	movs	r2, #0
 80069f0:	f8c3 20a0 	str.w	r2, [r3, #160]	; 0xa0
		pxNewTCB->ucNotifyState = taskNOT_WAITING_NOTIFICATION;
 80069f4:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80069f6:	2200      	movs	r2, #0
 80069f8:	f883 20a4 	strb.w	r2, [r3, #164]	; 0xa4
	#endif

	#if ( configUSE_NEWLIB_REENTRANT == 1 )
	{
		/* Initialise this task's Newlib reent structure. */
		_REENT_INIT_PTR( ( &( pxNewTCB->xNewLib_reent ) ) );
 80069fc:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80069fe:	3354      	adds	r3, #84	; 0x54
 8006a00:	224c      	movs	r2, #76	; 0x4c
 8006a02:	2100      	movs	r1, #0
 8006a04:	4618      	mov	r0, r3
 8006a06:	f001 fec1 	bl	800878c <memset>
 8006a0a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006a0c:	4a0c      	ldr	r2, [pc, #48]	; (8006a40 <prvInitialiseNewTask+0x144>)
 8006a0e:	659a      	str	r2, [r3, #88]	; 0x58
 8006a10:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006a12:	4a0c      	ldr	r2, [pc, #48]	; (8006a44 <prvInitialiseNewTask+0x148>)
 8006a14:	65da      	str	r2, [r3, #92]	; 0x5c
 8006a16:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006a18:	4a0b      	ldr	r2, [pc, #44]	; (8006a48 <prvInitialiseNewTask+0x14c>)
 8006a1a:	661a      	str	r2, [r3, #96]	; 0x60
			}
			#endif /* portSTACK_GROWTH */
		}
		#else /* portHAS_STACK_OVERFLOW_CHECKING */
		{
			pxNewTCB->pxTopOfStack = pxPortInitialiseStack( pxTopOfStack, pxTaskCode, pvParameters );
 8006a1c:	683a      	ldr	r2, [r7, #0]
 8006a1e:	68f9      	ldr	r1, [r7, #12]
 8006a20:	69b8      	ldr	r0, [r7, #24]
 8006a22:	f001 fa95 	bl	8007f50 <pxPortInitialiseStack>
 8006a26:	4602      	mov	r2, r0
 8006a28:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006a2a:	601a      	str	r2, [r3, #0]
		}
		#endif /* portHAS_STACK_OVERFLOW_CHECKING */
	}
	#endif /* portUSING_MPU_WRAPPERS */

	if( pxCreatedTask != NULL )
 8006a2c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8006a2e:	2b00      	cmp	r3, #0
 8006a30:	d002      	beq.n	8006a38 <prvInitialiseNewTask+0x13c>
	{
		/* Pass the handle out in an anonymous way.  The handle can be used to
		change the created task's priority, delete the created task, etc.*/
		*pxCreatedTask = ( TaskHandle_t ) pxNewTCB;
 8006a32:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8006a34:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8006a36:	601a      	str	r2, [r3, #0]
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 8006a38:	bf00      	nop
 8006a3a:	3720      	adds	r7, #32
 8006a3c:	46bd      	mov	sp, r7
 8006a3e:	bd80      	pop	{r7, pc}
 8006a40:	2000b4d4 	.word	0x2000b4d4
 8006a44:	2000b53c 	.word	0x2000b53c
 8006a48:	2000b5a4 	.word	0x2000b5a4

08006a4c <prvAddNewTaskToReadyList>:
/*-----------------------------------------------------------*/

static void prvAddNewTaskToReadyList( TCB_t *pxNewTCB )
{
 8006a4c:	b580      	push	{r7, lr}
 8006a4e:	b082      	sub	sp, #8
 8006a50:	af00      	add	r7, sp, #0
 8006a52:	6078      	str	r0, [r7, #4]
	/* Ensure interrupts don't access the task lists while the lists are being
	updated. */
	taskENTER_CRITICAL();
 8006a54:	f001 fb8a 	bl	800816c <vPortEnterCritical>
	{
		uxCurrentNumberOfTasks++;
 8006a58:	4b2d      	ldr	r3, [pc, #180]	; (8006b10 <prvAddNewTaskToReadyList+0xc4>)
 8006a5a:	681b      	ldr	r3, [r3, #0]
 8006a5c:	3301      	adds	r3, #1
 8006a5e:	4a2c      	ldr	r2, [pc, #176]	; (8006b10 <prvAddNewTaskToReadyList+0xc4>)
 8006a60:	6013      	str	r3, [r2, #0]
		if( pxCurrentTCB == NULL )
 8006a62:	4b2c      	ldr	r3, [pc, #176]	; (8006b14 <prvAddNewTaskToReadyList+0xc8>)
 8006a64:	681b      	ldr	r3, [r3, #0]
 8006a66:	2b00      	cmp	r3, #0
 8006a68:	d109      	bne.n	8006a7e <prvAddNewTaskToReadyList+0x32>
		{
			/* There are no other tasks, or all the other tasks are in
			the suspended state - make this the current task. */
			pxCurrentTCB = pxNewTCB;
 8006a6a:	4a2a      	ldr	r2, [pc, #168]	; (8006b14 <prvAddNewTaskToReadyList+0xc8>)
 8006a6c:	687b      	ldr	r3, [r7, #4]
 8006a6e:	6013      	str	r3, [r2, #0]

			if( uxCurrentNumberOfTasks == ( UBaseType_t ) 1 )
 8006a70:	4b27      	ldr	r3, [pc, #156]	; (8006b10 <prvAddNewTaskToReadyList+0xc4>)
 8006a72:	681b      	ldr	r3, [r3, #0]
 8006a74:	2b01      	cmp	r3, #1
 8006a76:	d110      	bne.n	8006a9a <prvAddNewTaskToReadyList+0x4e>
			{
				/* This is the first task to be created so do the preliminary
				initialisation required.  We will not recover if this call
				fails, but we will report the failure. */
				prvInitialiseTaskLists();
 8006a78:	f000 fc64 	bl	8007344 <prvInitialiseTaskLists>
 8006a7c:	e00d      	b.n	8006a9a <prvAddNewTaskToReadyList+0x4e>
		else
		{
			/* If the scheduler is not already running, make this task the
			current task if it is the highest priority task to be created
			so far. */
			if( xSchedulerRunning == pdFALSE )
 8006a7e:	4b26      	ldr	r3, [pc, #152]	; (8006b18 <prvAddNewTaskToReadyList+0xcc>)
 8006a80:	681b      	ldr	r3, [r3, #0]
 8006a82:	2b00      	cmp	r3, #0
 8006a84:	d109      	bne.n	8006a9a <prvAddNewTaskToReadyList+0x4e>
			{
				if( pxCurrentTCB->uxPriority <= pxNewTCB->uxPriority )
 8006a86:	4b23      	ldr	r3, [pc, #140]	; (8006b14 <prvAddNewTaskToReadyList+0xc8>)
 8006a88:	681b      	ldr	r3, [r3, #0]
 8006a8a:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8006a8c:	687b      	ldr	r3, [r7, #4]
 8006a8e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8006a90:	429a      	cmp	r2, r3
 8006a92:	d802      	bhi.n	8006a9a <prvAddNewTaskToReadyList+0x4e>
				{
					pxCurrentTCB = pxNewTCB;
 8006a94:	4a1f      	ldr	r2, [pc, #124]	; (8006b14 <prvAddNewTaskToReadyList+0xc8>)
 8006a96:	687b      	ldr	r3, [r7, #4]
 8006a98:	6013      	str	r3, [r2, #0]
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}

		uxTaskNumber++;
 8006a9a:	4b20      	ldr	r3, [pc, #128]	; (8006b1c <prvAddNewTaskToReadyList+0xd0>)
 8006a9c:	681b      	ldr	r3, [r3, #0]
 8006a9e:	3301      	adds	r3, #1
 8006aa0:	4a1e      	ldr	r2, [pc, #120]	; (8006b1c <prvAddNewTaskToReadyList+0xd0>)
 8006aa2:	6013      	str	r3, [r2, #0]

		#if ( configUSE_TRACE_FACILITY == 1 )
		{
			/* Add a counter into the TCB for tracing only. */
			pxNewTCB->uxTCBNumber = uxTaskNumber;
 8006aa4:	4b1d      	ldr	r3, [pc, #116]	; (8006b1c <prvAddNewTaskToReadyList+0xd0>)
 8006aa6:	681a      	ldr	r2, [r3, #0]
 8006aa8:	687b      	ldr	r3, [r7, #4]
 8006aaa:	645a      	str	r2, [r3, #68]	; 0x44
		}
		#endif /* configUSE_TRACE_FACILITY */
		traceTASK_CREATE( pxNewTCB );

		prvAddTaskToReadyList( pxNewTCB );
 8006aac:	687b      	ldr	r3, [r7, #4]
 8006aae:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8006ab0:	4b1b      	ldr	r3, [pc, #108]	; (8006b20 <prvAddNewTaskToReadyList+0xd4>)
 8006ab2:	681b      	ldr	r3, [r3, #0]
 8006ab4:	429a      	cmp	r2, r3
 8006ab6:	d903      	bls.n	8006ac0 <prvAddNewTaskToReadyList+0x74>
 8006ab8:	687b      	ldr	r3, [r7, #4]
 8006aba:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8006abc:	4a18      	ldr	r2, [pc, #96]	; (8006b20 <prvAddNewTaskToReadyList+0xd4>)
 8006abe:	6013      	str	r3, [r2, #0]
 8006ac0:	687b      	ldr	r3, [r7, #4]
 8006ac2:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8006ac4:	4613      	mov	r3, r2
 8006ac6:	009b      	lsls	r3, r3, #2
 8006ac8:	4413      	add	r3, r2
 8006aca:	009b      	lsls	r3, r3, #2
 8006acc:	4a15      	ldr	r2, [pc, #84]	; (8006b24 <prvAddNewTaskToReadyList+0xd8>)
 8006ace:	441a      	add	r2, r3
 8006ad0:	687b      	ldr	r3, [r7, #4]
 8006ad2:	3304      	adds	r3, #4
 8006ad4:	4619      	mov	r1, r3
 8006ad6:	4610      	mov	r0, r2
 8006ad8:	f7fe fea7 	bl	800582a <vListInsertEnd>

		portSETUP_TCB( pxNewTCB );
	}
	taskEXIT_CRITICAL();
 8006adc:	f001 fb7a 	bl	80081d4 <vPortExitCritical>

	if( xSchedulerRunning != pdFALSE )
 8006ae0:	4b0d      	ldr	r3, [pc, #52]	; (8006b18 <prvAddNewTaskToReadyList+0xcc>)
 8006ae2:	681b      	ldr	r3, [r3, #0]
 8006ae4:	2b00      	cmp	r3, #0
 8006ae6:	d00e      	beq.n	8006b06 <prvAddNewTaskToReadyList+0xba>
	{
		/* If the created task is of a higher priority than the current task
		then it should run now. */
		if( pxCurrentTCB->uxPriority < pxNewTCB->uxPriority )
 8006ae8:	4b0a      	ldr	r3, [pc, #40]	; (8006b14 <prvAddNewTaskToReadyList+0xc8>)
 8006aea:	681b      	ldr	r3, [r3, #0]
 8006aec:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8006aee:	687b      	ldr	r3, [r7, #4]
 8006af0:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8006af2:	429a      	cmp	r2, r3
 8006af4:	d207      	bcs.n	8006b06 <prvAddNewTaskToReadyList+0xba>
		{
			taskYIELD_IF_USING_PREEMPTION();
 8006af6:	4b0c      	ldr	r3, [pc, #48]	; (8006b28 <prvAddNewTaskToReadyList+0xdc>)
 8006af8:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8006afc:	601a      	str	r2, [r3, #0]
 8006afe:	f3bf 8f4f 	dsb	sy
 8006b02:	f3bf 8f6f 	isb	sy
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 8006b06:	bf00      	nop
 8006b08:	3708      	adds	r7, #8
 8006b0a:	46bd      	mov	sp, r7
 8006b0c:	bd80      	pop	{r7, pc}
 8006b0e:	bf00      	nop
 8006b10:	2000335c 	.word	0x2000335c
 8006b14:	20002e88 	.word	0x20002e88
 8006b18:	20003368 	.word	0x20003368
 8006b1c:	20003378 	.word	0x20003378
 8006b20:	20003364 	.word	0x20003364
 8006b24:	20002e8c 	.word	0x20002e8c
 8006b28:	e000ed04 	.word	0xe000ed04

08006b2c <vTaskDelay>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelay == 1 )

	void vTaskDelay( const TickType_t xTicksToDelay )
	{
 8006b2c:	b580      	push	{r7, lr}
 8006b2e:	b084      	sub	sp, #16
 8006b30:	af00      	add	r7, sp, #0
 8006b32:	6078      	str	r0, [r7, #4]
	BaseType_t xAlreadyYielded = pdFALSE;
 8006b34:	2300      	movs	r3, #0
 8006b36:	60fb      	str	r3, [r7, #12]

		/* A delay time of zero just forces a reschedule. */
		if( xTicksToDelay > ( TickType_t ) 0U )
 8006b38:	687b      	ldr	r3, [r7, #4]
 8006b3a:	2b00      	cmp	r3, #0
 8006b3c:	d019      	beq.n	8006b72 <vTaskDelay+0x46>
		{
			configASSERT( uxSchedulerSuspended == 0 );
 8006b3e:	4b14      	ldr	r3, [pc, #80]	; (8006b90 <vTaskDelay+0x64>)
 8006b40:	681b      	ldr	r3, [r3, #0]
 8006b42:	2b00      	cmp	r3, #0
 8006b44:	d00c      	beq.n	8006b60 <vTaskDelay+0x34>
	__asm volatile
 8006b46:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006b4a:	b672      	cpsid	i
 8006b4c:	f383 8811 	msr	BASEPRI, r3
 8006b50:	f3bf 8f6f 	isb	sy
 8006b54:	f3bf 8f4f 	dsb	sy
 8006b58:	b662      	cpsie	i
 8006b5a:	60bb      	str	r3, [r7, #8]
}
 8006b5c:	bf00      	nop
 8006b5e:	e7fe      	b.n	8006b5e <vTaskDelay+0x32>
			vTaskSuspendAll();
 8006b60:	f000 f88e 	bl	8006c80 <vTaskSuspendAll>
				list or removed from the blocked list until the scheduler
				is resumed.

				This task cannot be in an event list as it is the currently
				executing task. */
				prvAddCurrentTaskToDelayedList( xTicksToDelay, pdFALSE );
 8006b64:	2100      	movs	r1, #0
 8006b66:	6878      	ldr	r0, [r7, #4]
 8006b68:	f000 fe42 	bl	80077f0 <prvAddCurrentTaskToDelayedList>
			}
			xAlreadyYielded = xTaskResumeAll();
 8006b6c:	f000 f896 	bl	8006c9c <xTaskResumeAll>
 8006b70:	60f8      	str	r0, [r7, #12]
			mtCOVERAGE_TEST_MARKER();
		}

		/* Force a reschedule if xTaskResumeAll has not already done so, we may
		have put ourselves to sleep. */
		if( xAlreadyYielded == pdFALSE )
 8006b72:	68fb      	ldr	r3, [r7, #12]
 8006b74:	2b00      	cmp	r3, #0
 8006b76:	d107      	bne.n	8006b88 <vTaskDelay+0x5c>
		{
			portYIELD_WITHIN_API();
 8006b78:	4b06      	ldr	r3, [pc, #24]	; (8006b94 <vTaskDelay+0x68>)
 8006b7a:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8006b7e:	601a      	str	r2, [r3, #0]
 8006b80:	f3bf 8f4f 	dsb	sy
 8006b84:	f3bf 8f6f 	isb	sy
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
 8006b88:	bf00      	nop
 8006b8a:	3710      	adds	r7, #16
 8006b8c:	46bd      	mov	sp, r7
 8006b8e:	bd80      	pop	{r7, pc}
 8006b90:	20003384 	.word	0x20003384
 8006b94:	e000ed04 	.word	0xe000ed04

08006b98 <vTaskStartScheduler>:

#endif /* ( ( INCLUDE_xTaskResumeFromISR == 1 ) && ( INCLUDE_vTaskSuspend == 1 ) ) */
/*-----------------------------------------------------------*/

void vTaskStartScheduler( void )
{
 8006b98:	b580      	push	{r7, lr}
 8006b9a:	b08a      	sub	sp, #40	; 0x28
 8006b9c:	af04      	add	r7, sp, #16
BaseType_t xReturn;

	/* Add the idle task at the lowest priority. */
	#if( configSUPPORT_STATIC_ALLOCATION == 1 )
	{
		StaticTask_t *pxIdleTaskTCBBuffer = NULL;
 8006b9e:	2300      	movs	r3, #0
 8006ba0:	60bb      	str	r3, [r7, #8]
		StackType_t *pxIdleTaskStackBuffer = NULL;
 8006ba2:	2300      	movs	r3, #0
 8006ba4:	607b      	str	r3, [r7, #4]
		uint32_t ulIdleTaskStackSize;

		/* The Idle task is created using user provided RAM - obtain the
		address of the RAM then create the idle task. */
		vApplicationGetIdleTaskMemory( &pxIdleTaskTCBBuffer, &pxIdleTaskStackBuffer, &ulIdleTaskStackSize );
 8006ba6:	463a      	mov	r2, r7
 8006ba8:	1d39      	adds	r1, r7, #4
 8006baa:	f107 0308 	add.w	r3, r7, #8
 8006bae:	4618      	mov	r0, r3
 8006bb0:	f7fe fdda 	bl	8005768 <vApplicationGetIdleTaskMemory>
		xIdleTaskHandle = xTaskCreateStatic(	prvIdleTask,
 8006bb4:	6839      	ldr	r1, [r7, #0]
 8006bb6:	687b      	ldr	r3, [r7, #4]
 8006bb8:	68ba      	ldr	r2, [r7, #8]
 8006bba:	9202      	str	r2, [sp, #8]
 8006bbc:	9301      	str	r3, [sp, #4]
 8006bbe:	2300      	movs	r3, #0
 8006bc0:	9300      	str	r3, [sp, #0]
 8006bc2:	2300      	movs	r3, #0
 8006bc4:	460a      	mov	r2, r1
 8006bc6:	4926      	ldr	r1, [pc, #152]	; (8006c60 <vTaskStartScheduler+0xc8>)
 8006bc8:	4826      	ldr	r0, [pc, #152]	; (8006c64 <vTaskStartScheduler+0xcc>)
 8006bca:	f7ff fdef 	bl	80067ac <xTaskCreateStatic>
 8006bce:	4603      	mov	r3, r0
 8006bd0:	4a25      	ldr	r2, [pc, #148]	; (8006c68 <vTaskStartScheduler+0xd0>)
 8006bd2:	6013      	str	r3, [r2, #0]
												( void * ) NULL, /*lint !e961.  The cast is not redundant for all compilers. */
												portPRIVILEGE_BIT, /* In effect ( tskIDLE_PRIORITY | portPRIVILEGE_BIT ), but tskIDLE_PRIORITY is zero. */
												pxIdleTaskStackBuffer,
												pxIdleTaskTCBBuffer ); /*lint !e961 MISRA exception, justified as it is not a redundant explicit cast to all supported compilers. */

		if( xIdleTaskHandle != NULL )
 8006bd4:	4b24      	ldr	r3, [pc, #144]	; (8006c68 <vTaskStartScheduler+0xd0>)
 8006bd6:	681b      	ldr	r3, [r3, #0]
 8006bd8:	2b00      	cmp	r3, #0
 8006bda:	d002      	beq.n	8006be2 <vTaskStartScheduler+0x4a>
		{
			xReturn = pdPASS;
 8006bdc:	2301      	movs	r3, #1
 8006bde:	617b      	str	r3, [r7, #20]
 8006be0:	e001      	b.n	8006be6 <vTaskStartScheduler+0x4e>
		}
		else
		{
			xReturn = pdFAIL;
 8006be2:	2300      	movs	r3, #0
 8006be4:	617b      	str	r3, [r7, #20]
	}
	#endif /* configSUPPORT_STATIC_ALLOCATION */

	#if ( configUSE_TIMERS == 1 )
	{
		if( xReturn == pdPASS )
 8006be6:	697b      	ldr	r3, [r7, #20]
 8006be8:	2b01      	cmp	r3, #1
 8006bea:	d102      	bne.n	8006bf2 <vTaskStartScheduler+0x5a>
		{
			xReturn = xTimerCreateTimerTask();
 8006bec:	f000 fe54 	bl	8007898 <xTimerCreateTimerTask>
 8006bf0:	6178      	str	r0, [r7, #20]
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif /* configUSE_TIMERS */

	if( xReturn == pdPASS )
 8006bf2:	697b      	ldr	r3, [r7, #20]
 8006bf4:	2b01      	cmp	r3, #1
 8006bf6:	d11d      	bne.n	8006c34 <vTaskStartScheduler+0x9c>
	__asm volatile
 8006bf8:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006bfc:	b672      	cpsid	i
 8006bfe:	f383 8811 	msr	BASEPRI, r3
 8006c02:	f3bf 8f6f 	isb	sy
 8006c06:	f3bf 8f4f 	dsb	sy
 8006c0a:	b662      	cpsie	i
 8006c0c:	613b      	str	r3, [r7, #16]
}
 8006c0e:	bf00      	nop

		#if ( configUSE_NEWLIB_REENTRANT == 1 )
		{
			/* Switch Newlib's _impure_ptr variable to point to the _reent
			structure specific to the task that will run first. */
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
 8006c10:	4b16      	ldr	r3, [pc, #88]	; (8006c6c <vTaskStartScheduler+0xd4>)
 8006c12:	681b      	ldr	r3, [r3, #0]
 8006c14:	3354      	adds	r3, #84	; 0x54
 8006c16:	4a16      	ldr	r2, [pc, #88]	; (8006c70 <vTaskStartScheduler+0xd8>)
 8006c18:	6013      	str	r3, [r2, #0]
		}
		#endif /* configUSE_NEWLIB_REENTRANT */

		xNextTaskUnblockTime = portMAX_DELAY;
 8006c1a:	4b16      	ldr	r3, [pc, #88]	; (8006c74 <vTaskStartScheduler+0xdc>)
 8006c1c:	f04f 32ff 	mov.w	r2, #4294967295
 8006c20:	601a      	str	r2, [r3, #0]
		xSchedulerRunning = pdTRUE;
 8006c22:	4b15      	ldr	r3, [pc, #84]	; (8006c78 <vTaskStartScheduler+0xe0>)
 8006c24:	2201      	movs	r2, #1
 8006c26:	601a      	str	r2, [r3, #0]
		xTickCount = ( TickType_t ) configINITIAL_TICK_COUNT;
 8006c28:	4b14      	ldr	r3, [pc, #80]	; (8006c7c <vTaskStartScheduler+0xe4>)
 8006c2a:	2200      	movs	r2, #0
 8006c2c:	601a      	str	r2, [r3, #0]

		traceTASK_SWITCHED_IN();

		/* Setting up the timer tick is hardware specific and thus in the
		portable interface. */
		if( xPortStartScheduler() != pdFALSE )
 8006c2e:	f001 fa1f 	bl	8008070 <xPortStartScheduler>
	}

	/* Prevent compiler warnings if INCLUDE_xTaskGetIdleTaskHandle is set to 0,
	meaning xIdleTaskHandle is not used anywhere else. */
	( void ) xIdleTaskHandle;
}
 8006c32:	e010      	b.n	8006c56 <vTaskStartScheduler+0xbe>
		configASSERT( xReturn != errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY );
 8006c34:	697b      	ldr	r3, [r7, #20]
 8006c36:	f1b3 3fff 	cmp.w	r3, #4294967295
 8006c3a:	d10c      	bne.n	8006c56 <vTaskStartScheduler+0xbe>
	__asm volatile
 8006c3c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006c40:	b672      	cpsid	i
 8006c42:	f383 8811 	msr	BASEPRI, r3
 8006c46:	f3bf 8f6f 	isb	sy
 8006c4a:	f3bf 8f4f 	dsb	sy
 8006c4e:	b662      	cpsie	i
 8006c50:	60fb      	str	r3, [r7, #12]
}
 8006c52:	bf00      	nop
 8006c54:	e7fe      	b.n	8006c54 <vTaskStartScheduler+0xbc>
}
 8006c56:	bf00      	nop
 8006c58:	3718      	adds	r7, #24
 8006c5a:	46bd      	mov	sp, r7
 8006c5c:	bd80      	pop	{r7, pc}
 8006c5e:	bf00      	nop
 8006c60:	080089c8 	.word	0x080089c8
 8006c64:	08007311 	.word	0x08007311
 8006c68:	20003380 	.word	0x20003380
 8006c6c:	20002e88 	.word	0x20002e88
 8006c70:	20000070 	.word	0x20000070
 8006c74:	2000337c 	.word	0x2000337c
 8006c78:	20003368 	.word	0x20003368
 8006c7c:	20003360 	.word	0x20003360

08006c80 <vTaskSuspendAll>:
	vPortEndScheduler();
}
/*----------------------------------------------------------*/

void vTaskSuspendAll( void )
{
 8006c80:	b480      	push	{r7}
 8006c82:	af00      	add	r7, sp, #0
	/* A critical section is not required as the variable is of type
	BaseType_t.  Please read Richard Barry's reply in the following link to a
	post in the FreeRTOS support forum before reporting this as a bug! -
	http://goo.gl/wu4acr */
	++uxSchedulerSuspended;
 8006c84:	4b04      	ldr	r3, [pc, #16]	; (8006c98 <vTaskSuspendAll+0x18>)
 8006c86:	681b      	ldr	r3, [r3, #0]
 8006c88:	3301      	adds	r3, #1
 8006c8a:	4a03      	ldr	r2, [pc, #12]	; (8006c98 <vTaskSuspendAll+0x18>)
 8006c8c:	6013      	str	r3, [r2, #0]
	portMEMORY_BARRIER();
}
 8006c8e:	bf00      	nop
 8006c90:	46bd      	mov	sp, r7
 8006c92:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006c96:	4770      	bx	lr
 8006c98:	20003384 	.word	0x20003384

08006c9c <xTaskResumeAll>:

#endif /* configUSE_TICKLESS_IDLE */
/*----------------------------------------------------------*/

BaseType_t xTaskResumeAll( void )
{
 8006c9c:	b580      	push	{r7, lr}
 8006c9e:	b084      	sub	sp, #16
 8006ca0:	af00      	add	r7, sp, #0
TCB_t *pxTCB = NULL;
 8006ca2:	2300      	movs	r3, #0
 8006ca4:	60fb      	str	r3, [r7, #12]
BaseType_t xAlreadyYielded = pdFALSE;
 8006ca6:	2300      	movs	r3, #0
 8006ca8:	60bb      	str	r3, [r7, #8]

	/* If uxSchedulerSuspended is zero then this function does not match a
	previous call to vTaskSuspendAll(). */
	configASSERT( uxSchedulerSuspended );
 8006caa:	4b43      	ldr	r3, [pc, #268]	; (8006db8 <xTaskResumeAll+0x11c>)
 8006cac:	681b      	ldr	r3, [r3, #0]
 8006cae:	2b00      	cmp	r3, #0
 8006cb0:	d10c      	bne.n	8006ccc <xTaskResumeAll+0x30>
	__asm volatile
 8006cb2:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006cb6:	b672      	cpsid	i
 8006cb8:	f383 8811 	msr	BASEPRI, r3
 8006cbc:	f3bf 8f6f 	isb	sy
 8006cc0:	f3bf 8f4f 	dsb	sy
 8006cc4:	b662      	cpsie	i
 8006cc6:	603b      	str	r3, [r7, #0]
}
 8006cc8:	bf00      	nop
 8006cca:	e7fe      	b.n	8006cca <xTaskResumeAll+0x2e>
	/* It is possible that an ISR caused a task to be removed from an event
	list while the scheduler was suspended.  If this was the case then the
	removed task will have been added to the xPendingReadyList.  Once the
	scheduler has been resumed it is safe to move all the pending ready
	tasks from this list into their appropriate ready list. */
	taskENTER_CRITICAL();
 8006ccc:	f001 fa4e 	bl	800816c <vPortEnterCritical>
	{
		--uxSchedulerSuspended;
 8006cd0:	4b39      	ldr	r3, [pc, #228]	; (8006db8 <xTaskResumeAll+0x11c>)
 8006cd2:	681b      	ldr	r3, [r3, #0]
 8006cd4:	3b01      	subs	r3, #1
 8006cd6:	4a38      	ldr	r2, [pc, #224]	; (8006db8 <xTaskResumeAll+0x11c>)
 8006cd8:	6013      	str	r3, [r2, #0]

		if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 8006cda:	4b37      	ldr	r3, [pc, #220]	; (8006db8 <xTaskResumeAll+0x11c>)
 8006cdc:	681b      	ldr	r3, [r3, #0]
 8006cde:	2b00      	cmp	r3, #0
 8006ce0:	d162      	bne.n	8006da8 <xTaskResumeAll+0x10c>
		{
			if( uxCurrentNumberOfTasks > ( UBaseType_t ) 0U )
 8006ce2:	4b36      	ldr	r3, [pc, #216]	; (8006dbc <xTaskResumeAll+0x120>)
 8006ce4:	681b      	ldr	r3, [r3, #0]
 8006ce6:	2b00      	cmp	r3, #0
 8006ce8:	d05e      	beq.n	8006da8 <xTaskResumeAll+0x10c>
			{
				/* Move any readied tasks from the pending list into the
				appropriate ready list. */
				while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 8006cea:	e02f      	b.n	8006d4c <xTaskResumeAll+0xb0>
				{
					pxTCB = listGET_OWNER_OF_HEAD_ENTRY( ( &xPendingReadyList ) ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8006cec:	4b34      	ldr	r3, [pc, #208]	; (8006dc0 <xTaskResumeAll+0x124>)
 8006cee:	68db      	ldr	r3, [r3, #12]
 8006cf0:	68db      	ldr	r3, [r3, #12]
 8006cf2:	60fb      	str	r3, [r7, #12]
					( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 8006cf4:	68fb      	ldr	r3, [r7, #12]
 8006cf6:	3318      	adds	r3, #24
 8006cf8:	4618      	mov	r0, r3
 8006cfa:	f7fe fdf3 	bl	80058e4 <uxListRemove>
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 8006cfe:	68fb      	ldr	r3, [r7, #12]
 8006d00:	3304      	adds	r3, #4
 8006d02:	4618      	mov	r0, r3
 8006d04:	f7fe fdee 	bl	80058e4 <uxListRemove>
					prvAddTaskToReadyList( pxTCB );
 8006d08:	68fb      	ldr	r3, [r7, #12]
 8006d0a:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8006d0c:	4b2d      	ldr	r3, [pc, #180]	; (8006dc4 <xTaskResumeAll+0x128>)
 8006d0e:	681b      	ldr	r3, [r3, #0]
 8006d10:	429a      	cmp	r2, r3
 8006d12:	d903      	bls.n	8006d1c <xTaskResumeAll+0x80>
 8006d14:	68fb      	ldr	r3, [r7, #12]
 8006d16:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8006d18:	4a2a      	ldr	r2, [pc, #168]	; (8006dc4 <xTaskResumeAll+0x128>)
 8006d1a:	6013      	str	r3, [r2, #0]
 8006d1c:	68fb      	ldr	r3, [r7, #12]
 8006d1e:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8006d20:	4613      	mov	r3, r2
 8006d22:	009b      	lsls	r3, r3, #2
 8006d24:	4413      	add	r3, r2
 8006d26:	009b      	lsls	r3, r3, #2
 8006d28:	4a27      	ldr	r2, [pc, #156]	; (8006dc8 <xTaskResumeAll+0x12c>)
 8006d2a:	441a      	add	r2, r3
 8006d2c:	68fb      	ldr	r3, [r7, #12]
 8006d2e:	3304      	adds	r3, #4
 8006d30:	4619      	mov	r1, r3
 8006d32:	4610      	mov	r0, r2
 8006d34:	f7fe fd79 	bl	800582a <vListInsertEnd>

					/* If the moved task has a priority higher than the current
					task then a yield must be performed. */
					if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 8006d38:	68fb      	ldr	r3, [r7, #12]
 8006d3a:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8006d3c:	4b23      	ldr	r3, [pc, #140]	; (8006dcc <xTaskResumeAll+0x130>)
 8006d3e:	681b      	ldr	r3, [r3, #0]
 8006d40:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8006d42:	429a      	cmp	r2, r3
 8006d44:	d302      	bcc.n	8006d4c <xTaskResumeAll+0xb0>
					{
						xYieldPending = pdTRUE;
 8006d46:	4b22      	ldr	r3, [pc, #136]	; (8006dd0 <xTaskResumeAll+0x134>)
 8006d48:	2201      	movs	r2, #1
 8006d4a:	601a      	str	r2, [r3, #0]
				while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 8006d4c:	4b1c      	ldr	r3, [pc, #112]	; (8006dc0 <xTaskResumeAll+0x124>)
 8006d4e:	681b      	ldr	r3, [r3, #0]
 8006d50:	2b00      	cmp	r3, #0
 8006d52:	d1cb      	bne.n	8006cec <xTaskResumeAll+0x50>
					{
						mtCOVERAGE_TEST_MARKER();
					}
				}

				if( pxTCB != NULL )
 8006d54:	68fb      	ldr	r3, [r7, #12]
 8006d56:	2b00      	cmp	r3, #0
 8006d58:	d001      	beq.n	8006d5e <xTaskResumeAll+0xc2>
					which may have prevented the next unblock time from being
					re-calculated, in which case re-calculate it now.  Mainly
					important for low power tickless implementations, where
					this can prevent an unnecessary exit from low power
					state. */
					prvResetNextTaskUnblockTime();
 8006d5a:	f000 fb97 	bl	800748c <prvResetNextTaskUnblockTime>
				/* If any ticks occurred while the scheduler was suspended then
				they should be processed now.  This ensures the tick count does
				not	slip, and that any delayed tasks are resumed at the correct
				time. */
				{
					UBaseType_t uxPendedCounts = uxPendedTicks; /* Non-volatile copy. */
 8006d5e:	4b1d      	ldr	r3, [pc, #116]	; (8006dd4 <xTaskResumeAll+0x138>)
 8006d60:	681b      	ldr	r3, [r3, #0]
 8006d62:	607b      	str	r3, [r7, #4]

					if( uxPendedCounts > ( UBaseType_t ) 0U )
 8006d64:	687b      	ldr	r3, [r7, #4]
 8006d66:	2b00      	cmp	r3, #0
 8006d68:	d010      	beq.n	8006d8c <xTaskResumeAll+0xf0>
					{
						do
						{
							if( xTaskIncrementTick() != pdFALSE )
 8006d6a:	f000 f847 	bl	8006dfc <xTaskIncrementTick>
 8006d6e:	4603      	mov	r3, r0
 8006d70:	2b00      	cmp	r3, #0
 8006d72:	d002      	beq.n	8006d7a <xTaskResumeAll+0xde>
							{
								xYieldPending = pdTRUE;
 8006d74:	4b16      	ldr	r3, [pc, #88]	; (8006dd0 <xTaskResumeAll+0x134>)
 8006d76:	2201      	movs	r2, #1
 8006d78:	601a      	str	r2, [r3, #0]
							}
							else
							{
								mtCOVERAGE_TEST_MARKER();
							}
							--uxPendedCounts;
 8006d7a:	687b      	ldr	r3, [r7, #4]
 8006d7c:	3b01      	subs	r3, #1
 8006d7e:	607b      	str	r3, [r7, #4]
						} while( uxPendedCounts > ( UBaseType_t ) 0U );
 8006d80:	687b      	ldr	r3, [r7, #4]
 8006d82:	2b00      	cmp	r3, #0
 8006d84:	d1f1      	bne.n	8006d6a <xTaskResumeAll+0xce>

						uxPendedTicks = 0;
 8006d86:	4b13      	ldr	r3, [pc, #76]	; (8006dd4 <xTaskResumeAll+0x138>)
 8006d88:	2200      	movs	r2, #0
 8006d8a:	601a      	str	r2, [r3, #0]
					{
						mtCOVERAGE_TEST_MARKER();
					}
				}

				if( xYieldPending != pdFALSE )
 8006d8c:	4b10      	ldr	r3, [pc, #64]	; (8006dd0 <xTaskResumeAll+0x134>)
 8006d8e:	681b      	ldr	r3, [r3, #0]
 8006d90:	2b00      	cmp	r3, #0
 8006d92:	d009      	beq.n	8006da8 <xTaskResumeAll+0x10c>
				{
					#if( configUSE_PREEMPTION != 0 )
					{
						xAlreadyYielded = pdTRUE;
 8006d94:	2301      	movs	r3, #1
 8006d96:	60bb      	str	r3, [r7, #8]
					}
					#endif
					taskYIELD_IF_USING_PREEMPTION();
 8006d98:	4b0f      	ldr	r3, [pc, #60]	; (8006dd8 <xTaskResumeAll+0x13c>)
 8006d9a:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8006d9e:	601a      	str	r2, [r3, #0]
 8006da0:	f3bf 8f4f 	dsb	sy
 8006da4:	f3bf 8f6f 	isb	sy
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
	taskEXIT_CRITICAL();
 8006da8:	f001 fa14 	bl	80081d4 <vPortExitCritical>

	return xAlreadyYielded;
 8006dac:	68bb      	ldr	r3, [r7, #8]
}
 8006dae:	4618      	mov	r0, r3
 8006db0:	3710      	adds	r7, #16
 8006db2:	46bd      	mov	sp, r7
 8006db4:	bd80      	pop	{r7, pc}
 8006db6:	bf00      	nop
 8006db8:	20003384 	.word	0x20003384
 8006dbc:	2000335c 	.word	0x2000335c
 8006dc0:	2000331c 	.word	0x2000331c
 8006dc4:	20003364 	.word	0x20003364
 8006dc8:	20002e8c 	.word	0x20002e8c
 8006dcc:	20002e88 	.word	0x20002e88
 8006dd0:	20003370 	.word	0x20003370
 8006dd4:	2000336c 	.word	0x2000336c
 8006dd8:	e000ed04 	.word	0xe000ed04

08006ddc <xTaskGetTickCount>:
/*-----------------------------------------------------------*/

TickType_t xTaskGetTickCount( void )
{
 8006ddc:	b480      	push	{r7}
 8006dde:	b083      	sub	sp, #12
 8006de0:	af00      	add	r7, sp, #0
TickType_t xTicks;

	/* Critical section required if running on a 16 bit processor. */
	portTICK_TYPE_ENTER_CRITICAL();
	{
		xTicks = xTickCount;
 8006de2:	4b05      	ldr	r3, [pc, #20]	; (8006df8 <xTaskGetTickCount+0x1c>)
 8006de4:	681b      	ldr	r3, [r3, #0]
 8006de6:	607b      	str	r3, [r7, #4]
	}
	portTICK_TYPE_EXIT_CRITICAL();

	return xTicks;
 8006de8:	687b      	ldr	r3, [r7, #4]
}
 8006dea:	4618      	mov	r0, r3
 8006dec:	370c      	adds	r7, #12
 8006dee:	46bd      	mov	sp, r7
 8006df0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006df4:	4770      	bx	lr
 8006df6:	bf00      	nop
 8006df8:	20003360 	.word	0x20003360

08006dfc <xTaskIncrementTick>:

#endif /* INCLUDE_xTaskAbortDelay */
/*----------------------------------------------------------*/

BaseType_t xTaskIncrementTick( void )
{
 8006dfc:	b580      	push	{r7, lr}
 8006dfe:	b086      	sub	sp, #24
 8006e00:	af00      	add	r7, sp, #0
TCB_t * pxTCB;
TickType_t xItemValue;
BaseType_t xSwitchRequired = pdFALSE;
 8006e02:	2300      	movs	r3, #0
 8006e04:	617b      	str	r3, [r7, #20]

	/* Called by the portable layer each time a tick interrupt occurs.
	Increments the tick then checks to see if the new tick value will cause any
	tasks to be unblocked. */
	traceTASK_INCREMENT_TICK( xTickCount );
	if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 8006e06:	4b50      	ldr	r3, [pc, #320]	; (8006f48 <xTaskIncrementTick+0x14c>)
 8006e08:	681b      	ldr	r3, [r3, #0]
 8006e0a:	2b00      	cmp	r3, #0
 8006e0c:	f040 808b 	bne.w	8006f26 <xTaskIncrementTick+0x12a>
	{
		/* Minor optimisation.  The tick count cannot change in this
		block. */
		const TickType_t xConstTickCount = xTickCount + ( TickType_t ) 1;
 8006e10:	4b4e      	ldr	r3, [pc, #312]	; (8006f4c <xTaskIncrementTick+0x150>)
 8006e12:	681b      	ldr	r3, [r3, #0]
 8006e14:	3301      	adds	r3, #1
 8006e16:	613b      	str	r3, [r7, #16]

		/* Increment the RTOS tick, switching the delayed and overflowed
		delayed lists if it wraps to 0. */
		xTickCount = xConstTickCount;
 8006e18:	4a4c      	ldr	r2, [pc, #304]	; (8006f4c <xTaskIncrementTick+0x150>)
 8006e1a:	693b      	ldr	r3, [r7, #16]
 8006e1c:	6013      	str	r3, [r2, #0]

		if( xConstTickCount == ( TickType_t ) 0U ) /*lint !e774 'if' does not always evaluate to false as it is looking for an overflow. */
 8006e1e:	693b      	ldr	r3, [r7, #16]
 8006e20:	2b00      	cmp	r3, #0
 8006e22:	d122      	bne.n	8006e6a <xTaskIncrementTick+0x6e>
		{
			taskSWITCH_DELAYED_LISTS();
 8006e24:	4b4a      	ldr	r3, [pc, #296]	; (8006f50 <xTaskIncrementTick+0x154>)
 8006e26:	681b      	ldr	r3, [r3, #0]
 8006e28:	681b      	ldr	r3, [r3, #0]
 8006e2a:	2b00      	cmp	r3, #0
 8006e2c:	d00c      	beq.n	8006e48 <xTaskIncrementTick+0x4c>
	__asm volatile
 8006e2e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006e32:	b672      	cpsid	i
 8006e34:	f383 8811 	msr	BASEPRI, r3
 8006e38:	f3bf 8f6f 	isb	sy
 8006e3c:	f3bf 8f4f 	dsb	sy
 8006e40:	b662      	cpsie	i
 8006e42:	603b      	str	r3, [r7, #0]
}
 8006e44:	bf00      	nop
 8006e46:	e7fe      	b.n	8006e46 <xTaskIncrementTick+0x4a>
 8006e48:	4b41      	ldr	r3, [pc, #260]	; (8006f50 <xTaskIncrementTick+0x154>)
 8006e4a:	681b      	ldr	r3, [r3, #0]
 8006e4c:	60fb      	str	r3, [r7, #12]
 8006e4e:	4b41      	ldr	r3, [pc, #260]	; (8006f54 <xTaskIncrementTick+0x158>)
 8006e50:	681b      	ldr	r3, [r3, #0]
 8006e52:	4a3f      	ldr	r2, [pc, #252]	; (8006f50 <xTaskIncrementTick+0x154>)
 8006e54:	6013      	str	r3, [r2, #0]
 8006e56:	4a3f      	ldr	r2, [pc, #252]	; (8006f54 <xTaskIncrementTick+0x158>)
 8006e58:	68fb      	ldr	r3, [r7, #12]
 8006e5a:	6013      	str	r3, [r2, #0]
 8006e5c:	4b3e      	ldr	r3, [pc, #248]	; (8006f58 <xTaskIncrementTick+0x15c>)
 8006e5e:	681b      	ldr	r3, [r3, #0]
 8006e60:	3301      	adds	r3, #1
 8006e62:	4a3d      	ldr	r2, [pc, #244]	; (8006f58 <xTaskIncrementTick+0x15c>)
 8006e64:	6013      	str	r3, [r2, #0]
 8006e66:	f000 fb11 	bl	800748c <prvResetNextTaskUnblockTime>

		/* See if this tick has made a timeout expire.  Tasks are stored in
		the	queue in the order of their wake time - meaning once one task
		has been found whose block time has not expired there is no need to
		look any further down the list. */
		if( xConstTickCount >= xNextTaskUnblockTime )
 8006e6a:	4b3c      	ldr	r3, [pc, #240]	; (8006f5c <xTaskIncrementTick+0x160>)
 8006e6c:	681b      	ldr	r3, [r3, #0]
 8006e6e:	693a      	ldr	r2, [r7, #16]
 8006e70:	429a      	cmp	r2, r3
 8006e72:	d349      	bcc.n	8006f08 <xTaskIncrementTick+0x10c>
		{
			for( ;; )
			{
				if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 8006e74:	4b36      	ldr	r3, [pc, #216]	; (8006f50 <xTaskIncrementTick+0x154>)
 8006e76:	681b      	ldr	r3, [r3, #0]
 8006e78:	681b      	ldr	r3, [r3, #0]
 8006e7a:	2b00      	cmp	r3, #0
 8006e7c:	d104      	bne.n	8006e88 <xTaskIncrementTick+0x8c>
					/* The delayed list is empty.  Set xNextTaskUnblockTime
					to the maximum possible value so it is extremely
					unlikely that the
					if( xTickCount >= xNextTaskUnblockTime ) test will pass
					next time through. */
					xNextTaskUnblockTime = portMAX_DELAY; /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8006e7e:	4b37      	ldr	r3, [pc, #220]	; (8006f5c <xTaskIncrementTick+0x160>)
 8006e80:	f04f 32ff 	mov.w	r2, #4294967295
 8006e84:	601a      	str	r2, [r3, #0]
					break;
 8006e86:	e03f      	b.n	8006f08 <xTaskIncrementTick+0x10c>
				{
					/* The delayed list is not empty, get the value of the
					item at the head of the delayed list.  This is the time
					at which the task at the head of the delayed list must
					be removed from the Blocked state. */
					pxTCB = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8006e88:	4b31      	ldr	r3, [pc, #196]	; (8006f50 <xTaskIncrementTick+0x154>)
 8006e8a:	681b      	ldr	r3, [r3, #0]
 8006e8c:	68db      	ldr	r3, [r3, #12]
 8006e8e:	68db      	ldr	r3, [r3, #12]
 8006e90:	60bb      	str	r3, [r7, #8]
					xItemValue = listGET_LIST_ITEM_VALUE( &( pxTCB->xStateListItem ) );
 8006e92:	68bb      	ldr	r3, [r7, #8]
 8006e94:	685b      	ldr	r3, [r3, #4]
 8006e96:	607b      	str	r3, [r7, #4]

					if( xConstTickCount < xItemValue )
 8006e98:	693a      	ldr	r2, [r7, #16]
 8006e9a:	687b      	ldr	r3, [r7, #4]
 8006e9c:	429a      	cmp	r2, r3
 8006e9e:	d203      	bcs.n	8006ea8 <xTaskIncrementTick+0xac>
						/* It is not time to unblock this item yet, but the
						item value is the time at which the task at the head
						of the blocked list must be removed from the Blocked
						state -	so record the item value in
						xNextTaskUnblockTime. */
						xNextTaskUnblockTime = xItemValue;
 8006ea0:	4a2e      	ldr	r2, [pc, #184]	; (8006f5c <xTaskIncrementTick+0x160>)
 8006ea2:	687b      	ldr	r3, [r7, #4]
 8006ea4:	6013      	str	r3, [r2, #0]
						break; /*lint !e9011 Code structure here is deedmed easier to understand with multiple breaks. */
 8006ea6:	e02f      	b.n	8006f08 <xTaskIncrementTick+0x10c>
					{
						mtCOVERAGE_TEST_MARKER();
					}

					/* It is time to remove the item from the Blocked state. */
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 8006ea8:	68bb      	ldr	r3, [r7, #8]
 8006eaa:	3304      	adds	r3, #4
 8006eac:	4618      	mov	r0, r3
 8006eae:	f7fe fd19 	bl	80058e4 <uxListRemove>

					/* Is the task waiting on an event also?  If so remove
					it from the event list. */
					if( listLIST_ITEM_CONTAINER( &( pxTCB->xEventListItem ) ) != NULL )
 8006eb2:	68bb      	ldr	r3, [r7, #8]
 8006eb4:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8006eb6:	2b00      	cmp	r3, #0
 8006eb8:	d004      	beq.n	8006ec4 <xTaskIncrementTick+0xc8>
					{
						( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 8006eba:	68bb      	ldr	r3, [r7, #8]
 8006ebc:	3318      	adds	r3, #24
 8006ebe:	4618      	mov	r0, r3
 8006ec0:	f7fe fd10 	bl	80058e4 <uxListRemove>
						mtCOVERAGE_TEST_MARKER();
					}

					/* Place the unblocked task into the appropriate ready
					list. */
					prvAddTaskToReadyList( pxTCB );
 8006ec4:	68bb      	ldr	r3, [r7, #8]
 8006ec6:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8006ec8:	4b25      	ldr	r3, [pc, #148]	; (8006f60 <xTaskIncrementTick+0x164>)
 8006eca:	681b      	ldr	r3, [r3, #0]
 8006ecc:	429a      	cmp	r2, r3
 8006ece:	d903      	bls.n	8006ed8 <xTaskIncrementTick+0xdc>
 8006ed0:	68bb      	ldr	r3, [r7, #8]
 8006ed2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8006ed4:	4a22      	ldr	r2, [pc, #136]	; (8006f60 <xTaskIncrementTick+0x164>)
 8006ed6:	6013      	str	r3, [r2, #0]
 8006ed8:	68bb      	ldr	r3, [r7, #8]
 8006eda:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8006edc:	4613      	mov	r3, r2
 8006ede:	009b      	lsls	r3, r3, #2
 8006ee0:	4413      	add	r3, r2
 8006ee2:	009b      	lsls	r3, r3, #2
 8006ee4:	4a1f      	ldr	r2, [pc, #124]	; (8006f64 <xTaskIncrementTick+0x168>)
 8006ee6:	441a      	add	r2, r3
 8006ee8:	68bb      	ldr	r3, [r7, #8]
 8006eea:	3304      	adds	r3, #4
 8006eec:	4619      	mov	r1, r3
 8006eee:	4610      	mov	r0, r2
 8006ef0:	f7fe fc9b 	bl	800582a <vListInsertEnd>
					{
						/* Preemption is on, but a context switch should
						only be performed if the unblocked task has a
						priority that is equal to or higher than the
						currently executing task. */
						if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 8006ef4:	68bb      	ldr	r3, [r7, #8]
 8006ef6:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8006ef8:	4b1b      	ldr	r3, [pc, #108]	; (8006f68 <xTaskIncrementTick+0x16c>)
 8006efa:	681b      	ldr	r3, [r3, #0]
 8006efc:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8006efe:	429a      	cmp	r2, r3
 8006f00:	d3b8      	bcc.n	8006e74 <xTaskIncrementTick+0x78>
						{
							xSwitchRequired = pdTRUE;
 8006f02:	2301      	movs	r3, #1
 8006f04:	617b      	str	r3, [r7, #20]
				if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 8006f06:	e7b5      	b.n	8006e74 <xTaskIncrementTick+0x78>
		/* Tasks of equal priority to the currently running task will share
		processing time (time slice) if preemption is on, and the application
		writer has not explicitly turned time slicing off. */
		#if ( ( configUSE_PREEMPTION == 1 ) && ( configUSE_TIME_SLICING == 1 ) )
		{
			if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ pxCurrentTCB->uxPriority ] ) ) > ( UBaseType_t ) 1 )
 8006f08:	4b17      	ldr	r3, [pc, #92]	; (8006f68 <xTaskIncrementTick+0x16c>)
 8006f0a:	681b      	ldr	r3, [r3, #0]
 8006f0c:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8006f0e:	4915      	ldr	r1, [pc, #84]	; (8006f64 <xTaskIncrementTick+0x168>)
 8006f10:	4613      	mov	r3, r2
 8006f12:	009b      	lsls	r3, r3, #2
 8006f14:	4413      	add	r3, r2
 8006f16:	009b      	lsls	r3, r3, #2
 8006f18:	440b      	add	r3, r1
 8006f1a:	681b      	ldr	r3, [r3, #0]
 8006f1c:	2b01      	cmp	r3, #1
 8006f1e:	d907      	bls.n	8006f30 <xTaskIncrementTick+0x134>
			{
				xSwitchRequired = pdTRUE;
 8006f20:	2301      	movs	r3, #1
 8006f22:	617b      	str	r3, [r7, #20]
 8006f24:	e004      	b.n	8006f30 <xTaskIncrementTick+0x134>
		}
		#endif /* configUSE_TICK_HOOK */
	}
	else
	{
		++uxPendedTicks;
 8006f26:	4b11      	ldr	r3, [pc, #68]	; (8006f6c <xTaskIncrementTick+0x170>)
 8006f28:	681b      	ldr	r3, [r3, #0]
 8006f2a:	3301      	adds	r3, #1
 8006f2c:	4a0f      	ldr	r2, [pc, #60]	; (8006f6c <xTaskIncrementTick+0x170>)
 8006f2e:	6013      	str	r3, [r2, #0]
		#endif
	}

	#if ( configUSE_PREEMPTION == 1 )
	{
		if( xYieldPending != pdFALSE )
 8006f30:	4b0f      	ldr	r3, [pc, #60]	; (8006f70 <xTaskIncrementTick+0x174>)
 8006f32:	681b      	ldr	r3, [r3, #0]
 8006f34:	2b00      	cmp	r3, #0
 8006f36:	d001      	beq.n	8006f3c <xTaskIncrementTick+0x140>
		{
			xSwitchRequired = pdTRUE;
 8006f38:	2301      	movs	r3, #1
 8006f3a:	617b      	str	r3, [r7, #20]
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif /* configUSE_PREEMPTION */

	return xSwitchRequired;
 8006f3c:	697b      	ldr	r3, [r7, #20]
}
 8006f3e:	4618      	mov	r0, r3
 8006f40:	3718      	adds	r7, #24
 8006f42:	46bd      	mov	sp, r7
 8006f44:	bd80      	pop	{r7, pc}
 8006f46:	bf00      	nop
 8006f48:	20003384 	.word	0x20003384
 8006f4c:	20003360 	.word	0x20003360
 8006f50:	20003314 	.word	0x20003314
 8006f54:	20003318 	.word	0x20003318
 8006f58:	20003374 	.word	0x20003374
 8006f5c:	2000337c 	.word	0x2000337c
 8006f60:	20003364 	.word	0x20003364
 8006f64:	20002e8c 	.word	0x20002e8c
 8006f68:	20002e88 	.word	0x20002e88
 8006f6c:	2000336c 	.word	0x2000336c
 8006f70:	20003370 	.word	0x20003370

08006f74 <vTaskSwitchContext>:

#endif /* configUSE_APPLICATION_TASK_TAG */
/*-----------------------------------------------------------*/

void vTaskSwitchContext( void )
{
 8006f74:	b580      	push	{r7, lr}
 8006f76:	b086      	sub	sp, #24
 8006f78:	af00      	add	r7, sp, #0
	if( uxSchedulerSuspended != ( UBaseType_t ) pdFALSE )
 8006f7a:	4b3e      	ldr	r3, [pc, #248]	; (8007074 <vTaskSwitchContext+0x100>)
 8006f7c:	681b      	ldr	r3, [r3, #0]
 8006f7e:	2b00      	cmp	r3, #0
 8006f80:	d003      	beq.n	8006f8a <vTaskSwitchContext+0x16>
	{
		/* The scheduler is currently suspended - do not allow a context
		switch. */
		xYieldPending = pdTRUE;
 8006f82:	4b3d      	ldr	r3, [pc, #244]	; (8007078 <vTaskSwitchContext+0x104>)
 8006f84:	2201      	movs	r2, #1
 8006f86:	601a      	str	r2, [r3, #0]
			structure specific to this task. */
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
		}
		#endif /* configUSE_NEWLIB_REENTRANT */
	}
}
 8006f88:	e06f      	b.n	800706a <vTaskSwitchContext+0xf6>
		xYieldPending = pdFALSE;
 8006f8a:	4b3b      	ldr	r3, [pc, #236]	; (8007078 <vTaskSwitchContext+0x104>)
 8006f8c:	2200      	movs	r2, #0
 8006f8e:	601a      	str	r2, [r3, #0]
		taskCHECK_FOR_STACK_OVERFLOW();
 8006f90:	4b3a      	ldr	r3, [pc, #232]	; (800707c <vTaskSwitchContext+0x108>)
 8006f92:	681b      	ldr	r3, [r3, #0]
 8006f94:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8006f96:	613b      	str	r3, [r7, #16]
 8006f98:	f04f 33a5 	mov.w	r3, #2779096485	; 0xa5a5a5a5
 8006f9c:	60fb      	str	r3, [r7, #12]
 8006f9e:	693b      	ldr	r3, [r7, #16]
 8006fa0:	681b      	ldr	r3, [r3, #0]
 8006fa2:	68fa      	ldr	r2, [r7, #12]
 8006fa4:	429a      	cmp	r2, r3
 8006fa6:	d111      	bne.n	8006fcc <vTaskSwitchContext+0x58>
 8006fa8:	693b      	ldr	r3, [r7, #16]
 8006faa:	3304      	adds	r3, #4
 8006fac:	681b      	ldr	r3, [r3, #0]
 8006fae:	68fa      	ldr	r2, [r7, #12]
 8006fb0:	429a      	cmp	r2, r3
 8006fb2:	d10b      	bne.n	8006fcc <vTaskSwitchContext+0x58>
 8006fb4:	693b      	ldr	r3, [r7, #16]
 8006fb6:	3308      	adds	r3, #8
 8006fb8:	681b      	ldr	r3, [r3, #0]
 8006fba:	68fa      	ldr	r2, [r7, #12]
 8006fbc:	429a      	cmp	r2, r3
 8006fbe:	d105      	bne.n	8006fcc <vTaskSwitchContext+0x58>
 8006fc0:	693b      	ldr	r3, [r7, #16]
 8006fc2:	330c      	adds	r3, #12
 8006fc4:	681b      	ldr	r3, [r3, #0]
 8006fc6:	68fa      	ldr	r2, [r7, #12]
 8006fc8:	429a      	cmp	r2, r3
 8006fca:	d008      	beq.n	8006fde <vTaskSwitchContext+0x6a>
 8006fcc:	4b2b      	ldr	r3, [pc, #172]	; (800707c <vTaskSwitchContext+0x108>)
 8006fce:	681a      	ldr	r2, [r3, #0]
 8006fd0:	4b2a      	ldr	r3, [pc, #168]	; (800707c <vTaskSwitchContext+0x108>)
 8006fd2:	681b      	ldr	r3, [r3, #0]
 8006fd4:	3334      	adds	r3, #52	; 0x34
 8006fd6:	4619      	mov	r1, r3
 8006fd8:	4610      	mov	r0, r2
 8006fda:	f7fa f92e 	bl	800123a <vApplicationStackOverflowHook>
		taskSELECT_HIGHEST_PRIORITY_TASK(); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8006fde:	4b28      	ldr	r3, [pc, #160]	; (8007080 <vTaskSwitchContext+0x10c>)
 8006fe0:	681b      	ldr	r3, [r3, #0]
 8006fe2:	617b      	str	r3, [r7, #20]
 8006fe4:	e012      	b.n	800700c <vTaskSwitchContext+0x98>
 8006fe6:	697b      	ldr	r3, [r7, #20]
 8006fe8:	2b00      	cmp	r3, #0
 8006fea:	d10c      	bne.n	8007006 <vTaskSwitchContext+0x92>
	__asm volatile
 8006fec:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006ff0:	b672      	cpsid	i
 8006ff2:	f383 8811 	msr	BASEPRI, r3
 8006ff6:	f3bf 8f6f 	isb	sy
 8006ffa:	f3bf 8f4f 	dsb	sy
 8006ffe:	b662      	cpsie	i
 8007000:	607b      	str	r3, [r7, #4]
}
 8007002:	bf00      	nop
 8007004:	e7fe      	b.n	8007004 <vTaskSwitchContext+0x90>
 8007006:	697b      	ldr	r3, [r7, #20]
 8007008:	3b01      	subs	r3, #1
 800700a:	617b      	str	r3, [r7, #20]
 800700c:	491d      	ldr	r1, [pc, #116]	; (8007084 <vTaskSwitchContext+0x110>)
 800700e:	697a      	ldr	r2, [r7, #20]
 8007010:	4613      	mov	r3, r2
 8007012:	009b      	lsls	r3, r3, #2
 8007014:	4413      	add	r3, r2
 8007016:	009b      	lsls	r3, r3, #2
 8007018:	440b      	add	r3, r1
 800701a:	681b      	ldr	r3, [r3, #0]
 800701c:	2b00      	cmp	r3, #0
 800701e:	d0e2      	beq.n	8006fe6 <vTaskSwitchContext+0x72>
 8007020:	697a      	ldr	r2, [r7, #20]
 8007022:	4613      	mov	r3, r2
 8007024:	009b      	lsls	r3, r3, #2
 8007026:	4413      	add	r3, r2
 8007028:	009b      	lsls	r3, r3, #2
 800702a:	4a16      	ldr	r2, [pc, #88]	; (8007084 <vTaskSwitchContext+0x110>)
 800702c:	4413      	add	r3, r2
 800702e:	60bb      	str	r3, [r7, #8]
 8007030:	68bb      	ldr	r3, [r7, #8]
 8007032:	685b      	ldr	r3, [r3, #4]
 8007034:	685a      	ldr	r2, [r3, #4]
 8007036:	68bb      	ldr	r3, [r7, #8]
 8007038:	605a      	str	r2, [r3, #4]
 800703a:	68bb      	ldr	r3, [r7, #8]
 800703c:	685a      	ldr	r2, [r3, #4]
 800703e:	68bb      	ldr	r3, [r7, #8]
 8007040:	3308      	adds	r3, #8
 8007042:	429a      	cmp	r2, r3
 8007044:	d104      	bne.n	8007050 <vTaskSwitchContext+0xdc>
 8007046:	68bb      	ldr	r3, [r7, #8]
 8007048:	685b      	ldr	r3, [r3, #4]
 800704a:	685a      	ldr	r2, [r3, #4]
 800704c:	68bb      	ldr	r3, [r7, #8]
 800704e:	605a      	str	r2, [r3, #4]
 8007050:	68bb      	ldr	r3, [r7, #8]
 8007052:	685b      	ldr	r3, [r3, #4]
 8007054:	68db      	ldr	r3, [r3, #12]
 8007056:	4a09      	ldr	r2, [pc, #36]	; (800707c <vTaskSwitchContext+0x108>)
 8007058:	6013      	str	r3, [r2, #0]
 800705a:	4a09      	ldr	r2, [pc, #36]	; (8007080 <vTaskSwitchContext+0x10c>)
 800705c:	697b      	ldr	r3, [r7, #20]
 800705e:	6013      	str	r3, [r2, #0]
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
 8007060:	4b06      	ldr	r3, [pc, #24]	; (800707c <vTaskSwitchContext+0x108>)
 8007062:	681b      	ldr	r3, [r3, #0]
 8007064:	3354      	adds	r3, #84	; 0x54
 8007066:	4a08      	ldr	r2, [pc, #32]	; (8007088 <vTaskSwitchContext+0x114>)
 8007068:	6013      	str	r3, [r2, #0]
}
 800706a:	bf00      	nop
 800706c:	3718      	adds	r7, #24
 800706e:	46bd      	mov	sp, r7
 8007070:	bd80      	pop	{r7, pc}
 8007072:	bf00      	nop
 8007074:	20003384 	.word	0x20003384
 8007078:	20003370 	.word	0x20003370
 800707c:	20002e88 	.word	0x20002e88
 8007080:	20003364 	.word	0x20003364
 8007084:	20002e8c 	.word	0x20002e8c
 8007088:	20000070 	.word	0x20000070

0800708c <vTaskPlaceOnEventList>:
/*-----------------------------------------------------------*/

void vTaskPlaceOnEventList( List_t * const pxEventList, const TickType_t xTicksToWait )
{
 800708c:	b580      	push	{r7, lr}
 800708e:	b084      	sub	sp, #16
 8007090:	af00      	add	r7, sp, #0
 8007092:	6078      	str	r0, [r7, #4]
 8007094:	6039      	str	r1, [r7, #0]
	configASSERT( pxEventList );
 8007096:	687b      	ldr	r3, [r7, #4]
 8007098:	2b00      	cmp	r3, #0
 800709a:	d10c      	bne.n	80070b6 <vTaskPlaceOnEventList+0x2a>
	__asm volatile
 800709c:	f04f 0350 	mov.w	r3, #80	; 0x50
 80070a0:	b672      	cpsid	i
 80070a2:	f383 8811 	msr	BASEPRI, r3
 80070a6:	f3bf 8f6f 	isb	sy
 80070aa:	f3bf 8f4f 	dsb	sy
 80070ae:	b662      	cpsie	i
 80070b0:	60fb      	str	r3, [r7, #12]
}
 80070b2:	bf00      	nop
 80070b4:	e7fe      	b.n	80070b4 <vTaskPlaceOnEventList+0x28>

	/* Place the event list item of the TCB in the appropriate event list.
	This is placed in the list in priority order so the highest priority task
	is the first to be woken by the event.  The queue that contains the event
	list is locked, preventing simultaneous access from interrupts. */
	vListInsert( pxEventList, &( pxCurrentTCB->xEventListItem ) );
 80070b6:	4b07      	ldr	r3, [pc, #28]	; (80070d4 <vTaskPlaceOnEventList+0x48>)
 80070b8:	681b      	ldr	r3, [r3, #0]
 80070ba:	3318      	adds	r3, #24
 80070bc:	4619      	mov	r1, r3
 80070be:	6878      	ldr	r0, [r7, #4]
 80070c0:	f7fe fbd7 	bl	8005872 <vListInsert>

	prvAddCurrentTaskToDelayedList( xTicksToWait, pdTRUE );
 80070c4:	2101      	movs	r1, #1
 80070c6:	6838      	ldr	r0, [r7, #0]
 80070c8:	f000 fb92 	bl	80077f0 <prvAddCurrentTaskToDelayedList>
}
 80070cc:	bf00      	nop
 80070ce:	3710      	adds	r7, #16
 80070d0:	46bd      	mov	sp, r7
 80070d2:	bd80      	pop	{r7, pc}
 80070d4:	20002e88 	.word	0x20002e88

080070d8 <vTaskPlaceOnEventListRestricted>:
/*-----------------------------------------------------------*/

#if( configUSE_TIMERS == 1 )

	void vTaskPlaceOnEventListRestricted( List_t * const pxEventList, TickType_t xTicksToWait, const BaseType_t xWaitIndefinitely )
	{
 80070d8:	b580      	push	{r7, lr}
 80070da:	b086      	sub	sp, #24
 80070dc:	af00      	add	r7, sp, #0
 80070de:	60f8      	str	r0, [r7, #12]
 80070e0:	60b9      	str	r1, [r7, #8]
 80070e2:	607a      	str	r2, [r7, #4]
		configASSERT( pxEventList );
 80070e4:	68fb      	ldr	r3, [r7, #12]
 80070e6:	2b00      	cmp	r3, #0
 80070e8:	d10c      	bne.n	8007104 <vTaskPlaceOnEventListRestricted+0x2c>
	__asm volatile
 80070ea:	f04f 0350 	mov.w	r3, #80	; 0x50
 80070ee:	b672      	cpsid	i
 80070f0:	f383 8811 	msr	BASEPRI, r3
 80070f4:	f3bf 8f6f 	isb	sy
 80070f8:	f3bf 8f4f 	dsb	sy
 80070fc:	b662      	cpsie	i
 80070fe:	617b      	str	r3, [r7, #20]
}
 8007100:	bf00      	nop
 8007102:	e7fe      	b.n	8007102 <vTaskPlaceOnEventListRestricted+0x2a>

		/* Place the event list item of the TCB in the appropriate event list.
		In this case it is assume that this is the only task that is going to
		be waiting on this event list, so the faster vListInsertEnd() function
		can be used in place of vListInsert. */
		vListInsertEnd( pxEventList, &( pxCurrentTCB->xEventListItem ) );
 8007104:	4b0a      	ldr	r3, [pc, #40]	; (8007130 <vTaskPlaceOnEventListRestricted+0x58>)
 8007106:	681b      	ldr	r3, [r3, #0]
 8007108:	3318      	adds	r3, #24
 800710a:	4619      	mov	r1, r3
 800710c:	68f8      	ldr	r0, [r7, #12]
 800710e:	f7fe fb8c 	bl	800582a <vListInsertEnd>

		/* If the task should block indefinitely then set the block time to a
		value that will be recognised as an indefinite delay inside the
		prvAddCurrentTaskToDelayedList() function. */
		if( xWaitIndefinitely != pdFALSE )
 8007112:	687b      	ldr	r3, [r7, #4]
 8007114:	2b00      	cmp	r3, #0
 8007116:	d002      	beq.n	800711e <vTaskPlaceOnEventListRestricted+0x46>
		{
			xTicksToWait = portMAX_DELAY;
 8007118:	f04f 33ff 	mov.w	r3, #4294967295
 800711c:	60bb      	str	r3, [r7, #8]
		}

		traceTASK_DELAY_UNTIL( ( xTickCount + xTicksToWait ) );
		prvAddCurrentTaskToDelayedList( xTicksToWait, xWaitIndefinitely );
 800711e:	6879      	ldr	r1, [r7, #4]
 8007120:	68b8      	ldr	r0, [r7, #8]
 8007122:	f000 fb65 	bl	80077f0 <prvAddCurrentTaskToDelayedList>
	}
 8007126:	bf00      	nop
 8007128:	3718      	adds	r7, #24
 800712a:	46bd      	mov	sp, r7
 800712c:	bd80      	pop	{r7, pc}
 800712e:	bf00      	nop
 8007130:	20002e88 	.word	0x20002e88

08007134 <xTaskRemoveFromEventList>:

#endif /* configUSE_TIMERS */
/*-----------------------------------------------------------*/

BaseType_t xTaskRemoveFromEventList( const List_t * const pxEventList )
{
 8007134:	b580      	push	{r7, lr}
 8007136:	b086      	sub	sp, #24
 8007138:	af00      	add	r7, sp, #0
 800713a:	6078      	str	r0, [r7, #4]
	get called - the lock count on the queue will get modified instead.  This
	means exclusive access to the event list is guaranteed here.

	This function assumes that a check has already been made to ensure that
	pxEventList is not empty. */
	pxUnblockedTCB = listGET_OWNER_OF_HEAD_ENTRY( pxEventList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800713c:	687b      	ldr	r3, [r7, #4]
 800713e:	68db      	ldr	r3, [r3, #12]
 8007140:	68db      	ldr	r3, [r3, #12]
 8007142:	613b      	str	r3, [r7, #16]
	configASSERT( pxUnblockedTCB );
 8007144:	693b      	ldr	r3, [r7, #16]
 8007146:	2b00      	cmp	r3, #0
 8007148:	d10c      	bne.n	8007164 <xTaskRemoveFromEventList+0x30>
	__asm volatile
 800714a:	f04f 0350 	mov.w	r3, #80	; 0x50
 800714e:	b672      	cpsid	i
 8007150:	f383 8811 	msr	BASEPRI, r3
 8007154:	f3bf 8f6f 	isb	sy
 8007158:	f3bf 8f4f 	dsb	sy
 800715c:	b662      	cpsie	i
 800715e:	60fb      	str	r3, [r7, #12]
}
 8007160:	bf00      	nop
 8007162:	e7fe      	b.n	8007162 <xTaskRemoveFromEventList+0x2e>
	( void ) uxListRemove( &( pxUnblockedTCB->xEventListItem ) );
 8007164:	693b      	ldr	r3, [r7, #16]
 8007166:	3318      	adds	r3, #24
 8007168:	4618      	mov	r0, r3
 800716a:	f7fe fbbb 	bl	80058e4 <uxListRemove>

	if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 800716e:	4b1e      	ldr	r3, [pc, #120]	; (80071e8 <xTaskRemoveFromEventList+0xb4>)
 8007170:	681b      	ldr	r3, [r3, #0]
 8007172:	2b00      	cmp	r3, #0
 8007174:	d11d      	bne.n	80071b2 <xTaskRemoveFromEventList+0x7e>
	{
		( void ) uxListRemove( &( pxUnblockedTCB->xStateListItem ) );
 8007176:	693b      	ldr	r3, [r7, #16]
 8007178:	3304      	adds	r3, #4
 800717a:	4618      	mov	r0, r3
 800717c:	f7fe fbb2 	bl	80058e4 <uxListRemove>
		prvAddTaskToReadyList( pxUnblockedTCB );
 8007180:	693b      	ldr	r3, [r7, #16]
 8007182:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8007184:	4b19      	ldr	r3, [pc, #100]	; (80071ec <xTaskRemoveFromEventList+0xb8>)
 8007186:	681b      	ldr	r3, [r3, #0]
 8007188:	429a      	cmp	r2, r3
 800718a:	d903      	bls.n	8007194 <xTaskRemoveFromEventList+0x60>
 800718c:	693b      	ldr	r3, [r7, #16]
 800718e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8007190:	4a16      	ldr	r2, [pc, #88]	; (80071ec <xTaskRemoveFromEventList+0xb8>)
 8007192:	6013      	str	r3, [r2, #0]
 8007194:	693b      	ldr	r3, [r7, #16]
 8007196:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8007198:	4613      	mov	r3, r2
 800719a:	009b      	lsls	r3, r3, #2
 800719c:	4413      	add	r3, r2
 800719e:	009b      	lsls	r3, r3, #2
 80071a0:	4a13      	ldr	r2, [pc, #76]	; (80071f0 <xTaskRemoveFromEventList+0xbc>)
 80071a2:	441a      	add	r2, r3
 80071a4:	693b      	ldr	r3, [r7, #16]
 80071a6:	3304      	adds	r3, #4
 80071a8:	4619      	mov	r1, r3
 80071aa:	4610      	mov	r0, r2
 80071ac:	f7fe fb3d 	bl	800582a <vListInsertEnd>
 80071b0:	e005      	b.n	80071be <xTaskRemoveFromEventList+0x8a>
	}
	else
	{
		/* The delayed and ready lists cannot be accessed, so hold this task
		pending until the scheduler is resumed. */
		vListInsertEnd( &( xPendingReadyList ), &( pxUnblockedTCB->xEventListItem ) );
 80071b2:	693b      	ldr	r3, [r7, #16]
 80071b4:	3318      	adds	r3, #24
 80071b6:	4619      	mov	r1, r3
 80071b8:	480e      	ldr	r0, [pc, #56]	; (80071f4 <xTaskRemoveFromEventList+0xc0>)
 80071ba:	f7fe fb36 	bl	800582a <vListInsertEnd>
	}

	if( pxUnblockedTCB->uxPriority > pxCurrentTCB->uxPriority )
 80071be:	693b      	ldr	r3, [r7, #16]
 80071c0:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80071c2:	4b0d      	ldr	r3, [pc, #52]	; (80071f8 <xTaskRemoveFromEventList+0xc4>)
 80071c4:	681b      	ldr	r3, [r3, #0]
 80071c6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80071c8:	429a      	cmp	r2, r3
 80071ca:	d905      	bls.n	80071d8 <xTaskRemoveFromEventList+0xa4>
	{
		/* Return true if the task removed from the event list has a higher
		priority than the calling task.  This allows the calling task to know if
		it should force a context switch now. */
		xReturn = pdTRUE;
 80071cc:	2301      	movs	r3, #1
 80071ce:	617b      	str	r3, [r7, #20]

		/* Mark that a yield is pending in case the user is not using the
		"xHigherPriorityTaskWoken" parameter to an ISR safe FreeRTOS function. */
		xYieldPending = pdTRUE;
 80071d0:	4b0a      	ldr	r3, [pc, #40]	; (80071fc <xTaskRemoveFromEventList+0xc8>)
 80071d2:	2201      	movs	r2, #1
 80071d4:	601a      	str	r2, [r3, #0]
 80071d6:	e001      	b.n	80071dc <xTaskRemoveFromEventList+0xa8>
	}
	else
	{
		xReturn = pdFALSE;
 80071d8:	2300      	movs	r3, #0
 80071da:	617b      	str	r3, [r7, #20]
	}

	return xReturn;
 80071dc:	697b      	ldr	r3, [r7, #20]
}
 80071de:	4618      	mov	r0, r3
 80071e0:	3718      	adds	r7, #24
 80071e2:	46bd      	mov	sp, r7
 80071e4:	bd80      	pop	{r7, pc}
 80071e6:	bf00      	nop
 80071e8:	20003384 	.word	0x20003384
 80071ec:	20003364 	.word	0x20003364
 80071f0:	20002e8c 	.word	0x20002e8c
 80071f4:	2000331c 	.word	0x2000331c
 80071f8:	20002e88 	.word	0x20002e88
 80071fc:	20003370 	.word	0x20003370

08007200 <vTaskInternalSetTimeOutState>:
	taskEXIT_CRITICAL();
}
/*-----------------------------------------------------------*/

void vTaskInternalSetTimeOutState( TimeOut_t * const pxTimeOut )
{
 8007200:	b480      	push	{r7}
 8007202:	b083      	sub	sp, #12
 8007204:	af00      	add	r7, sp, #0
 8007206:	6078      	str	r0, [r7, #4]
	/* For internal use only as it does not use a critical section. */
	pxTimeOut->xOverflowCount = xNumOfOverflows;
 8007208:	4b06      	ldr	r3, [pc, #24]	; (8007224 <vTaskInternalSetTimeOutState+0x24>)
 800720a:	681a      	ldr	r2, [r3, #0]
 800720c:	687b      	ldr	r3, [r7, #4]
 800720e:	601a      	str	r2, [r3, #0]
	pxTimeOut->xTimeOnEntering = xTickCount;
 8007210:	4b05      	ldr	r3, [pc, #20]	; (8007228 <vTaskInternalSetTimeOutState+0x28>)
 8007212:	681a      	ldr	r2, [r3, #0]
 8007214:	687b      	ldr	r3, [r7, #4]
 8007216:	605a      	str	r2, [r3, #4]
}
 8007218:	bf00      	nop
 800721a:	370c      	adds	r7, #12
 800721c:	46bd      	mov	sp, r7
 800721e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007222:	4770      	bx	lr
 8007224:	20003374 	.word	0x20003374
 8007228:	20003360 	.word	0x20003360

0800722c <xTaskCheckForTimeOut>:
/*-----------------------------------------------------------*/

BaseType_t xTaskCheckForTimeOut( TimeOut_t * const pxTimeOut, TickType_t * const pxTicksToWait )
{
 800722c:	b580      	push	{r7, lr}
 800722e:	b088      	sub	sp, #32
 8007230:	af00      	add	r7, sp, #0
 8007232:	6078      	str	r0, [r7, #4]
 8007234:	6039      	str	r1, [r7, #0]
BaseType_t xReturn;

	configASSERT( pxTimeOut );
 8007236:	687b      	ldr	r3, [r7, #4]
 8007238:	2b00      	cmp	r3, #0
 800723a:	d10c      	bne.n	8007256 <xTaskCheckForTimeOut+0x2a>
	__asm volatile
 800723c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8007240:	b672      	cpsid	i
 8007242:	f383 8811 	msr	BASEPRI, r3
 8007246:	f3bf 8f6f 	isb	sy
 800724a:	f3bf 8f4f 	dsb	sy
 800724e:	b662      	cpsie	i
 8007250:	613b      	str	r3, [r7, #16]
}
 8007252:	bf00      	nop
 8007254:	e7fe      	b.n	8007254 <xTaskCheckForTimeOut+0x28>
	configASSERT( pxTicksToWait );
 8007256:	683b      	ldr	r3, [r7, #0]
 8007258:	2b00      	cmp	r3, #0
 800725a:	d10c      	bne.n	8007276 <xTaskCheckForTimeOut+0x4a>
	__asm volatile
 800725c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8007260:	b672      	cpsid	i
 8007262:	f383 8811 	msr	BASEPRI, r3
 8007266:	f3bf 8f6f 	isb	sy
 800726a:	f3bf 8f4f 	dsb	sy
 800726e:	b662      	cpsie	i
 8007270:	60fb      	str	r3, [r7, #12]
}
 8007272:	bf00      	nop
 8007274:	e7fe      	b.n	8007274 <xTaskCheckForTimeOut+0x48>

	taskENTER_CRITICAL();
 8007276:	f000 ff79 	bl	800816c <vPortEnterCritical>
	{
		/* Minor optimisation.  The tick count cannot change in this block. */
		const TickType_t xConstTickCount = xTickCount;
 800727a:	4b1d      	ldr	r3, [pc, #116]	; (80072f0 <xTaskCheckForTimeOut+0xc4>)
 800727c:	681b      	ldr	r3, [r3, #0]
 800727e:	61bb      	str	r3, [r7, #24]
		const TickType_t xElapsedTime = xConstTickCount - pxTimeOut->xTimeOnEntering;
 8007280:	687b      	ldr	r3, [r7, #4]
 8007282:	685b      	ldr	r3, [r3, #4]
 8007284:	69ba      	ldr	r2, [r7, #24]
 8007286:	1ad3      	subs	r3, r2, r3
 8007288:	617b      	str	r3, [r7, #20]
			}
			else
		#endif

		#if ( INCLUDE_vTaskSuspend == 1 )
			if( *pxTicksToWait == portMAX_DELAY )
 800728a:	683b      	ldr	r3, [r7, #0]
 800728c:	681b      	ldr	r3, [r3, #0]
 800728e:	f1b3 3fff 	cmp.w	r3, #4294967295
 8007292:	d102      	bne.n	800729a <xTaskCheckForTimeOut+0x6e>
			{
				/* If INCLUDE_vTaskSuspend is set to 1 and the block time
				specified is the maximum block time then the task should block
				indefinitely, and therefore never time out. */
				xReturn = pdFALSE;
 8007294:	2300      	movs	r3, #0
 8007296:	61fb      	str	r3, [r7, #28]
 8007298:	e023      	b.n	80072e2 <xTaskCheckForTimeOut+0xb6>
			}
			else
		#endif

		if( ( xNumOfOverflows != pxTimeOut->xOverflowCount ) && ( xConstTickCount >= pxTimeOut->xTimeOnEntering ) ) /*lint !e525 Indentation preferred as is to make code within pre-processor directives clearer. */
 800729a:	687b      	ldr	r3, [r7, #4]
 800729c:	681a      	ldr	r2, [r3, #0]
 800729e:	4b15      	ldr	r3, [pc, #84]	; (80072f4 <xTaskCheckForTimeOut+0xc8>)
 80072a0:	681b      	ldr	r3, [r3, #0]
 80072a2:	429a      	cmp	r2, r3
 80072a4:	d007      	beq.n	80072b6 <xTaskCheckForTimeOut+0x8a>
 80072a6:	687b      	ldr	r3, [r7, #4]
 80072a8:	685b      	ldr	r3, [r3, #4]
 80072aa:	69ba      	ldr	r2, [r7, #24]
 80072ac:	429a      	cmp	r2, r3
 80072ae:	d302      	bcc.n	80072b6 <xTaskCheckForTimeOut+0x8a>
			/* The tick count is greater than the time at which
			vTaskSetTimeout() was called, but has also overflowed since
			vTaskSetTimeOut() was called.  It must have wrapped all the way
			around and gone past again. This passed since vTaskSetTimeout()
			was called. */
			xReturn = pdTRUE;
 80072b0:	2301      	movs	r3, #1
 80072b2:	61fb      	str	r3, [r7, #28]
 80072b4:	e015      	b.n	80072e2 <xTaskCheckForTimeOut+0xb6>
		}
		else if( xElapsedTime < *pxTicksToWait ) /*lint !e961 Explicit casting is only redundant with some compilers, whereas others require it to prevent integer conversion errors. */
 80072b6:	683b      	ldr	r3, [r7, #0]
 80072b8:	681b      	ldr	r3, [r3, #0]
 80072ba:	697a      	ldr	r2, [r7, #20]
 80072bc:	429a      	cmp	r2, r3
 80072be:	d20b      	bcs.n	80072d8 <xTaskCheckForTimeOut+0xac>
		{
			/* Not a genuine timeout. Adjust parameters for time remaining. */
			*pxTicksToWait -= xElapsedTime;
 80072c0:	683b      	ldr	r3, [r7, #0]
 80072c2:	681a      	ldr	r2, [r3, #0]
 80072c4:	697b      	ldr	r3, [r7, #20]
 80072c6:	1ad2      	subs	r2, r2, r3
 80072c8:	683b      	ldr	r3, [r7, #0]
 80072ca:	601a      	str	r2, [r3, #0]
			vTaskInternalSetTimeOutState( pxTimeOut );
 80072cc:	6878      	ldr	r0, [r7, #4]
 80072ce:	f7ff ff97 	bl	8007200 <vTaskInternalSetTimeOutState>
			xReturn = pdFALSE;
 80072d2:	2300      	movs	r3, #0
 80072d4:	61fb      	str	r3, [r7, #28]
 80072d6:	e004      	b.n	80072e2 <xTaskCheckForTimeOut+0xb6>
		}
		else
		{
			*pxTicksToWait = 0;
 80072d8:	683b      	ldr	r3, [r7, #0]
 80072da:	2200      	movs	r2, #0
 80072dc:	601a      	str	r2, [r3, #0]
			xReturn = pdTRUE;
 80072de:	2301      	movs	r3, #1
 80072e0:	61fb      	str	r3, [r7, #28]
		}
	}
	taskEXIT_CRITICAL();
 80072e2:	f000 ff77 	bl	80081d4 <vPortExitCritical>

	return xReturn;
 80072e6:	69fb      	ldr	r3, [r7, #28]
}
 80072e8:	4618      	mov	r0, r3
 80072ea:	3720      	adds	r7, #32
 80072ec:	46bd      	mov	sp, r7
 80072ee:	bd80      	pop	{r7, pc}
 80072f0:	20003360 	.word	0x20003360
 80072f4:	20003374 	.word	0x20003374

080072f8 <vTaskMissedYield>:
/*-----------------------------------------------------------*/

void vTaskMissedYield( void )
{
 80072f8:	b480      	push	{r7}
 80072fa:	af00      	add	r7, sp, #0
	xYieldPending = pdTRUE;
 80072fc:	4b03      	ldr	r3, [pc, #12]	; (800730c <vTaskMissedYield+0x14>)
 80072fe:	2201      	movs	r2, #1
 8007300:	601a      	str	r2, [r3, #0]
}
 8007302:	bf00      	nop
 8007304:	46bd      	mov	sp, r7
 8007306:	f85d 7b04 	ldr.w	r7, [sp], #4
 800730a:	4770      	bx	lr
 800730c:	20003370 	.word	0x20003370

08007310 <prvIdleTask>:
 *
 * void prvIdleTask( void *pvParameters );
 *
 */
static portTASK_FUNCTION( prvIdleTask, pvParameters )
{
 8007310:	b580      	push	{r7, lr}
 8007312:	b082      	sub	sp, #8
 8007314:	af00      	add	r7, sp, #0
 8007316:	6078      	str	r0, [r7, #4]

	for( ;; )
	{
		/* See if any tasks have deleted themselves - if so then the idle task
		is responsible for freeing the deleted task's TCB and stack. */
		prvCheckTasksWaitingTermination();
 8007318:	f000 f854 	bl	80073c4 <prvCheckTasksWaitingTermination>

			A critical region is not required here as we are just reading from
			the list, and an occasional incorrect value will not matter.  If
			the ready list at the idle priority contains more than one task
			then a task other than the idle task is ready to execute. */
			if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ tskIDLE_PRIORITY ] ) ) > ( UBaseType_t ) 1 )
 800731c:	4b07      	ldr	r3, [pc, #28]	; (800733c <prvIdleTask+0x2c>)
 800731e:	681b      	ldr	r3, [r3, #0]
 8007320:	2b01      	cmp	r3, #1
 8007322:	d907      	bls.n	8007334 <prvIdleTask+0x24>
			{
				taskYIELD();
 8007324:	4b06      	ldr	r3, [pc, #24]	; (8007340 <prvIdleTask+0x30>)
 8007326:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800732a:	601a      	str	r2, [r3, #0]
 800732c:	f3bf 8f4f 	dsb	sy
 8007330:	f3bf 8f6f 	isb	sy
			/* Call the user defined function from within the idle task.  This
			allows the application designer to add background functionality
			without the overhead of a separate task.
			NOTE: vApplicationIdleHook() MUST NOT, UNDER ANY CIRCUMSTANCES,
			CALL A FUNCTION THAT MIGHT BLOCK. */
			vApplicationIdleHook();
 8007334:	f7f9 ff7a 	bl	800122c <vApplicationIdleHook>
		prvCheckTasksWaitingTermination();
 8007338:	e7ee      	b.n	8007318 <prvIdleTask+0x8>
 800733a:	bf00      	nop
 800733c:	20002e8c 	.word	0x20002e8c
 8007340:	e000ed04 	.word	0xe000ed04

08007344 <prvInitialiseTaskLists>:

#endif /* portUSING_MPU_WRAPPERS */
/*-----------------------------------------------------------*/

static void prvInitialiseTaskLists( void )
{
 8007344:	b580      	push	{r7, lr}
 8007346:	b082      	sub	sp, #8
 8007348:	af00      	add	r7, sp, #0
UBaseType_t uxPriority;

	for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 800734a:	2300      	movs	r3, #0
 800734c:	607b      	str	r3, [r7, #4]
 800734e:	e00c      	b.n	800736a <prvInitialiseTaskLists+0x26>
	{
		vListInitialise( &( pxReadyTasksLists[ uxPriority ] ) );
 8007350:	687a      	ldr	r2, [r7, #4]
 8007352:	4613      	mov	r3, r2
 8007354:	009b      	lsls	r3, r3, #2
 8007356:	4413      	add	r3, r2
 8007358:	009b      	lsls	r3, r3, #2
 800735a:	4a12      	ldr	r2, [pc, #72]	; (80073a4 <prvInitialiseTaskLists+0x60>)
 800735c:	4413      	add	r3, r2
 800735e:	4618      	mov	r0, r3
 8007360:	f7fe fa36 	bl	80057d0 <vListInitialise>
	for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 8007364:	687b      	ldr	r3, [r7, #4]
 8007366:	3301      	adds	r3, #1
 8007368:	607b      	str	r3, [r7, #4]
 800736a:	687b      	ldr	r3, [r7, #4]
 800736c:	2b37      	cmp	r3, #55	; 0x37
 800736e:	d9ef      	bls.n	8007350 <prvInitialiseTaskLists+0xc>
	}

	vListInitialise( &xDelayedTaskList1 );
 8007370:	480d      	ldr	r0, [pc, #52]	; (80073a8 <prvInitialiseTaskLists+0x64>)
 8007372:	f7fe fa2d 	bl	80057d0 <vListInitialise>
	vListInitialise( &xDelayedTaskList2 );
 8007376:	480d      	ldr	r0, [pc, #52]	; (80073ac <prvInitialiseTaskLists+0x68>)
 8007378:	f7fe fa2a 	bl	80057d0 <vListInitialise>
	vListInitialise( &xPendingReadyList );
 800737c:	480c      	ldr	r0, [pc, #48]	; (80073b0 <prvInitialiseTaskLists+0x6c>)
 800737e:	f7fe fa27 	bl	80057d0 <vListInitialise>

	#if ( INCLUDE_vTaskDelete == 1 )
	{
		vListInitialise( &xTasksWaitingTermination );
 8007382:	480c      	ldr	r0, [pc, #48]	; (80073b4 <prvInitialiseTaskLists+0x70>)
 8007384:	f7fe fa24 	bl	80057d0 <vListInitialise>
	}
	#endif /* INCLUDE_vTaskDelete */

	#if ( INCLUDE_vTaskSuspend == 1 )
	{
		vListInitialise( &xSuspendedTaskList );
 8007388:	480b      	ldr	r0, [pc, #44]	; (80073b8 <prvInitialiseTaskLists+0x74>)
 800738a:	f7fe fa21 	bl	80057d0 <vListInitialise>
	}
	#endif /* INCLUDE_vTaskSuspend */

	/* Start with pxDelayedTaskList using list1 and the pxOverflowDelayedTaskList
	using list2. */
	pxDelayedTaskList = &xDelayedTaskList1;
 800738e:	4b0b      	ldr	r3, [pc, #44]	; (80073bc <prvInitialiseTaskLists+0x78>)
 8007390:	4a05      	ldr	r2, [pc, #20]	; (80073a8 <prvInitialiseTaskLists+0x64>)
 8007392:	601a      	str	r2, [r3, #0]
	pxOverflowDelayedTaskList = &xDelayedTaskList2;
 8007394:	4b0a      	ldr	r3, [pc, #40]	; (80073c0 <prvInitialiseTaskLists+0x7c>)
 8007396:	4a05      	ldr	r2, [pc, #20]	; (80073ac <prvInitialiseTaskLists+0x68>)
 8007398:	601a      	str	r2, [r3, #0]
}
 800739a:	bf00      	nop
 800739c:	3708      	adds	r7, #8
 800739e:	46bd      	mov	sp, r7
 80073a0:	bd80      	pop	{r7, pc}
 80073a2:	bf00      	nop
 80073a4:	20002e8c 	.word	0x20002e8c
 80073a8:	200032ec 	.word	0x200032ec
 80073ac:	20003300 	.word	0x20003300
 80073b0:	2000331c 	.word	0x2000331c
 80073b4:	20003330 	.word	0x20003330
 80073b8:	20003348 	.word	0x20003348
 80073bc:	20003314 	.word	0x20003314
 80073c0:	20003318 	.word	0x20003318

080073c4 <prvCheckTasksWaitingTermination>:
/*-----------------------------------------------------------*/

static void prvCheckTasksWaitingTermination( void )
{
 80073c4:	b580      	push	{r7, lr}
 80073c6:	b082      	sub	sp, #8
 80073c8:	af00      	add	r7, sp, #0
	{
		TCB_t *pxTCB;

		/* uxDeletedTasksWaitingCleanUp is used to prevent taskENTER_CRITICAL()
		being called too often in the idle task. */
		while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 80073ca:	e019      	b.n	8007400 <prvCheckTasksWaitingTermination+0x3c>
		{
			taskENTER_CRITICAL();
 80073cc:	f000 fece 	bl	800816c <vPortEnterCritical>
			{
				pxTCB = listGET_OWNER_OF_HEAD_ENTRY( ( &xTasksWaitingTermination ) ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 80073d0:	4b10      	ldr	r3, [pc, #64]	; (8007414 <prvCheckTasksWaitingTermination+0x50>)
 80073d2:	68db      	ldr	r3, [r3, #12]
 80073d4:	68db      	ldr	r3, [r3, #12]
 80073d6:	607b      	str	r3, [r7, #4]
				( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 80073d8:	687b      	ldr	r3, [r7, #4]
 80073da:	3304      	adds	r3, #4
 80073dc:	4618      	mov	r0, r3
 80073de:	f7fe fa81 	bl	80058e4 <uxListRemove>
				--uxCurrentNumberOfTasks;
 80073e2:	4b0d      	ldr	r3, [pc, #52]	; (8007418 <prvCheckTasksWaitingTermination+0x54>)
 80073e4:	681b      	ldr	r3, [r3, #0]
 80073e6:	3b01      	subs	r3, #1
 80073e8:	4a0b      	ldr	r2, [pc, #44]	; (8007418 <prvCheckTasksWaitingTermination+0x54>)
 80073ea:	6013      	str	r3, [r2, #0]
				--uxDeletedTasksWaitingCleanUp;
 80073ec:	4b0b      	ldr	r3, [pc, #44]	; (800741c <prvCheckTasksWaitingTermination+0x58>)
 80073ee:	681b      	ldr	r3, [r3, #0]
 80073f0:	3b01      	subs	r3, #1
 80073f2:	4a0a      	ldr	r2, [pc, #40]	; (800741c <prvCheckTasksWaitingTermination+0x58>)
 80073f4:	6013      	str	r3, [r2, #0]
			}
			taskEXIT_CRITICAL();
 80073f6:	f000 feed 	bl	80081d4 <vPortExitCritical>

			prvDeleteTCB( pxTCB );
 80073fa:	6878      	ldr	r0, [r7, #4]
 80073fc:	f000 f810 	bl	8007420 <prvDeleteTCB>
		while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 8007400:	4b06      	ldr	r3, [pc, #24]	; (800741c <prvCheckTasksWaitingTermination+0x58>)
 8007402:	681b      	ldr	r3, [r3, #0]
 8007404:	2b00      	cmp	r3, #0
 8007406:	d1e1      	bne.n	80073cc <prvCheckTasksWaitingTermination+0x8>
		}
	}
	#endif /* INCLUDE_vTaskDelete */
}
 8007408:	bf00      	nop
 800740a:	bf00      	nop
 800740c:	3708      	adds	r7, #8
 800740e:	46bd      	mov	sp, r7
 8007410:	bd80      	pop	{r7, pc}
 8007412:	bf00      	nop
 8007414:	20003330 	.word	0x20003330
 8007418:	2000335c 	.word	0x2000335c
 800741c:	20003344 	.word	0x20003344

08007420 <prvDeleteTCB>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelete == 1 )

	static void prvDeleteTCB( TCB_t *pxTCB )
	{
 8007420:	b580      	push	{r7, lr}
 8007422:	b084      	sub	sp, #16
 8007424:	af00      	add	r7, sp, #0
 8007426:	6078      	str	r0, [r7, #4]

		/* Free up the memory allocated by the scheduler for the task.  It is up
		to the task to free any memory allocated at the application level. */
		#if ( configUSE_NEWLIB_REENTRANT == 1 )
		{
			_reclaim_reent( &( pxTCB->xNewLib_reent ) );
 8007428:	687b      	ldr	r3, [r7, #4]
 800742a:	3354      	adds	r3, #84	; 0x54
 800742c:	4618      	mov	r0, r3
 800742e:	f001 f9b5 	bl	800879c <_reclaim_reent>
		#elif( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e731 !e9029 Macro has been consolidated for readability reasons. */
		{
			/* The task could have been allocated statically or dynamically, so
			check what was statically allocated before trying to free the
			memory. */
			if( pxTCB->ucStaticallyAllocated == tskDYNAMICALLY_ALLOCATED_STACK_AND_TCB )
 8007432:	687b      	ldr	r3, [r7, #4]
 8007434:	f893 30a5 	ldrb.w	r3, [r3, #165]	; 0xa5
 8007438:	2b00      	cmp	r3, #0
 800743a:	d108      	bne.n	800744e <prvDeleteTCB+0x2e>
			{
				/* Both the stack and TCB were allocated dynamically, so both
				must be freed. */
				vPortFree( pxTCB->pxStack );
 800743c:	687b      	ldr	r3, [r7, #4]
 800743e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8007440:	4618      	mov	r0, r3
 8007442:	f001 f889 	bl	8008558 <vPortFree>
				vPortFree( pxTCB );
 8007446:	6878      	ldr	r0, [r7, #4]
 8007448:	f001 f886 	bl	8008558 <vPortFree>
				configASSERT( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_AND_TCB	);
				mtCOVERAGE_TEST_MARKER();
			}
		}
		#endif /* configSUPPORT_DYNAMIC_ALLOCATION */
	}
 800744c:	e01a      	b.n	8007484 <prvDeleteTCB+0x64>
			else if( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_ONLY )
 800744e:	687b      	ldr	r3, [r7, #4]
 8007450:	f893 30a5 	ldrb.w	r3, [r3, #165]	; 0xa5
 8007454:	2b01      	cmp	r3, #1
 8007456:	d103      	bne.n	8007460 <prvDeleteTCB+0x40>
				vPortFree( pxTCB );
 8007458:	6878      	ldr	r0, [r7, #4]
 800745a:	f001 f87d 	bl	8008558 <vPortFree>
	}
 800745e:	e011      	b.n	8007484 <prvDeleteTCB+0x64>
				configASSERT( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_AND_TCB	);
 8007460:	687b      	ldr	r3, [r7, #4]
 8007462:	f893 30a5 	ldrb.w	r3, [r3, #165]	; 0xa5
 8007466:	2b02      	cmp	r3, #2
 8007468:	d00c      	beq.n	8007484 <prvDeleteTCB+0x64>
	__asm volatile
 800746a:	f04f 0350 	mov.w	r3, #80	; 0x50
 800746e:	b672      	cpsid	i
 8007470:	f383 8811 	msr	BASEPRI, r3
 8007474:	f3bf 8f6f 	isb	sy
 8007478:	f3bf 8f4f 	dsb	sy
 800747c:	b662      	cpsie	i
 800747e:	60fb      	str	r3, [r7, #12]
}
 8007480:	bf00      	nop
 8007482:	e7fe      	b.n	8007482 <prvDeleteTCB+0x62>
	}
 8007484:	bf00      	nop
 8007486:	3710      	adds	r7, #16
 8007488:	46bd      	mov	sp, r7
 800748a:	bd80      	pop	{r7, pc}

0800748c <prvResetNextTaskUnblockTime>:

#endif /* INCLUDE_vTaskDelete */
/*-----------------------------------------------------------*/

static void prvResetNextTaskUnblockTime( void )
{
 800748c:	b480      	push	{r7}
 800748e:	b083      	sub	sp, #12
 8007490:	af00      	add	r7, sp, #0
TCB_t *pxTCB;

	if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 8007492:	4b0c      	ldr	r3, [pc, #48]	; (80074c4 <prvResetNextTaskUnblockTime+0x38>)
 8007494:	681b      	ldr	r3, [r3, #0]
 8007496:	681b      	ldr	r3, [r3, #0]
 8007498:	2b00      	cmp	r3, #0
 800749a:	d104      	bne.n	80074a6 <prvResetNextTaskUnblockTime+0x1a>
	{
		/* The new current delayed list is empty.  Set xNextTaskUnblockTime to
		the maximum possible value so it is	extremely unlikely that the
		if( xTickCount >= xNextTaskUnblockTime ) test will pass until
		there is an item in the delayed list. */
		xNextTaskUnblockTime = portMAX_DELAY;
 800749c:	4b0a      	ldr	r3, [pc, #40]	; (80074c8 <prvResetNextTaskUnblockTime+0x3c>)
 800749e:	f04f 32ff 	mov.w	r2, #4294967295
 80074a2:	601a      	str	r2, [r3, #0]
		which the task at the head of the delayed list should be removed
		from the Blocked state. */
		( pxTCB ) = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
		xNextTaskUnblockTime = listGET_LIST_ITEM_VALUE( &( ( pxTCB )->xStateListItem ) );
	}
}
 80074a4:	e008      	b.n	80074b8 <prvResetNextTaskUnblockTime+0x2c>
		( pxTCB ) = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 80074a6:	4b07      	ldr	r3, [pc, #28]	; (80074c4 <prvResetNextTaskUnblockTime+0x38>)
 80074a8:	681b      	ldr	r3, [r3, #0]
 80074aa:	68db      	ldr	r3, [r3, #12]
 80074ac:	68db      	ldr	r3, [r3, #12]
 80074ae:	607b      	str	r3, [r7, #4]
		xNextTaskUnblockTime = listGET_LIST_ITEM_VALUE( &( ( pxTCB )->xStateListItem ) );
 80074b0:	687b      	ldr	r3, [r7, #4]
 80074b2:	685b      	ldr	r3, [r3, #4]
 80074b4:	4a04      	ldr	r2, [pc, #16]	; (80074c8 <prvResetNextTaskUnblockTime+0x3c>)
 80074b6:	6013      	str	r3, [r2, #0]
}
 80074b8:	bf00      	nop
 80074ba:	370c      	adds	r7, #12
 80074bc:	46bd      	mov	sp, r7
 80074be:	f85d 7b04 	ldr.w	r7, [sp], #4
 80074c2:	4770      	bx	lr
 80074c4:	20003314 	.word	0x20003314
 80074c8:	2000337c 	.word	0x2000337c

080074cc <xTaskGetSchedulerState>:
/*-----------------------------------------------------------*/

#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )

	BaseType_t xTaskGetSchedulerState( void )
	{
 80074cc:	b480      	push	{r7}
 80074ce:	b083      	sub	sp, #12
 80074d0:	af00      	add	r7, sp, #0
	BaseType_t xReturn;

		if( xSchedulerRunning == pdFALSE )
 80074d2:	4b0b      	ldr	r3, [pc, #44]	; (8007500 <xTaskGetSchedulerState+0x34>)
 80074d4:	681b      	ldr	r3, [r3, #0]
 80074d6:	2b00      	cmp	r3, #0
 80074d8:	d102      	bne.n	80074e0 <xTaskGetSchedulerState+0x14>
		{
			xReturn = taskSCHEDULER_NOT_STARTED;
 80074da:	2301      	movs	r3, #1
 80074dc:	607b      	str	r3, [r7, #4]
 80074de:	e008      	b.n	80074f2 <xTaskGetSchedulerState+0x26>
		}
		else
		{
			if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 80074e0:	4b08      	ldr	r3, [pc, #32]	; (8007504 <xTaskGetSchedulerState+0x38>)
 80074e2:	681b      	ldr	r3, [r3, #0]
 80074e4:	2b00      	cmp	r3, #0
 80074e6:	d102      	bne.n	80074ee <xTaskGetSchedulerState+0x22>
			{
				xReturn = taskSCHEDULER_RUNNING;
 80074e8:	2302      	movs	r3, #2
 80074ea:	607b      	str	r3, [r7, #4]
 80074ec:	e001      	b.n	80074f2 <xTaskGetSchedulerState+0x26>
			}
			else
			{
				xReturn = taskSCHEDULER_SUSPENDED;
 80074ee:	2300      	movs	r3, #0
 80074f0:	607b      	str	r3, [r7, #4]
			}
		}

		return xReturn;
 80074f2:	687b      	ldr	r3, [r7, #4]
	}
 80074f4:	4618      	mov	r0, r3
 80074f6:	370c      	adds	r7, #12
 80074f8:	46bd      	mov	sp, r7
 80074fa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80074fe:	4770      	bx	lr
 8007500:	20003368 	.word	0x20003368
 8007504:	20003384 	.word	0x20003384

08007508 <xTaskPriorityInherit>:
/*-----------------------------------------------------------*/

#if ( configUSE_MUTEXES == 1 )

	BaseType_t xTaskPriorityInherit( TaskHandle_t const pxMutexHolder )
	{
 8007508:	b580      	push	{r7, lr}
 800750a:	b084      	sub	sp, #16
 800750c:	af00      	add	r7, sp, #0
 800750e:	6078      	str	r0, [r7, #4]
	TCB_t * const pxMutexHolderTCB = pxMutexHolder;
 8007510:	687b      	ldr	r3, [r7, #4]
 8007512:	60bb      	str	r3, [r7, #8]
	BaseType_t xReturn = pdFALSE;
 8007514:	2300      	movs	r3, #0
 8007516:	60fb      	str	r3, [r7, #12]

		/* If the mutex was given back by an interrupt while the queue was
		locked then the mutex holder might now be NULL.  _RB_ Is this still
		needed as interrupts can no longer use mutexes? */
		if( pxMutexHolder != NULL )
 8007518:	687b      	ldr	r3, [r7, #4]
 800751a:	2b00      	cmp	r3, #0
 800751c:	d051      	beq.n	80075c2 <xTaskPriorityInherit+0xba>
		{
			/* If the holder of the mutex has a priority below the priority of
			the task attempting to obtain the mutex then it will temporarily
			inherit the priority of the task attempting to obtain the mutex. */
			if( pxMutexHolderTCB->uxPriority < pxCurrentTCB->uxPriority )
 800751e:	68bb      	ldr	r3, [r7, #8]
 8007520:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8007522:	4b2a      	ldr	r3, [pc, #168]	; (80075cc <xTaskPriorityInherit+0xc4>)
 8007524:	681b      	ldr	r3, [r3, #0]
 8007526:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8007528:	429a      	cmp	r2, r3
 800752a:	d241      	bcs.n	80075b0 <xTaskPriorityInherit+0xa8>
			{
				/* Adjust the mutex holder state to account for its new
				priority.  Only reset the event list item value if the value is
				not being used for anything else. */
				if( ( listGET_LIST_ITEM_VALUE( &( pxMutexHolderTCB->xEventListItem ) ) & taskEVENT_LIST_ITEM_VALUE_IN_USE ) == 0UL )
 800752c:	68bb      	ldr	r3, [r7, #8]
 800752e:	699b      	ldr	r3, [r3, #24]
 8007530:	2b00      	cmp	r3, #0
 8007532:	db06      	blt.n	8007542 <xTaskPriorityInherit+0x3a>
				{
					listSET_LIST_ITEM_VALUE( &( pxMutexHolderTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) pxCurrentTCB->uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8007534:	4b25      	ldr	r3, [pc, #148]	; (80075cc <xTaskPriorityInherit+0xc4>)
 8007536:	681b      	ldr	r3, [r3, #0]
 8007538:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800753a:	f1c3 0238 	rsb	r2, r3, #56	; 0x38
 800753e:	68bb      	ldr	r3, [r7, #8]
 8007540:	619a      	str	r2, [r3, #24]
					mtCOVERAGE_TEST_MARKER();
				}

				/* If the task being modified is in the ready state it will need
				to be moved into a new list. */
				if( listIS_CONTAINED_WITHIN( &( pxReadyTasksLists[ pxMutexHolderTCB->uxPriority ] ), &( pxMutexHolderTCB->xStateListItem ) ) != pdFALSE )
 8007542:	68bb      	ldr	r3, [r7, #8]
 8007544:	6959      	ldr	r1, [r3, #20]
 8007546:	68bb      	ldr	r3, [r7, #8]
 8007548:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800754a:	4613      	mov	r3, r2
 800754c:	009b      	lsls	r3, r3, #2
 800754e:	4413      	add	r3, r2
 8007550:	009b      	lsls	r3, r3, #2
 8007552:	4a1f      	ldr	r2, [pc, #124]	; (80075d0 <xTaskPriorityInherit+0xc8>)
 8007554:	4413      	add	r3, r2
 8007556:	4299      	cmp	r1, r3
 8007558:	d122      	bne.n	80075a0 <xTaskPriorityInherit+0x98>
				{
					if( uxListRemove( &( pxMutexHolderTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 800755a:	68bb      	ldr	r3, [r7, #8]
 800755c:	3304      	adds	r3, #4
 800755e:	4618      	mov	r0, r3
 8007560:	f7fe f9c0 	bl	80058e4 <uxListRemove>
					{
						mtCOVERAGE_TEST_MARKER();
					}

					/* Inherit the priority before being moved into the new list. */
					pxMutexHolderTCB->uxPriority = pxCurrentTCB->uxPriority;
 8007564:	4b19      	ldr	r3, [pc, #100]	; (80075cc <xTaskPriorityInherit+0xc4>)
 8007566:	681b      	ldr	r3, [r3, #0]
 8007568:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800756a:	68bb      	ldr	r3, [r7, #8]
 800756c:	62da      	str	r2, [r3, #44]	; 0x2c
					prvAddTaskToReadyList( pxMutexHolderTCB );
 800756e:	68bb      	ldr	r3, [r7, #8]
 8007570:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8007572:	4b18      	ldr	r3, [pc, #96]	; (80075d4 <xTaskPriorityInherit+0xcc>)
 8007574:	681b      	ldr	r3, [r3, #0]
 8007576:	429a      	cmp	r2, r3
 8007578:	d903      	bls.n	8007582 <xTaskPriorityInherit+0x7a>
 800757a:	68bb      	ldr	r3, [r7, #8]
 800757c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800757e:	4a15      	ldr	r2, [pc, #84]	; (80075d4 <xTaskPriorityInherit+0xcc>)
 8007580:	6013      	str	r3, [r2, #0]
 8007582:	68bb      	ldr	r3, [r7, #8]
 8007584:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8007586:	4613      	mov	r3, r2
 8007588:	009b      	lsls	r3, r3, #2
 800758a:	4413      	add	r3, r2
 800758c:	009b      	lsls	r3, r3, #2
 800758e:	4a10      	ldr	r2, [pc, #64]	; (80075d0 <xTaskPriorityInherit+0xc8>)
 8007590:	441a      	add	r2, r3
 8007592:	68bb      	ldr	r3, [r7, #8]
 8007594:	3304      	adds	r3, #4
 8007596:	4619      	mov	r1, r3
 8007598:	4610      	mov	r0, r2
 800759a:	f7fe f946 	bl	800582a <vListInsertEnd>
 800759e:	e004      	b.n	80075aa <xTaskPriorityInherit+0xa2>
				}
				else
				{
					/* Just inherit the priority. */
					pxMutexHolderTCB->uxPriority = pxCurrentTCB->uxPriority;
 80075a0:	4b0a      	ldr	r3, [pc, #40]	; (80075cc <xTaskPriorityInherit+0xc4>)
 80075a2:	681b      	ldr	r3, [r3, #0]
 80075a4:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80075a6:	68bb      	ldr	r3, [r7, #8]
 80075a8:	62da      	str	r2, [r3, #44]	; 0x2c
				}

				traceTASK_PRIORITY_INHERIT( pxMutexHolderTCB, pxCurrentTCB->uxPriority );

				/* Inheritance occurred. */
				xReturn = pdTRUE;
 80075aa:	2301      	movs	r3, #1
 80075ac:	60fb      	str	r3, [r7, #12]
 80075ae:	e008      	b.n	80075c2 <xTaskPriorityInherit+0xba>
			}
			else
			{
				if( pxMutexHolderTCB->uxBasePriority < pxCurrentTCB->uxPriority )
 80075b0:	68bb      	ldr	r3, [r7, #8]
 80075b2:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 80075b4:	4b05      	ldr	r3, [pc, #20]	; (80075cc <xTaskPriorityInherit+0xc4>)
 80075b6:	681b      	ldr	r3, [r3, #0]
 80075b8:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80075ba:	429a      	cmp	r2, r3
 80075bc:	d201      	bcs.n	80075c2 <xTaskPriorityInherit+0xba>
					current priority of the mutex holder is not lower than the
					priority of the task attempting to take the mutex.
					Therefore the mutex holder must have already inherited a
					priority, but inheritance would have occurred if that had
					not been the case. */
					xReturn = pdTRUE;
 80075be:	2301      	movs	r3, #1
 80075c0:	60fb      	str	r3, [r7, #12]
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}

		return xReturn;
 80075c2:	68fb      	ldr	r3, [r7, #12]
	}
 80075c4:	4618      	mov	r0, r3
 80075c6:	3710      	adds	r7, #16
 80075c8:	46bd      	mov	sp, r7
 80075ca:	bd80      	pop	{r7, pc}
 80075cc:	20002e88 	.word	0x20002e88
 80075d0:	20002e8c 	.word	0x20002e8c
 80075d4:	20003364 	.word	0x20003364

080075d8 <xTaskPriorityDisinherit>:
/*-----------------------------------------------------------*/

#if ( configUSE_MUTEXES == 1 )

	BaseType_t xTaskPriorityDisinherit( TaskHandle_t const pxMutexHolder )
	{
 80075d8:	b580      	push	{r7, lr}
 80075da:	b086      	sub	sp, #24
 80075dc:	af00      	add	r7, sp, #0
 80075de:	6078      	str	r0, [r7, #4]
	TCB_t * const pxTCB = pxMutexHolder;
 80075e0:	687b      	ldr	r3, [r7, #4]
 80075e2:	613b      	str	r3, [r7, #16]
	BaseType_t xReturn = pdFALSE;
 80075e4:	2300      	movs	r3, #0
 80075e6:	617b      	str	r3, [r7, #20]

		if( pxMutexHolder != NULL )
 80075e8:	687b      	ldr	r3, [r7, #4]
 80075ea:	2b00      	cmp	r3, #0
 80075ec:	d05a      	beq.n	80076a4 <xTaskPriorityDisinherit+0xcc>
		{
			/* A task can only have an inherited priority if it holds the mutex.
			If the mutex is held by a task then it cannot be given from an
			interrupt, and if a mutex is given by the holding task then it must
			be the running state task. */
			configASSERT( pxTCB == pxCurrentTCB );
 80075ee:	4b30      	ldr	r3, [pc, #192]	; (80076b0 <xTaskPriorityDisinherit+0xd8>)
 80075f0:	681b      	ldr	r3, [r3, #0]
 80075f2:	693a      	ldr	r2, [r7, #16]
 80075f4:	429a      	cmp	r2, r3
 80075f6:	d00c      	beq.n	8007612 <xTaskPriorityDisinherit+0x3a>
	__asm volatile
 80075f8:	f04f 0350 	mov.w	r3, #80	; 0x50
 80075fc:	b672      	cpsid	i
 80075fe:	f383 8811 	msr	BASEPRI, r3
 8007602:	f3bf 8f6f 	isb	sy
 8007606:	f3bf 8f4f 	dsb	sy
 800760a:	b662      	cpsie	i
 800760c:	60fb      	str	r3, [r7, #12]
}
 800760e:	bf00      	nop
 8007610:	e7fe      	b.n	8007610 <xTaskPriorityDisinherit+0x38>
			configASSERT( pxTCB->uxMutexesHeld );
 8007612:	693b      	ldr	r3, [r7, #16]
 8007614:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8007616:	2b00      	cmp	r3, #0
 8007618:	d10c      	bne.n	8007634 <xTaskPriorityDisinherit+0x5c>
	__asm volatile
 800761a:	f04f 0350 	mov.w	r3, #80	; 0x50
 800761e:	b672      	cpsid	i
 8007620:	f383 8811 	msr	BASEPRI, r3
 8007624:	f3bf 8f6f 	isb	sy
 8007628:	f3bf 8f4f 	dsb	sy
 800762c:	b662      	cpsie	i
 800762e:	60bb      	str	r3, [r7, #8]
}
 8007630:	bf00      	nop
 8007632:	e7fe      	b.n	8007632 <xTaskPriorityDisinherit+0x5a>
			( pxTCB->uxMutexesHeld )--;
 8007634:	693b      	ldr	r3, [r7, #16]
 8007636:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8007638:	1e5a      	subs	r2, r3, #1
 800763a:	693b      	ldr	r3, [r7, #16]
 800763c:	651a      	str	r2, [r3, #80]	; 0x50

			/* Has the holder of the mutex inherited the priority of another
			task? */
			if( pxTCB->uxPriority != pxTCB->uxBasePriority )
 800763e:	693b      	ldr	r3, [r7, #16]
 8007640:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8007642:	693b      	ldr	r3, [r7, #16]
 8007644:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8007646:	429a      	cmp	r2, r3
 8007648:	d02c      	beq.n	80076a4 <xTaskPriorityDisinherit+0xcc>
			{
				/* Only disinherit if no other mutexes are held. */
				if( pxTCB->uxMutexesHeld == ( UBaseType_t ) 0 )
 800764a:	693b      	ldr	r3, [r7, #16]
 800764c:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800764e:	2b00      	cmp	r3, #0
 8007650:	d128      	bne.n	80076a4 <xTaskPriorityDisinherit+0xcc>
					/* A task can only have an inherited priority if it holds
					the mutex.  If the mutex is held by a task then it cannot be
					given from an interrupt, and if a mutex is given by the
					holding task then it must be the running state task.  Remove
					the holding task from the ready list. */
					if( uxListRemove( &( pxTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 8007652:	693b      	ldr	r3, [r7, #16]
 8007654:	3304      	adds	r3, #4
 8007656:	4618      	mov	r0, r3
 8007658:	f7fe f944 	bl	80058e4 <uxListRemove>
					}

					/* Disinherit the priority before adding the task into the
					new	ready list. */
					traceTASK_PRIORITY_DISINHERIT( pxTCB, pxTCB->uxBasePriority );
					pxTCB->uxPriority = pxTCB->uxBasePriority;
 800765c:	693b      	ldr	r3, [r7, #16]
 800765e:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 8007660:	693b      	ldr	r3, [r7, #16]
 8007662:	62da      	str	r2, [r3, #44]	; 0x2c

					/* Reset the event list item value.  It cannot be in use for
					any other purpose if this task is running, and it must be
					running to give back the mutex. */
					listSET_LIST_ITEM_VALUE( &( pxTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) pxTCB->uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8007664:	693b      	ldr	r3, [r7, #16]
 8007666:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8007668:	f1c3 0238 	rsb	r2, r3, #56	; 0x38
 800766c:	693b      	ldr	r3, [r7, #16]
 800766e:	619a      	str	r2, [r3, #24]
					prvAddTaskToReadyList( pxTCB );
 8007670:	693b      	ldr	r3, [r7, #16]
 8007672:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8007674:	4b0f      	ldr	r3, [pc, #60]	; (80076b4 <xTaskPriorityDisinherit+0xdc>)
 8007676:	681b      	ldr	r3, [r3, #0]
 8007678:	429a      	cmp	r2, r3
 800767a:	d903      	bls.n	8007684 <xTaskPriorityDisinherit+0xac>
 800767c:	693b      	ldr	r3, [r7, #16]
 800767e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8007680:	4a0c      	ldr	r2, [pc, #48]	; (80076b4 <xTaskPriorityDisinherit+0xdc>)
 8007682:	6013      	str	r3, [r2, #0]
 8007684:	693b      	ldr	r3, [r7, #16]
 8007686:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8007688:	4613      	mov	r3, r2
 800768a:	009b      	lsls	r3, r3, #2
 800768c:	4413      	add	r3, r2
 800768e:	009b      	lsls	r3, r3, #2
 8007690:	4a09      	ldr	r2, [pc, #36]	; (80076b8 <xTaskPriorityDisinherit+0xe0>)
 8007692:	441a      	add	r2, r3
 8007694:	693b      	ldr	r3, [r7, #16]
 8007696:	3304      	adds	r3, #4
 8007698:	4619      	mov	r1, r3
 800769a:	4610      	mov	r0, r2
 800769c:	f7fe f8c5 	bl	800582a <vListInsertEnd>
					in an order different to that in which they were taken.
					If a context switch did not occur when the first mutex was
					returned, even if a task was waiting on it, then a context
					switch should occur when the last mutex is returned whether
					a task is waiting on it or not. */
					xReturn = pdTRUE;
 80076a0:	2301      	movs	r3, #1
 80076a2:	617b      	str	r3, [r7, #20]
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}

		return xReturn;
 80076a4:	697b      	ldr	r3, [r7, #20]
	}
 80076a6:	4618      	mov	r0, r3
 80076a8:	3718      	adds	r7, #24
 80076aa:	46bd      	mov	sp, r7
 80076ac:	bd80      	pop	{r7, pc}
 80076ae:	bf00      	nop
 80076b0:	20002e88 	.word	0x20002e88
 80076b4:	20003364 	.word	0x20003364
 80076b8:	20002e8c 	.word	0x20002e8c

080076bc <vTaskPriorityDisinheritAfterTimeout>:
/*-----------------------------------------------------------*/

#if ( configUSE_MUTEXES == 1 )

	void vTaskPriorityDisinheritAfterTimeout( TaskHandle_t const pxMutexHolder, UBaseType_t uxHighestPriorityWaitingTask )
	{
 80076bc:	b580      	push	{r7, lr}
 80076be:	b088      	sub	sp, #32
 80076c0:	af00      	add	r7, sp, #0
 80076c2:	6078      	str	r0, [r7, #4]
 80076c4:	6039      	str	r1, [r7, #0]
	TCB_t * const pxTCB = pxMutexHolder;
 80076c6:	687b      	ldr	r3, [r7, #4]
 80076c8:	61bb      	str	r3, [r7, #24]
	UBaseType_t uxPriorityUsedOnEntry, uxPriorityToUse;
	const UBaseType_t uxOnlyOneMutexHeld = ( UBaseType_t ) 1;
 80076ca:	2301      	movs	r3, #1
 80076cc:	617b      	str	r3, [r7, #20]

		if( pxMutexHolder != NULL )
 80076ce:	687b      	ldr	r3, [r7, #4]
 80076d0:	2b00      	cmp	r3, #0
 80076d2:	d06e      	beq.n	80077b2 <vTaskPriorityDisinheritAfterTimeout+0xf6>
		{
			/* If pxMutexHolder is not NULL then the holder must hold at least
			one mutex. */
			configASSERT( pxTCB->uxMutexesHeld );
 80076d4:	69bb      	ldr	r3, [r7, #24]
 80076d6:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80076d8:	2b00      	cmp	r3, #0
 80076da:	d10c      	bne.n	80076f6 <vTaskPriorityDisinheritAfterTimeout+0x3a>
	__asm volatile
 80076dc:	f04f 0350 	mov.w	r3, #80	; 0x50
 80076e0:	b672      	cpsid	i
 80076e2:	f383 8811 	msr	BASEPRI, r3
 80076e6:	f3bf 8f6f 	isb	sy
 80076ea:	f3bf 8f4f 	dsb	sy
 80076ee:	b662      	cpsie	i
 80076f0:	60fb      	str	r3, [r7, #12]
}
 80076f2:	bf00      	nop
 80076f4:	e7fe      	b.n	80076f4 <vTaskPriorityDisinheritAfterTimeout+0x38>

			/* Determine the priority to which the priority of the task that
			holds the mutex should be set.  This will be the greater of the
			holding task's base priority and the priority of the highest
			priority task that is waiting to obtain the mutex. */
			if( pxTCB->uxBasePriority < uxHighestPriorityWaitingTask )
 80076f6:	69bb      	ldr	r3, [r7, #24]
 80076f8:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80076fa:	683a      	ldr	r2, [r7, #0]
 80076fc:	429a      	cmp	r2, r3
 80076fe:	d902      	bls.n	8007706 <vTaskPriorityDisinheritAfterTimeout+0x4a>
			{
				uxPriorityToUse = uxHighestPriorityWaitingTask;
 8007700:	683b      	ldr	r3, [r7, #0]
 8007702:	61fb      	str	r3, [r7, #28]
 8007704:	e002      	b.n	800770c <vTaskPriorityDisinheritAfterTimeout+0x50>
			}
			else
			{
				uxPriorityToUse = pxTCB->uxBasePriority;
 8007706:	69bb      	ldr	r3, [r7, #24]
 8007708:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800770a:	61fb      	str	r3, [r7, #28]
			}

			/* Does the priority need to change? */
			if( pxTCB->uxPriority != uxPriorityToUse )
 800770c:	69bb      	ldr	r3, [r7, #24]
 800770e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8007710:	69fa      	ldr	r2, [r7, #28]
 8007712:	429a      	cmp	r2, r3
 8007714:	d04d      	beq.n	80077b2 <vTaskPriorityDisinheritAfterTimeout+0xf6>
			{
				/* Only disinherit if no other mutexes are held.  This is a
				simplification in the priority inheritance implementation.  If
				the task that holds the mutex is also holding other mutexes then
				the other mutexes may have caused the priority inheritance. */
				if( pxTCB->uxMutexesHeld == uxOnlyOneMutexHeld )
 8007716:	69bb      	ldr	r3, [r7, #24]
 8007718:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800771a:	697a      	ldr	r2, [r7, #20]
 800771c:	429a      	cmp	r2, r3
 800771e:	d148      	bne.n	80077b2 <vTaskPriorityDisinheritAfterTimeout+0xf6>
				{
					/* If a task has timed out because it already holds the
					mutex it was trying to obtain then it cannot of inherited
					its own priority. */
					configASSERT( pxTCB != pxCurrentTCB );
 8007720:	4b26      	ldr	r3, [pc, #152]	; (80077bc <vTaskPriorityDisinheritAfterTimeout+0x100>)
 8007722:	681b      	ldr	r3, [r3, #0]
 8007724:	69ba      	ldr	r2, [r7, #24]
 8007726:	429a      	cmp	r2, r3
 8007728:	d10c      	bne.n	8007744 <vTaskPriorityDisinheritAfterTimeout+0x88>
	__asm volatile
 800772a:	f04f 0350 	mov.w	r3, #80	; 0x50
 800772e:	b672      	cpsid	i
 8007730:	f383 8811 	msr	BASEPRI, r3
 8007734:	f3bf 8f6f 	isb	sy
 8007738:	f3bf 8f4f 	dsb	sy
 800773c:	b662      	cpsie	i
 800773e:	60bb      	str	r3, [r7, #8]
}
 8007740:	bf00      	nop
 8007742:	e7fe      	b.n	8007742 <vTaskPriorityDisinheritAfterTimeout+0x86>

					/* Disinherit the priority, remembering the previous
					priority to facilitate determining the subject task's
					state. */
					traceTASK_PRIORITY_DISINHERIT( pxTCB, pxTCB->uxBasePriority );
					uxPriorityUsedOnEntry = pxTCB->uxPriority;
 8007744:	69bb      	ldr	r3, [r7, #24]
 8007746:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8007748:	613b      	str	r3, [r7, #16]
					pxTCB->uxPriority = uxPriorityToUse;
 800774a:	69bb      	ldr	r3, [r7, #24]
 800774c:	69fa      	ldr	r2, [r7, #28]
 800774e:	62da      	str	r2, [r3, #44]	; 0x2c

					/* Only reset the event list item value if the value is not
					being used for anything else. */
					if( ( listGET_LIST_ITEM_VALUE( &( pxTCB->xEventListItem ) ) & taskEVENT_LIST_ITEM_VALUE_IN_USE ) == 0UL )
 8007750:	69bb      	ldr	r3, [r7, #24]
 8007752:	699b      	ldr	r3, [r3, #24]
 8007754:	2b00      	cmp	r3, #0
 8007756:	db04      	blt.n	8007762 <vTaskPriorityDisinheritAfterTimeout+0xa6>
					{
						listSET_LIST_ITEM_VALUE( &( pxTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) uxPriorityToUse ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8007758:	69fb      	ldr	r3, [r7, #28]
 800775a:	f1c3 0238 	rsb	r2, r3, #56	; 0x38
 800775e:	69bb      	ldr	r3, [r7, #24]
 8007760:	619a      	str	r2, [r3, #24]
					then the task that holds the mutex could be in either the
					Ready, Blocked or Suspended states.  Only remove the task
					from its current state list if it is in the Ready state as
					the task's priority is going to change and there is one
					Ready list per priority. */
					if( listIS_CONTAINED_WITHIN( &( pxReadyTasksLists[ uxPriorityUsedOnEntry ] ), &( pxTCB->xStateListItem ) ) != pdFALSE )
 8007762:	69bb      	ldr	r3, [r7, #24]
 8007764:	6959      	ldr	r1, [r3, #20]
 8007766:	693a      	ldr	r2, [r7, #16]
 8007768:	4613      	mov	r3, r2
 800776a:	009b      	lsls	r3, r3, #2
 800776c:	4413      	add	r3, r2
 800776e:	009b      	lsls	r3, r3, #2
 8007770:	4a13      	ldr	r2, [pc, #76]	; (80077c0 <vTaskPriorityDisinheritAfterTimeout+0x104>)
 8007772:	4413      	add	r3, r2
 8007774:	4299      	cmp	r1, r3
 8007776:	d11c      	bne.n	80077b2 <vTaskPriorityDisinheritAfterTimeout+0xf6>
					{
						if( uxListRemove( &( pxTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 8007778:	69bb      	ldr	r3, [r7, #24]
 800777a:	3304      	adds	r3, #4
 800777c:	4618      	mov	r0, r3
 800777e:	f7fe f8b1 	bl	80058e4 <uxListRemove>
						else
						{
							mtCOVERAGE_TEST_MARKER();
						}

						prvAddTaskToReadyList( pxTCB );
 8007782:	69bb      	ldr	r3, [r7, #24]
 8007784:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8007786:	4b0f      	ldr	r3, [pc, #60]	; (80077c4 <vTaskPriorityDisinheritAfterTimeout+0x108>)
 8007788:	681b      	ldr	r3, [r3, #0]
 800778a:	429a      	cmp	r2, r3
 800778c:	d903      	bls.n	8007796 <vTaskPriorityDisinheritAfterTimeout+0xda>
 800778e:	69bb      	ldr	r3, [r7, #24]
 8007790:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8007792:	4a0c      	ldr	r2, [pc, #48]	; (80077c4 <vTaskPriorityDisinheritAfterTimeout+0x108>)
 8007794:	6013      	str	r3, [r2, #0]
 8007796:	69bb      	ldr	r3, [r7, #24]
 8007798:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800779a:	4613      	mov	r3, r2
 800779c:	009b      	lsls	r3, r3, #2
 800779e:	4413      	add	r3, r2
 80077a0:	009b      	lsls	r3, r3, #2
 80077a2:	4a07      	ldr	r2, [pc, #28]	; (80077c0 <vTaskPriorityDisinheritAfterTimeout+0x104>)
 80077a4:	441a      	add	r2, r3
 80077a6:	69bb      	ldr	r3, [r7, #24]
 80077a8:	3304      	adds	r3, #4
 80077aa:	4619      	mov	r1, r3
 80077ac:	4610      	mov	r0, r2
 80077ae:	f7fe f83c 	bl	800582a <vListInsertEnd>
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
 80077b2:	bf00      	nop
 80077b4:	3720      	adds	r7, #32
 80077b6:	46bd      	mov	sp, r7
 80077b8:	bd80      	pop	{r7, pc}
 80077ba:	bf00      	nop
 80077bc:	20002e88 	.word	0x20002e88
 80077c0:	20002e8c 	.word	0x20002e8c
 80077c4:	20003364 	.word	0x20003364

080077c8 <pvTaskIncrementMutexHeldCount>:
/*-----------------------------------------------------------*/

#if ( configUSE_MUTEXES == 1 )

	TaskHandle_t pvTaskIncrementMutexHeldCount( void )
	{
 80077c8:	b480      	push	{r7}
 80077ca:	af00      	add	r7, sp, #0
		/* If xSemaphoreCreateMutex() is called before any tasks have been created
		then pxCurrentTCB will be NULL. */
		if( pxCurrentTCB != NULL )
 80077cc:	4b07      	ldr	r3, [pc, #28]	; (80077ec <pvTaskIncrementMutexHeldCount+0x24>)
 80077ce:	681b      	ldr	r3, [r3, #0]
 80077d0:	2b00      	cmp	r3, #0
 80077d2:	d004      	beq.n	80077de <pvTaskIncrementMutexHeldCount+0x16>
		{
			( pxCurrentTCB->uxMutexesHeld )++;
 80077d4:	4b05      	ldr	r3, [pc, #20]	; (80077ec <pvTaskIncrementMutexHeldCount+0x24>)
 80077d6:	681b      	ldr	r3, [r3, #0]
 80077d8:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 80077da:	3201      	adds	r2, #1
 80077dc:	651a      	str	r2, [r3, #80]	; 0x50
		}

		return pxCurrentTCB;
 80077de:	4b03      	ldr	r3, [pc, #12]	; (80077ec <pvTaskIncrementMutexHeldCount+0x24>)
 80077e0:	681b      	ldr	r3, [r3, #0]
	}
 80077e2:	4618      	mov	r0, r3
 80077e4:	46bd      	mov	sp, r7
 80077e6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80077ea:	4770      	bx	lr
 80077ec:	20002e88 	.word	0x20002e88

080077f0 <prvAddCurrentTaskToDelayedList>:
	}
#endif
/*-----------------------------------------------------------*/

static void prvAddCurrentTaskToDelayedList( TickType_t xTicksToWait, const BaseType_t xCanBlockIndefinitely )
{
 80077f0:	b580      	push	{r7, lr}
 80077f2:	b084      	sub	sp, #16
 80077f4:	af00      	add	r7, sp, #0
 80077f6:	6078      	str	r0, [r7, #4]
 80077f8:	6039      	str	r1, [r7, #0]
TickType_t xTimeToWake;
const TickType_t xConstTickCount = xTickCount;
 80077fa:	4b21      	ldr	r3, [pc, #132]	; (8007880 <prvAddCurrentTaskToDelayedList+0x90>)
 80077fc:	681b      	ldr	r3, [r3, #0]
 80077fe:	60fb      	str	r3, [r7, #12]
	}
	#endif

	/* Remove the task from the ready list before adding it to the blocked list
	as the same list item is used for both lists. */
	if( uxListRemove( &( pxCurrentTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 8007800:	4b20      	ldr	r3, [pc, #128]	; (8007884 <prvAddCurrentTaskToDelayedList+0x94>)
 8007802:	681b      	ldr	r3, [r3, #0]
 8007804:	3304      	adds	r3, #4
 8007806:	4618      	mov	r0, r3
 8007808:	f7fe f86c 	bl	80058e4 <uxListRemove>
		mtCOVERAGE_TEST_MARKER();
	}

	#if ( INCLUDE_vTaskSuspend == 1 )
	{
		if( ( xTicksToWait == portMAX_DELAY ) && ( xCanBlockIndefinitely != pdFALSE ) )
 800780c:	687b      	ldr	r3, [r7, #4]
 800780e:	f1b3 3fff 	cmp.w	r3, #4294967295
 8007812:	d10a      	bne.n	800782a <prvAddCurrentTaskToDelayedList+0x3a>
 8007814:	683b      	ldr	r3, [r7, #0]
 8007816:	2b00      	cmp	r3, #0
 8007818:	d007      	beq.n	800782a <prvAddCurrentTaskToDelayedList+0x3a>
		{
			/* Add the task to the suspended task list instead of a delayed task
			list to ensure it is not woken by a timing event.  It will block
			indefinitely. */
			vListInsertEnd( &xSuspendedTaskList, &( pxCurrentTCB->xStateListItem ) );
 800781a:	4b1a      	ldr	r3, [pc, #104]	; (8007884 <prvAddCurrentTaskToDelayedList+0x94>)
 800781c:	681b      	ldr	r3, [r3, #0]
 800781e:	3304      	adds	r3, #4
 8007820:	4619      	mov	r1, r3
 8007822:	4819      	ldr	r0, [pc, #100]	; (8007888 <prvAddCurrentTaskToDelayedList+0x98>)
 8007824:	f7fe f801 	bl	800582a <vListInsertEnd>

		/* Avoid compiler warning when INCLUDE_vTaskSuspend is not 1. */
		( void ) xCanBlockIndefinitely;
	}
	#endif /* INCLUDE_vTaskSuspend */
}
 8007828:	e026      	b.n	8007878 <prvAddCurrentTaskToDelayedList+0x88>
			xTimeToWake = xConstTickCount + xTicksToWait;
 800782a:	68fa      	ldr	r2, [r7, #12]
 800782c:	687b      	ldr	r3, [r7, #4]
 800782e:	4413      	add	r3, r2
 8007830:	60bb      	str	r3, [r7, #8]
			listSET_LIST_ITEM_VALUE( &( pxCurrentTCB->xStateListItem ), xTimeToWake );
 8007832:	4b14      	ldr	r3, [pc, #80]	; (8007884 <prvAddCurrentTaskToDelayedList+0x94>)
 8007834:	681b      	ldr	r3, [r3, #0]
 8007836:	68ba      	ldr	r2, [r7, #8]
 8007838:	605a      	str	r2, [r3, #4]
			if( xTimeToWake < xConstTickCount )
 800783a:	68ba      	ldr	r2, [r7, #8]
 800783c:	68fb      	ldr	r3, [r7, #12]
 800783e:	429a      	cmp	r2, r3
 8007840:	d209      	bcs.n	8007856 <prvAddCurrentTaskToDelayedList+0x66>
				vListInsert( pxOverflowDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 8007842:	4b12      	ldr	r3, [pc, #72]	; (800788c <prvAddCurrentTaskToDelayedList+0x9c>)
 8007844:	681a      	ldr	r2, [r3, #0]
 8007846:	4b0f      	ldr	r3, [pc, #60]	; (8007884 <prvAddCurrentTaskToDelayedList+0x94>)
 8007848:	681b      	ldr	r3, [r3, #0]
 800784a:	3304      	adds	r3, #4
 800784c:	4619      	mov	r1, r3
 800784e:	4610      	mov	r0, r2
 8007850:	f7fe f80f 	bl	8005872 <vListInsert>
}
 8007854:	e010      	b.n	8007878 <prvAddCurrentTaskToDelayedList+0x88>
				vListInsert( pxDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 8007856:	4b0e      	ldr	r3, [pc, #56]	; (8007890 <prvAddCurrentTaskToDelayedList+0xa0>)
 8007858:	681a      	ldr	r2, [r3, #0]
 800785a:	4b0a      	ldr	r3, [pc, #40]	; (8007884 <prvAddCurrentTaskToDelayedList+0x94>)
 800785c:	681b      	ldr	r3, [r3, #0]
 800785e:	3304      	adds	r3, #4
 8007860:	4619      	mov	r1, r3
 8007862:	4610      	mov	r0, r2
 8007864:	f7fe f805 	bl	8005872 <vListInsert>
				if( xTimeToWake < xNextTaskUnblockTime )
 8007868:	4b0a      	ldr	r3, [pc, #40]	; (8007894 <prvAddCurrentTaskToDelayedList+0xa4>)
 800786a:	681b      	ldr	r3, [r3, #0]
 800786c:	68ba      	ldr	r2, [r7, #8]
 800786e:	429a      	cmp	r2, r3
 8007870:	d202      	bcs.n	8007878 <prvAddCurrentTaskToDelayedList+0x88>
					xNextTaskUnblockTime = xTimeToWake;
 8007872:	4a08      	ldr	r2, [pc, #32]	; (8007894 <prvAddCurrentTaskToDelayedList+0xa4>)
 8007874:	68bb      	ldr	r3, [r7, #8]
 8007876:	6013      	str	r3, [r2, #0]
}
 8007878:	bf00      	nop
 800787a:	3710      	adds	r7, #16
 800787c:	46bd      	mov	sp, r7
 800787e:	bd80      	pop	{r7, pc}
 8007880:	20003360 	.word	0x20003360
 8007884:	20002e88 	.word	0x20002e88
 8007888:	20003348 	.word	0x20003348
 800788c:	20003318 	.word	0x20003318
 8007890:	20003314 	.word	0x20003314
 8007894:	2000337c 	.word	0x2000337c

08007898 <xTimerCreateTimerTask>:
									TimerCallbackFunction_t pxCallbackFunction,
									Timer_t *pxNewTimer ) PRIVILEGED_FUNCTION;
/*-----------------------------------------------------------*/

BaseType_t xTimerCreateTimerTask( void )
{
 8007898:	b580      	push	{r7, lr}
 800789a:	b08a      	sub	sp, #40	; 0x28
 800789c:	af04      	add	r7, sp, #16
BaseType_t xReturn = pdFAIL;
 800789e:	2300      	movs	r3, #0
 80078a0:	617b      	str	r3, [r7, #20]

	/* This function is called when the scheduler is started if
	configUSE_TIMERS is set to 1.  Check that the infrastructure used by the
	timer service task has been created/initialised.  If timers have already
	been created then the initialisation will already have been performed. */
	prvCheckForValidListAndQueue();
 80078a2:	f000 fb15 	bl	8007ed0 <prvCheckForValidListAndQueue>

	if( xTimerQueue != NULL )
 80078a6:	4b1d      	ldr	r3, [pc, #116]	; (800791c <xTimerCreateTimerTask+0x84>)
 80078a8:	681b      	ldr	r3, [r3, #0]
 80078aa:	2b00      	cmp	r3, #0
 80078ac:	d021      	beq.n	80078f2 <xTimerCreateTimerTask+0x5a>
	{
		#if( configSUPPORT_STATIC_ALLOCATION == 1 )
		{
			StaticTask_t *pxTimerTaskTCBBuffer = NULL;
 80078ae:	2300      	movs	r3, #0
 80078b0:	60fb      	str	r3, [r7, #12]
			StackType_t *pxTimerTaskStackBuffer = NULL;
 80078b2:	2300      	movs	r3, #0
 80078b4:	60bb      	str	r3, [r7, #8]
			uint32_t ulTimerTaskStackSize;

			vApplicationGetTimerTaskMemory( &pxTimerTaskTCBBuffer, &pxTimerTaskStackBuffer, &ulTimerTaskStackSize );
 80078b6:	1d3a      	adds	r2, r7, #4
 80078b8:	f107 0108 	add.w	r1, r7, #8
 80078bc:	f107 030c 	add.w	r3, r7, #12
 80078c0:	4618      	mov	r0, r3
 80078c2:	f7fd ff6b 	bl	800579c <vApplicationGetTimerTaskMemory>
			xTimerTaskHandle = xTaskCreateStatic(	prvTimerTask,
 80078c6:	6879      	ldr	r1, [r7, #4]
 80078c8:	68bb      	ldr	r3, [r7, #8]
 80078ca:	68fa      	ldr	r2, [r7, #12]
 80078cc:	9202      	str	r2, [sp, #8]
 80078ce:	9301      	str	r3, [sp, #4]
 80078d0:	2302      	movs	r3, #2
 80078d2:	9300      	str	r3, [sp, #0]
 80078d4:	2300      	movs	r3, #0
 80078d6:	460a      	mov	r2, r1
 80078d8:	4911      	ldr	r1, [pc, #68]	; (8007920 <xTimerCreateTimerTask+0x88>)
 80078da:	4812      	ldr	r0, [pc, #72]	; (8007924 <xTimerCreateTimerTask+0x8c>)
 80078dc:	f7fe ff66 	bl	80067ac <xTaskCreateStatic>
 80078e0:	4603      	mov	r3, r0
 80078e2:	4a11      	ldr	r2, [pc, #68]	; (8007928 <xTimerCreateTimerTask+0x90>)
 80078e4:	6013      	str	r3, [r2, #0]
													NULL,
													( ( UBaseType_t ) configTIMER_TASK_PRIORITY ) | portPRIVILEGE_BIT,
													pxTimerTaskStackBuffer,
													pxTimerTaskTCBBuffer );

			if( xTimerTaskHandle != NULL )
 80078e6:	4b10      	ldr	r3, [pc, #64]	; (8007928 <xTimerCreateTimerTask+0x90>)
 80078e8:	681b      	ldr	r3, [r3, #0]
 80078ea:	2b00      	cmp	r3, #0
 80078ec:	d001      	beq.n	80078f2 <xTimerCreateTimerTask+0x5a>
			{
				xReturn = pdPASS;
 80078ee:	2301      	movs	r3, #1
 80078f0:	617b      	str	r3, [r7, #20]
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	configASSERT( xReturn );
 80078f2:	697b      	ldr	r3, [r7, #20]
 80078f4:	2b00      	cmp	r3, #0
 80078f6:	d10c      	bne.n	8007912 <xTimerCreateTimerTask+0x7a>
	__asm volatile
 80078f8:	f04f 0350 	mov.w	r3, #80	; 0x50
 80078fc:	b672      	cpsid	i
 80078fe:	f383 8811 	msr	BASEPRI, r3
 8007902:	f3bf 8f6f 	isb	sy
 8007906:	f3bf 8f4f 	dsb	sy
 800790a:	b662      	cpsie	i
 800790c:	613b      	str	r3, [r7, #16]
}
 800790e:	bf00      	nop
 8007910:	e7fe      	b.n	8007910 <xTimerCreateTimerTask+0x78>
	return xReturn;
 8007912:	697b      	ldr	r3, [r7, #20]
}
 8007914:	4618      	mov	r0, r3
 8007916:	3718      	adds	r7, #24
 8007918:	46bd      	mov	sp, r7
 800791a:	bd80      	pop	{r7, pc}
 800791c:	200033b8 	.word	0x200033b8
 8007920:	080089d0 	.word	0x080089d0
 8007924:	08007a69 	.word	0x08007a69
 8007928:	200033bc 	.word	0x200033bc

0800792c <xTimerGenericCommand>:
	}
}
/*-----------------------------------------------------------*/

BaseType_t xTimerGenericCommand( TimerHandle_t xTimer, const BaseType_t xCommandID, const TickType_t xOptionalValue, BaseType_t * const pxHigherPriorityTaskWoken, const TickType_t xTicksToWait )
{
 800792c:	b580      	push	{r7, lr}
 800792e:	b08a      	sub	sp, #40	; 0x28
 8007930:	af00      	add	r7, sp, #0
 8007932:	60f8      	str	r0, [r7, #12]
 8007934:	60b9      	str	r1, [r7, #8]
 8007936:	607a      	str	r2, [r7, #4]
 8007938:	603b      	str	r3, [r7, #0]
BaseType_t xReturn = pdFAIL;
 800793a:	2300      	movs	r3, #0
 800793c:	627b      	str	r3, [r7, #36]	; 0x24
DaemonTaskMessage_t xMessage;

	configASSERT( xTimer );
 800793e:	68fb      	ldr	r3, [r7, #12]
 8007940:	2b00      	cmp	r3, #0
 8007942:	d10c      	bne.n	800795e <xTimerGenericCommand+0x32>
	__asm volatile
 8007944:	f04f 0350 	mov.w	r3, #80	; 0x50
 8007948:	b672      	cpsid	i
 800794a:	f383 8811 	msr	BASEPRI, r3
 800794e:	f3bf 8f6f 	isb	sy
 8007952:	f3bf 8f4f 	dsb	sy
 8007956:	b662      	cpsie	i
 8007958:	623b      	str	r3, [r7, #32]
}
 800795a:	bf00      	nop
 800795c:	e7fe      	b.n	800795c <xTimerGenericCommand+0x30>

	/* Send a message to the timer service task to perform a particular action
	on a particular timer definition. */
	if( xTimerQueue != NULL )
 800795e:	4b1a      	ldr	r3, [pc, #104]	; (80079c8 <xTimerGenericCommand+0x9c>)
 8007960:	681b      	ldr	r3, [r3, #0]
 8007962:	2b00      	cmp	r3, #0
 8007964:	d02a      	beq.n	80079bc <xTimerGenericCommand+0x90>
	{
		/* Send a command to the timer service task to start the xTimer timer. */
		xMessage.xMessageID = xCommandID;
 8007966:	68bb      	ldr	r3, [r7, #8]
 8007968:	613b      	str	r3, [r7, #16]
		xMessage.u.xTimerParameters.xMessageValue = xOptionalValue;
 800796a:	687b      	ldr	r3, [r7, #4]
 800796c:	617b      	str	r3, [r7, #20]
		xMessage.u.xTimerParameters.pxTimer = xTimer;
 800796e:	68fb      	ldr	r3, [r7, #12]
 8007970:	61bb      	str	r3, [r7, #24]

		if( xCommandID < tmrFIRST_FROM_ISR_COMMAND )
 8007972:	68bb      	ldr	r3, [r7, #8]
 8007974:	2b05      	cmp	r3, #5
 8007976:	dc18      	bgt.n	80079aa <xTimerGenericCommand+0x7e>
		{
			if( xTaskGetSchedulerState() == taskSCHEDULER_RUNNING )
 8007978:	f7ff fda8 	bl	80074cc <xTaskGetSchedulerState>
 800797c:	4603      	mov	r3, r0
 800797e:	2b02      	cmp	r3, #2
 8007980:	d109      	bne.n	8007996 <xTimerGenericCommand+0x6a>
			{
				xReturn = xQueueSendToBack( xTimerQueue, &xMessage, xTicksToWait );
 8007982:	4b11      	ldr	r3, [pc, #68]	; (80079c8 <xTimerGenericCommand+0x9c>)
 8007984:	6818      	ldr	r0, [r3, #0]
 8007986:	f107 0110 	add.w	r1, r7, #16
 800798a:	2300      	movs	r3, #0
 800798c:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800798e:	f7fe f997 	bl	8005cc0 <xQueueGenericSend>
 8007992:	6278      	str	r0, [r7, #36]	; 0x24
 8007994:	e012      	b.n	80079bc <xTimerGenericCommand+0x90>
			}
			else
			{
				xReturn = xQueueSendToBack( xTimerQueue, &xMessage, tmrNO_DELAY );
 8007996:	4b0c      	ldr	r3, [pc, #48]	; (80079c8 <xTimerGenericCommand+0x9c>)
 8007998:	6818      	ldr	r0, [r3, #0]
 800799a:	f107 0110 	add.w	r1, r7, #16
 800799e:	2300      	movs	r3, #0
 80079a0:	2200      	movs	r2, #0
 80079a2:	f7fe f98d 	bl	8005cc0 <xQueueGenericSend>
 80079a6:	6278      	str	r0, [r7, #36]	; 0x24
 80079a8:	e008      	b.n	80079bc <xTimerGenericCommand+0x90>
			}
		}
		else
		{
			xReturn = xQueueSendToBackFromISR( xTimerQueue, &xMessage, pxHigherPriorityTaskWoken );
 80079aa:	4b07      	ldr	r3, [pc, #28]	; (80079c8 <xTimerGenericCommand+0x9c>)
 80079ac:	6818      	ldr	r0, [r3, #0]
 80079ae:	f107 0110 	add.w	r1, r7, #16
 80079b2:	2300      	movs	r3, #0
 80079b4:	683a      	ldr	r2, [r7, #0]
 80079b6:	f7fe fa89 	bl	8005ecc <xQueueGenericSendFromISR>
 80079ba:	6278      	str	r0, [r7, #36]	; 0x24
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	return xReturn;
 80079bc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
}
 80079be:	4618      	mov	r0, r3
 80079c0:	3728      	adds	r7, #40	; 0x28
 80079c2:	46bd      	mov	sp, r7
 80079c4:	bd80      	pop	{r7, pc}
 80079c6:	bf00      	nop
 80079c8:	200033b8 	.word	0x200033b8

080079cc <prvProcessExpiredTimer>:
	return pxTimer->pcTimerName;
}
/*-----------------------------------------------------------*/

static void prvProcessExpiredTimer( const TickType_t xNextExpireTime, const TickType_t xTimeNow )
{
 80079cc:	b580      	push	{r7, lr}
 80079ce:	b088      	sub	sp, #32
 80079d0:	af02      	add	r7, sp, #8
 80079d2:	6078      	str	r0, [r7, #4]
 80079d4:	6039      	str	r1, [r7, #0]
BaseType_t xResult;
Timer_t * const pxTimer = ( Timer_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxCurrentTimerList ); /*lint !e9087 !e9079 void * is used as this macro is used with tasks and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 80079d6:	4b23      	ldr	r3, [pc, #140]	; (8007a64 <prvProcessExpiredTimer+0x98>)
 80079d8:	681b      	ldr	r3, [r3, #0]
 80079da:	68db      	ldr	r3, [r3, #12]
 80079dc:	68db      	ldr	r3, [r3, #12]
 80079de:	617b      	str	r3, [r7, #20]

	/* Remove the timer from the list of active timers.  A check has already
	been performed to ensure the list is not empty. */
	( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
 80079e0:	697b      	ldr	r3, [r7, #20]
 80079e2:	3304      	adds	r3, #4
 80079e4:	4618      	mov	r0, r3
 80079e6:	f7fd ff7d 	bl	80058e4 <uxListRemove>
	traceTIMER_EXPIRED( pxTimer );

	/* If the timer is an auto reload timer then calculate the next
	expiry time and re-insert the timer in the list of active timers. */
	if( ( pxTimer->ucStatus & tmrSTATUS_IS_AUTORELOAD ) != 0 )
 80079ea:	697b      	ldr	r3, [r7, #20]
 80079ec:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 80079f0:	f003 0304 	and.w	r3, r3, #4
 80079f4:	2b00      	cmp	r3, #0
 80079f6:	d024      	beq.n	8007a42 <prvProcessExpiredTimer+0x76>
	{
		/* The timer is inserted into a list using a time relative to anything
		other than the current time.  It will therefore be inserted into the
		correct list relative to the time this task thinks it is now. */
		if( prvInsertTimerInActiveList( pxTimer, ( xNextExpireTime + pxTimer->xTimerPeriodInTicks ), xTimeNow, xNextExpireTime ) != pdFALSE )
 80079f8:	697b      	ldr	r3, [r7, #20]
 80079fa:	699a      	ldr	r2, [r3, #24]
 80079fc:	687b      	ldr	r3, [r7, #4]
 80079fe:	18d1      	adds	r1, r2, r3
 8007a00:	687b      	ldr	r3, [r7, #4]
 8007a02:	683a      	ldr	r2, [r7, #0]
 8007a04:	6978      	ldr	r0, [r7, #20]
 8007a06:	f000 f8d3 	bl	8007bb0 <prvInsertTimerInActiveList>
 8007a0a:	4603      	mov	r3, r0
 8007a0c:	2b00      	cmp	r3, #0
 8007a0e:	d021      	beq.n	8007a54 <prvProcessExpiredTimer+0x88>
		{
			/* The timer expired before it was added to the active timer
			list.  Reload it now.  */
			xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xNextExpireTime, NULL, tmrNO_DELAY );
 8007a10:	2300      	movs	r3, #0
 8007a12:	9300      	str	r3, [sp, #0]
 8007a14:	2300      	movs	r3, #0
 8007a16:	687a      	ldr	r2, [r7, #4]
 8007a18:	2100      	movs	r1, #0
 8007a1a:	6978      	ldr	r0, [r7, #20]
 8007a1c:	f7ff ff86 	bl	800792c <xTimerGenericCommand>
 8007a20:	6138      	str	r0, [r7, #16]
			configASSERT( xResult );
 8007a22:	693b      	ldr	r3, [r7, #16]
 8007a24:	2b00      	cmp	r3, #0
 8007a26:	d115      	bne.n	8007a54 <prvProcessExpiredTimer+0x88>
	__asm volatile
 8007a28:	f04f 0350 	mov.w	r3, #80	; 0x50
 8007a2c:	b672      	cpsid	i
 8007a2e:	f383 8811 	msr	BASEPRI, r3
 8007a32:	f3bf 8f6f 	isb	sy
 8007a36:	f3bf 8f4f 	dsb	sy
 8007a3a:	b662      	cpsie	i
 8007a3c:	60fb      	str	r3, [r7, #12]
}
 8007a3e:	bf00      	nop
 8007a40:	e7fe      	b.n	8007a40 <prvProcessExpiredTimer+0x74>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	else
	{
		pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
 8007a42:	697b      	ldr	r3, [r7, #20]
 8007a44:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 8007a48:	f023 0301 	bic.w	r3, r3, #1
 8007a4c:	b2da      	uxtb	r2, r3
 8007a4e:	697b      	ldr	r3, [r7, #20]
 8007a50:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
		mtCOVERAGE_TEST_MARKER();
	}

	/* Call the timer callback. */
	pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
 8007a54:	697b      	ldr	r3, [r7, #20]
 8007a56:	6a1b      	ldr	r3, [r3, #32]
 8007a58:	6978      	ldr	r0, [r7, #20]
 8007a5a:	4798      	blx	r3
}
 8007a5c:	bf00      	nop
 8007a5e:	3718      	adds	r7, #24
 8007a60:	46bd      	mov	sp, r7
 8007a62:	bd80      	pop	{r7, pc}
 8007a64:	200033b0 	.word	0x200033b0

08007a68 <prvTimerTask>:
/*-----------------------------------------------------------*/

static portTASK_FUNCTION( prvTimerTask, pvParameters )
{
 8007a68:	b580      	push	{r7, lr}
 8007a6a:	b084      	sub	sp, #16
 8007a6c:	af00      	add	r7, sp, #0
 8007a6e:	6078      	str	r0, [r7, #4]

	for( ;; )
	{
		/* Query the timers list to see if it contains any timers, and if so,
		obtain the time at which the next timer will expire. */
		xNextExpireTime = prvGetNextExpireTime( &xListWasEmpty );
 8007a70:	f107 0308 	add.w	r3, r7, #8
 8007a74:	4618      	mov	r0, r3
 8007a76:	f000 f857 	bl	8007b28 <prvGetNextExpireTime>
 8007a7a:	60f8      	str	r0, [r7, #12]

		/* If a timer has expired, process it.  Otherwise, block this task
		until either a timer does expire, or a command is received. */
		prvProcessTimerOrBlockTask( xNextExpireTime, xListWasEmpty );
 8007a7c:	68bb      	ldr	r3, [r7, #8]
 8007a7e:	4619      	mov	r1, r3
 8007a80:	68f8      	ldr	r0, [r7, #12]
 8007a82:	f000 f803 	bl	8007a8c <prvProcessTimerOrBlockTask>

		/* Empty the command queue. */
		prvProcessReceivedCommands();
 8007a86:	f000 f8d5 	bl	8007c34 <prvProcessReceivedCommands>
		xNextExpireTime = prvGetNextExpireTime( &xListWasEmpty );
 8007a8a:	e7f1      	b.n	8007a70 <prvTimerTask+0x8>

08007a8c <prvProcessTimerOrBlockTask>:
	}
}
/*-----------------------------------------------------------*/

static void prvProcessTimerOrBlockTask( const TickType_t xNextExpireTime, BaseType_t xListWasEmpty )
{
 8007a8c:	b580      	push	{r7, lr}
 8007a8e:	b084      	sub	sp, #16
 8007a90:	af00      	add	r7, sp, #0
 8007a92:	6078      	str	r0, [r7, #4]
 8007a94:	6039      	str	r1, [r7, #0]
TickType_t xTimeNow;
BaseType_t xTimerListsWereSwitched;

	vTaskSuspendAll();
 8007a96:	f7ff f8f3 	bl	8006c80 <vTaskSuspendAll>
		/* Obtain the time now to make an assessment as to whether the timer
		has expired or not.  If obtaining the time causes the lists to switch
		then don't process this timer as any timers that remained in the list
		when the lists were switched will have been processed within the
		prvSampleTimeNow() function. */
		xTimeNow = prvSampleTimeNow( &xTimerListsWereSwitched );
 8007a9a:	f107 0308 	add.w	r3, r7, #8
 8007a9e:	4618      	mov	r0, r3
 8007aa0:	f000 f866 	bl	8007b70 <prvSampleTimeNow>
 8007aa4:	60f8      	str	r0, [r7, #12]
		if( xTimerListsWereSwitched == pdFALSE )
 8007aa6:	68bb      	ldr	r3, [r7, #8]
 8007aa8:	2b00      	cmp	r3, #0
 8007aaa:	d130      	bne.n	8007b0e <prvProcessTimerOrBlockTask+0x82>
		{
			/* The tick count has not overflowed, has the timer expired? */
			if( ( xListWasEmpty == pdFALSE ) && ( xNextExpireTime <= xTimeNow ) )
 8007aac:	683b      	ldr	r3, [r7, #0]
 8007aae:	2b00      	cmp	r3, #0
 8007ab0:	d10a      	bne.n	8007ac8 <prvProcessTimerOrBlockTask+0x3c>
 8007ab2:	687a      	ldr	r2, [r7, #4]
 8007ab4:	68fb      	ldr	r3, [r7, #12]
 8007ab6:	429a      	cmp	r2, r3
 8007ab8:	d806      	bhi.n	8007ac8 <prvProcessTimerOrBlockTask+0x3c>
			{
				( void ) xTaskResumeAll();
 8007aba:	f7ff f8ef 	bl	8006c9c <xTaskResumeAll>
				prvProcessExpiredTimer( xNextExpireTime, xTimeNow );
 8007abe:	68f9      	ldr	r1, [r7, #12]
 8007ac0:	6878      	ldr	r0, [r7, #4]
 8007ac2:	f7ff ff83 	bl	80079cc <prvProcessExpiredTimer>
		else
		{
			( void ) xTaskResumeAll();
		}
	}
}
 8007ac6:	e024      	b.n	8007b12 <prvProcessTimerOrBlockTask+0x86>
				if( xListWasEmpty != pdFALSE )
 8007ac8:	683b      	ldr	r3, [r7, #0]
 8007aca:	2b00      	cmp	r3, #0
 8007acc:	d008      	beq.n	8007ae0 <prvProcessTimerOrBlockTask+0x54>
					xListWasEmpty = listLIST_IS_EMPTY( pxOverflowTimerList );
 8007ace:	4b13      	ldr	r3, [pc, #76]	; (8007b1c <prvProcessTimerOrBlockTask+0x90>)
 8007ad0:	681b      	ldr	r3, [r3, #0]
 8007ad2:	681b      	ldr	r3, [r3, #0]
 8007ad4:	2b00      	cmp	r3, #0
 8007ad6:	d101      	bne.n	8007adc <prvProcessTimerOrBlockTask+0x50>
 8007ad8:	2301      	movs	r3, #1
 8007ada:	e000      	b.n	8007ade <prvProcessTimerOrBlockTask+0x52>
 8007adc:	2300      	movs	r3, #0
 8007ade:	603b      	str	r3, [r7, #0]
				vQueueWaitForMessageRestricted( xTimerQueue, ( xNextExpireTime - xTimeNow ), xListWasEmpty );
 8007ae0:	4b0f      	ldr	r3, [pc, #60]	; (8007b20 <prvProcessTimerOrBlockTask+0x94>)
 8007ae2:	6818      	ldr	r0, [r3, #0]
 8007ae4:	687a      	ldr	r2, [r7, #4]
 8007ae6:	68fb      	ldr	r3, [r7, #12]
 8007ae8:	1ad3      	subs	r3, r2, r3
 8007aea:	683a      	ldr	r2, [r7, #0]
 8007aec:	4619      	mov	r1, r3
 8007aee:	f7fe fe29 	bl	8006744 <vQueueWaitForMessageRestricted>
				if( xTaskResumeAll() == pdFALSE )
 8007af2:	f7ff f8d3 	bl	8006c9c <xTaskResumeAll>
 8007af6:	4603      	mov	r3, r0
 8007af8:	2b00      	cmp	r3, #0
 8007afa:	d10a      	bne.n	8007b12 <prvProcessTimerOrBlockTask+0x86>
					portYIELD_WITHIN_API();
 8007afc:	4b09      	ldr	r3, [pc, #36]	; (8007b24 <prvProcessTimerOrBlockTask+0x98>)
 8007afe:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8007b02:	601a      	str	r2, [r3, #0]
 8007b04:	f3bf 8f4f 	dsb	sy
 8007b08:	f3bf 8f6f 	isb	sy
}
 8007b0c:	e001      	b.n	8007b12 <prvProcessTimerOrBlockTask+0x86>
			( void ) xTaskResumeAll();
 8007b0e:	f7ff f8c5 	bl	8006c9c <xTaskResumeAll>
}
 8007b12:	bf00      	nop
 8007b14:	3710      	adds	r7, #16
 8007b16:	46bd      	mov	sp, r7
 8007b18:	bd80      	pop	{r7, pc}
 8007b1a:	bf00      	nop
 8007b1c:	200033b4 	.word	0x200033b4
 8007b20:	200033b8 	.word	0x200033b8
 8007b24:	e000ed04 	.word	0xe000ed04

08007b28 <prvGetNextExpireTime>:
/*-----------------------------------------------------------*/

static TickType_t prvGetNextExpireTime( BaseType_t * const pxListWasEmpty )
{
 8007b28:	b480      	push	{r7}
 8007b2a:	b085      	sub	sp, #20
 8007b2c:	af00      	add	r7, sp, #0
 8007b2e:	6078      	str	r0, [r7, #4]
	the timer with the nearest expiry time will expire.  If there are no
	active timers then just set the next expire time to 0.  That will cause
	this task to unblock when the tick count overflows, at which point the
	timer lists will be switched and the next expiry time can be
	re-assessed.  */
	*pxListWasEmpty = listLIST_IS_EMPTY( pxCurrentTimerList );
 8007b30:	4b0e      	ldr	r3, [pc, #56]	; (8007b6c <prvGetNextExpireTime+0x44>)
 8007b32:	681b      	ldr	r3, [r3, #0]
 8007b34:	681b      	ldr	r3, [r3, #0]
 8007b36:	2b00      	cmp	r3, #0
 8007b38:	d101      	bne.n	8007b3e <prvGetNextExpireTime+0x16>
 8007b3a:	2201      	movs	r2, #1
 8007b3c:	e000      	b.n	8007b40 <prvGetNextExpireTime+0x18>
 8007b3e:	2200      	movs	r2, #0
 8007b40:	687b      	ldr	r3, [r7, #4]
 8007b42:	601a      	str	r2, [r3, #0]
	if( *pxListWasEmpty == pdFALSE )
 8007b44:	687b      	ldr	r3, [r7, #4]
 8007b46:	681b      	ldr	r3, [r3, #0]
 8007b48:	2b00      	cmp	r3, #0
 8007b4a:	d105      	bne.n	8007b58 <prvGetNextExpireTime+0x30>
	{
		xNextExpireTime = listGET_ITEM_VALUE_OF_HEAD_ENTRY( pxCurrentTimerList );
 8007b4c:	4b07      	ldr	r3, [pc, #28]	; (8007b6c <prvGetNextExpireTime+0x44>)
 8007b4e:	681b      	ldr	r3, [r3, #0]
 8007b50:	68db      	ldr	r3, [r3, #12]
 8007b52:	681b      	ldr	r3, [r3, #0]
 8007b54:	60fb      	str	r3, [r7, #12]
 8007b56:	e001      	b.n	8007b5c <prvGetNextExpireTime+0x34>
	}
	else
	{
		/* Ensure the task unblocks when the tick count rolls over. */
		xNextExpireTime = ( TickType_t ) 0U;
 8007b58:	2300      	movs	r3, #0
 8007b5a:	60fb      	str	r3, [r7, #12]
	}

	return xNextExpireTime;
 8007b5c:	68fb      	ldr	r3, [r7, #12]
}
 8007b5e:	4618      	mov	r0, r3
 8007b60:	3714      	adds	r7, #20
 8007b62:	46bd      	mov	sp, r7
 8007b64:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007b68:	4770      	bx	lr
 8007b6a:	bf00      	nop
 8007b6c:	200033b0 	.word	0x200033b0

08007b70 <prvSampleTimeNow>:
/*-----------------------------------------------------------*/

static TickType_t prvSampleTimeNow( BaseType_t * const pxTimerListsWereSwitched )
{
 8007b70:	b580      	push	{r7, lr}
 8007b72:	b084      	sub	sp, #16
 8007b74:	af00      	add	r7, sp, #0
 8007b76:	6078      	str	r0, [r7, #4]
TickType_t xTimeNow;
PRIVILEGED_DATA static TickType_t xLastTime = ( TickType_t ) 0U; /*lint !e956 Variable is only accessible to one task. */

	xTimeNow = xTaskGetTickCount();
 8007b78:	f7ff f930 	bl	8006ddc <xTaskGetTickCount>
 8007b7c:	60f8      	str	r0, [r7, #12]

	if( xTimeNow < xLastTime )
 8007b7e:	4b0b      	ldr	r3, [pc, #44]	; (8007bac <prvSampleTimeNow+0x3c>)
 8007b80:	681b      	ldr	r3, [r3, #0]
 8007b82:	68fa      	ldr	r2, [r7, #12]
 8007b84:	429a      	cmp	r2, r3
 8007b86:	d205      	bcs.n	8007b94 <prvSampleTimeNow+0x24>
	{
		prvSwitchTimerLists();
 8007b88:	f000 f93c 	bl	8007e04 <prvSwitchTimerLists>
		*pxTimerListsWereSwitched = pdTRUE;
 8007b8c:	687b      	ldr	r3, [r7, #4]
 8007b8e:	2201      	movs	r2, #1
 8007b90:	601a      	str	r2, [r3, #0]
 8007b92:	e002      	b.n	8007b9a <prvSampleTimeNow+0x2a>
	}
	else
	{
		*pxTimerListsWereSwitched = pdFALSE;
 8007b94:	687b      	ldr	r3, [r7, #4]
 8007b96:	2200      	movs	r2, #0
 8007b98:	601a      	str	r2, [r3, #0]
	}

	xLastTime = xTimeNow;
 8007b9a:	4a04      	ldr	r2, [pc, #16]	; (8007bac <prvSampleTimeNow+0x3c>)
 8007b9c:	68fb      	ldr	r3, [r7, #12]
 8007b9e:	6013      	str	r3, [r2, #0]

	return xTimeNow;
 8007ba0:	68fb      	ldr	r3, [r7, #12]
}
 8007ba2:	4618      	mov	r0, r3
 8007ba4:	3710      	adds	r7, #16
 8007ba6:	46bd      	mov	sp, r7
 8007ba8:	bd80      	pop	{r7, pc}
 8007baa:	bf00      	nop
 8007bac:	200033c0 	.word	0x200033c0

08007bb0 <prvInsertTimerInActiveList>:
/*-----------------------------------------------------------*/

static BaseType_t prvInsertTimerInActiveList( Timer_t * const pxTimer, const TickType_t xNextExpiryTime, const TickType_t xTimeNow, const TickType_t xCommandTime )
{
 8007bb0:	b580      	push	{r7, lr}
 8007bb2:	b086      	sub	sp, #24
 8007bb4:	af00      	add	r7, sp, #0
 8007bb6:	60f8      	str	r0, [r7, #12]
 8007bb8:	60b9      	str	r1, [r7, #8]
 8007bba:	607a      	str	r2, [r7, #4]
 8007bbc:	603b      	str	r3, [r7, #0]
BaseType_t xProcessTimerNow = pdFALSE;
 8007bbe:	2300      	movs	r3, #0
 8007bc0:	617b      	str	r3, [r7, #20]

	listSET_LIST_ITEM_VALUE( &( pxTimer->xTimerListItem ), xNextExpiryTime );
 8007bc2:	68fb      	ldr	r3, [r7, #12]
 8007bc4:	68ba      	ldr	r2, [r7, #8]
 8007bc6:	605a      	str	r2, [r3, #4]
	listSET_LIST_ITEM_OWNER( &( pxTimer->xTimerListItem ), pxTimer );
 8007bc8:	68fb      	ldr	r3, [r7, #12]
 8007bca:	68fa      	ldr	r2, [r7, #12]
 8007bcc:	611a      	str	r2, [r3, #16]

	if( xNextExpiryTime <= xTimeNow )
 8007bce:	68ba      	ldr	r2, [r7, #8]
 8007bd0:	687b      	ldr	r3, [r7, #4]
 8007bd2:	429a      	cmp	r2, r3
 8007bd4:	d812      	bhi.n	8007bfc <prvInsertTimerInActiveList+0x4c>
	{
		/* Has the expiry time elapsed between the command to start/reset a
		timer was issued, and the time the command was processed? */
		if( ( ( TickType_t ) ( xTimeNow - xCommandTime ) ) >= pxTimer->xTimerPeriodInTicks ) /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8007bd6:	687a      	ldr	r2, [r7, #4]
 8007bd8:	683b      	ldr	r3, [r7, #0]
 8007bda:	1ad2      	subs	r2, r2, r3
 8007bdc:	68fb      	ldr	r3, [r7, #12]
 8007bde:	699b      	ldr	r3, [r3, #24]
 8007be0:	429a      	cmp	r2, r3
 8007be2:	d302      	bcc.n	8007bea <prvInsertTimerInActiveList+0x3a>
		{
			/* The time between a command being issued and the command being
			processed actually exceeds the timers period.  */
			xProcessTimerNow = pdTRUE;
 8007be4:	2301      	movs	r3, #1
 8007be6:	617b      	str	r3, [r7, #20]
 8007be8:	e01b      	b.n	8007c22 <prvInsertTimerInActiveList+0x72>
		}
		else
		{
			vListInsert( pxOverflowTimerList, &( pxTimer->xTimerListItem ) );
 8007bea:	4b10      	ldr	r3, [pc, #64]	; (8007c2c <prvInsertTimerInActiveList+0x7c>)
 8007bec:	681a      	ldr	r2, [r3, #0]
 8007bee:	68fb      	ldr	r3, [r7, #12]
 8007bf0:	3304      	adds	r3, #4
 8007bf2:	4619      	mov	r1, r3
 8007bf4:	4610      	mov	r0, r2
 8007bf6:	f7fd fe3c 	bl	8005872 <vListInsert>
 8007bfa:	e012      	b.n	8007c22 <prvInsertTimerInActiveList+0x72>
		}
	}
	else
	{
		if( ( xTimeNow < xCommandTime ) && ( xNextExpiryTime >= xCommandTime ) )
 8007bfc:	687a      	ldr	r2, [r7, #4]
 8007bfe:	683b      	ldr	r3, [r7, #0]
 8007c00:	429a      	cmp	r2, r3
 8007c02:	d206      	bcs.n	8007c12 <prvInsertTimerInActiveList+0x62>
 8007c04:	68ba      	ldr	r2, [r7, #8]
 8007c06:	683b      	ldr	r3, [r7, #0]
 8007c08:	429a      	cmp	r2, r3
 8007c0a:	d302      	bcc.n	8007c12 <prvInsertTimerInActiveList+0x62>
		{
			/* If, since the command was issued, the tick count has overflowed
			but the expiry time has not, then the timer must have already passed
			its expiry time and should be processed immediately. */
			xProcessTimerNow = pdTRUE;
 8007c0c:	2301      	movs	r3, #1
 8007c0e:	617b      	str	r3, [r7, #20]
 8007c10:	e007      	b.n	8007c22 <prvInsertTimerInActiveList+0x72>
		}
		else
		{
			vListInsert( pxCurrentTimerList, &( pxTimer->xTimerListItem ) );
 8007c12:	4b07      	ldr	r3, [pc, #28]	; (8007c30 <prvInsertTimerInActiveList+0x80>)
 8007c14:	681a      	ldr	r2, [r3, #0]
 8007c16:	68fb      	ldr	r3, [r7, #12]
 8007c18:	3304      	adds	r3, #4
 8007c1a:	4619      	mov	r1, r3
 8007c1c:	4610      	mov	r0, r2
 8007c1e:	f7fd fe28 	bl	8005872 <vListInsert>
		}
	}

	return xProcessTimerNow;
 8007c22:	697b      	ldr	r3, [r7, #20]
}
 8007c24:	4618      	mov	r0, r3
 8007c26:	3718      	adds	r7, #24
 8007c28:	46bd      	mov	sp, r7
 8007c2a:	bd80      	pop	{r7, pc}
 8007c2c:	200033b4 	.word	0x200033b4
 8007c30:	200033b0 	.word	0x200033b0

08007c34 <prvProcessReceivedCommands>:
/*-----------------------------------------------------------*/

static void	prvProcessReceivedCommands( void )
{
 8007c34:	b580      	push	{r7, lr}
 8007c36:	b08e      	sub	sp, #56	; 0x38
 8007c38:	af02      	add	r7, sp, #8
DaemonTaskMessage_t xMessage;
Timer_t *pxTimer;
BaseType_t xTimerListsWereSwitched, xResult;
TickType_t xTimeNow;

	while( xQueueReceive( xTimerQueue, &xMessage, tmrNO_DELAY ) != pdFAIL ) /*lint !e603 xMessage does not have to be initialised as it is passed out, not in, and it is not used unless xQueueReceive() returns pdTRUE. */
 8007c3a:	e0d0      	b.n	8007dde <prvProcessReceivedCommands+0x1aa>
	{
		#if ( INCLUDE_xTimerPendFunctionCall == 1 )
		{
			/* Negative commands are pended function calls rather than timer
			commands. */
			if( xMessage.xMessageID < ( BaseType_t ) 0 )
 8007c3c:	687b      	ldr	r3, [r7, #4]
 8007c3e:	2b00      	cmp	r3, #0
 8007c40:	da1a      	bge.n	8007c78 <prvProcessReceivedCommands+0x44>
			{
				const CallbackParameters_t * const pxCallback = &( xMessage.u.xCallbackParameters );
 8007c42:	1d3b      	adds	r3, r7, #4
 8007c44:	3304      	adds	r3, #4
 8007c46:	62fb      	str	r3, [r7, #44]	; 0x2c

				/* The timer uses the xCallbackParameters member to request a
				callback be executed.  Check the callback is not NULL. */
				configASSERT( pxCallback );
 8007c48:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8007c4a:	2b00      	cmp	r3, #0
 8007c4c:	d10c      	bne.n	8007c68 <prvProcessReceivedCommands+0x34>
	__asm volatile
 8007c4e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8007c52:	b672      	cpsid	i
 8007c54:	f383 8811 	msr	BASEPRI, r3
 8007c58:	f3bf 8f6f 	isb	sy
 8007c5c:	f3bf 8f4f 	dsb	sy
 8007c60:	b662      	cpsie	i
 8007c62:	61fb      	str	r3, [r7, #28]
}
 8007c64:	bf00      	nop
 8007c66:	e7fe      	b.n	8007c66 <prvProcessReceivedCommands+0x32>

				/* Call the function. */
				pxCallback->pxCallbackFunction( pxCallback->pvParameter1, pxCallback->ulParameter2 );
 8007c68:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8007c6a:	681b      	ldr	r3, [r3, #0]
 8007c6c:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8007c6e:	6850      	ldr	r0, [r2, #4]
 8007c70:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8007c72:	6892      	ldr	r2, [r2, #8]
 8007c74:	4611      	mov	r1, r2
 8007c76:	4798      	blx	r3
		}
		#endif /* INCLUDE_xTimerPendFunctionCall */

		/* Commands that are positive are timer commands rather than pended
		function calls. */
		if( xMessage.xMessageID >= ( BaseType_t ) 0 )
 8007c78:	687b      	ldr	r3, [r7, #4]
 8007c7a:	2b00      	cmp	r3, #0
 8007c7c:	f2c0 80af 	blt.w	8007dde <prvProcessReceivedCommands+0x1aa>
		{
			/* The messages uses the xTimerParameters member to work on a
			software timer. */
			pxTimer = xMessage.u.xTimerParameters.pxTimer;
 8007c80:	68fb      	ldr	r3, [r7, #12]
 8007c82:	62bb      	str	r3, [r7, #40]	; 0x28

			if( listIS_CONTAINED_WITHIN( NULL, &( pxTimer->xTimerListItem ) ) == pdFALSE ) /*lint !e961. The cast is only redundant when NULL is passed into the macro. */
 8007c84:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8007c86:	695b      	ldr	r3, [r3, #20]
 8007c88:	2b00      	cmp	r3, #0
 8007c8a:	d004      	beq.n	8007c96 <prvProcessReceivedCommands+0x62>
			{
				/* The timer is in a list, remove it. */
				( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
 8007c8c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8007c8e:	3304      	adds	r3, #4
 8007c90:	4618      	mov	r0, r3
 8007c92:	f7fd fe27 	bl	80058e4 <uxListRemove>
			it must be present in the function call.  prvSampleTimeNow() must be
			called after the message is received from xTimerQueue so there is no
			possibility of a higher priority task adding a message to the message
			queue with a time that is ahead of the timer daemon task (because it
			pre-empted the timer daemon task after the xTimeNow value was set). */
			xTimeNow = prvSampleTimeNow( &xTimerListsWereSwitched );
 8007c96:	463b      	mov	r3, r7
 8007c98:	4618      	mov	r0, r3
 8007c9a:	f7ff ff69 	bl	8007b70 <prvSampleTimeNow>
 8007c9e:	6278      	str	r0, [r7, #36]	; 0x24

			switch( xMessage.xMessageID )
 8007ca0:	687b      	ldr	r3, [r7, #4]
 8007ca2:	2b09      	cmp	r3, #9
 8007ca4:	f200 809a 	bhi.w	8007ddc <prvProcessReceivedCommands+0x1a8>
 8007ca8:	a201      	add	r2, pc, #4	; (adr r2, 8007cb0 <prvProcessReceivedCommands+0x7c>)
 8007caa:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8007cae:	bf00      	nop
 8007cb0:	08007cd9 	.word	0x08007cd9
 8007cb4:	08007cd9 	.word	0x08007cd9
 8007cb8:	08007cd9 	.word	0x08007cd9
 8007cbc:	08007d51 	.word	0x08007d51
 8007cc0:	08007d65 	.word	0x08007d65
 8007cc4:	08007db3 	.word	0x08007db3
 8007cc8:	08007cd9 	.word	0x08007cd9
 8007ccc:	08007cd9 	.word	0x08007cd9
 8007cd0:	08007d51 	.word	0x08007d51
 8007cd4:	08007d65 	.word	0x08007d65
				case tmrCOMMAND_START_FROM_ISR :
				case tmrCOMMAND_RESET :
				case tmrCOMMAND_RESET_FROM_ISR :
				case tmrCOMMAND_START_DONT_TRACE :
					/* Start or restart a timer. */
					pxTimer->ucStatus |= tmrSTATUS_IS_ACTIVE;
 8007cd8:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8007cda:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 8007cde:	f043 0301 	orr.w	r3, r3, #1
 8007ce2:	b2da      	uxtb	r2, r3
 8007ce4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8007ce6:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
					if( prvInsertTimerInActiveList( pxTimer,  xMessage.u.xTimerParameters.xMessageValue + pxTimer->xTimerPeriodInTicks, xTimeNow, xMessage.u.xTimerParameters.xMessageValue ) != pdFALSE )
 8007cea:	68ba      	ldr	r2, [r7, #8]
 8007cec:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8007cee:	699b      	ldr	r3, [r3, #24]
 8007cf0:	18d1      	adds	r1, r2, r3
 8007cf2:	68bb      	ldr	r3, [r7, #8]
 8007cf4:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8007cf6:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8007cf8:	f7ff ff5a 	bl	8007bb0 <prvInsertTimerInActiveList>
 8007cfc:	4603      	mov	r3, r0
 8007cfe:	2b00      	cmp	r3, #0
 8007d00:	d06d      	beq.n	8007dde <prvProcessReceivedCommands+0x1aa>
					{
						/* The timer expired before it was added to the active
						timer list.  Process it now. */
						pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
 8007d02:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8007d04:	6a1b      	ldr	r3, [r3, #32]
 8007d06:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8007d08:	4798      	blx	r3
						traceTIMER_EXPIRED( pxTimer );

						if( ( pxTimer->ucStatus & tmrSTATUS_IS_AUTORELOAD ) != 0 )
 8007d0a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8007d0c:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 8007d10:	f003 0304 	and.w	r3, r3, #4
 8007d14:	2b00      	cmp	r3, #0
 8007d16:	d062      	beq.n	8007dde <prvProcessReceivedCommands+0x1aa>
						{
							xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xMessage.u.xTimerParameters.xMessageValue + pxTimer->xTimerPeriodInTicks, NULL, tmrNO_DELAY );
 8007d18:	68ba      	ldr	r2, [r7, #8]
 8007d1a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8007d1c:	699b      	ldr	r3, [r3, #24]
 8007d1e:	441a      	add	r2, r3
 8007d20:	2300      	movs	r3, #0
 8007d22:	9300      	str	r3, [sp, #0]
 8007d24:	2300      	movs	r3, #0
 8007d26:	2100      	movs	r1, #0
 8007d28:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8007d2a:	f7ff fdff 	bl	800792c <xTimerGenericCommand>
 8007d2e:	6238      	str	r0, [r7, #32]
							configASSERT( xResult );
 8007d30:	6a3b      	ldr	r3, [r7, #32]
 8007d32:	2b00      	cmp	r3, #0
 8007d34:	d153      	bne.n	8007dde <prvProcessReceivedCommands+0x1aa>
	__asm volatile
 8007d36:	f04f 0350 	mov.w	r3, #80	; 0x50
 8007d3a:	b672      	cpsid	i
 8007d3c:	f383 8811 	msr	BASEPRI, r3
 8007d40:	f3bf 8f6f 	isb	sy
 8007d44:	f3bf 8f4f 	dsb	sy
 8007d48:	b662      	cpsie	i
 8007d4a:	61bb      	str	r3, [r7, #24]
}
 8007d4c:	bf00      	nop
 8007d4e:	e7fe      	b.n	8007d4e <prvProcessReceivedCommands+0x11a>
					break;

				case tmrCOMMAND_STOP :
				case tmrCOMMAND_STOP_FROM_ISR :
					/* The timer has already been removed from the active list. */
					pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
 8007d50:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8007d52:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 8007d56:	f023 0301 	bic.w	r3, r3, #1
 8007d5a:	b2da      	uxtb	r2, r3
 8007d5c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8007d5e:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
					break;
 8007d62:	e03c      	b.n	8007dde <prvProcessReceivedCommands+0x1aa>

				case tmrCOMMAND_CHANGE_PERIOD :
				case tmrCOMMAND_CHANGE_PERIOD_FROM_ISR :
					pxTimer->ucStatus |= tmrSTATUS_IS_ACTIVE;
 8007d64:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8007d66:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 8007d6a:	f043 0301 	orr.w	r3, r3, #1
 8007d6e:	b2da      	uxtb	r2, r3
 8007d70:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8007d72:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
					pxTimer->xTimerPeriodInTicks = xMessage.u.xTimerParameters.xMessageValue;
 8007d76:	68ba      	ldr	r2, [r7, #8]
 8007d78:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8007d7a:	619a      	str	r2, [r3, #24]
					configASSERT( ( pxTimer->xTimerPeriodInTicks > 0 ) );
 8007d7c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8007d7e:	699b      	ldr	r3, [r3, #24]
 8007d80:	2b00      	cmp	r3, #0
 8007d82:	d10c      	bne.n	8007d9e <prvProcessReceivedCommands+0x16a>
	__asm volatile
 8007d84:	f04f 0350 	mov.w	r3, #80	; 0x50
 8007d88:	b672      	cpsid	i
 8007d8a:	f383 8811 	msr	BASEPRI, r3
 8007d8e:	f3bf 8f6f 	isb	sy
 8007d92:	f3bf 8f4f 	dsb	sy
 8007d96:	b662      	cpsie	i
 8007d98:	617b      	str	r3, [r7, #20]
}
 8007d9a:	bf00      	nop
 8007d9c:	e7fe      	b.n	8007d9c <prvProcessReceivedCommands+0x168>
					be longer or shorter than the old one.  The command time is
					therefore set to the current time, and as the period cannot
					be zero the next expiry time can only be in the future,
					meaning (unlike for the xTimerStart() case above) there is
					no fail case that needs to be handled here. */
					( void ) prvInsertTimerInActiveList( pxTimer, ( xTimeNow + pxTimer->xTimerPeriodInTicks ), xTimeNow, xTimeNow );
 8007d9e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8007da0:	699a      	ldr	r2, [r3, #24]
 8007da2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007da4:	18d1      	adds	r1, r2, r3
 8007da6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007da8:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8007daa:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8007dac:	f7ff ff00 	bl	8007bb0 <prvInsertTimerInActiveList>
					break;
 8007db0:	e015      	b.n	8007dde <prvProcessReceivedCommands+0x1aa>
					#if ( configSUPPORT_DYNAMIC_ALLOCATION == 1 )
					{
						/* The timer has already been removed from the active list,
						just free up the memory if the memory was dynamically
						allocated. */
						if( ( pxTimer->ucStatus & tmrSTATUS_IS_STATICALLY_ALLOCATED ) == ( uint8_t ) 0 )
 8007db2:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8007db4:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 8007db8:	f003 0302 	and.w	r3, r3, #2
 8007dbc:	2b00      	cmp	r3, #0
 8007dbe:	d103      	bne.n	8007dc8 <prvProcessReceivedCommands+0x194>
						{
							vPortFree( pxTimer );
 8007dc0:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8007dc2:	f000 fbc9 	bl	8008558 <vPortFree>
 8007dc6:	e00a      	b.n	8007dde <prvProcessReceivedCommands+0x1aa>
						}
						else
						{
							pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
 8007dc8:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8007dca:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 8007dce:	f023 0301 	bic.w	r3, r3, #1
 8007dd2:	b2da      	uxtb	r2, r3
 8007dd4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8007dd6:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
						no need to free the memory - just mark the timer as
						"not active". */
						pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
					}
					#endif /* configSUPPORT_DYNAMIC_ALLOCATION */
					break;
 8007dda:	e000      	b.n	8007dde <prvProcessReceivedCommands+0x1aa>

				default	:
					/* Don't expect to get here. */
					break;
 8007ddc:	bf00      	nop
	while( xQueueReceive( xTimerQueue, &xMessage, tmrNO_DELAY ) != pdFAIL ) /*lint !e603 xMessage does not have to be initialised as it is passed out, not in, and it is not used unless xQueueReceive() returns pdTRUE. */
 8007dde:	4b08      	ldr	r3, [pc, #32]	; (8007e00 <prvProcessReceivedCommands+0x1cc>)
 8007de0:	681b      	ldr	r3, [r3, #0]
 8007de2:	1d39      	adds	r1, r7, #4
 8007de4:	2200      	movs	r2, #0
 8007de6:	4618      	mov	r0, r3
 8007de8:	f7fe f910 	bl	800600c <xQueueReceive>
 8007dec:	4603      	mov	r3, r0
 8007dee:	2b00      	cmp	r3, #0
 8007df0:	f47f af24 	bne.w	8007c3c <prvProcessReceivedCommands+0x8>
			}
		}
	}
}
 8007df4:	bf00      	nop
 8007df6:	bf00      	nop
 8007df8:	3730      	adds	r7, #48	; 0x30
 8007dfa:	46bd      	mov	sp, r7
 8007dfc:	bd80      	pop	{r7, pc}
 8007dfe:	bf00      	nop
 8007e00:	200033b8 	.word	0x200033b8

08007e04 <prvSwitchTimerLists>:
/*-----------------------------------------------------------*/

static void prvSwitchTimerLists( void )
{
 8007e04:	b580      	push	{r7, lr}
 8007e06:	b088      	sub	sp, #32
 8007e08:	af02      	add	r7, sp, #8

	/* The tick count has overflowed.  The timer lists must be switched.
	If there are any timers still referenced from the current timer list
	then they must have expired and should be processed before the lists
	are switched. */
	while( listLIST_IS_EMPTY( pxCurrentTimerList ) == pdFALSE )
 8007e0a:	e04a      	b.n	8007ea2 <prvSwitchTimerLists+0x9e>
	{
		xNextExpireTime = listGET_ITEM_VALUE_OF_HEAD_ENTRY( pxCurrentTimerList );
 8007e0c:	4b2e      	ldr	r3, [pc, #184]	; (8007ec8 <prvSwitchTimerLists+0xc4>)
 8007e0e:	681b      	ldr	r3, [r3, #0]
 8007e10:	68db      	ldr	r3, [r3, #12]
 8007e12:	681b      	ldr	r3, [r3, #0]
 8007e14:	613b      	str	r3, [r7, #16]

		/* Remove the timer from the list. */
		pxTimer = ( Timer_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxCurrentTimerList ); /*lint !e9087 !e9079 void * is used as this macro is used with tasks and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8007e16:	4b2c      	ldr	r3, [pc, #176]	; (8007ec8 <prvSwitchTimerLists+0xc4>)
 8007e18:	681b      	ldr	r3, [r3, #0]
 8007e1a:	68db      	ldr	r3, [r3, #12]
 8007e1c:	68db      	ldr	r3, [r3, #12]
 8007e1e:	60fb      	str	r3, [r7, #12]
		( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
 8007e20:	68fb      	ldr	r3, [r7, #12]
 8007e22:	3304      	adds	r3, #4
 8007e24:	4618      	mov	r0, r3
 8007e26:	f7fd fd5d 	bl	80058e4 <uxListRemove>
		traceTIMER_EXPIRED( pxTimer );

		/* Execute its callback, then send a command to restart the timer if
		it is an auto-reload timer.  It cannot be restarted here as the lists
		have not yet been switched. */
		pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
 8007e2a:	68fb      	ldr	r3, [r7, #12]
 8007e2c:	6a1b      	ldr	r3, [r3, #32]
 8007e2e:	68f8      	ldr	r0, [r7, #12]
 8007e30:	4798      	blx	r3

		if( ( pxTimer->ucStatus & tmrSTATUS_IS_AUTORELOAD ) != 0 )
 8007e32:	68fb      	ldr	r3, [r7, #12]
 8007e34:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 8007e38:	f003 0304 	and.w	r3, r3, #4
 8007e3c:	2b00      	cmp	r3, #0
 8007e3e:	d030      	beq.n	8007ea2 <prvSwitchTimerLists+0x9e>
			the timer going into the same timer list then it has already expired
			and the timer should be re-inserted into the current list so it is
			processed again within this loop.  Otherwise a command should be sent
			to restart the timer to ensure it is only inserted into a list after
			the lists have been swapped. */
			xReloadTime = ( xNextExpireTime + pxTimer->xTimerPeriodInTicks );
 8007e40:	68fb      	ldr	r3, [r7, #12]
 8007e42:	699b      	ldr	r3, [r3, #24]
 8007e44:	693a      	ldr	r2, [r7, #16]
 8007e46:	4413      	add	r3, r2
 8007e48:	60bb      	str	r3, [r7, #8]
			if( xReloadTime > xNextExpireTime )
 8007e4a:	68ba      	ldr	r2, [r7, #8]
 8007e4c:	693b      	ldr	r3, [r7, #16]
 8007e4e:	429a      	cmp	r2, r3
 8007e50:	d90e      	bls.n	8007e70 <prvSwitchTimerLists+0x6c>
			{
				listSET_LIST_ITEM_VALUE( &( pxTimer->xTimerListItem ), xReloadTime );
 8007e52:	68fb      	ldr	r3, [r7, #12]
 8007e54:	68ba      	ldr	r2, [r7, #8]
 8007e56:	605a      	str	r2, [r3, #4]
				listSET_LIST_ITEM_OWNER( &( pxTimer->xTimerListItem ), pxTimer );
 8007e58:	68fb      	ldr	r3, [r7, #12]
 8007e5a:	68fa      	ldr	r2, [r7, #12]
 8007e5c:	611a      	str	r2, [r3, #16]
				vListInsert( pxCurrentTimerList, &( pxTimer->xTimerListItem ) );
 8007e5e:	4b1a      	ldr	r3, [pc, #104]	; (8007ec8 <prvSwitchTimerLists+0xc4>)
 8007e60:	681a      	ldr	r2, [r3, #0]
 8007e62:	68fb      	ldr	r3, [r7, #12]
 8007e64:	3304      	adds	r3, #4
 8007e66:	4619      	mov	r1, r3
 8007e68:	4610      	mov	r0, r2
 8007e6a:	f7fd fd02 	bl	8005872 <vListInsert>
 8007e6e:	e018      	b.n	8007ea2 <prvSwitchTimerLists+0x9e>
			}
			else
			{
				xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xNextExpireTime, NULL, tmrNO_DELAY );
 8007e70:	2300      	movs	r3, #0
 8007e72:	9300      	str	r3, [sp, #0]
 8007e74:	2300      	movs	r3, #0
 8007e76:	693a      	ldr	r2, [r7, #16]
 8007e78:	2100      	movs	r1, #0
 8007e7a:	68f8      	ldr	r0, [r7, #12]
 8007e7c:	f7ff fd56 	bl	800792c <xTimerGenericCommand>
 8007e80:	6078      	str	r0, [r7, #4]
				configASSERT( xResult );
 8007e82:	687b      	ldr	r3, [r7, #4]
 8007e84:	2b00      	cmp	r3, #0
 8007e86:	d10c      	bne.n	8007ea2 <prvSwitchTimerLists+0x9e>
	__asm volatile
 8007e88:	f04f 0350 	mov.w	r3, #80	; 0x50
 8007e8c:	b672      	cpsid	i
 8007e8e:	f383 8811 	msr	BASEPRI, r3
 8007e92:	f3bf 8f6f 	isb	sy
 8007e96:	f3bf 8f4f 	dsb	sy
 8007e9a:	b662      	cpsie	i
 8007e9c:	603b      	str	r3, [r7, #0]
}
 8007e9e:	bf00      	nop
 8007ea0:	e7fe      	b.n	8007ea0 <prvSwitchTimerLists+0x9c>
	while( listLIST_IS_EMPTY( pxCurrentTimerList ) == pdFALSE )
 8007ea2:	4b09      	ldr	r3, [pc, #36]	; (8007ec8 <prvSwitchTimerLists+0xc4>)
 8007ea4:	681b      	ldr	r3, [r3, #0]
 8007ea6:	681b      	ldr	r3, [r3, #0]
 8007ea8:	2b00      	cmp	r3, #0
 8007eaa:	d1af      	bne.n	8007e0c <prvSwitchTimerLists+0x8>
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}

	pxTemp = pxCurrentTimerList;
 8007eac:	4b06      	ldr	r3, [pc, #24]	; (8007ec8 <prvSwitchTimerLists+0xc4>)
 8007eae:	681b      	ldr	r3, [r3, #0]
 8007eb0:	617b      	str	r3, [r7, #20]
	pxCurrentTimerList = pxOverflowTimerList;
 8007eb2:	4b06      	ldr	r3, [pc, #24]	; (8007ecc <prvSwitchTimerLists+0xc8>)
 8007eb4:	681b      	ldr	r3, [r3, #0]
 8007eb6:	4a04      	ldr	r2, [pc, #16]	; (8007ec8 <prvSwitchTimerLists+0xc4>)
 8007eb8:	6013      	str	r3, [r2, #0]
	pxOverflowTimerList = pxTemp;
 8007eba:	4a04      	ldr	r2, [pc, #16]	; (8007ecc <prvSwitchTimerLists+0xc8>)
 8007ebc:	697b      	ldr	r3, [r7, #20]
 8007ebe:	6013      	str	r3, [r2, #0]
}
 8007ec0:	bf00      	nop
 8007ec2:	3718      	adds	r7, #24
 8007ec4:	46bd      	mov	sp, r7
 8007ec6:	bd80      	pop	{r7, pc}
 8007ec8:	200033b0 	.word	0x200033b0
 8007ecc:	200033b4 	.word	0x200033b4

08007ed0 <prvCheckForValidListAndQueue>:
/*-----------------------------------------------------------*/

static void prvCheckForValidListAndQueue( void )
{
 8007ed0:	b580      	push	{r7, lr}
 8007ed2:	b082      	sub	sp, #8
 8007ed4:	af02      	add	r7, sp, #8
	/* Check that the list from which active timers are referenced, and the
	queue used to communicate with the timer service, have been
	initialised. */
	taskENTER_CRITICAL();
 8007ed6:	f000 f949 	bl	800816c <vPortEnterCritical>
	{
		if( xTimerQueue == NULL )
 8007eda:	4b15      	ldr	r3, [pc, #84]	; (8007f30 <prvCheckForValidListAndQueue+0x60>)
 8007edc:	681b      	ldr	r3, [r3, #0]
 8007ede:	2b00      	cmp	r3, #0
 8007ee0:	d120      	bne.n	8007f24 <prvCheckForValidListAndQueue+0x54>
		{
			vListInitialise( &xActiveTimerList1 );
 8007ee2:	4814      	ldr	r0, [pc, #80]	; (8007f34 <prvCheckForValidListAndQueue+0x64>)
 8007ee4:	f7fd fc74 	bl	80057d0 <vListInitialise>
			vListInitialise( &xActiveTimerList2 );
 8007ee8:	4813      	ldr	r0, [pc, #76]	; (8007f38 <prvCheckForValidListAndQueue+0x68>)
 8007eea:	f7fd fc71 	bl	80057d0 <vListInitialise>
			pxCurrentTimerList = &xActiveTimerList1;
 8007eee:	4b13      	ldr	r3, [pc, #76]	; (8007f3c <prvCheckForValidListAndQueue+0x6c>)
 8007ef0:	4a10      	ldr	r2, [pc, #64]	; (8007f34 <prvCheckForValidListAndQueue+0x64>)
 8007ef2:	601a      	str	r2, [r3, #0]
			pxOverflowTimerList = &xActiveTimerList2;
 8007ef4:	4b12      	ldr	r3, [pc, #72]	; (8007f40 <prvCheckForValidListAndQueue+0x70>)
 8007ef6:	4a10      	ldr	r2, [pc, #64]	; (8007f38 <prvCheckForValidListAndQueue+0x68>)
 8007ef8:	601a      	str	r2, [r3, #0]
				/* The timer queue is allocated statically in case
				configSUPPORT_DYNAMIC_ALLOCATION is 0. */
				static StaticQueue_t xStaticTimerQueue; /*lint !e956 Ok to declare in this manner to prevent additional conditional compilation guards in other locations. */
				static uint8_t ucStaticTimerQueueStorage[ ( size_t ) configTIMER_QUEUE_LENGTH * sizeof( DaemonTaskMessage_t ) ]; /*lint !e956 Ok to declare in this manner to prevent additional conditional compilation guards in other locations. */

				xTimerQueue = xQueueCreateStatic( ( UBaseType_t ) configTIMER_QUEUE_LENGTH, ( UBaseType_t ) sizeof( DaemonTaskMessage_t ), &( ucStaticTimerQueueStorage[ 0 ] ), &xStaticTimerQueue );
 8007efa:	2300      	movs	r3, #0
 8007efc:	9300      	str	r3, [sp, #0]
 8007efe:	4b11      	ldr	r3, [pc, #68]	; (8007f44 <prvCheckForValidListAndQueue+0x74>)
 8007f00:	4a11      	ldr	r2, [pc, #68]	; (8007f48 <prvCheckForValidListAndQueue+0x78>)
 8007f02:	2110      	movs	r1, #16
 8007f04:	200a      	movs	r0, #10
 8007f06:	f7fd fd81 	bl	8005a0c <xQueueGenericCreateStatic>
 8007f0a:	4603      	mov	r3, r0
 8007f0c:	4a08      	ldr	r2, [pc, #32]	; (8007f30 <prvCheckForValidListAndQueue+0x60>)
 8007f0e:	6013      	str	r3, [r2, #0]
			}
			#endif

			#if ( configQUEUE_REGISTRY_SIZE > 0 )
			{
				if( xTimerQueue != NULL )
 8007f10:	4b07      	ldr	r3, [pc, #28]	; (8007f30 <prvCheckForValidListAndQueue+0x60>)
 8007f12:	681b      	ldr	r3, [r3, #0]
 8007f14:	2b00      	cmp	r3, #0
 8007f16:	d005      	beq.n	8007f24 <prvCheckForValidListAndQueue+0x54>
				{
					vQueueAddToRegistry( xTimerQueue, "TmrQ" );
 8007f18:	4b05      	ldr	r3, [pc, #20]	; (8007f30 <prvCheckForValidListAndQueue+0x60>)
 8007f1a:	681b      	ldr	r3, [r3, #0]
 8007f1c:	490b      	ldr	r1, [pc, #44]	; (8007f4c <prvCheckForValidListAndQueue+0x7c>)
 8007f1e:	4618      	mov	r0, r3
 8007f20:	f7fe fbbc 	bl	800669c <vQueueAddToRegistry>
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
	taskEXIT_CRITICAL();
 8007f24:	f000 f956 	bl	80081d4 <vPortExitCritical>
}
 8007f28:	bf00      	nop
 8007f2a:	46bd      	mov	sp, r7
 8007f2c:	bd80      	pop	{r7, pc}
 8007f2e:	bf00      	nop
 8007f30:	200033b8 	.word	0x200033b8
 8007f34:	20003388 	.word	0x20003388
 8007f38:	2000339c 	.word	0x2000339c
 8007f3c:	200033b0 	.word	0x200033b0
 8007f40:	200033b4 	.word	0x200033b4
 8007f44:	20003464 	.word	0x20003464
 8007f48:	200033c4 	.word	0x200033c4
 8007f4c:	080089d8 	.word	0x080089d8

08007f50 <pxPortInitialiseStack>:

/*
 * See header file for description.
 */
StackType_t *pxPortInitialiseStack( StackType_t *pxTopOfStack, TaskFunction_t pxCode, void *pvParameters )
{
 8007f50:	b480      	push	{r7}
 8007f52:	b085      	sub	sp, #20
 8007f54:	af00      	add	r7, sp, #0
 8007f56:	60f8      	str	r0, [r7, #12]
 8007f58:	60b9      	str	r1, [r7, #8]
 8007f5a:	607a      	str	r2, [r7, #4]
	/* Simulate the stack frame as it would be created by a context switch
	interrupt. */

	/* Offset added to account for the way the MCU uses the stack on entry/exit
	of interrupts, and to ensure alignment. */
	pxTopOfStack--;
 8007f5c:	68fb      	ldr	r3, [r7, #12]
 8007f5e:	3b04      	subs	r3, #4
 8007f60:	60fb      	str	r3, [r7, #12]

	*pxTopOfStack = portINITIAL_XPSR;	/* xPSR */
 8007f62:	68fb      	ldr	r3, [r7, #12]
 8007f64:	f04f 7280 	mov.w	r2, #16777216	; 0x1000000
 8007f68:	601a      	str	r2, [r3, #0]
	pxTopOfStack--;
 8007f6a:	68fb      	ldr	r3, [r7, #12]
 8007f6c:	3b04      	subs	r3, #4
 8007f6e:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( ( StackType_t ) pxCode ) & portSTART_ADDRESS_MASK;	/* PC */
 8007f70:	68bb      	ldr	r3, [r7, #8]
 8007f72:	f023 0201 	bic.w	r2, r3, #1
 8007f76:	68fb      	ldr	r3, [r7, #12]
 8007f78:	601a      	str	r2, [r3, #0]
	pxTopOfStack--;
 8007f7a:	68fb      	ldr	r3, [r7, #12]
 8007f7c:	3b04      	subs	r3, #4
 8007f7e:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( StackType_t ) portTASK_RETURN_ADDRESS;	/* LR */
 8007f80:	4a0c      	ldr	r2, [pc, #48]	; (8007fb4 <pxPortInitialiseStack+0x64>)
 8007f82:	68fb      	ldr	r3, [r7, #12]
 8007f84:	601a      	str	r2, [r3, #0]

	/* Save code space by skipping register initialisation. */
	pxTopOfStack -= 5;	/* R12, R3, R2 and R1. */
 8007f86:	68fb      	ldr	r3, [r7, #12]
 8007f88:	3b14      	subs	r3, #20
 8007f8a:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( StackType_t ) pvParameters;	/* R0 */
 8007f8c:	687a      	ldr	r2, [r7, #4]
 8007f8e:	68fb      	ldr	r3, [r7, #12]
 8007f90:	601a      	str	r2, [r3, #0]

	/* A save method is being used that requires each task to maintain its
	own exec return value. */
	pxTopOfStack--;
 8007f92:	68fb      	ldr	r3, [r7, #12]
 8007f94:	3b04      	subs	r3, #4
 8007f96:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = portINITIAL_EXC_RETURN;
 8007f98:	68fb      	ldr	r3, [r7, #12]
 8007f9a:	f06f 0202 	mvn.w	r2, #2
 8007f9e:	601a      	str	r2, [r3, #0]

	pxTopOfStack -= 8;	/* R11, R10, R9, R8, R7, R6, R5 and R4. */
 8007fa0:	68fb      	ldr	r3, [r7, #12]
 8007fa2:	3b20      	subs	r3, #32
 8007fa4:	60fb      	str	r3, [r7, #12]

	return pxTopOfStack;
 8007fa6:	68fb      	ldr	r3, [r7, #12]
}
 8007fa8:	4618      	mov	r0, r3
 8007faa:	3714      	adds	r7, #20
 8007fac:	46bd      	mov	sp, r7
 8007fae:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007fb2:	4770      	bx	lr
 8007fb4:	08007fb9 	.word	0x08007fb9

08007fb8 <prvTaskExitError>:
/*-----------------------------------------------------------*/

static void prvTaskExitError( void )
{
 8007fb8:	b480      	push	{r7}
 8007fba:	b085      	sub	sp, #20
 8007fbc:	af00      	add	r7, sp, #0
volatile uint32_t ulDummy = 0;
 8007fbe:	2300      	movs	r3, #0
 8007fc0:	607b      	str	r3, [r7, #4]
	its caller as there is nothing to return to.  If a task wants to exit it
	should instead call vTaskDelete( NULL ).

	Artificially force an assert() to be triggered if configASSERT() is
	defined, then stop here so application writers can catch the error. */
	configASSERT( uxCriticalNesting == ~0UL );
 8007fc2:	4b14      	ldr	r3, [pc, #80]	; (8008014 <prvTaskExitError+0x5c>)
 8007fc4:	681b      	ldr	r3, [r3, #0]
 8007fc6:	f1b3 3fff 	cmp.w	r3, #4294967295
 8007fca:	d00c      	beq.n	8007fe6 <prvTaskExitError+0x2e>
	__asm volatile
 8007fcc:	f04f 0350 	mov.w	r3, #80	; 0x50
 8007fd0:	b672      	cpsid	i
 8007fd2:	f383 8811 	msr	BASEPRI, r3
 8007fd6:	f3bf 8f6f 	isb	sy
 8007fda:	f3bf 8f4f 	dsb	sy
 8007fde:	b662      	cpsie	i
 8007fe0:	60fb      	str	r3, [r7, #12]
}
 8007fe2:	bf00      	nop
 8007fe4:	e7fe      	b.n	8007fe4 <prvTaskExitError+0x2c>
	__asm volatile
 8007fe6:	f04f 0350 	mov.w	r3, #80	; 0x50
 8007fea:	b672      	cpsid	i
 8007fec:	f383 8811 	msr	BASEPRI, r3
 8007ff0:	f3bf 8f6f 	isb	sy
 8007ff4:	f3bf 8f4f 	dsb	sy
 8007ff8:	b662      	cpsie	i
 8007ffa:	60bb      	str	r3, [r7, #8]
}
 8007ffc:	bf00      	nop
	portDISABLE_INTERRUPTS();
	while( ulDummy == 0 )
 8007ffe:	bf00      	nop
 8008000:	687b      	ldr	r3, [r7, #4]
 8008002:	2b00      	cmp	r3, #0
 8008004:	d0fc      	beq.n	8008000 <prvTaskExitError+0x48>
		about code appearing after this function is called - making ulDummy
		volatile makes the compiler think the function could return and
		therefore not output an 'unreachable code' warning for code that appears
		after it. */
	}
}
 8008006:	bf00      	nop
 8008008:	bf00      	nop
 800800a:	3714      	adds	r7, #20
 800800c:	46bd      	mov	sp, r7
 800800e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008012:	4770      	bx	lr
 8008014:	20000020 	.word	0x20000020
	...

08008020 <SVC_Handler>:
/*-----------------------------------------------------------*/

void vPortSVCHandler( void )
{
	__asm volatile (
 8008020:	4b07      	ldr	r3, [pc, #28]	; (8008040 <pxCurrentTCBConst2>)
 8008022:	6819      	ldr	r1, [r3, #0]
 8008024:	6808      	ldr	r0, [r1, #0]
 8008026:	e8b0 4ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800802a:	f380 8809 	msr	PSP, r0
 800802e:	f3bf 8f6f 	isb	sy
 8008032:	f04f 0000 	mov.w	r0, #0
 8008036:	f380 8811 	msr	BASEPRI, r0
 800803a:	4770      	bx	lr
 800803c:	f3af 8000 	nop.w

08008040 <pxCurrentTCBConst2>:
 8008040:	20002e88 	.word	0x20002e88
					"	bx r14							\n"
					"									\n"
					"	.align 4						\n"
					"pxCurrentTCBConst2: .word pxCurrentTCB				\n"
				);
}
 8008044:	bf00      	nop
 8008046:	bf00      	nop

08008048 <prvPortStartFirstTask>:
{
	/* Start the first task.  This also clears the bit that indicates the FPU is
	in use in case the FPU was used before the scheduler was started - which
	would otherwise result in the unnecessary leaving of space in the SVC stack
	for lazy saving of FPU registers. */
	__asm volatile(
 8008048:	4808      	ldr	r0, [pc, #32]	; (800806c <prvPortStartFirstTask+0x24>)
 800804a:	6800      	ldr	r0, [r0, #0]
 800804c:	6800      	ldr	r0, [r0, #0]
 800804e:	f380 8808 	msr	MSP, r0
 8008052:	f04f 0000 	mov.w	r0, #0
 8008056:	f380 8814 	msr	CONTROL, r0
 800805a:	b662      	cpsie	i
 800805c:	b661      	cpsie	f
 800805e:	f3bf 8f4f 	dsb	sy
 8008062:	f3bf 8f6f 	isb	sy
 8008066:	df00      	svc	0
 8008068:	bf00      	nop
					" dsb					\n"
					" isb					\n"
					" svc 0					\n" /* System call to start first task. */
					" nop					\n"
				);
}
 800806a:	bf00      	nop
 800806c:	e000ed08 	.word	0xe000ed08

08008070 <xPortStartScheduler>:

/*
 * See header file for description.
 */
BaseType_t xPortStartScheduler( void )
{
 8008070:	b580      	push	{r7, lr}
 8008072:	b084      	sub	sp, #16
 8008074:	af00      	add	r7, sp, #0
	configASSERT( configMAX_SYSCALL_INTERRUPT_PRIORITY );

	#if( configASSERT_DEFINED == 1 )
	{
		volatile uint32_t ulOriginalPriority;
		volatile uint8_t * const pucFirstUserPriorityRegister = ( volatile uint8_t * const ) ( portNVIC_IP_REGISTERS_OFFSET_16 + portFIRST_USER_INTERRUPT_NUMBER );
 8008076:	4b37      	ldr	r3, [pc, #220]	; (8008154 <xPortStartScheduler+0xe4>)
 8008078:	60fb      	str	r3, [r7, #12]
		functions can be called.  ISR safe functions are those that end in
		"FromISR".  FreeRTOS maintains separate thread and ISR API functions to
		ensure interrupt entry is as fast and simple as possible.

		Save the interrupt priority value that is about to be clobbered. */
		ulOriginalPriority = *pucFirstUserPriorityRegister;
 800807a:	68fb      	ldr	r3, [r7, #12]
 800807c:	781b      	ldrb	r3, [r3, #0]
 800807e:	b2db      	uxtb	r3, r3
 8008080:	607b      	str	r3, [r7, #4]

		/* Determine the number of priority bits available.  First write to all
		possible bits. */
		*pucFirstUserPriorityRegister = portMAX_8_BIT_VALUE;
 8008082:	68fb      	ldr	r3, [r7, #12]
 8008084:	22ff      	movs	r2, #255	; 0xff
 8008086:	701a      	strb	r2, [r3, #0]

		/* Read the value back to see how many bits stuck. */
		ucMaxPriorityValue = *pucFirstUserPriorityRegister;
 8008088:	68fb      	ldr	r3, [r7, #12]
 800808a:	781b      	ldrb	r3, [r3, #0]
 800808c:	b2db      	uxtb	r3, r3
 800808e:	70fb      	strb	r3, [r7, #3]

		/* Use the same mask on the maximum system call priority. */
		ucMaxSysCallPriority = configMAX_SYSCALL_INTERRUPT_PRIORITY & ucMaxPriorityValue;
 8008090:	78fb      	ldrb	r3, [r7, #3]
 8008092:	b2db      	uxtb	r3, r3
 8008094:	f003 0350 	and.w	r3, r3, #80	; 0x50
 8008098:	b2da      	uxtb	r2, r3
 800809a:	4b2f      	ldr	r3, [pc, #188]	; (8008158 <xPortStartScheduler+0xe8>)
 800809c:	701a      	strb	r2, [r3, #0]

		/* Calculate the maximum acceptable priority group value for the number
		of bits read back. */
		ulMaxPRIGROUPValue = portMAX_PRIGROUP_BITS;
 800809e:	4b2f      	ldr	r3, [pc, #188]	; (800815c <xPortStartScheduler+0xec>)
 80080a0:	2207      	movs	r2, #7
 80080a2:	601a      	str	r2, [r3, #0]
		while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 80080a4:	e009      	b.n	80080ba <xPortStartScheduler+0x4a>
		{
			ulMaxPRIGROUPValue--;
 80080a6:	4b2d      	ldr	r3, [pc, #180]	; (800815c <xPortStartScheduler+0xec>)
 80080a8:	681b      	ldr	r3, [r3, #0]
 80080aa:	3b01      	subs	r3, #1
 80080ac:	4a2b      	ldr	r2, [pc, #172]	; (800815c <xPortStartScheduler+0xec>)
 80080ae:	6013      	str	r3, [r2, #0]
			ucMaxPriorityValue <<= ( uint8_t ) 0x01;
 80080b0:	78fb      	ldrb	r3, [r7, #3]
 80080b2:	b2db      	uxtb	r3, r3
 80080b4:	005b      	lsls	r3, r3, #1
 80080b6:	b2db      	uxtb	r3, r3
 80080b8:	70fb      	strb	r3, [r7, #3]
		while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 80080ba:	78fb      	ldrb	r3, [r7, #3]
 80080bc:	b2db      	uxtb	r3, r3
 80080be:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80080c2:	2b80      	cmp	r3, #128	; 0x80
 80080c4:	d0ef      	beq.n	80080a6 <xPortStartScheduler+0x36>
		#ifdef configPRIO_BITS
		{
			/* Check the FreeRTOS configuration that defines the number of
			priority bits matches the number of priority bits actually queried
			from the hardware. */
			configASSERT( ( portMAX_PRIGROUP_BITS - ulMaxPRIGROUPValue ) == configPRIO_BITS );
 80080c6:	4b25      	ldr	r3, [pc, #148]	; (800815c <xPortStartScheduler+0xec>)
 80080c8:	681b      	ldr	r3, [r3, #0]
 80080ca:	f1c3 0307 	rsb	r3, r3, #7
 80080ce:	2b04      	cmp	r3, #4
 80080d0:	d00c      	beq.n	80080ec <xPortStartScheduler+0x7c>
	__asm volatile
 80080d2:	f04f 0350 	mov.w	r3, #80	; 0x50
 80080d6:	b672      	cpsid	i
 80080d8:	f383 8811 	msr	BASEPRI, r3
 80080dc:	f3bf 8f6f 	isb	sy
 80080e0:	f3bf 8f4f 	dsb	sy
 80080e4:	b662      	cpsie	i
 80080e6:	60bb      	str	r3, [r7, #8]
}
 80080e8:	bf00      	nop
 80080ea:	e7fe      	b.n	80080ea <xPortStartScheduler+0x7a>
		}
		#endif

		/* Shift the priority group value back to its position within the AIRCR
		register. */
		ulMaxPRIGROUPValue <<= portPRIGROUP_SHIFT;
 80080ec:	4b1b      	ldr	r3, [pc, #108]	; (800815c <xPortStartScheduler+0xec>)
 80080ee:	681b      	ldr	r3, [r3, #0]
 80080f0:	021b      	lsls	r3, r3, #8
 80080f2:	4a1a      	ldr	r2, [pc, #104]	; (800815c <xPortStartScheduler+0xec>)
 80080f4:	6013      	str	r3, [r2, #0]
		ulMaxPRIGROUPValue &= portPRIORITY_GROUP_MASK;
 80080f6:	4b19      	ldr	r3, [pc, #100]	; (800815c <xPortStartScheduler+0xec>)
 80080f8:	681b      	ldr	r3, [r3, #0]
 80080fa:	f403 63e0 	and.w	r3, r3, #1792	; 0x700
 80080fe:	4a17      	ldr	r2, [pc, #92]	; (800815c <xPortStartScheduler+0xec>)
 8008100:	6013      	str	r3, [r2, #0]

		/* Restore the clobbered interrupt priority register to its original
		value. */
		*pucFirstUserPriorityRegister = ulOriginalPriority;
 8008102:	687b      	ldr	r3, [r7, #4]
 8008104:	b2da      	uxtb	r2, r3
 8008106:	68fb      	ldr	r3, [r7, #12]
 8008108:	701a      	strb	r2, [r3, #0]
	}
	#endif /* conifgASSERT_DEFINED */

	/* Make PendSV and SysTick the lowest priority interrupts. */
	portNVIC_SYSPRI2_REG |= portNVIC_PENDSV_PRI;
 800810a:	4b15      	ldr	r3, [pc, #84]	; (8008160 <xPortStartScheduler+0xf0>)
 800810c:	681b      	ldr	r3, [r3, #0]
 800810e:	4a14      	ldr	r2, [pc, #80]	; (8008160 <xPortStartScheduler+0xf0>)
 8008110:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8008114:	6013      	str	r3, [r2, #0]
	portNVIC_SYSPRI2_REG |= portNVIC_SYSTICK_PRI;
 8008116:	4b12      	ldr	r3, [pc, #72]	; (8008160 <xPortStartScheduler+0xf0>)
 8008118:	681b      	ldr	r3, [r3, #0]
 800811a:	4a11      	ldr	r2, [pc, #68]	; (8008160 <xPortStartScheduler+0xf0>)
 800811c:	f043 4370 	orr.w	r3, r3, #4026531840	; 0xf0000000
 8008120:	6013      	str	r3, [r2, #0]

	/* Start the timer that generates the tick ISR.  Interrupts are disabled
	here already. */
	vPortSetupTimerInterrupt();
 8008122:	f000 f8dd 	bl	80082e0 <vPortSetupTimerInterrupt>

	/* Initialise the critical nesting count ready for the first task. */
	uxCriticalNesting = 0;
 8008126:	4b0f      	ldr	r3, [pc, #60]	; (8008164 <xPortStartScheduler+0xf4>)
 8008128:	2200      	movs	r2, #0
 800812a:	601a      	str	r2, [r3, #0]

	/* Ensure the VFP is enabled - it should be anyway. */
	vPortEnableVFP();
 800812c:	f000 f8fc 	bl	8008328 <vPortEnableVFP>

	/* Lazy save always. */
	*( portFPCCR ) |= portASPEN_AND_LSPEN_BITS;
 8008130:	4b0d      	ldr	r3, [pc, #52]	; (8008168 <xPortStartScheduler+0xf8>)
 8008132:	681b      	ldr	r3, [r3, #0]
 8008134:	4a0c      	ldr	r2, [pc, #48]	; (8008168 <xPortStartScheduler+0xf8>)
 8008136:	f043 4340 	orr.w	r3, r3, #3221225472	; 0xc0000000
 800813a:	6013      	str	r3, [r2, #0]

	/* Start the first task. */
	prvPortStartFirstTask();
 800813c:	f7ff ff84 	bl	8008048 <prvPortStartFirstTask>
	exit error function to prevent compiler warnings about a static function
	not being called in the case that the application writer overrides this
	functionality by defining configTASK_RETURN_ADDRESS.  Call
	vTaskSwitchContext() so link time optimisation does not remove the
	symbol. */
	vTaskSwitchContext();
 8008140:	f7fe ff18 	bl	8006f74 <vTaskSwitchContext>
	prvTaskExitError();
 8008144:	f7ff ff38 	bl	8007fb8 <prvTaskExitError>

	/* Should not get here! */
	return 0;
 8008148:	2300      	movs	r3, #0
}
 800814a:	4618      	mov	r0, r3
 800814c:	3710      	adds	r7, #16
 800814e:	46bd      	mov	sp, r7
 8008150:	bd80      	pop	{r7, pc}
 8008152:	bf00      	nop
 8008154:	e000e400 	.word	0xe000e400
 8008158:	200034b4 	.word	0x200034b4
 800815c:	200034b8 	.word	0x200034b8
 8008160:	e000ed20 	.word	0xe000ed20
 8008164:	20000020 	.word	0x20000020
 8008168:	e000ef34 	.word	0xe000ef34

0800816c <vPortEnterCritical>:
	configASSERT( uxCriticalNesting == 1000UL );
}
/*-----------------------------------------------------------*/

void vPortEnterCritical( void )
{
 800816c:	b480      	push	{r7}
 800816e:	b083      	sub	sp, #12
 8008170:	af00      	add	r7, sp, #0
	__asm volatile
 8008172:	f04f 0350 	mov.w	r3, #80	; 0x50
 8008176:	b672      	cpsid	i
 8008178:	f383 8811 	msr	BASEPRI, r3
 800817c:	f3bf 8f6f 	isb	sy
 8008180:	f3bf 8f4f 	dsb	sy
 8008184:	b662      	cpsie	i
 8008186:	607b      	str	r3, [r7, #4]
}
 8008188:	bf00      	nop
	portDISABLE_INTERRUPTS();
	uxCriticalNesting++;
 800818a:	4b10      	ldr	r3, [pc, #64]	; (80081cc <vPortEnterCritical+0x60>)
 800818c:	681b      	ldr	r3, [r3, #0]
 800818e:	3301      	adds	r3, #1
 8008190:	4a0e      	ldr	r2, [pc, #56]	; (80081cc <vPortEnterCritical+0x60>)
 8008192:	6013      	str	r3, [r2, #0]
	/* This is not the interrupt safe version of the enter critical function so
	assert() if it is being called from an interrupt context.  Only API
	functions that end in "FromISR" can be used in an interrupt.  Only assert if
	the critical nesting count is 1 to protect against recursive calls if the
	assert function also uses a critical section. */
	if( uxCriticalNesting == 1 )
 8008194:	4b0d      	ldr	r3, [pc, #52]	; (80081cc <vPortEnterCritical+0x60>)
 8008196:	681b      	ldr	r3, [r3, #0]
 8008198:	2b01      	cmp	r3, #1
 800819a:	d111      	bne.n	80081c0 <vPortEnterCritical+0x54>
	{
		configASSERT( ( portNVIC_INT_CTRL_REG & portVECTACTIVE_MASK ) == 0 );
 800819c:	4b0c      	ldr	r3, [pc, #48]	; (80081d0 <vPortEnterCritical+0x64>)
 800819e:	681b      	ldr	r3, [r3, #0]
 80081a0:	b2db      	uxtb	r3, r3
 80081a2:	2b00      	cmp	r3, #0
 80081a4:	d00c      	beq.n	80081c0 <vPortEnterCritical+0x54>
	__asm volatile
 80081a6:	f04f 0350 	mov.w	r3, #80	; 0x50
 80081aa:	b672      	cpsid	i
 80081ac:	f383 8811 	msr	BASEPRI, r3
 80081b0:	f3bf 8f6f 	isb	sy
 80081b4:	f3bf 8f4f 	dsb	sy
 80081b8:	b662      	cpsie	i
 80081ba:	603b      	str	r3, [r7, #0]
}
 80081bc:	bf00      	nop
 80081be:	e7fe      	b.n	80081be <vPortEnterCritical+0x52>
	}
}
 80081c0:	bf00      	nop
 80081c2:	370c      	adds	r7, #12
 80081c4:	46bd      	mov	sp, r7
 80081c6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80081ca:	4770      	bx	lr
 80081cc:	20000020 	.word	0x20000020
 80081d0:	e000ed04 	.word	0xe000ed04

080081d4 <vPortExitCritical>:
/*-----------------------------------------------------------*/

void vPortExitCritical( void )
{
 80081d4:	b480      	push	{r7}
 80081d6:	b083      	sub	sp, #12
 80081d8:	af00      	add	r7, sp, #0
	configASSERT( uxCriticalNesting );
 80081da:	4b13      	ldr	r3, [pc, #76]	; (8008228 <vPortExitCritical+0x54>)
 80081dc:	681b      	ldr	r3, [r3, #0]
 80081de:	2b00      	cmp	r3, #0
 80081e0:	d10c      	bne.n	80081fc <vPortExitCritical+0x28>
	__asm volatile
 80081e2:	f04f 0350 	mov.w	r3, #80	; 0x50
 80081e6:	b672      	cpsid	i
 80081e8:	f383 8811 	msr	BASEPRI, r3
 80081ec:	f3bf 8f6f 	isb	sy
 80081f0:	f3bf 8f4f 	dsb	sy
 80081f4:	b662      	cpsie	i
 80081f6:	607b      	str	r3, [r7, #4]
}
 80081f8:	bf00      	nop
 80081fa:	e7fe      	b.n	80081fa <vPortExitCritical+0x26>
	uxCriticalNesting--;
 80081fc:	4b0a      	ldr	r3, [pc, #40]	; (8008228 <vPortExitCritical+0x54>)
 80081fe:	681b      	ldr	r3, [r3, #0]
 8008200:	3b01      	subs	r3, #1
 8008202:	4a09      	ldr	r2, [pc, #36]	; (8008228 <vPortExitCritical+0x54>)
 8008204:	6013      	str	r3, [r2, #0]
	if( uxCriticalNesting == 0 )
 8008206:	4b08      	ldr	r3, [pc, #32]	; (8008228 <vPortExitCritical+0x54>)
 8008208:	681b      	ldr	r3, [r3, #0]
 800820a:	2b00      	cmp	r3, #0
 800820c:	d105      	bne.n	800821a <vPortExitCritical+0x46>
 800820e:	2300      	movs	r3, #0
 8008210:	603b      	str	r3, [r7, #0]
	__asm volatile
 8008212:	683b      	ldr	r3, [r7, #0]
 8008214:	f383 8811 	msr	BASEPRI, r3
}
 8008218:	bf00      	nop
	{
		portENABLE_INTERRUPTS();
	}
}
 800821a:	bf00      	nop
 800821c:	370c      	adds	r7, #12
 800821e:	46bd      	mov	sp, r7
 8008220:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008224:	4770      	bx	lr
 8008226:	bf00      	nop
 8008228:	20000020 	.word	0x20000020
 800822c:	00000000 	.word	0x00000000

08008230 <PendSV_Handler>:

void xPortPendSVHandler( void )
{
	/* This is a naked function. */

	__asm volatile
 8008230:	f3ef 8009 	mrs	r0, PSP
 8008234:	f3bf 8f6f 	isb	sy
 8008238:	4b15      	ldr	r3, [pc, #84]	; (8008290 <pxCurrentTCBConst>)
 800823a:	681a      	ldr	r2, [r3, #0]
 800823c:	f01e 0f10 	tst.w	lr, #16
 8008240:	bf08      	it	eq
 8008242:	ed20 8a10 	vstmdbeq	r0!, {s16-s31}
 8008246:	e920 4ff0 	stmdb	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800824a:	6010      	str	r0, [r2, #0]
 800824c:	e92d 0009 	stmdb	sp!, {r0, r3}
 8008250:	f04f 0050 	mov.w	r0, #80	; 0x50
 8008254:	b672      	cpsid	i
 8008256:	f380 8811 	msr	BASEPRI, r0
 800825a:	f3bf 8f4f 	dsb	sy
 800825e:	f3bf 8f6f 	isb	sy
 8008262:	b662      	cpsie	i
 8008264:	f7fe fe86 	bl	8006f74 <vTaskSwitchContext>
 8008268:	f04f 0000 	mov.w	r0, #0
 800826c:	f380 8811 	msr	BASEPRI, r0
 8008270:	bc09      	pop	{r0, r3}
 8008272:	6819      	ldr	r1, [r3, #0]
 8008274:	6808      	ldr	r0, [r1, #0]
 8008276:	e8b0 4ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800827a:	f01e 0f10 	tst.w	lr, #16
 800827e:	bf08      	it	eq
 8008280:	ecb0 8a10 	vldmiaeq	r0!, {s16-s31}
 8008284:	f380 8809 	msr	PSP, r0
 8008288:	f3bf 8f6f 	isb	sy
 800828c:	4770      	bx	lr
 800828e:	bf00      	nop

08008290 <pxCurrentTCBConst>:
 8008290:	20002e88 	.word	0x20002e88
	"										\n"
	"	.align 4							\n"
	"pxCurrentTCBConst: .word pxCurrentTCB	\n"
	::"i"(configMAX_SYSCALL_INTERRUPT_PRIORITY)
	);
}
 8008294:	bf00      	nop
 8008296:	bf00      	nop

08008298 <SysTick_Handler>:
/*-----------------------------------------------------------*/

void xPortSysTickHandler( void )
{
 8008298:	b580      	push	{r7, lr}
 800829a:	b082      	sub	sp, #8
 800829c:	af00      	add	r7, sp, #0
	__asm volatile
 800829e:	f04f 0350 	mov.w	r3, #80	; 0x50
 80082a2:	b672      	cpsid	i
 80082a4:	f383 8811 	msr	BASEPRI, r3
 80082a8:	f3bf 8f6f 	isb	sy
 80082ac:	f3bf 8f4f 	dsb	sy
 80082b0:	b662      	cpsie	i
 80082b2:	607b      	str	r3, [r7, #4]
}
 80082b4:	bf00      	nop
	save and then restore the interrupt mask value as its value is already
	known. */
	portDISABLE_INTERRUPTS();
	{
		/* Increment the RTOS tick. */
		if( xTaskIncrementTick() != pdFALSE )
 80082b6:	f7fe fda1 	bl	8006dfc <xTaskIncrementTick>
 80082ba:	4603      	mov	r3, r0
 80082bc:	2b00      	cmp	r3, #0
 80082be:	d003      	beq.n	80082c8 <SysTick_Handler+0x30>
		{
			/* A context switch is required.  Context switching is performed in
			the PendSV interrupt.  Pend the PendSV interrupt. */
			portNVIC_INT_CTRL_REG = portNVIC_PENDSVSET_BIT;
 80082c0:	4b06      	ldr	r3, [pc, #24]	; (80082dc <SysTick_Handler+0x44>)
 80082c2:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 80082c6:	601a      	str	r2, [r3, #0]
 80082c8:	2300      	movs	r3, #0
 80082ca:	603b      	str	r3, [r7, #0]
	__asm volatile
 80082cc:	683b      	ldr	r3, [r7, #0]
 80082ce:	f383 8811 	msr	BASEPRI, r3
}
 80082d2:	bf00      	nop
		}
	}
	portENABLE_INTERRUPTS();
}
 80082d4:	bf00      	nop
 80082d6:	3708      	adds	r7, #8
 80082d8:	46bd      	mov	sp, r7
 80082da:	bd80      	pop	{r7, pc}
 80082dc:	e000ed04 	.word	0xe000ed04

080082e0 <vPortSetupTimerInterrupt>:
/*
 * Setup the systick timer to generate the tick interrupts at the required
 * frequency.
 */
__attribute__(( weak )) void vPortSetupTimerInterrupt( void )
{
 80082e0:	b480      	push	{r7}
 80082e2:	af00      	add	r7, sp, #0
		ulStoppedTimerCompensation = portMISSED_COUNTS_FACTOR / ( configCPU_CLOCK_HZ / configSYSTICK_CLOCK_HZ );
	}
	#endif /* configUSE_TICKLESS_IDLE */

	/* Stop and clear the SysTick. */
	portNVIC_SYSTICK_CTRL_REG = 0UL;
 80082e4:	4b0b      	ldr	r3, [pc, #44]	; (8008314 <vPortSetupTimerInterrupt+0x34>)
 80082e6:	2200      	movs	r2, #0
 80082e8:	601a      	str	r2, [r3, #0]
	portNVIC_SYSTICK_CURRENT_VALUE_REG = 0UL;
 80082ea:	4b0b      	ldr	r3, [pc, #44]	; (8008318 <vPortSetupTimerInterrupt+0x38>)
 80082ec:	2200      	movs	r2, #0
 80082ee:	601a      	str	r2, [r3, #0]

	/* Configure SysTick to interrupt at the requested rate. */
	portNVIC_SYSTICK_LOAD_REG = ( configSYSTICK_CLOCK_HZ / configTICK_RATE_HZ ) - 1UL;
 80082f0:	4b0a      	ldr	r3, [pc, #40]	; (800831c <vPortSetupTimerInterrupt+0x3c>)
 80082f2:	681b      	ldr	r3, [r3, #0]
 80082f4:	4a0a      	ldr	r2, [pc, #40]	; (8008320 <vPortSetupTimerInterrupt+0x40>)
 80082f6:	fba2 2303 	umull	r2, r3, r2, r3
 80082fa:	099b      	lsrs	r3, r3, #6
 80082fc:	4a09      	ldr	r2, [pc, #36]	; (8008324 <vPortSetupTimerInterrupt+0x44>)
 80082fe:	3b01      	subs	r3, #1
 8008300:	6013      	str	r3, [r2, #0]
	portNVIC_SYSTICK_CTRL_REG = ( portNVIC_SYSTICK_CLK_BIT | portNVIC_SYSTICK_INT_BIT | portNVIC_SYSTICK_ENABLE_BIT );
 8008302:	4b04      	ldr	r3, [pc, #16]	; (8008314 <vPortSetupTimerInterrupt+0x34>)
 8008304:	2207      	movs	r2, #7
 8008306:	601a      	str	r2, [r3, #0]
}
 8008308:	bf00      	nop
 800830a:	46bd      	mov	sp, r7
 800830c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008310:	4770      	bx	lr
 8008312:	bf00      	nop
 8008314:	e000e010 	.word	0xe000e010
 8008318:	e000e018 	.word	0xe000e018
 800831c:	20000014 	.word	0x20000014
 8008320:	10624dd3 	.word	0x10624dd3
 8008324:	e000e014 	.word	0xe000e014

08008328 <vPortEnableVFP>:
/*-----------------------------------------------------------*/

/* This is a naked function. */
static void vPortEnableVFP( void )
{
	__asm volatile
 8008328:	f8df 000c 	ldr.w	r0, [pc, #12]	; 8008338 <vPortEnableVFP+0x10>
 800832c:	6801      	ldr	r1, [r0, #0]
 800832e:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 8008332:	6001      	str	r1, [r0, #0]
 8008334:	4770      	bx	lr
		"								\n"
		"	orr r1, r1, #( 0xf << 20 )	\n" /* Enable CP10 and CP11 coprocessors, then save back. */
		"	str r1, [r0]				\n"
		"	bx r14						"
	);
}
 8008336:	bf00      	nop
 8008338:	e000ed88 	.word	0xe000ed88

0800833c <vPortValidateInterruptPriority>:
/*-----------------------------------------------------------*/

#if( configASSERT_DEFINED == 1 )

	void vPortValidateInterruptPriority( void )
	{
 800833c:	b480      	push	{r7}
 800833e:	b085      	sub	sp, #20
 8008340:	af00      	add	r7, sp, #0
	uint32_t ulCurrentInterrupt;
	uint8_t ucCurrentPriority;

		/* Obtain the number of the currently executing interrupt. */
		__asm volatile( "mrs %0, ipsr" : "=r"( ulCurrentInterrupt ) :: "memory" );
 8008342:	f3ef 8305 	mrs	r3, IPSR
 8008346:	60fb      	str	r3, [r7, #12]

		/* Is the interrupt number a user defined interrupt? */
		if( ulCurrentInterrupt >= portFIRST_USER_INTERRUPT_NUMBER )
 8008348:	68fb      	ldr	r3, [r7, #12]
 800834a:	2b0f      	cmp	r3, #15
 800834c:	d916      	bls.n	800837c <vPortValidateInterruptPriority+0x40>
		{
			/* Look up the interrupt's priority. */
			ucCurrentPriority = pcInterruptPriorityRegisters[ ulCurrentInterrupt ];
 800834e:	4a19      	ldr	r2, [pc, #100]	; (80083b4 <vPortValidateInterruptPriority+0x78>)
 8008350:	68fb      	ldr	r3, [r7, #12]
 8008352:	4413      	add	r3, r2
 8008354:	781b      	ldrb	r3, [r3, #0]
 8008356:	72fb      	strb	r3, [r7, #11]
			interrupt entry is as fast and simple as possible.

			The following links provide detailed information:
			http://www.freertos.org/RTOS-Cortex-M3-M4.html
			http://www.freertos.org/FAQHelp.html */
			configASSERT( ucCurrentPriority >= ucMaxSysCallPriority );
 8008358:	4b17      	ldr	r3, [pc, #92]	; (80083b8 <vPortValidateInterruptPriority+0x7c>)
 800835a:	781b      	ldrb	r3, [r3, #0]
 800835c:	7afa      	ldrb	r2, [r7, #11]
 800835e:	429a      	cmp	r2, r3
 8008360:	d20c      	bcs.n	800837c <vPortValidateInterruptPriority+0x40>
	__asm volatile
 8008362:	f04f 0350 	mov.w	r3, #80	; 0x50
 8008366:	b672      	cpsid	i
 8008368:	f383 8811 	msr	BASEPRI, r3
 800836c:	f3bf 8f6f 	isb	sy
 8008370:	f3bf 8f4f 	dsb	sy
 8008374:	b662      	cpsie	i
 8008376:	607b      	str	r3, [r7, #4]
}
 8008378:	bf00      	nop
 800837a:	e7fe      	b.n	800837a <vPortValidateInterruptPriority+0x3e>
		configuration then the correct setting can be achieved on all Cortex-M
		devices by calling NVIC_SetPriorityGrouping( 0 ); before starting the
		scheduler.  Note however that some vendor specific peripheral libraries
		assume a non-zero priority group setting, in which cases using a value
		of zero will result in unpredictable behaviour. */
		configASSERT( ( portAIRCR_REG & portPRIORITY_GROUP_MASK ) <= ulMaxPRIGROUPValue );
 800837c:	4b0f      	ldr	r3, [pc, #60]	; (80083bc <vPortValidateInterruptPriority+0x80>)
 800837e:	681b      	ldr	r3, [r3, #0]
 8008380:	f403 62e0 	and.w	r2, r3, #1792	; 0x700
 8008384:	4b0e      	ldr	r3, [pc, #56]	; (80083c0 <vPortValidateInterruptPriority+0x84>)
 8008386:	681b      	ldr	r3, [r3, #0]
 8008388:	429a      	cmp	r2, r3
 800838a:	d90c      	bls.n	80083a6 <vPortValidateInterruptPriority+0x6a>
	__asm volatile
 800838c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8008390:	b672      	cpsid	i
 8008392:	f383 8811 	msr	BASEPRI, r3
 8008396:	f3bf 8f6f 	isb	sy
 800839a:	f3bf 8f4f 	dsb	sy
 800839e:	b662      	cpsie	i
 80083a0:	603b      	str	r3, [r7, #0]
}
 80083a2:	bf00      	nop
 80083a4:	e7fe      	b.n	80083a4 <vPortValidateInterruptPriority+0x68>
	}
 80083a6:	bf00      	nop
 80083a8:	3714      	adds	r7, #20
 80083aa:	46bd      	mov	sp, r7
 80083ac:	f85d 7b04 	ldr.w	r7, [sp], #4
 80083b0:	4770      	bx	lr
 80083b2:	bf00      	nop
 80083b4:	e000e3f0 	.word	0xe000e3f0
 80083b8:	200034b4 	.word	0x200034b4
 80083bc:	e000ed0c 	.word	0xe000ed0c
 80083c0:	200034b8 	.word	0x200034b8

080083c4 <pvPortMalloc>:
static size_t xBlockAllocatedBit = 0;

/*-----------------------------------------------------------*/

void *pvPortMalloc( size_t xWantedSize )
{
 80083c4:	b580      	push	{r7, lr}
 80083c6:	b08a      	sub	sp, #40	; 0x28
 80083c8:	af00      	add	r7, sp, #0
 80083ca:	6078      	str	r0, [r7, #4]
BlockLink_t *pxBlock, *pxPreviousBlock, *pxNewBlockLink;
void *pvReturn = NULL;
 80083cc:	2300      	movs	r3, #0
 80083ce:	61fb      	str	r3, [r7, #28]

	vTaskSuspendAll();
 80083d0:	f7fe fc56 	bl	8006c80 <vTaskSuspendAll>
	{
		/* If this is the first call to malloc then the heap will require
		initialisation to setup the list of free blocks. */
		if( pxEnd == NULL )
 80083d4:	4b5b      	ldr	r3, [pc, #364]	; (8008544 <pvPortMalloc+0x180>)
 80083d6:	681b      	ldr	r3, [r3, #0]
 80083d8:	2b00      	cmp	r3, #0
 80083da:	d101      	bne.n	80083e0 <pvPortMalloc+0x1c>
		{
			prvHeapInit();
 80083dc:	f000 f91a 	bl	8008614 <prvHeapInit>

		/* Check the requested block size is not so large that the top bit is
		set.  The top bit of the block size member of the BlockLink_t structure
		is used to determine who owns the block - the application or the
		kernel, so it must be free. */
		if( ( xWantedSize & xBlockAllocatedBit ) == 0 )
 80083e0:	4b59      	ldr	r3, [pc, #356]	; (8008548 <pvPortMalloc+0x184>)
 80083e2:	681a      	ldr	r2, [r3, #0]
 80083e4:	687b      	ldr	r3, [r7, #4]
 80083e6:	4013      	ands	r3, r2
 80083e8:	2b00      	cmp	r3, #0
 80083ea:	f040 8092 	bne.w	8008512 <pvPortMalloc+0x14e>
		{
			/* The wanted size is increased so it can contain a BlockLink_t
			structure in addition to the requested amount of bytes. */
			if( xWantedSize > 0 )
 80083ee:	687b      	ldr	r3, [r7, #4]
 80083f0:	2b00      	cmp	r3, #0
 80083f2:	d01f      	beq.n	8008434 <pvPortMalloc+0x70>
			{
				xWantedSize += xHeapStructSize;
 80083f4:	2208      	movs	r2, #8
 80083f6:	687b      	ldr	r3, [r7, #4]
 80083f8:	4413      	add	r3, r2
 80083fa:	607b      	str	r3, [r7, #4]

				/* Ensure that blocks are always aligned to the required number
				of bytes. */
				if( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) != 0x00 )
 80083fc:	687b      	ldr	r3, [r7, #4]
 80083fe:	f003 0307 	and.w	r3, r3, #7
 8008402:	2b00      	cmp	r3, #0
 8008404:	d016      	beq.n	8008434 <pvPortMalloc+0x70>
				{
					/* Byte alignment required. */
					xWantedSize += ( portBYTE_ALIGNMENT - ( xWantedSize & portBYTE_ALIGNMENT_MASK ) );
 8008406:	687b      	ldr	r3, [r7, #4]
 8008408:	f023 0307 	bic.w	r3, r3, #7
 800840c:	3308      	adds	r3, #8
 800840e:	607b      	str	r3, [r7, #4]
					configASSERT( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) == 0 );
 8008410:	687b      	ldr	r3, [r7, #4]
 8008412:	f003 0307 	and.w	r3, r3, #7
 8008416:	2b00      	cmp	r3, #0
 8008418:	d00c      	beq.n	8008434 <pvPortMalloc+0x70>
	__asm volatile
 800841a:	f04f 0350 	mov.w	r3, #80	; 0x50
 800841e:	b672      	cpsid	i
 8008420:	f383 8811 	msr	BASEPRI, r3
 8008424:	f3bf 8f6f 	isb	sy
 8008428:	f3bf 8f4f 	dsb	sy
 800842c:	b662      	cpsie	i
 800842e:	617b      	str	r3, [r7, #20]
}
 8008430:	bf00      	nop
 8008432:	e7fe      	b.n	8008432 <pvPortMalloc+0x6e>
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}

			if( ( xWantedSize > 0 ) && ( xWantedSize <= xFreeBytesRemaining ) )
 8008434:	687b      	ldr	r3, [r7, #4]
 8008436:	2b00      	cmp	r3, #0
 8008438:	d06b      	beq.n	8008512 <pvPortMalloc+0x14e>
 800843a:	4b44      	ldr	r3, [pc, #272]	; (800854c <pvPortMalloc+0x188>)
 800843c:	681b      	ldr	r3, [r3, #0]
 800843e:	687a      	ldr	r2, [r7, #4]
 8008440:	429a      	cmp	r2, r3
 8008442:	d866      	bhi.n	8008512 <pvPortMalloc+0x14e>
			{
				/* Traverse the list from the start	(lowest address) block until
				one	of adequate size is found. */
				pxPreviousBlock = &xStart;
 8008444:	4b42      	ldr	r3, [pc, #264]	; (8008550 <pvPortMalloc+0x18c>)
 8008446:	623b      	str	r3, [r7, #32]
				pxBlock = xStart.pxNextFreeBlock;
 8008448:	4b41      	ldr	r3, [pc, #260]	; (8008550 <pvPortMalloc+0x18c>)
 800844a:	681b      	ldr	r3, [r3, #0]
 800844c:	627b      	str	r3, [r7, #36]	; 0x24
				while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
 800844e:	e004      	b.n	800845a <pvPortMalloc+0x96>
				{
					pxPreviousBlock = pxBlock;
 8008450:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008452:	623b      	str	r3, [r7, #32]
					pxBlock = pxBlock->pxNextFreeBlock;
 8008454:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008456:	681b      	ldr	r3, [r3, #0]
 8008458:	627b      	str	r3, [r7, #36]	; 0x24
				while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
 800845a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800845c:	685b      	ldr	r3, [r3, #4]
 800845e:	687a      	ldr	r2, [r7, #4]
 8008460:	429a      	cmp	r2, r3
 8008462:	d903      	bls.n	800846c <pvPortMalloc+0xa8>
 8008464:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008466:	681b      	ldr	r3, [r3, #0]
 8008468:	2b00      	cmp	r3, #0
 800846a:	d1f1      	bne.n	8008450 <pvPortMalloc+0x8c>
				}

				/* If the end marker was reached then a block of adequate size
				was	not found. */
				if( pxBlock != pxEnd )
 800846c:	4b35      	ldr	r3, [pc, #212]	; (8008544 <pvPortMalloc+0x180>)
 800846e:	681b      	ldr	r3, [r3, #0]
 8008470:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8008472:	429a      	cmp	r2, r3
 8008474:	d04d      	beq.n	8008512 <pvPortMalloc+0x14e>
				{
					/* Return the memory space pointed to - jumping over the
					BlockLink_t structure at its start. */
					pvReturn = ( void * ) ( ( ( uint8_t * ) pxPreviousBlock->pxNextFreeBlock ) + xHeapStructSize );
 8008476:	6a3b      	ldr	r3, [r7, #32]
 8008478:	681b      	ldr	r3, [r3, #0]
 800847a:	2208      	movs	r2, #8
 800847c:	4413      	add	r3, r2
 800847e:	61fb      	str	r3, [r7, #28]

					/* This block is being returned for use so must be taken out
					of the list of free blocks. */
					pxPreviousBlock->pxNextFreeBlock = pxBlock->pxNextFreeBlock;
 8008480:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008482:	681a      	ldr	r2, [r3, #0]
 8008484:	6a3b      	ldr	r3, [r7, #32]
 8008486:	601a      	str	r2, [r3, #0]

					/* If the block is larger than required it can be split into
					two. */
					if( ( pxBlock->xBlockSize - xWantedSize ) > heapMINIMUM_BLOCK_SIZE )
 8008488:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800848a:	685a      	ldr	r2, [r3, #4]
 800848c:	687b      	ldr	r3, [r7, #4]
 800848e:	1ad2      	subs	r2, r2, r3
 8008490:	2308      	movs	r3, #8
 8008492:	005b      	lsls	r3, r3, #1
 8008494:	429a      	cmp	r2, r3
 8008496:	d921      	bls.n	80084dc <pvPortMalloc+0x118>
					{
						/* This block is to be split into two.  Create a new
						block following the number of bytes requested. The void
						cast is used to prevent byte alignment warnings from the
						compiler. */
						pxNewBlockLink = ( void * ) ( ( ( uint8_t * ) pxBlock ) + xWantedSize );
 8008498:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800849a:	687b      	ldr	r3, [r7, #4]
 800849c:	4413      	add	r3, r2
 800849e:	61bb      	str	r3, [r7, #24]
						configASSERT( ( ( ( size_t ) pxNewBlockLink ) & portBYTE_ALIGNMENT_MASK ) == 0 );
 80084a0:	69bb      	ldr	r3, [r7, #24]
 80084a2:	f003 0307 	and.w	r3, r3, #7
 80084a6:	2b00      	cmp	r3, #0
 80084a8:	d00c      	beq.n	80084c4 <pvPortMalloc+0x100>
	__asm volatile
 80084aa:	f04f 0350 	mov.w	r3, #80	; 0x50
 80084ae:	b672      	cpsid	i
 80084b0:	f383 8811 	msr	BASEPRI, r3
 80084b4:	f3bf 8f6f 	isb	sy
 80084b8:	f3bf 8f4f 	dsb	sy
 80084bc:	b662      	cpsie	i
 80084be:	613b      	str	r3, [r7, #16]
}
 80084c0:	bf00      	nop
 80084c2:	e7fe      	b.n	80084c2 <pvPortMalloc+0xfe>

						/* Calculate the sizes of two blocks split from the
						single block. */
						pxNewBlockLink->xBlockSize = pxBlock->xBlockSize - xWantedSize;
 80084c4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80084c6:	685a      	ldr	r2, [r3, #4]
 80084c8:	687b      	ldr	r3, [r7, #4]
 80084ca:	1ad2      	subs	r2, r2, r3
 80084cc:	69bb      	ldr	r3, [r7, #24]
 80084ce:	605a      	str	r2, [r3, #4]
						pxBlock->xBlockSize = xWantedSize;
 80084d0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80084d2:	687a      	ldr	r2, [r7, #4]
 80084d4:	605a      	str	r2, [r3, #4]

						/* Insert the new block into the list of free blocks. */
						prvInsertBlockIntoFreeList( pxNewBlockLink );
 80084d6:	69b8      	ldr	r0, [r7, #24]
 80084d8:	f000 f8fe 	bl	80086d8 <prvInsertBlockIntoFreeList>
					else
					{
						mtCOVERAGE_TEST_MARKER();
					}

					xFreeBytesRemaining -= pxBlock->xBlockSize;
 80084dc:	4b1b      	ldr	r3, [pc, #108]	; (800854c <pvPortMalloc+0x188>)
 80084de:	681a      	ldr	r2, [r3, #0]
 80084e0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80084e2:	685b      	ldr	r3, [r3, #4]
 80084e4:	1ad3      	subs	r3, r2, r3
 80084e6:	4a19      	ldr	r2, [pc, #100]	; (800854c <pvPortMalloc+0x188>)
 80084e8:	6013      	str	r3, [r2, #0]

					if( xFreeBytesRemaining < xMinimumEverFreeBytesRemaining )
 80084ea:	4b18      	ldr	r3, [pc, #96]	; (800854c <pvPortMalloc+0x188>)
 80084ec:	681a      	ldr	r2, [r3, #0]
 80084ee:	4b19      	ldr	r3, [pc, #100]	; (8008554 <pvPortMalloc+0x190>)
 80084f0:	681b      	ldr	r3, [r3, #0]
 80084f2:	429a      	cmp	r2, r3
 80084f4:	d203      	bcs.n	80084fe <pvPortMalloc+0x13a>
					{
						xMinimumEverFreeBytesRemaining = xFreeBytesRemaining;
 80084f6:	4b15      	ldr	r3, [pc, #84]	; (800854c <pvPortMalloc+0x188>)
 80084f8:	681b      	ldr	r3, [r3, #0]
 80084fa:	4a16      	ldr	r2, [pc, #88]	; (8008554 <pvPortMalloc+0x190>)
 80084fc:	6013      	str	r3, [r2, #0]
						mtCOVERAGE_TEST_MARKER();
					}

					/* The block is being returned - it is allocated and owned
					by the application and has no "next" block. */
					pxBlock->xBlockSize |= xBlockAllocatedBit;
 80084fe:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008500:	685a      	ldr	r2, [r3, #4]
 8008502:	4b11      	ldr	r3, [pc, #68]	; (8008548 <pvPortMalloc+0x184>)
 8008504:	681b      	ldr	r3, [r3, #0]
 8008506:	431a      	orrs	r2, r3
 8008508:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800850a:	605a      	str	r2, [r3, #4]
					pxBlock->pxNextFreeBlock = NULL;
 800850c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800850e:	2200      	movs	r2, #0
 8008510:	601a      	str	r2, [r3, #0]
			mtCOVERAGE_TEST_MARKER();
		}

		traceMALLOC( pvReturn, xWantedSize );
	}
	( void ) xTaskResumeAll();
 8008512:	f7fe fbc3 	bl	8006c9c <xTaskResumeAll>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif

	configASSERT( ( ( ( size_t ) pvReturn ) & ( size_t ) portBYTE_ALIGNMENT_MASK ) == 0 );
 8008516:	69fb      	ldr	r3, [r7, #28]
 8008518:	f003 0307 	and.w	r3, r3, #7
 800851c:	2b00      	cmp	r3, #0
 800851e:	d00c      	beq.n	800853a <pvPortMalloc+0x176>
	__asm volatile
 8008520:	f04f 0350 	mov.w	r3, #80	; 0x50
 8008524:	b672      	cpsid	i
 8008526:	f383 8811 	msr	BASEPRI, r3
 800852a:	f3bf 8f6f 	isb	sy
 800852e:	f3bf 8f4f 	dsb	sy
 8008532:	b662      	cpsie	i
 8008534:	60fb      	str	r3, [r7, #12]
}
 8008536:	bf00      	nop
 8008538:	e7fe      	b.n	8008538 <pvPortMalloc+0x174>
	return pvReturn;
 800853a:	69fb      	ldr	r3, [r7, #28]
}
 800853c:	4618      	mov	r0, r3
 800853e:	3728      	adds	r7, #40	; 0x28
 8008540:	46bd      	mov	sp, r7
 8008542:	bd80      	pop	{r7, pc}
 8008544:	2000b4c4 	.word	0x2000b4c4
 8008548:	2000b4d0 	.word	0x2000b4d0
 800854c:	2000b4c8 	.word	0x2000b4c8
 8008550:	2000b4bc 	.word	0x2000b4bc
 8008554:	2000b4cc 	.word	0x2000b4cc

08008558 <vPortFree>:
/*-----------------------------------------------------------*/

void vPortFree( void *pv )
{
 8008558:	b580      	push	{r7, lr}
 800855a:	b086      	sub	sp, #24
 800855c:	af00      	add	r7, sp, #0
 800855e:	6078      	str	r0, [r7, #4]
uint8_t *puc = ( uint8_t * ) pv;
 8008560:	687b      	ldr	r3, [r7, #4]
 8008562:	617b      	str	r3, [r7, #20]
BlockLink_t *pxLink;

	if( pv != NULL )
 8008564:	687b      	ldr	r3, [r7, #4]
 8008566:	2b00      	cmp	r3, #0
 8008568:	d04c      	beq.n	8008604 <vPortFree+0xac>
	{
		/* The memory being freed will have an BlockLink_t structure immediately
		before it. */
		puc -= xHeapStructSize;
 800856a:	2308      	movs	r3, #8
 800856c:	425b      	negs	r3, r3
 800856e:	697a      	ldr	r2, [r7, #20]
 8008570:	4413      	add	r3, r2
 8008572:	617b      	str	r3, [r7, #20]

		/* This casting is to keep the compiler from issuing warnings. */
		pxLink = ( void * ) puc;
 8008574:	697b      	ldr	r3, [r7, #20]
 8008576:	613b      	str	r3, [r7, #16]

		/* Check the block is actually allocated. */
		configASSERT( ( pxLink->xBlockSize & xBlockAllocatedBit ) != 0 );
 8008578:	693b      	ldr	r3, [r7, #16]
 800857a:	685a      	ldr	r2, [r3, #4]
 800857c:	4b23      	ldr	r3, [pc, #140]	; (800860c <vPortFree+0xb4>)
 800857e:	681b      	ldr	r3, [r3, #0]
 8008580:	4013      	ands	r3, r2
 8008582:	2b00      	cmp	r3, #0
 8008584:	d10c      	bne.n	80085a0 <vPortFree+0x48>
	__asm volatile
 8008586:	f04f 0350 	mov.w	r3, #80	; 0x50
 800858a:	b672      	cpsid	i
 800858c:	f383 8811 	msr	BASEPRI, r3
 8008590:	f3bf 8f6f 	isb	sy
 8008594:	f3bf 8f4f 	dsb	sy
 8008598:	b662      	cpsie	i
 800859a:	60fb      	str	r3, [r7, #12]
}
 800859c:	bf00      	nop
 800859e:	e7fe      	b.n	800859e <vPortFree+0x46>
		configASSERT( pxLink->pxNextFreeBlock == NULL );
 80085a0:	693b      	ldr	r3, [r7, #16]
 80085a2:	681b      	ldr	r3, [r3, #0]
 80085a4:	2b00      	cmp	r3, #0
 80085a6:	d00c      	beq.n	80085c2 <vPortFree+0x6a>
	__asm volatile
 80085a8:	f04f 0350 	mov.w	r3, #80	; 0x50
 80085ac:	b672      	cpsid	i
 80085ae:	f383 8811 	msr	BASEPRI, r3
 80085b2:	f3bf 8f6f 	isb	sy
 80085b6:	f3bf 8f4f 	dsb	sy
 80085ba:	b662      	cpsie	i
 80085bc:	60bb      	str	r3, [r7, #8]
}
 80085be:	bf00      	nop
 80085c0:	e7fe      	b.n	80085c0 <vPortFree+0x68>

		if( ( pxLink->xBlockSize & xBlockAllocatedBit ) != 0 )
 80085c2:	693b      	ldr	r3, [r7, #16]
 80085c4:	685a      	ldr	r2, [r3, #4]
 80085c6:	4b11      	ldr	r3, [pc, #68]	; (800860c <vPortFree+0xb4>)
 80085c8:	681b      	ldr	r3, [r3, #0]
 80085ca:	4013      	ands	r3, r2
 80085cc:	2b00      	cmp	r3, #0
 80085ce:	d019      	beq.n	8008604 <vPortFree+0xac>
		{
			if( pxLink->pxNextFreeBlock == NULL )
 80085d0:	693b      	ldr	r3, [r7, #16]
 80085d2:	681b      	ldr	r3, [r3, #0]
 80085d4:	2b00      	cmp	r3, #0
 80085d6:	d115      	bne.n	8008604 <vPortFree+0xac>
			{
				/* The block is being returned to the heap - it is no longer
				allocated. */
				pxLink->xBlockSize &= ~xBlockAllocatedBit;
 80085d8:	693b      	ldr	r3, [r7, #16]
 80085da:	685a      	ldr	r2, [r3, #4]
 80085dc:	4b0b      	ldr	r3, [pc, #44]	; (800860c <vPortFree+0xb4>)
 80085de:	681b      	ldr	r3, [r3, #0]
 80085e0:	43db      	mvns	r3, r3
 80085e2:	401a      	ands	r2, r3
 80085e4:	693b      	ldr	r3, [r7, #16]
 80085e6:	605a      	str	r2, [r3, #4]

				vTaskSuspendAll();
 80085e8:	f7fe fb4a 	bl	8006c80 <vTaskSuspendAll>
				{
					/* Add this block to the list of free blocks. */
					xFreeBytesRemaining += pxLink->xBlockSize;
 80085ec:	693b      	ldr	r3, [r7, #16]
 80085ee:	685a      	ldr	r2, [r3, #4]
 80085f0:	4b07      	ldr	r3, [pc, #28]	; (8008610 <vPortFree+0xb8>)
 80085f2:	681b      	ldr	r3, [r3, #0]
 80085f4:	4413      	add	r3, r2
 80085f6:	4a06      	ldr	r2, [pc, #24]	; (8008610 <vPortFree+0xb8>)
 80085f8:	6013      	str	r3, [r2, #0]
					traceFREE( pv, pxLink->xBlockSize );
					prvInsertBlockIntoFreeList( ( ( BlockLink_t * ) pxLink ) );
 80085fa:	6938      	ldr	r0, [r7, #16]
 80085fc:	f000 f86c 	bl	80086d8 <prvInsertBlockIntoFreeList>
				}
				( void ) xTaskResumeAll();
 8008600:	f7fe fb4c 	bl	8006c9c <xTaskResumeAll>
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
}
 8008604:	bf00      	nop
 8008606:	3718      	adds	r7, #24
 8008608:	46bd      	mov	sp, r7
 800860a:	bd80      	pop	{r7, pc}
 800860c:	2000b4d0 	.word	0x2000b4d0
 8008610:	2000b4c8 	.word	0x2000b4c8

08008614 <prvHeapInit>:
	/* This just exists to keep the linker quiet. */
}
/*-----------------------------------------------------------*/

static void prvHeapInit( void )
{
 8008614:	b480      	push	{r7}
 8008616:	b085      	sub	sp, #20
 8008618:	af00      	add	r7, sp, #0
BlockLink_t *pxFirstFreeBlock;
uint8_t *pucAlignedHeap;
size_t uxAddress;
size_t xTotalHeapSize = configTOTAL_HEAP_SIZE;
 800861a:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 800861e:	60bb      	str	r3, [r7, #8]

	/* Ensure the heap starts on a correctly aligned boundary. */
	uxAddress = ( size_t ) ucHeap;
 8008620:	4b27      	ldr	r3, [pc, #156]	; (80086c0 <prvHeapInit+0xac>)
 8008622:	60fb      	str	r3, [r7, #12]

	if( ( uxAddress & portBYTE_ALIGNMENT_MASK ) != 0 )
 8008624:	68fb      	ldr	r3, [r7, #12]
 8008626:	f003 0307 	and.w	r3, r3, #7
 800862a:	2b00      	cmp	r3, #0
 800862c:	d00c      	beq.n	8008648 <prvHeapInit+0x34>
	{
		uxAddress += ( portBYTE_ALIGNMENT - 1 );
 800862e:	68fb      	ldr	r3, [r7, #12]
 8008630:	3307      	adds	r3, #7
 8008632:	60fb      	str	r3, [r7, #12]
		uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
 8008634:	68fb      	ldr	r3, [r7, #12]
 8008636:	f023 0307 	bic.w	r3, r3, #7
 800863a:	60fb      	str	r3, [r7, #12]
		xTotalHeapSize -= uxAddress - ( size_t ) ucHeap;
 800863c:	68ba      	ldr	r2, [r7, #8]
 800863e:	68fb      	ldr	r3, [r7, #12]
 8008640:	1ad3      	subs	r3, r2, r3
 8008642:	4a1f      	ldr	r2, [pc, #124]	; (80086c0 <prvHeapInit+0xac>)
 8008644:	4413      	add	r3, r2
 8008646:	60bb      	str	r3, [r7, #8]
	}

	pucAlignedHeap = ( uint8_t * ) uxAddress;
 8008648:	68fb      	ldr	r3, [r7, #12]
 800864a:	607b      	str	r3, [r7, #4]

	/* xStart is used to hold a pointer to the first item in the list of free
	blocks.  The void cast is used to prevent compiler warnings. */
	xStart.pxNextFreeBlock = ( void * ) pucAlignedHeap;
 800864c:	4a1d      	ldr	r2, [pc, #116]	; (80086c4 <prvHeapInit+0xb0>)
 800864e:	687b      	ldr	r3, [r7, #4]
 8008650:	6013      	str	r3, [r2, #0]
	xStart.xBlockSize = ( size_t ) 0;
 8008652:	4b1c      	ldr	r3, [pc, #112]	; (80086c4 <prvHeapInit+0xb0>)
 8008654:	2200      	movs	r2, #0
 8008656:	605a      	str	r2, [r3, #4]

	/* pxEnd is used to mark the end of the list of free blocks and is inserted
	at the end of the heap space. */
	uxAddress = ( ( size_t ) pucAlignedHeap ) + xTotalHeapSize;
 8008658:	687b      	ldr	r3, [r7, #4]
 800865a:	68ba      	ldr	r2, [r7, #8]
 800865c:	4413      	add	r3, r2
 800865e:	60fb      	str	r3, [r7, #12]
	uxAddress -= xHeapStructSize;
 8008660:	2208      	movs	r2, #8
 8008662:	68fb      	ldr	r3, [r7, #12]
 8008664:	1a9b      	subs	r3, r3, r2
 8008666:	60fb      	str	r3, [r7, #12]
	uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
 8008668:	68fb      	ldr	r3, [r7, #12]
 800866a:	f023 0307 	bic.w	r3, r3, #7
 800866e:	60fb      	str	r3, [r7, #12]
	pxEnd = ( void * ) uxAddress;
 8008670:	68fb      	ldr	r3, [r7, #12]
 8008672:	4a15      	ldr	r2, [pc, #84]	; (80086c8 <prvHeapInit+0xb4>)
 8008674:	6013      	str	r3, [r2, #0]
	pxEnd->xBlockSize = 0;
 8008676:	4b14      	ldr	r3, [pc, #80]	; (80086c8 <prvHeapInit+0xb4>)
 8008678:	681b      	ldr	r3, [r3, #0]
 800867a:	2200      	movs	r2, #0
 800867c:	605a      	str	r2, [r3, #4]
	pxEnd->pxNextFreeBlock = NULL;
 800867e:	4b12      	ldr	r3, [pc, #72]	; (80086c8 <prvHeapInit+0xb4>)
 8008680:	681b      	ldr	r3, [r3, #0]
 8008682:	2200      	movs	r2, #0
 8008684:	601a      	str	r2, [r3, #0]

	/* To start with there is a single free block that is sized to take up the
	entire heap space, minus the space taken by pxEnd. */
	pxFirstFreeBlock = ( void * ) pucAlignedHeap;
 8008686:	687b      	ldr	r3, [r7, #4]
 8008688:	603b      	str	r3, [r7, #0]
	pxFirstFreeBlock->xBlockSize = uxAddress - ( size_t ) pxFirstFreeBlock;
 800868a:	683b      	ldr	r3, [r7, #0]
 800868c:	68fa      	ldr	r2, [r7, #12]
 800868e:	1ad2      	subs	r2, r2, r3
 8008690:	683b      	ldr	r3, [r7, #0]
 8008692:	605a      	str	r2, [r3, #4]
	pxFirstFreeBlock->pxNextFreeBlock = pxEnd;
 8008694:	4b0c      	ldr	r3, [pc, #48]	; (80086c8 <prvHeapInit+0xb4>)
 8008696:	681a      	ldr	r2, [r3, #0]
 8008698:	683b      	ldr	r3, [r7, #0]
 800869a:	601a      	str	r2, [r3, #0]

	/* Only one block exists - and it covers the entire usable heap space. */
	xMinimumEverFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 800869c:	683b      	ldr	r3, [r7, #0]
 800869e:	685b      	ldr	r3, [r3, #4]
 80086a0:	4a0a      	ldr	r2, [pc, #40]	; (80086cc <prvHeapInit+0xb8>)
 80086a2:	6013      	str	r3, [r2, #0]
	xFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 80086a4:	683b      	ldr	r3, [r7, #0]
 80086a6:	685b      	ldr	r3, [r3, #4]
 80086a8:	4a09      	ldr	r2, [pc, #36]	; (80086d0 <prvHeapInit+0xbc>)
 80086aa:	6013      	str	r3, [r2, #0]

	/* Work out the position of the top bit in a size_t variable. */
	xBlockAllocatedBit = ( ( size_t ) 1 ) << ( ( sizeof( size_t ) * heapBITS_PER_BYTE ) - 1 );
 80086ac:	4b09      	ldr	r3, [pc, #36]	; (80086d4 <prvHeapInit+0xc0>)
 80086ae:	f04f 4200 	mov.w	r2, #2147483648	; 0x80000000
 80086b2:	601a      	str	r2, [r3, #0]
}
 80086b4:	bf00      	nop
 80086b6:	3714      	adds	r7, #20
 80086b8:	46bd      	mov	sp, r7
 80086ba:	f85d 7b04 	ldr.w	r7, [sp], #4
 80086be:	4770      	bx	lr
 80086c0:	200034bc 	.word	0x200034bc
 80086c4:	2000b4bc 	.word	0x2000b4bc
 80086c8:	2000b4c4 	.word	0x2000b4c4
 80086cc:	2000b4cc 	.word	0x2000b4cc
 80086d0:	2000b4c8 	.word	0x2000b4c8
 80086d4:	2000b4d0 	.word	0x2000b4d0

080086d8 <prvInsertBlockIntoFreeList>:
/*-----------------------------------------------------------*/

static void prvInsertBlockIntoFreeList( BlockLink_t *pxBlockToInsert )
{
 80086d8:	b480      	push	{r7}
 80086da:	b085      	sub	sp, #20
 80086dc:	af00      	add	r7, sp, #0
 80086de:	6078      	str	r0, [r7, #4]
BlockLink_t *pxIterator;
uint8_t *puc;

	/* Iterate through the list until a block is found that has a higher address
	than the block being inserted. */
	for( pxIterator = &xStart; pxIterator->pxNextFreeBlock < pxBlockToInsert; pxIterator = pxIterator->pxNextFreeBlock )
 80086e0:	4b28      	ldr	r3, [pc, #160]	; (8008784 <prvInsertBlockIntoFreeList+0xac>)
 80086e2:	60fb      	str	r3, [r7, #12]
 80086e4:	e002      	b.n	80086ec <prvInsertBlockIntoFreeList+0x14>
 80086e6:	68fb      	ldr	r3, [r7, #12]
 80086e8:	681b      	ldr	r3, [r3, #0]
 80086ea:	60fb      	str	r3, [r7, #12]
 80086ec:	68fb      	ldr	r3, [r7, #12]
 80086ee:	681b      	ldr	r3, [r3, #0]
 80086f0:	687a      	ldr	r2, [r7, #4]
 80086f2:	429a      	cmp	r2, r3
 80086f4:	d8f7      	bhi.n	80086e6 <prvInsertBlockIntoFreeList+0xe>
		/* Nothing to do here, just iterate to the right position. */
	}

	/* Do the block being inserted, and the block it is being inserted after
	make a contiguous block of memory? */
	puc = ( uint8_t * ) pxIterator;
 80086f6:	68fb      	ldr	r3, [r7, #12]
 80086f8:	60bb      	str	r3, [r7, #8]
	if( ( puc + pxIterator->xBlockSize ) == ( uint8_t * ) pxBlockToInsert )
 80086fa:	68fb      	ldr	r3, [r7, #12]
 80086fc:	685b      	ldr	r3, [r3, #4]
 80086fe:	68ba      	ldr	r2, [r7, #8]
 8008700:	4413      	add	r3, r2
 8008702:	687a      	ldr	r2, [r7, #4]
 8008704:	429a      	cmp	r2, r3
 8008706:	d108      	bne.n	800871a <prvInsertBlockIntoFreeList+0x42>
	{
		pxIterator->xBlockSize += pxBlockToInsert->xBlockSize;
 8008708:	68fb      	ldr	r3, [r7, #12]
 800870a:	685a      	ldr	r2, [r3, #4]
 800870c:	687b      	ldr	r3, [r7, #4]
 800870e:	685b      	ldr	r3, [r3, #4]
 8008710:	441a      	add	r2, r3
 8008712:	68fb      	ldr	r3, [r7, #12]
 8008714:	605a      	str	r2, [r3, #4]
		pxBlockToInsert = pxIterator;
 8008716:	68fb      	ldr	r3, [r7, #12]
 8008718:	607b      	str	r3, [r7, #4]
		mtCOVERAGE_TEST_MARKER();
	}

	/* Do the block being inserted, and the block it is being inserted before
	make a contiguous block of memory? */
	puc = ( uint8_t * ) pxBlockToInsert;
 800871a:	687b      	ldr	r3, [r7, #4]
 800871c:	60bb      	str	r3, [r7, #8]
	if( ( puc + pxBlockToInsert->xBlockSize ) == ( uint8_t * ) pxIterator->pxNextFreeBlock )
 800871e:	687b      	ldr	r3, [r7, #4]
 8008720:	685b      	ldr	r3, [r3, #4]
 8008722:	68ba      	ldr	r2, [r7, #8]
 8008724:	441a      	add	r2, r3
 8008726:	68fb      	ldr	r3, [r7, #12]
 8008728:	681b      	ldr	r3, [r3, #0]
 800872a:	429a      	cmp	r2, r3
 800872c:	d118      	bne.n	8008760 <prvInsertBlockIntoFreeList+0x88>
	{
		if( pxIterator->pxNextFreeBlock != pxEnd )
 800872e:	68fb      	ldr	r3, [r7, #12]
 8008730:	681a      	ldr	r2, [r3, #0]
 8008732:	4b15      	ldr	r3, [pc, #84]	; (8008788 <prvInsertBlockIntoFreeList+0xb0>)
 8008734:	681b      	ldr	r3, [r3, #0]
 8008736:	429a      	cmp	r2, r3
 8008738:	d00d      	beq.n	8008756 <prvInsertBlockIntoFreeList+0x7e>
		{
			/* Form one big block from the two blocks. */
			pxBlockToInsert->xBlockSize += pxIterator->pxNextFreeBlock->xBlockSize;
 800873a:	687b      	ldr	r3, [r7, #4]
 800873c:	685a      	ldr	r2, [r3, #4]
 800873e:	68fb      	ldr	r3, [r7, #12]
 8008740:	681b      	ldr	r3, [r3, #0]
 8008742:	685b      	ldr	r3, [r3, #4]
 8008744:	441a      	add	r2, r3
 8008746:	687b      	ldr	r3, [r7, #4]
 8008748:	605a      	str	r2, [r3, #4]
			pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock->pxNextFreeBlock;
 800874a:	68fb      	ldr	r3, [r7, #12]
 800874c:	681b      	ldr	r3, [r3, #0]
 800874e:	681a      	ldr	r2, [r3, #0]
 8008750:	687b      	ldr	r3, [r7, #4]
 8008752:	601a      	str	r2, [r3, #0]
 8008754:	e008      	b.n	8008768 <prvInsertBlockIntoFreeList+0x90>
		}
		else
		{
			pxBlockToInsert->pxNextFreeBlock = pxEnd;
 8008756:	4b0c      	ldr	r3, [pc, #48]	; (8008788 <prvInsertBlockIntoFreeList+0xb0>)
 8008758:	681a      	ldr	r2, [r3, #0]
 800875a:	687b      	ldr	r3, [r7, #4]
 800875c:	601a      	str	r2, [r3, #0]
 800875e:	e003      	b.n	8008768 <prvInsertBlockIntoFreeList+0x90>
		}
	}
	else
	{
		pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock;
 8008760:	68fb      	ldr	r3, [r7, #12]
 8008762:	681a      	ldr	r2, [r3, #0]
 8008764:	687b      	ldr	r3, [r7, #4]
 8008766:	601a      	str	r2, [r3, #0]

	/* If the block being inserted plugged a gab, so was merged with the block
	before and the block after, then it's pxNextFreeBlock pointer will have
	already been set, and should not be set here as that would make it point
	to itself. */
	if( pxIterator != pxBlockToInsert )
 8008768:	68fa      	ldr	r2, [r7, #12]
 800876a:	687b      	ldr	r3, [r7, #4]
 800876c:	429a      	cmp	r2, r3
 800876e:	d002      	beq.n	8008776 <prvInsertBlockIntoFreeList+0x9e>
	{
		pxIterator->pxNextFreeBlock = pxBlockToInsert;
 8008770:	68fb      	ldr	r3, [r7, #12]
 8008772:	687a      	ldr	r2, [r7, #4]
 8008774:	601a      	str	r2, [r3, #0]
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 8008776:	bf00      	nop
 8008778:	3714      	adds	r7, #20
 800877a:	46bd      	mov	sp, r7
 800877c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008780:	4770      	bx	lr
 8008782:	bf00      	nop
 8008784:	2000b4bc 	.word	0x2000b4bc
 8008788:	2000b4c4 	.word	0x2000b4c4

0800878c <memset>:
 800878c:	4402      	add	r2, r0
 800878e:	4603      	mov	r3, r0
 8008790:	4293      	cmp	r3, r2
 8008792:	d100      	bne.n	8008796 <memset+0xa>
 8008794:	4770      	bx	lr
 8008796:	f803 1b01 	strb.w	r1, [r3], #1
 800879a:	e7f9      	b.n	8008790 <memset+0x4>

0800879c <_reclaim_reent>:
 800879c:	4b29      	ldr	r3, [pc, #164]	; (8008844 <_reclaim_reent+0xa8>)
 800879e:	681b      	ldr	r3, [r3, #0]
 80087a0:	4283      	cmp	r3, r0
 80087a2:	b570      	push	{r4, r5, r6, lr}
 80087a4:	4604      	mov	r4, r0
 80087a6:	d04b      	beq.n	8008840 <_reclaim_reent+0xa4>
 80087a8:	69c3      	ldr	r3, [r0, #28]
 80087aa:	b143      	cbz	r3, 80087be <_reclaim_reent+0x22>
 80087ac:	68db      	ldr	r3, [r3, #12]
 80087ae:	2b00      	cmp	r3, #0
 80087b0:	d144      	bne.n	800883c <_reclaim_reent+0xa0>
 80087b2:	69e3      	ldr	r3, [r4, #28]
 80087b4:	6819      	ldr	r1, [r3, #0]
 80087b6:	b111      	cbz	r1, 80087be <_reclaim_reent+0x22>
 80087b8:	4620      	mov	r0, r4
 80087ba:	f000 f879 	bl	80088b0 <_free_r>
 80087be:	6961      	ldr	r1, [r4, #20]
 80087c0:	b111      	cbz	r1, 80087c8 <_reclaim_reent+0x2c>
 80087c2:	4620      	mov	r0, r4
 80087c4:	f000 f874 	bl	80088b0 <_free_r>
 80087c8:	69e1      	ldr	r1, [r4, #28]
 80087ca:	b111      	cbz	r1, 80087d2 <_reclaim_reent+0x36>
 80087cc:	4620      	mov	r0, r4
 80087ce:	f000 f86f 	bl	80088b0 <_free_r>
 80087d2:	6b21      	ldr	r1, [r4, #48]	; 0x30
 80087d4:	b111      	cbz	r1, 80087dc <_reclaim_reent+0x40>
 80087d6:	4620      	mov	r0, r4
 80087d8:	f000 f86a 	bl	80088b0 <_free_r>
 80087dc:	6b61      	ldr	r1, [r4, #52]	; 0x34
 80087de:	b111      	cbz	r1, 80087e6 <_reclaim_reent+0x4a>
 80087e0:	4620      	mov	r0, r4
 80087e2:	f000 f865 	bl	80088b0 <_free_r>
 80087e6:	6ba1      	ldr	r1, [r4, #56]	; 0x38
 80087e8:	b111      	cbz	r1, 80087f0 <_reclaim_reent+0x54>
 80087ea:	4620      	mov	r0, r4
 80087ec:	f000 f860 	bl	80088b0 <_free_r>
 80087f0:	6ca1      	ldr	r1, [r4, #72]	; 0x48
 80087f2:	b111      	cbz	r1, 80087fa <_reclaim_reent+0x5e>
 80087f4:	4620      	mov	r0, r4
 80087f6:	f000 f85b 	bl	80088b0 <_free_r>
 80087fa:	6c61      	ldr	r1, [r4, #68]	; 0x44
 80087fc:	b111      	cbz	r1, 8008804 <_reclaim_reent+0x68>
 80087fe:	4620      	mov	r0, r4
 8008800:	f000 f856 	bl	80088b0 <_free_r>
 8008804:	6ae1      	ldr	r1, [r4, #44]	; 0x2c
 8008806:	b111      	cbz	r1, 800880e <_reclaim_reent+0x72>
 8008808:	4620      	mov	r0, r4
 800880a:	f000 f851 	bl	80088b0 <_free_r>
 800880e:	6a23      	ldr	r3, [r4, #32]
 8008810:	b1b3      	cbz	r3, 8008840 <_reclaim_reent+0xa4>
 8008812:	4620      	mov	r0, r4
 8008814:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
 8008818:	4718      	bx	r3
 800881a:	5949      	ldr	r1, [r1, r5]
 800881c:	b941      	cbnz	r1, 8008830 <_reclaim_reent+0x94>
 800881e:	3504      	adds	r5, #4
 8008820:	69e3      	ldr	r3, [r4, #28]
 8008822:	2d80      	cmp	r5, #128	; 0x80
 8008824:	68d9      	ldr	r1, [r3, #12]
 8008826:	d1f8      	bne.n	800881a <_reclaim_reent+0x7e>
 8008828:	4620      	mov	r0, r4
 800882a:	f000 f841 	bl	80088b0 <_free_r>
 800882e:	e7c0      	b.n	80087b2 <_reclaim_reent+0x16>
 8008830:	680e      	ldr	r6, [r1, #0]
 8008832:	4620      	mov	r0, r4
 8008834:	f000 f83c 	bl	80088b0 <_free_r>
 8008838:	4631      	mov	r1, r6
 800883a:	e7ef      	b.n	800881c <_reclaim_reent+0x80>
 800883c:	2500      	movs	r5, #0
 800883e:	e7ef      	b.n	8008820 <_reclaim_reent+0x84>
 8008840:	bd70      	pop	{r4, r5, r6, pc}
 8008842:	bf00      	nop
 8008844:	20000070 	.word	0x20000070

08008848 <__libc_init_array>:
 8008848:	b570      	push	{r4, r5, r6, lr}
 800884a:	4d0d      	ldr	r5, [pc, #52]	; (8008880 <__libc_init_array+0x38>)
 800884c:	4c0d      	ldr	r4, [pc, #52]	; (8008884 <__libc_init_array+0x3c>)
 800884e:	1b64      	subs	r4, r4, r5
 8008850:	10a4      	asrs	r4, r4, #2
 8008852:	2600      	movs	r6, #0
 8008854:	42a6      	cmp	r6, r4
 8008856:	d109      	bne.n	800886c <__libc_init_array+0x24>
 8008858:	4d0b      	ldr	r5, [pc, #44]	; (8008888 <__libc_init_array+0x40>)
 800885a:	4c0c      	ldr	r4, [pc, #48]	; (800888c <__libc_init_array+0x44>)
 800885c:	f000 f880 	bl	8008960 <_init>
 8008860:	1b64      	subs	r4, r4, r5
 8008862:	10a4      	asrs	r4, r4, #2
 8008864:	2600      	movs	r6, #0
 8008866:	42a6      	cmp	r6, r4
 8008868:	d105      	bne.n	8008876 <__libc_init_array+0x2e>
 800886a:	bd70      	pop	{r4, r5, r6, pc}
 800886c:	f855 3b04 	ldr.w	r3, [r5], #4
 8008870:	4798      	blx	r3
 8008872:	3601      	adds	r6, #1
 8008874:	e7ee      	b.n	8008854 <__libc_init_array+0xc>
 8008876:	f855 3b04 	ldr.w	r3, [r5], #4
 800887a:	4798      	blx	r3
 800887c:	3601      	adds	r6, #1
 800887e:	e7f2      	b.n	8008866 <__libc_init_array+0x1e>
 8008880:	08008aa0 	.word	0x08008aa0
 8008884:	08008aa0 	.word	0x08008aa0
 8008888:	08008aa0 	.word	0x08008aa0
 800888c:	08008aa4 	.word	0x08008aa4

08008890 <__retarget_lock_acquire_recursive>:
 8008890:	4770      	bx	lr

08008892 <__retarget_lock_release_recursive>:
 8008892:	4770      	bx	lr

08008894 <memcpy>:
 8008894:	440a      	add	r2, r1
 8008896:	4291      	cmp	r1, r2
 8008898:	f100 33ff 	add.w	r3, r0, #4294967295
 800889c:	d100      	bne.n	80088a0 <memcpy+0xc>
 800889e:	4770      	bx	lr
 80088a0:	b510      	push	{r4, lr}
 80088a2:	f811 4b01 	ldrb.w	r4, [r1], #1
 80088a6:	f803 4f01 	strb.w	r4, [r3, #1]!
 80088aa:	4291      	cmp	r1, r2
 80088ac:	d1f9      	bne.n	80088a2 <memcpy+0xe>
 80088ae:	bd10      	pop	{r4, pc}

080088b0 <_free_r>:
 80088b0:	b537      	push	{r0, r1, r2, r4, r5, lr}
 80088b2:	2900      	cmp	r1, #0
 80088b4:	d044      	beq.n	8008940 <_free_r+0x90>
 80088b6:	f851 3c04 	ldr.w	r3, [r1, #-4]
 80088ba:	9001      	str	r0, [sp, #4]
 80088bc:	2b00      	cmp	r3, #0
 80088be:	f1a1 0404 	sub.w	r4, r1, #4
 80088c2:	bfb8      	it	lt
 80088c4:	18e4      	addlt	r4, r4, r3
 80088c6:	f000 f83f 	bl	8008948 <__malloc_lock>
 80088ca:	4a1e      	ldr	r2, [pc, #120]	; (8008944 <_free_r+0x94>)
 80088cc:	9801      	ldr	r0, [sp, #4]
 80088ce:	6813      	ldr	r3, [r2, #0]
 80088d0:	b933      	cbnz	r3, 80088e0 <_free_r+0x30>
 80088d2:	6063      	str	r3, [r4, #4]
 80088d4:	6014      	str	r4, [r2, #0]
 80088d6:	b003      	add	sp, #12
 80088d8:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 80088dc:	f000 b83a 	b.w	8008954 <__malloc_unlock>
 80088e0:	42a3      	cmp	r3, r4
 80088e2:	d908      	bls.n	80088f6 <_free_r+0x46>
 80088e4:	6825      	ldr	r5, [r4, #0]
 80088e6:	1961      	adds	r1, r4, r5
 80088e8:	428b      	cmp	r3, r1
 80088ea:	bf01      	itttt	eq
 80088ec:	6819      	ldreq	r1, [r3, #0]
 80088ee:	685b      	ldreq	r3, [r3, #4]
 80088f0:	1949      	addeq	r1, r1, r5
 80088f2:	6021      	streq	r1, [r4, #0]
 80088f4:	e7ed      	b.n	80088d2 <_free_r+0x22>
 80088f6:	461a      	mov	r2, r3
 80088f8:	685b      	ldr	r3, [r3, #4]
 80088fa:	b10b      	cbz	r3, 8008900 <_free_r+0x50>
 80088fc:	42a3      	cmp	r3, r4
 80088fe:	d9fa      	bls.n	80088f6 <_free_r+0x46>
 8008900:	6811      	ldr	r1, [r2, #0]
 8008902:	1855      	adds	r5, r2, r1
 8008904:	42a5      	cmp	r5, r4
 8008906:	d10b      	bne.n	8008920 <_free_r+0x70>
 8008908:	6824      	ldr	r4, [r4, #0]
 800890a:	4421      	add	r1, r4
 800890c:	1854      	adds	r4, r2, r1
 800890e:	42a3      	cmp	r3, r4
 8008910:	6011      	str	r1, [r2, #0]
 8008912:	d1e0      	bne.n	80088d6 <_free_r+0x26>
 8008914:	681c      	ldr	r4, [r3, #0]
 8008916:	685b      	ldr	r3, [r3, #4]
 8008918:	6053      	str	r3, [r2, #4]
 800891a:	440c      	add	r4, r1
 800891c:	6014      	str	r4, [r2, #0]
 800891e:	e7da      	b.n	80088d6 <_free_r+0x26>
 8008920:	d902      	bls.n	8008928 <_free_r+0x78>
 8008922:	230c      	movs	r3, #12
 8008924:	6003      	str	r3, [r0, #0]
 8008926:	e7d6      	b.n	80088d6 <_free_r+0x26>
 8008928:	6825      	ldr	r5, [r4, #0]
 800892a:	1961      	adds	r1, r4, r5
 800892c:	428b      	cmp	r3, r1
 800892e:	bf04      	itt	eq
 8008930:	6819      	ldreq	r1, [r3, #0]
 8008932:	685b      	ldreq	r3, [r3, #4]
 8008934:	6063      	str	r3, [r4, #4]
 8008936:	bf04      	itt	eq
 8008938:	1949      	addeq	r1, r1, r5
 800893a:	6021      	streq	r1, [r4, #0]
 800893c:	6054      	str	r4, [r2, #4]
 800893e:	e7ca      	b.n	80088d6 <_free_r+0x26>
 8008940:	b003      	add	sp, #12
 8008942:	bd30      	pop	{r4, r5, pc}
 8008944:	2000b610 	.word	0x2000b610

08008948 <__malloc_lock>:
 8008948:	4801      	ldr	r0, [pc, #4]	; (8008950 <__malloc_lock+0x8>)
 800894a:	f7ff bfa1 	b.w	8008890 <__retarget_lock_acquire_recursive>
 800894e:	bf00      	nop
 8008950:	2000b60c 	.word	0x2000b60c

08008954 <__malloc_unlock>:
 8008954:	4801      	ldr	r0, [pc, #4]	; (800895c <__malloc_unlock+0x8>)
 8008956:	f7ff bf9c 	b.w	8008892 <__retarget_lock_release_recursive>
 800895a:	bf00      	nop
 800895c:	2000b60c 	.word	0x2000b60c

08008960 <_init>:
 8008960:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8008962:	bf00      	nop
 8008964:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8008966:	bc08      	pop	{r3}
 8008968:	469e      	mov	lr, r3
 800896a:	4770      	bx	lr

0800896c <_fini>:
 800896c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800896e:	bf00      	nop
 8008970:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8008972:	bc08      	pop	{r3}
 8008974:	469e      	mov	lr, r3
 8008976:	4770      	bx	lr
